{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":4838,\"hp\":53,\"max_hp\":53,\"strength\":465,\"defense\":438,\"dexterity\":493,\"agility\":664,\"charisma\":591,\"intelligence\":0,\"hacking_chance_mult\":2.264898949852194,\"hacking_speed_mult\":2.031045621193665,\"hacking_money_mult\":8.572589920378187,\"hacking_grow_mult\":2.8617069208811134,\"hacking_exp\":21148157332605.54,\"strength_exp\":7926.965268402716,\"defense_exp\":6127.729724072436,\"dexterity_exp\":7771.849744141538,\"agility_exp\":5825.198257310985,\"charisma_exp\":300960.64724228345,\"intelligence_exp\":0,\"hacking_mult\":6.188638159667602,\"strength_mult\":5.20820187906501,\"defense_mult\":5.364970497498405,\"dexterity_mult\":5.5605933066734705,\"agility_mult\":8.275976745267503,\"charisma_mult\":2.9010840081124383,\"hacking_exp_mult\":10.139754690298675,\"strength_exp_mult\":2.752403452696676,\"defense_exp_mult\":2.752403452696676,\"dexterity_exp_mult\":3.1652639706011767,\"agility_exp_mult\":2.752403452696676,\"charisma_exp_mult\":3.6698712702622345,\"company_rep_mult\":6.559894895593742,\"faction_rep_mult\":1.985861076981728,\"money\":\"3744758584853916.8404\",\"total_money\":\"265504560463075975.59\",\"lifetime_money\":\"265504560463075975.59\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Volhaven\",\"location\":\"OmniTek Incorporated\",\"jobs\":{\"MegaCorp\":\"Head of Engineering\",\"ECorp\":\"Lead Software Developer\",\"NWO\":\"Lead Software Developer\",\"OmniTek Incorporated\":\"Lead Software Developer\"},\"companyName\":\"OmniTek Incorporated\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"59.0.2.9\",\"28.0.0.6\",\"45.1.0.8\",\"20.4.0.3\",\"76.8.4.2\",\"39.5.8.9\",\"4.4.1.3\",\"85.3.8.7\",\"67.2.5.6\",\"50.3.8.5\",\"80.6.0.2\",\"12.8.5.2\",\"21.4.6.1\",\"67.9.3.8\",\"18.1.2.1\",\"61.4.2.7\",\"55.7.9.1\",\"33.5.3.4\",\"64.7.9.7\",\"57.8.0.1\",\"85.4.7.4\",\"5.1.2.5\",\"76.9.3.3\",\"6.4.0.5\",\"72.7.0.6\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":3611860634.0884356,\"onlineTimeSeconds\":112441.99999943156,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":3611846887.3623023,\"onlineTimeSeconds\":112441.99999943156,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":3611844712.3810554,\"onlineTimeSeconds\":112441.99999943156,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":3611842896.377296,\"onlineTimeSeconds\":112441.99999943156,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":3611826446.761846,\"onlineTimeSeconds\":112441.99999943156,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":3611668369.9694743,\"onlineTimeSeconds\":112105.99999943645,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-20\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-21\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-22\",\"totalMoneyGenerated\":3611581455.1848893,\"onlineTimeSeconds\":111891.99999943956,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-23\",\"totalMoneyGenerated\":3608870154.6251025,\"onlineTimeSeconds\":111807.99999944078,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-24\",\"totalMoneyGenerated\":3608870154.6251025,\"onlineTimeSeconds\":111807.99999944078,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-25\",\"totalMoneyGenerated\":3608870154.6251025,\"onlineTimeSeconds\":111807.99999944078,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-26\",\"totalMoneyGenerated\":3608870154.6251025,\"onlineTimeSeconds\":111807.99999944078,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-27\",\"totalMoneyGenerated\":3600736252.9457326,\"onlineTimeSeconds\":111555.99999944445,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-28\",\"totalMoneyGenerated\":3598024952.3859353,\"onlineTimeSeconds\":111471.99999944567,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-29\",\"totalMoneyGenerated\":3570899035.832916,\"onlineTimeSeconds\":110631.59999945869,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-30\",\"totalMoneyGenerated\":3517221740.2264524,\"onlineTimeSeconds\":108968.59999949009,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-31\",\"totalMoneyGenerated\":3517221740.2264524,\"onlineTimeSeconds\":108968.59999949009,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-32\",\"totalMoneyGenerated\":3517221740.2264524,\"onlineTimeSeconds\":108968.59999949009,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-33\",\"totalMoneyGenerated\":3517221740.2264524,\"onlineTimeSeconds\":108968.59999949009,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-34\",\"totalMoneyGenerated\":3517221740.2264524,\"onlineTimeSeconds\":108968.59999949009,\"moneyGainRatePerSecond\":32277.38761633942}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-35\",\"totalMoneyGenerated\":3517221740.2264524,\"onlineTimeSeconds\":108968.59999949009,\"moneyGainRatePerSecond\":32277.38761633942}}],\"totalHacknetNodeProduction\":1161985.9541882183,\"factions\":[\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"Netburners\",\"BitRunners\",\"Volhaven\",\"Daedalus\",\"Slum Snakes\",\"Tian Di Hui\",\"The Dark Army\",\"Tetrads\",\"Speakers for the Dead\",\"Sector-12\",\"The Syndicate\",\"MegaCorp\",\"ECorp\",\"NWO\",\"OmniTek Incorporated\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Graphene BranchiBlades Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"Hacknet Node CPU Architecture Neural-Upload\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Hacknet Node Kernel Direct-Neural Interface\",\"level\":1},{\"name\":\"NeuroFlux Governor\",\"level\":27},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Hacknet Node Core Direct-Neural Interface\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"DataJack\",\"level\":1},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"}],\"sourceFiles\":[],\"numPeopleKilled\":46,\"karma\":-144,\"crime_money_mult\":2.844332271718621,\"crime_success_mult\":1.7987872074109856,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.7268357191145463,\"hacknet_node_money_mult\":3.299425435193601,\"hacknet_node_purchase_cost_mult\":0.5831921764755341,\"hacknet_node_ram_cost_mult\":0.7623427143471035,\"hacknet_node_core_cost_mult\":0.7623427143471035,\"hacknet_node_level_cost_mult\":0.6479913071950381,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1549811017778,\"totalPlaytime\":941296600,\"playtimeSinceLastAug\":112517800,\"playtimeSinceLastBitnode\":941296600,\"scriptProdSinceLastAug\":7087950894005282,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16777216,\"ramUsed\":16750009.05,\"cpuCores\":7,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = ns.args.includes('loop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: true, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    log.info('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let costs = [];\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(ns.hacknet.getLevelUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getRamUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getCoreUpgradeCost(i, 1));\\r\\n    }\\r\\n    let buyNodeCost = ns.hacknet.getPurchaseNodeCost();  \\r\\n\\r\\n    log.info('begin purchase loop');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.debug(`buy node[${newIdx}] - \\\\$${buyNodeCost}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                buyNodeCost = ns.hacknet.getPurchaseNodeCost();\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            if (itemIdx == 0) {\\r\\n                while (cost * 3 < cash) {\\r\\n                    count = count + 1;\\r\\n                    cost = ns.hacknet.getLevelUpgradeCost(nodeIdx, count);\\r\\n                }\\r\\n\\r\\n                log.debug(`buy level[${nodeIdx}] x${count} - \\\\$${cost}`);\\r\\n                ns.hacknet.upgradeLevel(nodeIdx, count);\\r\\n                costs[minIdx] = ns.hacknet.getLevelUpgradeCost(nodeIdx, 1);\\r\\n            } else if (itemIdx == 1) {\\r\\n                while (cost * 3 < cash) {\\r\\n                    count = count + 1;\\r\\n                    cost = ns.hacknet.getRamUpgradeCost(nodeIdx, count);\\r\\n                }\\r\\n\\r\\n                log.debug(`buy ram[${nodeIdx}] x${count} - \\\\$${cost}`);\\r\\n                ns.hacknet.upgradeRam(nodeIdx, count);\\r\\n                costs[minIdx] = ns.hacknet.getRamUpgradeCost(nodeIdx, 1);\\r\\n            } else if (itemIdx == 2) {\\r\\n                while (cost * 3 < cash) {\\r\\n                    count = count + 1;\\r\\n                    cost = ns.hacknet.getCoreUpgradeCost(nodeIdx, count);\\r\\n                }\\r\\n\\r\\n                log.debug(`buy core[${nodeIdx}] x${count} - \\\\$${cost}`);\\r\\n                ns.hacknet.upgradeCore(nodeIdx, count);\\r\\n                costs[minIdx] = ns.hacknet.getCoreUpgradeCost(nodeIdx, 1);\\r\\n            }\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.debug(`remaining budget: \\\\$${cash}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('purchase loop complete');\\r\\n\\r\\n    if (loop) {\\r\\n        await ns.sleep(60000);\\r\\n        ns.spawn('buy-nodes.js', 1, 'loop');\\r\\n    }\\r\\n}\",\"ramUsage\":7.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    let hacks = [];\\r\\n    if (ns.fileExists('BruteSSH.exe', 'home')) hacks.push(ns.brutessh);\\r\\n    if (ns.fileExists('FTPCrack.exe', 'home')) hacks.push(ns.ftpcrack);\\r\\n    if (ns.fileExists('relaySMTP.exe', 'home')) hacks.push(ns.relaysmtp);\\r\\n    if (ns.fileExists('HTTPWorm.exe', 'home')) hacks.push(ns.httpworm);\\r\\n    if (ns.fileExists('SQLInject.exe', 'home')) hacks.push(ns.sqlinject);\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns)).concat([home(ns)]);\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function home(ns) {\\r\\n    let home = new Server('home', 1000000, 0, 'weaken');\\r\\n    for (let next of ns.scan(\\\"home\\\")) {\\r\\n        home.links.push(next);\\r\\n    }\\r\\n    return home;\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of [servers.home(ns)].concat(servers.map(ns))) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of [servers.home(ns)].concat(servers.map(ns))) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\nimport * as format from 'lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number';\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n    let processes = [];\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n            let ps = ns.ps(existing);\\r\\n            if (ps.length > 0) {\\r\\n                processes.push(existing);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? ns.args[0] : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    for (let power = 0; power < 25; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (!dryRun && processes.length > 0) {\\r\\n        log.info('scripts running on existing servers, exit');\\r\\n        ns.exit();\\r\\n    } else if (ram > minRam || existingServers.length < limit) {\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.script\",\"code\":\"deleteServer('bot0');\\npurchaseServer('bot0', 131072);\",\"ramUsage\":6.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    ns.scp(['lib-log.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new servers.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of servers.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        let bots = ns.getPurchasedServers();\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of servers.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.info(`${bots[i]}: ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    let targets = [];\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name));\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n}\",\"ramUsage\":7.45,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns).concat(servers.home(ns))) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            lastTime = time;\\r\\n            assets = 0;\\r\\n            for (let stock of stocks) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }    \\r\\n            lastAssets = assets;\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, assets)}, ${format.money(assetChange/timeChange)}/sec`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(4000);\\r\\n        tick();\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = servers.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {servers.Server} current\\r\\n     * @returns {servers.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} target\\r\\n     * @returns {servers.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], servers.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = path + ' -> ' + p.name;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    log.info('beginning hacknet node purchase loop...');\\r\\n    await ns.exec('buy-nodes.js', 'home', 1, 'loop');\\r\\n\\r\\n    log.info('hacking foodnstuff to enable skill farming...');\\r\\n    ns.nuke('foodnstuff');\\r\\n\\r\\n    log.info('beginning skill farming...');\\r\\n    await ns.exec('farm-worker.js', 'home', 9000000);\\r\\n\\r\\n    log.info('waiting for first hack skill increase...');\\r\\n    while (ns.getServerSecurityLevel('foodnstuff') == ns.getServerBaseSecurityLevel('foodnstuff')) {\\r\\n        await ns.sleep(10000);\\r\\n    }\\r\\n\\r\\n    log.info('evaluating distributed-hack targets...');\\r\\n    await ns.exec('dh-eval.js', 'home', 1);\\r\\n\\r\\n    log.info('picking hardcoded target rho-construction...'); // growth param 60, hack req 498, sec base 40\\r\\n    await ns.exec('dh-control.js', 'home', 1, 'rho-construction');\\r\\n}\",\"ramUsage\":16.15,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},\"server\":\"44.1.3.8\",\"logs\":[\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\",\"Server security level on foodnstuff weakened to 3. Gained 300,773,376.6381 hacking exp (t=9000000)\",\"Executing weaken() on server foodnstuff in 1.022 seconds (t=9000000)\"],\"logUpd\":true,\"offlineRunningTime\":107.878,\"offlineMoneyMade\":0,\"offlineExpGained\":12186400567.82681,\"onlineRunningTime\":110328.40999946439,\"onlineMoneyMade\":0,\"onlineExpGained\":20630948223734.82,\"threads\":9000000,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"44.1.3.8\":0,\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,617337000000],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0],\"91.5.4.4\":0,\"95.3.9.3\":0,\"72.8.9.4\":0,\"31.9.7.8\":0,\"88.6.8.9\":0,\"22.6.6.8\":0,\"95.3.3.3\":0,\"50.7.3.9\":0,\"1.5.5.5\":0,\"40.1.9.8\":0,\"7.4.9.5\":0,\"6.6.4.5\":0,\"44.1.4.5\":0,\"43.8.1.5\":0,\"87.9.8.3\":0,\"15.1.4.1\":0,\"9.8.3.1\":0,\"88.8.4.1\":0,\"80.6.8.3\":0,\"21.6.8.2\":0,\"96.3.9.0\":0,\"56.3.7.0\":0,\"87.5.4.0\":0,\"24.2.4.9\":0,\"78.7.3.7\":0}}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of [servers.home(ns)].concat(servers.map(ns))) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},\"server\":\"44.1.3.8\",\"logs\":[\"[INF] assigning nectar-net grow -> hack x9\",\"[INF] status: security level 31 / goal 59; \",\"[INF] status: money $10961917420 / goal $14362485762; decreasing\",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 34 / goal 59; increasing\",\"[INF] status: money $12866867393 / goal $14362485762; \",\"[INF] assigning joesguns hack -> grow x9\",\"[INF] status: security level 37 / goal 59; increasing\",\"[INF] status: money $28724971525 / goal $14362485762; increasing\",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 31 / goal 59; \",\"[INF] status: money $19176293176 / goal $14362485762; \",\"[INF] assigning joesguns grow -> hack x9\",\"[INF] status: security level 32 / goal 59; \",\"[INF] status: money $15211640142 / goal $14362485762; decreasing\",\"[INF] status: security level 35 / goal 59; increasing\",\"[INF] status: money $11913313568 / goal $14362485762; decreasing\",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 30 / goal 59; \",\"[INF] status: money $23349392233 / goal $14362485762; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 31 / goal 59; \",\"[INF] status: money $17962821763 / goal $14362485762; \",\"[INF] assigning sigma-cosmetics grow -> hack x9\",\"[INF] status: security level 33 / goal 59; increasing\",\"[INF] status: money $7114809101 / goal $14362485762; decreasing\",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 37 / goal 59; increasing\",\"[INF] status: money $9346857330 / goal $14362485762; \",\"[INF] assigning joesguns hack -> grow x9\",\"[INF] status: security level 31 / goal 59; \",\"[INF] status: money $22568228823 / goal $14362485762; increasing\",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 33 / goal 59; \",\"[INF] status: money $8573289702 / goal $14362485762; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 34 / goal 59; increasing\",\"[INF] status: money $6540139381 / goal $14362485762; decreasing\",\"[INF] assigning harakiri-sushi hack -> grow x9\",\"[INF] status: security level 30 / goal 59; \",\"[INF] status: money $28724971525 / goal $14362485762; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 31 / goal 59; \",\"[INF] status: money $11684982874 / goal $14362485762; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 32 / goal 59; increasing\",\"[INF] status: money $8360186707 / goal $14362485762; decreasing\",\"[INF] assigning nectar-net hack -> grow x9\",\"[INF] status: security level 36 / goal 59; increasing\",\"[INF] status: money $28724971525 / goal $14362485762; \",\"[INF] assigning foodnstuff grow -> hack x9\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77372.40999962328,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},\"server\":\"44.1.3.8\",\"logs\":[\"Executing weaken() on server univ-energy in 124.376 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.350 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.350 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.350 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.325 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.325 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.325 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.300 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.300 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.300 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.274 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.274 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.249 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.249 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.249 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.223 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.223 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.223 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.198 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.198 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.198 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.172 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.172 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.172 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.147 seconds (t=571428)\",\"Server security level on univ-energy weakened to 30. Gained 156,417,815.1426 hacking exp (t=571428)\",\"Executing weaken() on server univ-energy in 124.147 seconds (t=571428)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":52399968072.76621,\"threads\":571428,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,191428380],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"DeepscanV1.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"85.5.1.6\",\"85.7.5.3\",\"11.7.7.7\",\"62.8.4.4\",\"83.1.4.1\",\"93.0.0.2\",\"73.7.3.0\",\"59.0.2.9\",\"28.0.0.6\",\"45.1.0.8\",\"20.4.0.3\",\"76.8.4.2\",\"39.5.8.9\",\"4.4.1.3\",\"85.3.8.7\",\"67.2.5.6\",\"50.3.8.5\",\"80.6.0.2\",\"12.8.5.2\",\"21.4.6.1\",\"67.9.3.8\",\"18.1.2.1\",\"61.4.2.7\",\"55.7.9.1\",\"33.5.3.4\",\"64.7.9.7\",\"57.8.0.1\",\"85.4.7.4\",\"5.1.2.5\",\"76.9.3.3\",\"6.4.0.5\",\"72.7.0.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"64.2.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.2.7.5\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45595.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":895668430,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1142,\"moneyAvailable\":1564822976700,\"moneyMax\":1564822976700,\"hackDifficulty\":34.175999999999995,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"17.3.5.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"26.3.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.3.0.5\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-178918-ECorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":741683564,\"reward\":{\"type\":2,\"name\":\"ECorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-779419-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[67,200,84,45,44,30,171,124,150,98,93,72,154,111],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"dir\":0,\"requiredHackingSkill\":1199,\"moneyAvailable\":1305531743000,\"moneyMax\":1305531743000,\"hackDifficulty\":34.147999999999996,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"43.3.9.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"17.3.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.3.5.6\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":914,\"moneyAvailable\":747165024675,\"moneyMax\":747165024675,\"hackDifficulty\":29.2,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":79,\"serversOnNetwork\":[\"80.5.0.1\",\"64.2.7.5\",\"63.2.6.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"30.3.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.3.9.8\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"30.3.9.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"30.3.9.8\",\"module\":{}}},\"server\":\"30.3.9.8\",\"logs\":[\"Executing grow() on server univ-energy in 117.281 seconds (t=292)\",\"Available money on univ-energy grown by 97.073103%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 113.998 seconds (t=292)\",\"Available money on univ-energy grown by 100.740636%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 111.068 seconds (t=292)\",\"Available money on univ-energy grown by 103.399345%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 109.095 seconds (t=292)\",\"Available money on univ-energy grown by 106.804022%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 106.708 seconds (t=292)\",\"Available money on univ-energy grown by 111.590675%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 103.590 seconds (t=292)\",\"Available money on univ-energy grown by 92.027409%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 102.925 seconds (t=292)\",\"Available money on univ-energy grown by 55.910377%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 124.959 seconds (t=292)\",\"Available money on univ-energy grown by 20.251510%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 123.684 seconds (t=292)\",\"Available money on univ-energy grown by 83.223568%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 127.070 seconds (t=292)\",\"Available money on univ-energy grown by 84.462208%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 125.723 seconds (t=292)\",\"Available money on univ-energy grown by 83.098686%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 127.182 seconds (t=292)\",\"Available money on univ-energy grown by 36.966422%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 101.016 seconds (t=292)\",\"Available money on univ-energy grown by 89.106122%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 120.971 seconds (t=292)\",\"Available money on univ-energy grown by 91.087601%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 119.098 seconds (t=292)\",\"Available money on univ-energy grown by 95.897187%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 114.841 seconds (t=292)\",\"Available money on univ-energy grown by 99.367834%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 112.048 seconds (t=292)\",\"Available money on univ-energy grown by 101.805653%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 110.175 seconds (t=292)\",\"Available money on univ-energy grown by 105.135928%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 107.748 seconds (t=292)\",\"Available money on univ-energy grown by 110.298835%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 104.299 seconds (t=292)\",\"Available money on univ-energy grown by 111.485412%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 103.550 seconds (t=292)\",\"Available money on univ-energy grown by 72.559164%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 102.123 seconds (t=292)\",\"Available money on univ-energy grown by 89.146974%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 120.857 seconds (t=292)\",\"Available money on univ-energy grown by 92.669521%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 117.586 seconds (t=292)\",\"Available money on univ-energy grown by 93.067835%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 117.207 seconds (t=292)\",\"Available money on univ-energy grown by 100.207633%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 111.329 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":29094368.382150058,\"threads\":292,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,106288,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1137,\"moneyAvailable\":739327472225,\"moneyMax\":739327472225,\"hackDifficulty\":31,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":85,\"serversOnNetwork\":[\"80.5.0.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"10.9.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.9.8.4\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-667700-Volhaven.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[92,196,187,76,181,62,188,122,84,119,2],\"reward\":{\"type\":0,\"name\":\"Volhaven\"}}}],\"dir\":0,\"requiredHackingSkill\":1164,\"moneyAvailable\":482835359832,\"moneyMax\":983388631400,\"hackDifficulty\":33.056,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":71,\"serversOnNetwork\":[\"54.7.6.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"61.3.5.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.3.5.7\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-379859.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,3,-4,-7,-10,-9,-2,4,-10,-4,-7,10,1,4,3,-4,-9,-3,-6,-10,-10,2],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138507.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,10,6,2,3,-4,10,10,-3,0],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983089.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[198,107,78,36,105,197,180,40,160,75],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":990,\"moneyAvailable\":475016187550,\"moneyMax\":475016187550,\"hackDifficulty\":23.158,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":66,\"serversOnNetwork\":[\"64.8.8.5\",\"48.0.9.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"80.5.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.5.0.1\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.5.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.5.0.1\",\"module\":{}}},\"server\":\"80.5.0.1\",\"logs\":[\"Executing grow() on server univ-energy in 125.214 seconds (t=292)\",\"Available money on univ-energy grown by 77.473286%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 122.465 seconds (t=292)\",\"Available money on univ-energy grown by 89.317577%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 120.855 seconds (t=292)\",\"Available money on univ-energy grown by 91.101819%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 119.171 seconds (t=292)\",\"Available money on univ-energy grown by 58.596316%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 117.001 seconds (t=292)\",\"Available money on univ-energy grown by 8.338423%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 111.348 seconds (t=292)\",\"Available money on univ-energy grown by 96.457828%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 114.445 seconds (t=292)\",\"Available money on univ-energy grown by 100.827104%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 110.980 seconds (t=292)\",\"Available money on univ-energy grown by 104.011796%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 108.610 seconds (t=292)\",\"Available money on univ-energy grown by 107.898781%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 105.928 seconds (t=292)\",\"Available money on univ-energy grown by 108.764289%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 105.369 seconds (t=292)\",\"Available money on univ-energy grown by 53.025789%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 102.067 seconds (t=292)\",\"Available money on univ-energy grown by 68.594714%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 122.903 seconds (t=292)\",\"Available money on univ-energy grown by 18.671537%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 122.831 seconds (t=292)\",\"Available money on univ-energy grown by 86.264416%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 123.778 seconds (t=292)\",\"Available money on univ-energy grown by 90.607068%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 119.533 seconds (t=292)\",\"Available money on univ-energy grown by 93.112294%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 117.240 seconds (t=292)\",\"Available money on univ-energy grown by 95.149145%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 115.448 seconds (t=292)\",\"Available money on univ-energy grown by 97.818323%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 113.254 seconds (t=292)\",\"Available money on univ-energy grown by 95.529549%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 109.463 seconds (t=292)\",\"Available money on univ-energy grown by 103.362979%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 109.010 seconds (t=292)\",\"Available money on univ-energy grown by 106.418236%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 106.839 seconds (t=292)\",\"Available money on univ-energy grown by 111.495929%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 103.522 seconds (t=292)\",\"Available money on univ-energy grown by 112.013662%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 103.200 seconds (t=292)\",\"Available money on univ-energy grown by 83.672587%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 126.461 seconds (t=292)\",\"Available money on univ-energy grown by 57.912950%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 120.320 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":29014438.79868261,\"threads\":292,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,105996,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1021,\"moneyAvailable\":343096998250,\"moneyMax\":343096998250,\"hackDifficulty\":31.092,\"baseDifficulty\":91,\"minDifficulty\":30,\"serverGrowth\":97,\"serversOnNetwork\":[\"2.6.7.0\",\"17.3.5.6\",\"30.3.9.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"64.8.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.8.8.5\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1116,\"moneyAvailable\":228938306135,\"moneyMax\":458394453425,\"hackDifficulty\":20.868,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":85,\"serversOnNetwork\":[\"2.6.7.0\",\"61.3.5.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"54.7.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.7.6.2\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1168,\"moneyAvailable\":310114895325,\"moneyMax\":640790783525,\"hackDifficulty\":32.056,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":93,\"serversOnNetwork\":[\"24.6.8.6\",\"10.9.8.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"4.4.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.4.3.6\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.4.3.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.4.3.6\",\"module\":{}}},\"server\":\"4.4.3.6\",\"logs\":[\"Executing grow() on server univ-energy in 105.092 seconds (t=292)\",\"Available money on univ-energy grown by 51.323563%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 101.730 seconds (t=292)\",\"Available money on univ-energy grown by 0.000000%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 122.465 seconds (t=292)\",\"Available money on univ-energy grown by 85.479344%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 124.695 seconds (t=292)\",\"Available money on univ-energy grown by 87.115756%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 123.012 seconds (t=292)\",\"Available money on univ-energy grown by 32.469561%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=292)\",\"Available money on univ-energy grown by 7.400719%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 113.077 seconds (t=292)\",\"Available money on univ-energy grown by 77.787077%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 119.502 seconds (t=292)\",\"Available money on univ-energy grown by 94.033000%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 116.516 seconds (t=292)\",\"Available money on univ-energy grown by 96.457832%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 114.422 seconds (t=292)\",\"Available money on univ-energy grown by 99.747862%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 111.785 seconds (t=292)\",\"Available money on univ-energy grown by 100.568088%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 111.154 seconds (t=292)\",\"Available money on univ-energy grown by 105.201677%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 107.746 seconds (t=292)\",\"Available money on univ-energy grown by 109.096112%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 105.117 seconds (t=292)\",\"Available money on univ-energy grown by 111.822934%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 103.382 seconds (t=292)\",\"Available money on univ-energy grown by 48.303225%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 127.228 seconds (t=292)\",\"Available money on univ-energy grown by 85.693212%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 124.383 seconds (t=292)\",\"Available money on univ-energy grown by 48.469814%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 121.557 seconds (t=292)\",\"Available money on univ-energy grown by 85.466798%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 124.594 seconds (t=292)\",\"Available money on univ-energy grown by 85.952508%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 124.075 seconds (t=292)\",\"Available money on univ-energy grown by 41.234102%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 117.203 seconds (t=292)\",\"Available money on univ-energy grown by 87.324612%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 122.664 seconds (t=292)\",\"Available money on univ-energy grown by 85.110676%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 124.930 seconds (t=292)\",\"Available money on univ-energy grown by 87.784920%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 122.191 seconds (t=292)\",\"Available money on univ-energy grown by 87.897422%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 122.067 seconds (t=292)\",\"Available money on univ-energy grown by 93.581672%. Gained 79,929.5835 hacking exp (t=292)\",\"Executing grow() on server univ-energy in 116.754 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":29014438.79868261,\"threads\":292,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,105996,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1068,\"moneyAvailable\":21147212431,\"moneyMax\":42870080325,\"hackDifficulty\":30.052,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":86,\"serversOnNetwork\":[\"74.6.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"63.2.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.2.6.2\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-141104.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[44,29,21,14,50,38],[49,46,49,29,46,32],[37,48,37,4,6,17],[31,12,20,18,40,3],[10,29,5,5,6,38],[38,39,4,47,23,12],[19,22,1,3,22,27],[43,43,23,10,46,10],[4,18,44,30,28,35]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1558,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"17.3.5.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"2.6.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.6.7.0\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1000,\"moneyAvailable\":1092356247,\"moneyMax\":27308906175,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":76,\"serversOnNetwork\":[\"46.0.1.8\",\"80.5.0.1\",\"64.8.8.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.6.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.6.5.2\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-43056.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[121,147,123,95,174,147,63,135,118,137,80,75,191,194,88,121,99,117,147,26,13,44,189,125,132,44,41,25,108,61,51,194,100,31,70,55,95,57],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":968,\"moneyAvailable\":862530256,\"moneyMax\":21563256400,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":65,\"serversOnNetwork\":[\"65.7.8.8\",\"85.5.8.4\",\"24.1.8.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"85.5.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.5.8.4\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":890,\"moneyAvailable\":793212614,\"moneyMax\":19830315350,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":55,\"serversOnNetwork\":[\"4.6.5.2\",\"15.2.3.6\",\"74.6.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.6.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.6.7.2\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.6.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.6.7.2\",\"module\":{}}},\"server\":\"63.6.7.2\",\"logs\":[\"Executing grow() on server univ-energy in 110.328 seconds (t=146)\",\"Available money on univ-energy grown by 42.749179%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 106.940 seconds (t=146)\",\"Available money on univ-energy grown by 44.286450%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 103.881 seconds (t=146)\",\"Available money on univ-energy grown by 45.392860%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 101.808 seconds (t=146)\",\"Available money on univ-energy grown by 35.259193%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 125.504 seconds (t=146)\",\"Available money on univ-energy grown by 0.000000%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=146)\",\"Available money on univ-energy grown by 7.446640%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 114.281 seconds (t=146)\",\"Available money on univ-energy grown by 11.673523%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 120.744 seconds (t=146)\",\"Available money on univ-energy grown by 37.449174%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 119.278 seconds (t=146)\",\"Available money on univ-energy grown by 38.270442%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 117.110 seconds (t=146)\",\"Available money on univ-energy grown by 39.265912%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 114.632 seconds (t=146)\",\"Available money on univ-energy grown by 39.478321%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 114.119 seconds (t=146)\",\"Available money on univ-energy grown by 41.058113%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 110.448 seconds (t=146)\",\"Available money on univ-energy grown by 42.242247%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 107.904 seconds (t=146)\",\"Available money on univ-energy grown by 43.091714%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 106.143 seconds (t=146)\",\"Available money on univ-energy grown by 45.541380%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 101.455 seconds (t=146)\",\"Available money on univ-energy grown by 34.962023%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 126.315 seconds (t=146)\",\"Available money on univ-energy grown by 0.000000%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 121.557 seconds (t=146)\",\"Available money on univ-energy grown by 34.884760%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 126.513 seconds (t=146)\",\"Available money on univ-energy grown by 28.905325%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 125.836 seconds (t=146)\",\"Available money on univ-energy grown by 8.310030%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 117.715 seconds (t=146)\",\"Available money on univ-energy grown by 31.338926%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 124.930 seconds (t=146)\",\"Available money on univ-energy grown by 34.417779%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 127.938 seconds (t=146)\",\"Available money on univ-energy grown by 35.298610%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 125.232 seconds (t=146)\",\"Available money on univ-energy grown by 21.273898%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 129.062 seconds (t=146)\",\"Available money on univ-energy grown by 23.026774%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 100.441 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":14667078.566276198,\"threads\":146,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,53582,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":846,\"moneyAvailable\":600478353,\"moneyMax\":15011958825,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":71,\"serversOnNetwork\":[\"59.2.6.0\",\"39.9.7.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"24.6.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.6.8.6\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"24.6.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"24.6.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"24.6.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"24.6.8.6\",\"module\":{}}},\"server\":\"24.6.8.6\",\"logs\":[\"Attempting to hack univ-energy in 31.142 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,737,142,101.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.261 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,329,126,462.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.786 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,122,582,482.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 36.755 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,675,482,252.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.197 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $5,259,233,457.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.628 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $5,139,733,347.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.226 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,132,045,692.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.907 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,906,332,930.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.160 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,092,533,796.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.866 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,598,055,795.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.559 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,318,852,510.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 39.096 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,351,079,153.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.162 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,680,217,649.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.765 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,524,138,921.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 36.569 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,885,460,507.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.125 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,284,728,804.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.047 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,263,131,577.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.757 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,888,371,189.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 38.388 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,749,996,188.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.946 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,710,497,619.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.495 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,873,107,171.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 36.742 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,368,996,981.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.074 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,638,468,359.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.192 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,843,117,605.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.561 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,661,863,012.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 36.504 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":76466.80999961999,\"onlineMoneyMade\":3475157790258,\"onlineExpGained\":2958763.2455465635,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[3475157790258,10809,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418754-MegaCorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"13910619205\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-244294.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":362473364,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":775,\"moneyAvailable\":784270067,\"moneyMax\":19606751675,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":66,\"serversOnNetwork\":[\"59.2.6.0\",\"54.7.6.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"82.9.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.9.2.1\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":909,\"moneyAvailable\":900443195,\"moneyMax\":22511079875,\"hackDifficulty\":93,\"baseDifficulty\":93,\"minDifficulty\":31,\"serverGrowth\":87,\"serversOnNetwork\":[\"81.8.9.0\",\"11.0.3.5\",\"97.2.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.6.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.6.0.9\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"88.6.0.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"88.6.0.9\",\"module\":{}}},\"server\":\"88.6.0.9\",\"logs\":[\"Executing grow() on server univ-energy in 121.991 seconds (t=73)\",\"Available money on univ-energy grown by 17.157090%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 118.893 seconds (t=73)\",\"Available money on univ-energy grown by 17.588454%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 116.198 seconds (t=73)\",\"Available money on univ-energy grown by 17.931002%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 114.179 seconds (t=73)\",\"Available money on univ-energy grown by 18.309632%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 112.035 seconds (t=73)\",\"Available money on univ-energy grown by 18.954104%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 108.573 seconds (t=73)\",\"Available money on univ-energy grown by 19.066586%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 107.981 seconds (t=73)\",\"Available money on univ-energy grown by 19.778770%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 104.483 seconds (t=73)\",\"Available money on univ-energy grown by 20.295437%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 102.056 seconds (t=73)\",\"Available money on univ-energy grown by 15.778459%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 128.280 seconds (t=73)\",\"Available money on univ-energy grown by 20.552046%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 100.912 seconds (t=73)\",\"Available money on univ-energy grown by 16.723547%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 121.627 seconds (t=73)\",\"Available money on univ-energy grown by 17.300982%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 117.882 seconds (t=73)\",\"Available money on univ-energy grown by 17.666507%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 115.673 seconds (t=73)\",\"Available money on univ-energy grown by 17.980046%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 113.826 seconds (t=73)\",\"Available money on univ-energy grown by 18.789093%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 109.367 seconds (t=73)\",\"Available money on univ-energy grown by 19.356354%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 106.456 seconds (t=73)\",\"Available money on univ-energy grown by 19.711217%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 104.728 seconds (t=73)\",\"Available money on univ-energy grown by 20.248939%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 102.216 seconds (t=73)\",\"Available money on univ-energy grown by 0.000000%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 99.358 seconds (t=73)\",\"Available money on univ-energy grown by 3.095459%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 112.380 seconds (t=73)\",\"Available money on univ-energy grown by 17.688620%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 115.471 seconds (t=73)\",\"Available money on univ-energy grown by 18.032810%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 113.467 seconds (t=73)\",\"Available money on univ-energy grown by 18.618335%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 110.216 seconds (t=73)\",\"Available money on univ-energy grown by 18.684783%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 109.861 seconds (t=73)\",\"Available money on univ-energy grown by 19.856543%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 103.974 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":7333539.283138099,\"threads\":73,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,26791,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":815,\"moneyAvailable\":28724971525,\"moneyMax\":28724971525,\"hackDifficulty\":30.342000000000002,\"baseDifficulty\":89,\"minDifficulty\":30,\"serverGrowth\":90,\"serversOnNetwork\":[\"65.7.8.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"46.0.1.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.0.1.8\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"46.0.1.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"46.0.1.8\",\"module\":{}}},\"server\":\"46.0.1.8\",\"logs\":[\"Executing grow() on server univ-energy in 102.526 seconds (t=18)\",\"Available money on univ-energy grown by 3.801018%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.629 seconds (t=18)\",\"Available money on univ-energy grown by 3.691466%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.162 seconds (t=18)\",\"Available money on univ-energy grown by 4.719509%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 100.183 seconds (t=18)\",\"Available money on univ-energy grown by 4.137986%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.804 seconds (t=18)\",\"Available money on univ-energy grown by 4.268000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.414 seconds (t=18)\",\"Available money on univ-energy grown by 4.284037%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.013 seconds (t=18)\",\"Available money on univ-energy grown by 4.425233%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.607 seconds (t=18)\",\"Available money on univ-energy grown by 4.528676%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.225 seconds (t=18)\",\"Available money on univ-energy grown by 4.653824%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.497 seconds (t=18)\",\"Available money on univ-energy grown by 4.731066%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.893 seconds (t=18)\",\"Available money on univ-energy grown by 3.896421%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.595 seconds (t=18)\",\"Available money on univ-energy grown by 4.021463%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.922 seconds (t=18)\",\"Available money on univ-energy grown by 4.104772%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.615 seconds (t=18)\",\"Available money on univ-energy grown by 4.170742%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.867 seconds (t=18)\",\"Available money on univ-energy grown by 4.351584%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.276 seconds (t=18)\",\"Available money on univ-energy grown by 4.471033%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.470 seconds (t=18)\",\"Available money on univ-energy grown by 4.558058%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.532 seconds (t=18)\",\"Available money on univ-energy grown by 4.669133%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.126 seconds (t=18)\",\"Available money on univ-energy grown by 3.908244%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.179 seconds (t=18)\",\"Available money on univ-energy grown by 4.083802%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.153 seconds (t=18)\",\"Available money on univ-energy grown by 3.955141%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.755 seconds (t=18)\",\"Available money on univ-energy grown by 4.021695%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.844 seconds (t=18)\",\"Available money on univ-energy grown by 4.137986%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.664 seconds (t=18)\",\"Available money on univ-energy grown by 4.150333%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.313 seconds (t=18)\",\"Available money on univ-energy grown by 4.390592%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.277 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1798415.6280174942,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6570,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-822315-BitRunners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1761201892\",\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"dir\":0,\"requiredHackingSkill\":823,\"moneyAvailable\":9536297771,\"moneyMax\":19802232725,\"hackDifficulty\":23,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":80,\"serversOnNetwork\":[\"97.2.2.9\",\"2.6.7.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"15.2.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.2.3.6\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"15.2.3.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"15.2.3.6\",\"module\":{}}},\"server\":\"15.2.3.6\",\"logs\":[\"Executing grow() on server univ-energy in 103.559 seconds (t=36)\",\"Available money on univ-energy grown by 9.659073%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 100.467 seconds (t=36)\",\"Available money on univ-energy grown by 8.221615%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.001 seconds (t=36)\",\"Available money on univ-energy grown by 8.347880%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 115.317 seconds (t=36)\",\"Available money on univ-energy grown by 8.522735%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 113.081 seconds (t=36)\",\"Available money on univ-energy grown by 8.814799%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 109.500 seconds (t=36)\",\"Available money on univ-energy grown by 8.851242%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 109.060 seconds (t=36)\",\"Available money on univ-energy grown by 9.162432%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 105.561 seconds (t=36)\",\"Available money on univ-energy grown by 9.394365%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 103.061 seconds (t=36)\",\"Available money on univ-energy grown by 9.661755%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 100.379 seconds (t=36)\",\"Available money on univ-energy grown by 7.887469%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 121.679 seconds (t=36)\",\"Available money on univ-energy grown by 7.777255%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 123.310 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 122.903 seconds (t=36)\",\"Available money on univ-energy grown by 7.755580%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 123.626 seconds (t=36)\",\"Available money on univ-energy grown by 7.692126%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 124.574 seconds (t=36)\",\"Available money on univ-energy grown by 7.982032%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 120.256 seconds (t=36)\",\"Available money on univ-energy grown by 8.103827%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 118.521 seconds (t=36)\",\"Available money on univ-energy grown by 8.238163%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 116.657 seconds (t=36)\",\"Available money on univ-energy grown by 8.403332%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.489 seconds (t=36)\",\"Available money on univ-energy grown by 5.185768%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.679 seconds (t=36)\",\"Available money on univ-energy grown by 8.738414%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.304 seconds (t=36)\",\"Available money on univ-energy grown by 8.923893%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 108.120 seconds (t=36)\",\"Available money on univ-energy grown by 9.217046%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.849 seconds (t=36)\",\"Available money on univ-energy grown by 9.247054%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.527 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 129.062 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 100.441 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":3646102.917076563,\"threads\":36,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,13320,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":840,\"moneyAvailable\":579241281,\"moneyMax\":14481032025,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":86,\"serversOnNetwork\":[\"85.5.8.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"24.1.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.1.8.0\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45082.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[47,8],[36,25],[3,33],[38,34],[10,34],[9,44],[27,40],[1,36],[28,9]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":895751954,\"moneyMax\":22393798850,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":71,\"serversOnNetwork\":[\"4.6.5.2\",\"59.2.6.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.4.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.4.8.0\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51641.cct\",\"type\":\"Total Ways to Sum\",\"data\":86,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":870,\"moneyAvailable\":19557281200,\"moneyMax\":19557281200,\"hackDifficulty\":21.636,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":89,\"serversOnNetwork\":[\"21.5.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"98.0.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.0.6.9\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-504560-ECorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1231120158\",\"reward\":{\"type\":2,\"name\":\"ECorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-484674.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,4,5,0,0,8,5,2,4,8,0,0,0,9,0,5,5,2,3,4,8,9,5,0,9],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-798527.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":414352305,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":878,\"moneyAvailable\":25855765200,\"moneyMax\":25855765200,\"hackDifficulty\":27,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":58,\"serversOnNetwork\":[\"21.6.7.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"65.7.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.7.8.8\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"65.7.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"65.7.8.8\",\"module\":{}}},\"server\":\"65.7.8.8\",\"logs\":[\"Executing grow() on server univ-energy in 107.947 seconds (t=36)\",\"Available money on univ-energy grown by 9.219488%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.973 seconds (t=36)\",\"Available money on univ-energy grown by 9.418524%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.854 seconds (t=36)\",\"Available money on univ-energy grown by 9.710290%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 99.934 seconds (t=36)\",\"Available money on univ-energy grown by 8.484283%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 113.554 seconds (t=36)\",\"Available money on univ-energy grown by 8.758764%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.164 seconds (t=36)\",\"Available money on univ-energy grown by 8.794744%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 109.737 seconds (t=36)\",\"Available money on univ-energy grown by 9.094176%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 106.298 seconds (t=36)\",\"Available money on univ-energy grown by 9.318256%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 103.857 seconds (t=36)\",\"Available money on univ-energy grown by 9.578636%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 101.201 seconds (t=36)\",\"Available money on univ-energy grown by 7.590990%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 126.209 seconds (t=36)\",\"Available money on univ-energy grown by 9.710290%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 99.872 seconds (t=36)\",\"Available money on univ-energy grown by 8.117536%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 118.368 seconds (t=36)\",\"Available money on univ-energy grown by 8.279829%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 116.160 seconds (t=36)\",\"Available money on univ-energy grown by 8.420621%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.300 seconds (t=36)\",\"Available money on univ-energy grown by 8.779209%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 109.840 seconds (t=36)\",\"Available money on univ-energy grown by 9.026343%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 106.988 seconds (t=36)\",\"Available money on univ-energy grown by 9.188444%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 105.201 seconds (t=36)\",\"Available money on univ-energy grown by 9.418524%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.748 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 99.358 seconds (t=36)\",\"Available money on univ-energy grown by 8.521170%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 112.972 seconds (t=36)\",\"Available money on univ-energy grown by 8.253310%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 116.443 seconds (t=36)\",\"Available money on univ-energy grown by 8.398767%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.512 seconds (t=36)\",\"Available money on univ-energy grown by 8.675223%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 111.043 seconds (t=36)\",\"Available money on univ-energy grown by 8.688765%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.857 seconds (t=36)\",\"Available money on univ-energy grown by 9.217046%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.828 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":3626394.252659933,\"threads\":36,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,13248,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":938,\"moneyAvailable\":938230769,\"moneyMax\":23455769225,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":66,\"serversOnNetwork\":[\"4.5.2.9\",\"4.6.5.2\",\"88.6.0.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"11.0.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.0.3.5\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":801,\"moneyAvailable\":26977900700,\"moneyMax\":26977900700,\"hackDifficulty\":22.028,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":73,\"serversOnNetwork\":[\"82.9.2.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"74.6.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.6.5.8\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":842,\"moneyAvailable\":853093897,\"moneyMax\":21327347425,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":70,\"serversOnNetwork\":[\"85.5.8.4\",\"4.4.3.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"62.6.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.6.3.0\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.6.3.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.6.3.0\",\"module\":{}}},\"server\":\"62.6.3.0\",\"logs\":[\"Executing grow() on server univ-energy in 125.754 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.465 seconds (t=18)\",\"Available money on univ-energy grown by 3.737290%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.656 seconds (t=18)\",\"Available money on univ-energy grown by 3.726676%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.991 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.281 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.744 seconds (t=18)\",\"Available money on univ-energy grown by 3.925450%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.751 seconds (t=18)\",\"Available money on univ-energy grown by 3.999033%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.597 seconds (t=18)\",\"Available money on univ-energy grown by 4.087162%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.132 seconds (t=18)\",\"Available money on univ-energy grown by 4.106468%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.592 seconds (t=18)\",\"Available money on univ-energy grown by 4.242745%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.007 seconds (t=18)\",\"Available money on univ-energy grown by 4.345330%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.450 seconds (t=18)\",\"Available money on univ-energy grown by 4.414279%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.820 seconds (t=18)\",\"Available money on univ-energy grown by 4.622585%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.132 seconds (t=18)\",\"Available money on univ-energy grown by 4.731066%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.852 seconds (t=18)\",\"Available money on univ-energy grown by 4.149590%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.402 seconds (t=18)\",\"Available money on univ-energy grown by 4.218555%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.566 seconds (t=18)\",\"Available money on univ-energy grown by 4.308986%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.292 seconds (t=18)\",\"Available money on univ-energy grown by 4.460424%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.692 seconds (t=18)\",\"Available money on univ-energy grown by 4.493565%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.936 seconds (t=18)\",\"Available money on univ-energy grown by 4.594491%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.681 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.364 seconds (t=18)\",\"Available money on univ-energy grown by 3.977080%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.118 seconds (t=18)\",\"Available money on univ-energy grown by 3.986883%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.825 seconds (t=18)\",\"Available money on univ-energy grown by 4.207071%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.815 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1808269.9602258091,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6606,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":834,\"moneyAvailable\":731345751,\"moneyMax\":18283643775,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":75,\"serversOnNetwork\":[\"70.7.9.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"81.8.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.8.9.0\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-907367.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[153,31,52,65,122,63,18,111,169,34,83,147,163,92,137,76,120,6,55,85,101,122,144,170,74,1,12,187,120,104,144,83,168,10],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":866,\"moneyAvailable\":35675107900,\"moneyMax\":35675107900,\"hackDifficulty\":29.516,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":63,\"serversOnNetwork\":[\"57.0.0.8\",\"82.9.2.1\",\"97.9.6.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"57.0.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.0.0.8\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"57.0.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"57.0.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"57.0.0.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"57.0.0.8\",\"module\":{}}},\"server\":\"57.0.0.8\",\"logs\":[\"Executing grow() on server univ-energy in 120.590 seconds (t=9)\",\"Available money on univ-energy grown by 1.983417%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 117.347 seconds (t=9)\",\"Available money on univ-energy grown by 2.032340%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 114.547 seconds (t=9)\",\"Available money on univ-energy grown by 2.071447%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 112.410 seconds (t=9)\",\"Available money on univ-energy grown by 2.113372%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 110.233 seconds (t=9)\",\"Available money on univ-energy grown by 2.176336%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 107.080 seconds (t=9)\",\"Available money on univ-energy grown by 2.194467%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 106.212 seconds (t=9)\",\"Available money on univ-energy grown by 2.271745%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 102.668 seconds (t=9)\",\"Available money on univ-energy grown by 0.000000%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 100.584 seconds (t=9)\",\"Available money on univ-energy grown by 1.926280%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 120.680 seconds (t=9)\",\"Available money on univ-energy grown by 1.965146%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 118.346 seconds (t=9)\",\"Available money on univ-energy grown by 1.976315%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 117.676 seconds (t=9)\",\"Available money on univ-energy grown by 2.035671%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 114.280 seconds (t=9)\",\"Available money on univ-energy grown by 2.083112%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 111.736 seconds (t=9)\",\"Available money on univ-energy grown by 2.116202%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 110.007 seconds (t=9)\",\"Available money on univ-energy grown by 2.208404%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 105.490 seconds (t=9)\",\"Available money on univ-energy grown by 2.269817%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 102.677 seconds (t=9)\",\"Available money on univ-energy grown by 2.317162%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 100.634 seconds (t=9)\",\"Available money on univ-energy grown by 1.929808%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 120.389 seconds (t=9)\",\"Available money on univ-energy grown by 1.961598%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 118.471 seconds (t=9)\",\"Available money on univ-energy grown by 0.000000%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 112.380 seconds (t=9)\",\"Available money on univ-energy grown by 2.004456%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 115.957 seconds (t=9)\",\"Available money on univ-energy grown by 2.039014%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 114.039 seconds (t=9)\",\"Available money on univ-energy grown by 2.103909%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 110.571 seconds (t=9)\",\"Available money on univ-energy grown by 2.110806%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 110.229 seconds (t=9)\",\"Available money on univ-energy grown by 2.231792%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 104.329 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":76544.80999962028,\"onlineMoneyMade\":0,\"onlineExpGained\":896744.2309566684,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,3276,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":848,\"moneyAvailable\":20234859070,\"moneyMax\":41225563150,\"hackDifficulty\":28.048,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":85,\"serversOnNetwork\":[\"21.5.9.3\",\"81.8.9.0\",\"70.7.9.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"97.2.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.2.2.9\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115294.cct\",\"type\":\"Array Jumping Game\",\"data\":[7],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":846,\"moneyAvailable\":14519426468,\"moneyMax\":29543330850,\"hackDifficulty\":25.046,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":73,\"serversOnNetwork\":[\"82.9.2.1\",\"46.0.1.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"97.9.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.9.6.1\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-395923-BitRunners.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":115504845,\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"dir\":0,\"requiredHackingSkill\":832,\"moneyAvailable\":35589771750,\"moneyMax\":35589771750,\"hackDifficulty\":27.246,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":71,\"serversOnNetwork\":[\"81.8.9.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"70.7.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.7.9.9\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.7.9.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.7.9.9\",\"module\":{}}},\"server\":\"70.7.9.9\",\"logs\":[\"Executing grow() on server univ-energy in 109.052 seconds (t=18)\",\"Available money on univ-energy grown by 4.448442%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.111 seconds (t=18)\",\"Available money on univ-energy grown by 4.540501%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.005 seconds (t=18)\",\"Available money on univ-energy grown by 4.638307%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.880 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 4.143409%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.623 seconds (t=18)\",\"Available money on univ-energy grown by 3.923900%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.811 seconds (t=18)\",\"Available money on univ-energy grown by 4.020300%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.003 seconds (t=18)\",\"Available money on univ-energy grown by 4.095345%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.895 seconds (t=18)\",\"Available money on univ-energy grown by 4.194385%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.259 seconds (t=18)\",\"Available money on univ-energy grown by 4.214209%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.759 seconds (t=18)\",\"Available money on univ-energy grown by 4.352401%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.292 seconds (t=18)\",\"Available money on univ-energy grown by 4.464146%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.663 seconds (t=18)\",\"Available money on univ-energy grown by 1.355192%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.711 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.228 seconds (t=18)\",\"Available money on univ-energy grown by 3.676246%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.570 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.852 seconds (t=18)\",\"Available money on univ-energy grown by 3.927445%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.607 seconds (t=18)\",\"Available money on univ-energy grown by 4.002025%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.426 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.178 seconds (t=18)\",\"Available money on univ-energy grown by 4.153803%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.244 seconds (t=18)\",\"Available money on univ-energy grown by 4.232933%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.188 seconds (t=18)\",\"Available money on univ-energy grown by 4.360314%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.035 seconds (t=18)\",\"Available money on univ-energy grown by 4.377053%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.634 seconds (t=18)\",\"Available money on univ-energy grown by 4.639854%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.688 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.535 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1808269.9602258091,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6606,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":793,\"moneyAvailable\":25558014500,\"moneyMax\":25558014500,\"hackDifficulty\":25.166,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":74,\"serversOnNetwork\":[\"57.0.0.8\",\"62.6.3.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"3.4.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.4.1.3\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"3.4.1.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"3.4.1.3\",\"module\":{}}},\"server\":\"3.4.1.3\",\"logs\":[\"Executing grow() on server univ-energy in 125.727 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.465 seconds (t=18)\",\"Available money on univ-energy grown by 3.751806%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.169 seconds (t=18)\",\"Available money on univ-energy grown by 3.801641%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.584 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 4.134542%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.860 seconds (t=18)\",\"Available money on univ-energy grown by 3.915505%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.060 seconds (t=18)\",\"Available money on univ-energy grown by 4.009870%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.299 seconds (t=18)\",\"Available money on univ-energy grown by 4.086682%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.132 seconds (t=18)\",\"Available money on univ-energy grown by 4.185299%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.508 seconds (t=18)\",\"Available money on univ-energy grown by 4.201226%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.081 seconds (t=18)\",\"Available money on univ-energy grown by 4.342075%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.529 seconds (t=18)\",\"Available money on univ-energy grown by 4.453284%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.913 seconds (t=18)\",\"Available money on univ-energy grown by 4.536947%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.020 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.228 seconds (t=18)\",\"Available money on univ-energy grown by 0.393542%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.878 seconds (t=18)\",\"Available money on univ-energy grown by 4.001104%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.490 seconds (t=18)\",\"Available money on univ-energy grown by 4.063996%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.685 seconds (t=18)\",\"Available money on univ-energy grown by 4.144891%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.504 seconds (t=18)\",\"Available money on univ-energy grown by 4.290115%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.772 seconds (t=18)\",\"Available money on univ-energy grown by 4.310856%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.259 seconds (t=18)\",\"Available money on univ-energy grown by 4.397533%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.135 seconds (t=18)\",\"Available money on univ-energy grown by 4.545249%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.772 seconds (t=18)\",\"Available money on univ-energy grown by 4.557162%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.496 seconds (t=18)\",\"Available money on univ-energy grown by 3.698140%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 126.769 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.320 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1798415.6280174942,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6570,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592701.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[58,125,35,185,63,33,111],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":653,\"moneyAvailable\":725119172,\"moneyMax\":18127979300,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":61,\"serversOnNetwork\":[\"23.2.2.5\",\"4.5.2.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"90.8.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.8.2.4\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.8.2.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.8.2.4\",\"module\":{}}},\"server\":\"90.8.2.4\",\"logs\":[\"Executing grow() on server univ-energy in 108.183 seconds (t=18)\",\"Available money on univ-energy grown by 4.487187%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.210 seconds (t=18)\",\"Available money on univ-energy grown by 4.578763%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.163 seconds (t=18)\",\"Available money on univ-energy grown by 4.683912%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 100.907 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.001 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.348 seconds (t=18)\",\"Available money on univ-energy grown by 4.104045%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.682 seconds (t=18)\",\"Available money on univ-energy grown by 4.235768%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.216 seconds (t=18)\",\"Available money on univ-energy grown by 4.329911%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.860 seconds (t=18)\",\"Available money on univ-energy grown by 4.442759%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.178 seconds (t=18)\",\"Available money on univ-energy grown by 4.467013%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.606 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.067 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.903 seconds (t=18)\",\"Available money on univ-energy grown by 3.813314%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.140 seconds (t=18)\",\"Available money on univ-energy grown by 3.782618%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 124.087 seconds (t=18)\",\"Available money on univ-energy grown by 3.922351%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.770 seconds (t=18)\",\"Available money on univ-energy grown by 3.990314%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.798 seconds (t=18)\",\"Available money on univ-energy grown by 4.055465%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.922 seconds (t=18)\",\"Available money on univ-energy grown by 4.135526%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.753 seconds (t=18)\",\"Available money on univ-energy grown by 4.280082%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.022 seconds (t=18)\",\"Available money on univ-energy grown by 4.300726%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.496 seconds (t=18)\",\"Available money on univ-energy grown by 4.387546%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.385 seconds (t=18)\",\"Available money on univ-energy grown by 4.531331%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.081 seconds (t=18)\",\"Available money on univ-energy grown by 4.546438%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.746 seconds (t=18)\",\"Available money on univ-energy grown by 3.674886%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.538 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.320 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1813197.1263299666,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6624,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":493,\"moneyAvailable\":6408051750,\"moneyMax\":13525414350,\"hackDifficulty\":18.04,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":60,\"serversOnNetwork\":[\"23.2.2.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"21.5.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.5.9.3\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.5.9.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.5.9.3\",\"module\":{}}},\"server\":\"21.5.9.3\",\"logs\":[\"Executing grow() on server univ-energy in 109.907 seconds (t=36)\",\"Available money on univ-energy grown by 9.035133%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 106.991 seconds (t=36)\",\"Available money on univ-energy grown by 9.218267%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.965 seconds (t=36)\",\"Available money on univ-energy grown by 9.442807%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.604 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 99.460 seconds (t=36)\",\"Available money on univ-energy grown by 8.616138%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 111.894 seconds (t=36)\",\"Available money on univ-energy grown by 8.349381%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 115.287 seconds (t=36)\",\"Available money on univ-energy grown by 8.617205%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 111.867 seconds (t=36)\",\"Available money on univ-energy grown by 8.814799%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 109.478 seconds (t=36)\",\"Available money on univ-energy grown by 9.031615%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 106.986 seconds (t=36)\",\"Available money on univ-energy grown by 9.072240%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 106.533 seconds (t=36)\",\"Available money on univ-energy grown by 9.405793%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.935 seconds (t=36)\",\"Available money on univ-energy grown by 7.752987%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 123.666 seconds (t=36)\",\"Available money on univ-energy grown by 7.712164%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 124.290 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 127.228 seconds (t=36)\",\"Available money on univ-energy grown by 7.516764%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 127.334 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 99.379 seconds (t=36)\",\"Available money on univ-energy grown by 8.203196%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.130 seconds (t=36)\",\"Available money on univ-energy grown by 8.365946%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.975 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.679 seconds (t=36)\",\"Available money on univ-energy grown by 8.699084%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.790 seconds (t=36)\",\"Available money on univ-energy grown by 8.881747%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 108.593 seconds (t=36)\",\"Available money on univ-energy grown by 9.173303%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 105.322 seconds (t=36)\",\"Available money on univ-energy grown by 9.203027%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 105.000 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 99.318 seconds (t=36)\",\"Available money on univ-energy grown by 8.522736%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 112.919 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":3636248.584868248,\"threads\":36,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,13284,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":514,\"moneyAvailable\":18626466925,\"moneyMax\":18626466925,\"hackDifficulty\":21.38,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":50,\"serversOnNetwork\":[\"76.0.0.4\",\"59.4.8.0\",\"57.0.0.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"68.0.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.0.6.6\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.0.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.0.6.6\",\"module\":{}}},\"server\":\"68.0.6.6\",\"logs\":[\"Executing grow() on server univ-energy in 120.781 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.754 seconds (t=18)\",\"Available money on univ-energy grown by 3.820646%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.011 seconds (t=18)\",\"Available money on univ-energy grown by 3.706023%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 126.675 seconds (t=18)\",\"Available money on univ-energy grown by 3.682865%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.451 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 4.063046%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.806 seconds (t=18)\",\"Available money on univ-energy grown by 3.849832%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.040 seconds (t=18)\",\"Available money on univ-energy grown by 3.385425%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.454 seconds (t=18)\",\"Available money on univ-energy grown by 3.825900%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.758 seconds (t=18)\",\"Available money on univ-energy grown by 3.898605%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.529 seconds (t=18)\",\"Available money on univ-energy grown by 3.904295%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.358 seconds (t=18)\",\"Available money on univ-energy grown by 4.029851%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.685 seconds (t=18)\",\"Available money on univ-energy grown by 4.113512%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.378 seconds (t=18)\",\"Available money on univ-energy grown by 4.179765%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.617 seconds (t=18)\",\"Available money on univ-energy grown by 4.361955%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.040 seconds (t=18)\",\"Available money on univ-energy grown by 4.481404%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.234 seconds (t=18)\",\"Available money on univ-energy grown by 4.570638%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.256 seconds (t=18)\",\"Available money on univ-energy grown by 4.680445%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 100.876 seconds (t=18)\",\"Available money on univ-energy grown by 3.916167%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.929 seconds (t=18)\",\"Available money on univ-energy grown by 4.095104%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.844 seconds (t=18)\",\"Available money on univ-energy grown by 3.972763%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.243 seconds (t=18)\",\"Available money on univ-energy grown by 4.038509%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.371 seconds (t=18)\",\"Available money on univ-energy grown by 4.160761%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.047 seconds (t=18)\",\"Available money on univ-energy grown by 4.170992%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.768 seconds (t=18)\",\"Available money on univ-energy grown by 4.410640%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.804 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1803342.7941216517,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6588,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":410,\"moneyAvailable\":225816444,\"moneyMax\":5645411100,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":41,\"serversOnNetwork\":[\"70.9.3.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"77.7.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.7.7.5\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.7.7.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.7.7.5\",\"module\":{}}},\"server\":\"77.7.7.5\",\"logs\":[\"Executing grow() on server univ-energy in 104.888 seconds (t=18)\",\"Available money on univ-energy grown by 4.643261%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.783 seconds (t=18)\",\"Available money on univ-energy grown by 4.742680%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.697 seconds (t=18)\",\"Available money on univ-energy grown by 4.099449%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.843 seconds (t=18)\",\"Available money on univ-energy grown by 4.186558%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.508 seconds (t=18)\",\"Available money on univ-energy grown by 2.452249%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.954 seconds (t=18)\",\"Available money on univ-energy grown by 4.341533%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.586 seconds (t=18)\",\"Available money on univ-energy grown by 4.493855%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.016 seconds (t=18)\",\"Available money on univ-energy grown by 4.602700%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.588 seconds (t=18)\",\"Available money on univ-energy grown by 4.731066%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.893 seconds (t=18)\",\"Available money on univ-energy grown by 3.888795%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.825 seconds (t=18)\",\"Available money on univ-energy grown by 3.854740%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.863 seconds (t=18)\",\"Available money on univ-energy grown by 3.962803%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.605 seconds (t=18)\",\"Available money on univ-energy grown by 4.040152%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.409 seconds (t=18)\",\"Available money on univ-energy grown by 4.107681%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.536 seconds (t=18)\",\"Available money on univ-energy grown by 4.278239%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.077 seconds (t=18)\",\"Available money on univ-energy grown by 4.393088%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.284 seconds (t=18)\",\"Available money on univ-energy grown by 4.472471%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.437 seconds (t=18)\",\"Available money on univ-energy grown by 4.581477%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.998 seconds (t=18)\",\"Available money on univ-energy grown by 4.739771%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.654 seconds (t=18)\",\"Available money on univ-energy grown by 4.108651%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.463 seconds (t=18)\",\"Available money on univ-energy grown by 3.985512%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.875 seconds (t=18)\",\"Available money on univ-energy grown by 4.053810%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.944 seconds (t=18)\",\"Available money on univ-energy grown by 4.175249%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.679 seconds (t=18)\",\"Available money on univ-energy grown by 4.187315%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.328 seconds (t=18)\",\"Available money on univ-energy grown by 4.428332%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.391 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1813197.1263299666,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6624,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-596952-ECorp.cct\",\"type\":\"Array Jumping Game\",\"data\":[0],\"reward\":{\"type\":0,\"name\":\"ECorp\"}}}],\"dir\":0,\"requiredHackingSkill\":374,\"moneyAvailable\":5833190300,\"moneyMax\":5833190300,\"hackDifficulty\":17.43,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":40,\"serversOnNetwork\":[\"55.1.1.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"76.0.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.0.0.4\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.0.0.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.0.0.4\",\"module\":{}}},\"server\":\"76.0.0.4\",\"logs\":[\"Executing grow() on server univ-energy in 120.840 seconds (t=18)\",\"Available money on univ-energy grown by 4.001564%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.597 seconds (t=18)\",\"Available money on univ-energy grown by 4.101141%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.797 seconds (t=18)\",\"Available money on univ-energy grown by 4.181273%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.660 seconds (t=18)\",\"Available money on univ-energy grown by 4.261462%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.588 seconds (t=18)\",\"Available money on univ-energy grown by 3.373941%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.264 seconds (t=18)\",\"Available money on univ-energy grown by 4.431436%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.462 seconds (t=18)\",\"Available money on univ-energy grown by 4.589034%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.905 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 100.584 seconds (t=18)\",\"Available money on univ-energy grown by 3.865022%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.548 seconds (t=18)\",\"Available money on univ-energy grown by 3.939682%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.319 seconds (t=18)\",\"Available money on univ-energy grown by 3.960546%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.695 seconds (t=18)\",\"Available money on univ-energy grown by 4.082364%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.226 seconds (t=18)\",\"Available money on univ-energy grown by 4.173996%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.768 seconds (t=18)\",\"Available money on univ-energy grown by 4.238608%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.099 seconds (t=18)\",\"Available money on univ-energy grown by 4.425514%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.522 seconds (t=18)\",\"Available money on univ-energy grown by 4.550602%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.683 seconds (t=18)\",\"Available money on univ-energy grown by 4.643881%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.679 seconds (t=18)\",\"Available money on univ-energy grown by 3.669264%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.781 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.358 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.380 seconds (t=18)\",\"Available money on univ-energy grown by 4.058068%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.839 seconds (t=18)\",\"Available money on univ-energy grown by 4.128897%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.907 seconds (t=18)\",\"Available money on univ-energy grown by 4.261463%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.452 seconds (t=18)\",\"Available money on univ-energy grown by 4.275609%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.098 seconds (t=18)\",\"Available money on univ-energy grown by 4.523962%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.210 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1803342.7941216517,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6588,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":739,\"moneyAvailable\":23523249800,\"moneyMax\":23523249800,\"hackDifficulty\":24.064,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":76,\"serversOnNetwork\":[\"55.1.1.3\",\"21.5.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"53.4.1.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.4.1.2\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"53.4.1.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"53.4.1.2\",\"module\":{}}},\"server\":\"53.4.1.2\",\"logs\":[\"Executing grow() on server univ-energy in 110.874 seconds (t=36)\",\"Available money on univ-energy grown by 8.993095%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 107.473 seconds (t=36)\",\"Available money on univ-energy grown by 9.263673%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.500 seconds (t=36)\",\"Available money on univ-energy grown by 9.465929%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.380 seconds (t=36)\",\"Available money on univ-energy grown by 7.531412%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 127.214 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=36)\",\"Available money on univ-energy grown by 1.194977%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 115.510 seconds (t=36)\",\"Available money on univ-energy grown by 7.880768%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 121.803 seconds (t=36)\",\"Available money on univ-energy grown by 7.916187%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 121.270 seconds (t=36)\",\"Available money on univ-energy grown by 7.918440%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 121.226 seconds (t=36)\",\"Available money on univ-energy grown by 8.069052%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 119.069 seconds (t=36)\",\"Available money on univ-energy grown by 8.117063%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 118.399 seconds (t=36)\",\"Available money on univ-energy grown by 8.367455%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.990 seconds (t=36)\",\"Available money on univ-energy grown by 8.561011%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 112.531 seconds (t=36)\",\"Available money on univ-energy grown by 8.705615%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.744 seconds (t=36)\",\"Available money on univ-energy grown by 9.090611%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 106.285 seconds (t=36)\",\"Available money on univ-energy grown by 9.353326%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 103.446 seconds (t=36)\",\"Available money on univ-energy grown by 9.551683%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 101.429 seconds (t=36)\",\"Available money on univ-energy grown by 7.536715%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 126.999 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 125.836 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.715 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 124.930 seconds (t=36)\",\"Available money on univ-energy grown by 7.447562%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 128.411 seconds (t=36)\",\"Available money on univ-energy grown by 7.615503%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 125.718 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 129.062 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 100.441 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":3596831.2560349884,\"threads\":36,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,13140,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":444,\"moneyAvailable\":216185594,\"moneyMax\":5404639850,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":42,\"serversOnNetwork\":[\"45.9.7.1\",\"21.6.7.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"27.7.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.7.8.9\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":572,\"moneyAvailable\":484734495,\"moneyMax\":12118362375,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":65,\"serversOnNetwork\":[\"52.2.7.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.9.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.9.3.7\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.9.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.9.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"70.9.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"70.9.3.7\",\"module\":{}}},\"server\":\"70.9.3.7\",\"logs\":[\"Attempting to hack univ-energy in 37.733 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,083,959,441.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.205 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,555,947,000.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.690 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,705,802,553.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.948 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $5,375,968,776.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.068 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,102,852,645.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.394 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,267,535,086.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.066 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,174,992,450.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.156 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,550,393,575.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.105 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,347,478,910.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.719 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,869,194,880.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.707 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,409,510,697.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 38.499 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,336,719,363.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.106 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,192,626,709.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.954 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,358,956,700.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 36.251 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $5,375,579,292.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.070 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,235,034,520.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.544 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,672,875,999.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.143 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,542,262,257.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 36.838 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,894,592,626.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.439 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,173,938,840.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.810 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,394,736,039.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.429 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,336,846,587.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 39.782 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,480,265,638.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.929 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,423,781,423.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.303 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,118,199,419.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.094 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":74125.80999961148,\"onlineMoneyMade\":3237656568246,\"onlineExpGained\":2798630.347161446,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[3237656568246,10224,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":406,\"moneyAvailable\":324384769,\"moneyMax\":8109619225,\"hackDifficulty\":62,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":48,\"serversOnNetwork\":[\"52.2.7.6\",\"68.0.6.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"81.2.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.2.6.6\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.2.6.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.2.6.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"81.2.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"81.2.6.6\",\"module\":{}}},\"server\":\"81.2.6.6\",\"logs\":[\"Attempting to hack univ-energy in 31.639 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $945,289,899.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.472 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $812,542,113.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.189 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,412,968,103.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 37.574 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,814,488,054.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.376 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,489,225,596.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.877 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $5,099,643,981.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.762 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $5,375,968,776.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.068 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,370,635,270.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.608 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,857,678,678.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.322 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,691,630,090.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 37.129 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,874,064,498.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.940 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,912,789,871.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.406 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,970,903,754.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.518 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,926,843,730.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 39.381 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,795,759,477.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.447 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,802,598,372.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.898 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $951,847,236.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.547 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,376,898,639.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.269 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,544,805,719.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.714 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,564,644,843.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.258 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,676,807,187.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 39.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,087,934,577.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.833 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,665,972,728.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.099 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,424,717,801.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 34.961 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $5,376,418,560.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.055 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25386.810000057296,\"onlineMoneyMade\":2032023330153,\"onlineExpGained\":1818124.2924341126,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[2032023330153,6642,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-474359.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"19415224553\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-79470.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"101294976\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":286,\"moneyAvailable\":4010919150,\"moneyMax\":4010919150,\"hackDifficulty\":15.899999999999999,\"baseDifficulty\":42,\"minDifficulty\":14,\"serverGrowth\":54,\"serversOnNetwork\":[\"70.2.0.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"21.4.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.4.0.1\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":318,\"moneyAvailable\":5937690350,\"moneyMax\":5937690350,\"hackDifficulty\":20.226,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":54,\"serversOnNetwork\":[\"89.8.0.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"45.9.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.9.7.1\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"45.9.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"45.9.7.1\",\"module\":{}}},\"server\":\"45.9.7.1\",\"logs\":[\"Executing grow() on server univ-energy in 104.638 seconds (t=36)\",\"Available money on univ-energy grown by 9.549062%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 101.546 seconds (t=36)\",\"Available money on univ-energy grown by 7.504602%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 127.635 seconds (t=36)\",\"Available money on univ-energy grown by 9.636335%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 100.670 seconds (t=36)\",\"Available money on univ-energy grown by 8.427761%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.278 seconds (t=36)\",\"Available money on univ-energy grown by 8.697453%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.888 seconds (t=36)\",\"Available money on univ-energy grown by 8.725812%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.546 seconds (t=36)\",\"Available money on univ-energy grown by 9.024002%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 107.080 seconds (t=36)\",\"Available money on univ-energy grown by 9.239074%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.711 seconds (t=36)\",\"Available money on univ-energy grown by 9.494990%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.029 seconds (t=36)\",\"Available money on univ-energy grown by 9.552995%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 101.457 seconds (t=36)\",\"Available money on univ-energy grown by 7.825367%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 122.587 seconds (t=36)\",\"Available money on univ-energy grown by 8.044793%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 119.374 seconds (t=36)\",\"Available money on univ-energy grown by 8.207551%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.132 seconds (t=36)\",\"Available money on univ-energy grown by 8.352388%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 115.200 seconds (t=36)\",\"Available money on univ-energy grown by 8.688222%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.944 seconds (t=36)\",\"Available money on univ-energy grown by 8.931338%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 108.079 seconds (t=36)\",\"Available money on univ-energy grown by 9.101908%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 106.147 seconds (t=36)\",\"Available money on univ-energy grown by 9.320752%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 103.767 seconds (t=36)\",\"Available money on univ-energy grown by 9.661755%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 100.317 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.203 seconds (t=36)\",\"Available money on univ-energy grown by 7.782039%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 123.137 seconds (t=36)\",\"Available money on univ-energy grown by 7.630956%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 125.462 seconds (t=36)\",\"Available money on univ-energy grown by 7.813503%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 122.664 seconds (t=36)\",\"Available money on univ-energy grown by 7.816136%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 122.612 seconds (t=36)\",\"Available money on univ-energy grown by 8.170923%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.523 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":3626394.252659933,\"threads\":36,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,13248,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":408,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":69,\"serversOnNetwork\":[\"70.2.0.7\",\"53.4.1.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"55.1.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.1.1.3\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":266,\"moneyAvailable\":83738494,\"moneyMax\":2093462350,\"hackDifficulty\":35,\"baseDifficulty\":35,\"minDifficulty\":12,\"serverGrowth\":60,\"serversOnNetwork\":[\"89.8.0.7\",\"77.7.7.5\",\"76.0.0.4\",\"23.2.2.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"85.5.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.5.1.6\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.5.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.5.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"85.5.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"85.5.1.6\",\"module\":{}}},\"server\":\"85.5.1.6\",\"logs\":[\"Attempting to hack univ-energy in 31.037 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.409999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\",\"58.5.4.9\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"85.7.5.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.7.5.3\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.7.5.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.7.5.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"85.7.5.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"85.7.5.3\",\"module\":{}}},\"server\":\"85.7.5.3\",\"logs\":[\"Attempting to hack univ-energy in 33.683 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,204,597,620.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.442 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,430,063,630.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 39.305 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $3,041,965,494.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.654 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,790,784,180.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 35.121 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,902,329,648.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 38.164 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,697,519,283.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 31.704 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $2,742,947,181.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 32.777 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $1,388,432,574.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 33.588 seconds (t=9)\",\"Script SUCCESSFULLY hacked univ-energy for $4,885,167,510.00 and 2,463.5831 exp (t=9)\",\"Attempting to hack univ-energy in 37.619 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":329.60999999998984,\"onlineMoneyMade\":25083807120,\"onlineExpGained\":22172.24746870894,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[25083807120,81,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-148682.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,0,2,6,0,7,8,3,7,0,0,0,3,0,7],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"hackDifficulty\":10,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\",\"77.9.0.4\",\"74.9.5.8\",\"91.3.9.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"11.7.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.7.7.7\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"11.7.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"11.7.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"11.7.7.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"11.7.7.7\",\"module\":{}}},\"server\":\"11.7.7.7\",\"logs\":[\"Executing grow() on server univ-energy in 99.338 seconds (t=9)\",\"Available money on univ-energy grown by 1.965034%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 118.219 seconds (t=9)\",\"Available money on univ-energy grown by 2.071817%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 112.242 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":257.60999999999393,\"onlineMoneyMade\":0,\"onlineExpGained\":4927.166104157543,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,18,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"77.9.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.9.0.4\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.9.0.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.9.0.4\",\"module\":{}}},\"server\":\"77.9.0.4\",\"logs\":[\"Executing grow() on server univ-energy in 103.059 seconds (t=18)\",\"Available money on univ-energy grown by 4.731066%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.954 seconds (t=18)\",\"Available money on univ-energy grown by 4.040387%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.474 seconds (t=18)\",\"Available money on univ-energy grown by 4.114729%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.429 seconds (t=18)\",\"Available money on univ-energy grown by 4.195651%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.272 seconds (t=18)\",\"Available money on univ-energy grown by 4.332338%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.810 seconds (t=18)\",\"Available money on univ-energy grown by 4.354308%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.290 seconds (t=18)\",\"Available money on univ-energy grown by 4.504332%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.779 seconds (t=18)\",\"Available money on univ-energy grown by 4.613692%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.351 seconds (t=18)\",\"Available money on univ-energy grown by 4.742680%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.656 seconds (t=18)\",\"Available money on univ-energy grown by 3.964384%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.583 seconds (t=18)\",\"Available money on univ-energy grown by 3.987569%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.912 seconds (t=18)\",\"Available money on univ-energy grown by 4.108409%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.516 seconds (t=18)\",\"Available money on univ-energy grown by 4.202242%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.045 seconds (t=18)\",\"Available money on univ-energy grown by 4.272457%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.244 seconds (t=18)\",\"Available money on univ-energy grown by 4.459852%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.740 seconds (t=18)\",\"Available money on univ-energy grown by 4.585706%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.914 seconds (t=18)\",\"Available money on univ-energy grown by 4.681705%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 100.883 seconds (t=18)\",\"Available money on univ-energy grown by 3.890971%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.685 seconds (t=18)\",\"Available money on univ-energy grown by 3.924121%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.693 seconds (t=18)\",\"Available money on univ-energy grown by 4.117408%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.226 seconds (t=18)\",\"Available money on univ-energy grown by 3.993751%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.639 seconds (t=18)\",\"Available money on univ-energy grown by 4.062334%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.707 seconds (t=18)\",\"Available money on univ-energy grown by 4.184292%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.429 seconds (t=18)\",\"Available money on univ-energy grown by 4.196917%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.091 seconds (t=18)\",\"Available money on univ-energy grown by 4.438506%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.154 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1813197.1263299666,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6624,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248359-NWO.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,24],[23,24],[13,21],[9,16],[23,28]],\"reward\":{\"type\":2,\"name\":\"NWO\"}}}],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"85.7.5.3\",\"78.5.0.3\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"58.5.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.5.4.9\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.5.4.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.5.4.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"58.5.4.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.5.4.9\",\"module\":{}}},\"server\":\"58.5.4.9\",\"logs\":[\"Executing grow() on server univ-energy in 111.579 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.41000000000014,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704810.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[145,136,14,198,180,134,194,195,186,126,11,149,53,186,100,197,198,110,173,46,18,95,177,44,55,94,79,161,24,119,45,50,197,4,146,200,160,49,118,187,45,95,73,8,121,198],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"85.5.1.6\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"70.2.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.2.0.7\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.2.0.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.2.0.7\",\"module\":{}}},\"server\":\"70.2.0.7\",\"logs\":[\"Executing grow() on server univ-energy in 114.248 seconds (t=18)\",\"Available money on univ-energy grown by 4.230873%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.377 seconds (t=18)\",\"Available money on univ-energy grown by 4.311925%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.332 seconds (t=18)\",\"Available money on univ-energy grown by 4.411199%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.958 seconds (t=18)\",\"Available money on univ-energy grown by 4.547924%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.806 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.925 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 124.959 seconds (t=18)\",\"Available money on univ-energy grown by 3.787975%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.979 seconds (t=18)\",\"Available money on univ-energy grown by 3.685597%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.307 seconds (t=18)\",\"Available money on univ-energy grown by 4.742680%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.656 seconds (t=18)\",\"Available money on univ-energy grown by 3.950423%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.004 seconds (t=18)\",\"Available money on univ-energy grown by 4.073756%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.476 seconds (t=18)\",\"Available money on univ-energy grown by 4.164997%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.005 seconds (t=18)\",\"Available money on univ-energy grown by 4.227016%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.407 seconds (t=18)\",\"Available money on univ-energy grown by 4.415400%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.758 seconds (t=18)\",\"Available money on univ-energy grown by 4.537243%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.979 seconds (t=18)\",\"Available money on univ-energy grown by 4.629353%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.987 seconds (t=18)\",\"Available money on univ-energy grown by 4.742680%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.595 seconds (t=18)\",\"Available money on univ-energy grown by 3.987112%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.866 seconds (t=18)\",\"Available money on univ-energy grown by 4.222140%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.487 seconds (t=18)\",\"Available money on univ-energy grown by 4.139464%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.612 seconds (t=18)\",\"Available money on univ-energy grown by 4.213443%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.687 seconds (t=18)\",\"Available money on univ-energy grown by 4.343973%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.416 seconds (t=18)\",\"Available money on univ-energy grown by 4.356217%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.133 seconds (t=18)\",\"Available money on univ-energy grown by 4.620435%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.115 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 100.441 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1823051.4585382815,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6660,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-800446-ECorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[178,60,168,133,1,82,195,183,71,34,30,119,163,196,17,189,1,29,84,191,145,101,195,57,97,4,187,168,126,139,11,160,164],\"reward\":{\"type\":2,\"name\":\"ECorp\"}}}],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"74.9.5.8\",\"81.2.6.6\",\"45.9.7.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"89.8.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.8.0.7\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.8.0.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.8.0.7\",\"module\":{}}},\"server\":\"89.8.0.7\",\"logs\":[\"Executing grow() on server univ-energy in 107.565 seconds (t=36)\",\"Available money on univ-energy grown by 9.302062%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.092 seconds (t=36)\",\"Available money on univ-energy grown by 9.603753%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 101.013 seconds (t=36)\",\"Available money on univ-energy grown by 7.578999%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 126.438 seconds (t=36)\",\"Available money on univ-energy grown by 7.561700%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 126.728 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=36)\",\"Available money on univ-energy grown by 8.338374%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 115.431 seconds (t=36)\",\"Available money on univ-energy grown by 7.915737%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 121.290 seconds (t=36)\",\"Available money on univ-energy grown by 7.949655%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 120.797 seconds (t=36)\",\"Available money on univ-energy grown by 7.964215%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 120.562 seconds (t=36)\",\"Available money on univ-energy grown by 8.130343%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 118.215 seconds (t=36)\",\"Available money on univ-energy grown by 8.178126%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.557 seconds (t=36)\",\"Available money on univ-energy grown by 8.431335%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.161 seconds (t=36)\",\"Available money on univ-energy grown by 8.634850%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 111.605 seconds (t=36)\",\"Available money on univ-energy grown by 8.778101%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 109.889 seconds (t=36)\",\"Available money on univ-energy grown by 9.186018%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 105.240 seconds (t=36)\",\"Available money on univ-energy grown by 9.446012%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.500 seconds (t=36)\",\"Available money on univ-energy grown by 9.649698%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 100.443 seconds (t=36)\",\"Available money on univ-energy grown by 7.978371%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 120.271 seconds (t=36)\",\"Available money on univ-energy grown by 8.115169%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 118.352 seconds (t=36)\",\"Available money on univ-energy grown by 8.602290%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 111.960 seconds (t=36)\",\"Available money on univ-energy grown by 8.418074%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 114.262 seconds (t=36)\",\"Available money on univ-energy grown by 8.577369%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 112.246 seconds (t=36)\",\"Available money on univ-energy grown by 8.851242%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 108.948 seconds (t=36)\",\"Available money on univ-energy grown by 8.875516%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 108.666 seconds (t=36)\",\"Available money on univ-energy grown by 9.424264%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.647 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":3626394.252659933,\"threads\":36,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,13248,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"91.3.9.8\",\"21.4.0.1\",\"55.1.1.3\",\"55.0.9.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"62.8.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.8.4.4\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.8.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.8.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.8.4.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.8.4.4\",\"module\":{}}},\"server\":\"62.8.4.4\",\"logs\":[\"Executing grow() on server univ-energy in 120.971 seconds (t=9)\",\"Available money on univ-energy grown by 1.974632%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 117.860 seconds (t=9)\",\"Available money on univ-energy grown by 2.025473%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 114.929 seconds (t=9)\",\"Available money on univ-energy grown by 2.063457%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 112.850 seconds (t=9)\",\"Available money on univ-energy grown by 2.103909%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 110.706 seconds (t=9)\",\"Available money on univ-energy grown by 0.000000%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 107.264 seconds (t=9)\",\"Available money on univ-energy grown by 2.183991%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 106.712 seconds (t=9)\",\"Available money on univ-energy grown by 2.260815%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 103.155 seconds (t=9)\",\"Available money on univ-energy grown by 2.313924%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 100.820 seconds (t=9)\",\"Available money on univ-energy grown by 1.891285%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 122.876 seconds (t=9)\",\"Available money on univ-energy grown by 1.922021%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 120.943 seconds (t=9)\",\"Available money on univ-energy grown by 1.905380%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 121.995 seconds (t=9)\",\"Available money on univ-energy grown by 1.957181%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 118.782 seconds (t=9)\",\"Available money on univ-energy grown by 1.995712%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 116.528 seconds (t=9)\",\"Available money on univ-energy grown by 2.028901%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 114.654 seconds (t=9)\",\"Available money on univ-energy grown by 2.111575%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 110.221 seconds (t=9)\",\"Available money on univ-energy grown by 2.168058%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 107.415 seconds (t=9)\",\"Available money on univ-energy grown by 2.205463%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 105.615 seconds (t=9)\",\"Available money on univ-energy grown by 2.258172%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 103.175 seconds (t=9)\",\"Available money on univ-energy grown by 2.336783%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 99.772 seconds (t=9)\",\"Available money on univ-energy grown by 2.029374%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 114.594 seconds (t=9)\",\"Available money on univ-energy grown by 1.969263%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 118.006 seconds (t=9)\",\"Available money on univ-energy grown by 2.001571%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 116.134 seconds (t=9)\",\"Available money on univ-energy grown by 2.061621%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 112.810 seconds (t=9)\",\"Available money on univ-energy grown by 2.066645%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 112.518 seconds (t=9)\",\"Available money on univ-energy grown by 2.185226%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 106.509 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3439.409999999063,\"onlineMoneyMade\":0,\"onlineExpGained\":73907.49156236314,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,270,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"83.1.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.1.4.1\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"83.1.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"83.1.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"83.1.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"83.1.4.1\",\"module\":{}}},\"server\":\"83.1.4.1\",\"logs\":[\"Executing grow() on server univ-energy in 118.219 seconds (t=9)\",\"Available money on univ-energy grown by 2.068243%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 112.433 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":155.6099999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":2463.5830520787713,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,9,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"87.8.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.8.7.8\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.8.7.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.8.7.8\",\"module\":{}}},\"server\":\"87.8.7.8\",\"logs\":[\"Executing grow() on server univ-energy in 102.822 seconds (t=18)\",\"Available money on univ-energy grown by 4.742680%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.717 seconds (t=18)\",\"Available money on univ-energy grown by 4.087163%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.179 seconds (t=18)\",\"Available money on univ-energy grown by 4.159517%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.219 seconds (t=18)\",\"Available money on univ-energy grown by 4.242228%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.075 seconds (t=18)\",\"Available money on univ-energy grown by 4.383121%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.600 seconds (t=18)\",\"Available money on univ-energy grown by 4.407565%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.021 seconds (t=18)\",\"Available money on univ-energy grown by 4.561346%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.510 seconds (t=18)\",\"Available money on univ-energy grown by 4.672897%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.116 seconds (t=18)\",\"Available money on univ-energy grown by 3.810807%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.231 seconds (t=18)\",\"Available money on univ-energy grown by 3.877088%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.193 seconds (t=18)\",\"Available money on univ-energy grown by 3.823797%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.836 seconds (t=18)\",\"Available money on univ-energy grown by 3.926558%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.683 seconds (t=18)\",\"Available money on univ-energy grown by 3.875360%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.208 seconds (t=18)\",\"Available money on univ-energy grown by 3.937897%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.347 seconds (t=18)\",\"Available money on univ-energy grown by 4.086922%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.078 seconds (t=18)\",\"Available money on univ-energy grown by 4.191605%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.285 seconds (t=18)\",\"Available money on univ-energy grown by 4.262507%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.471 seconds (t=18)\",\"Available money on univ-energy grown by 4.360314%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.057 seconds (t=18)\",\"Available money on univ-energy grown by 4.506375%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.647 seconds (t=18)\",\"Available money on univ-energy grown by 4.544952%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.786 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.123 seconds (t=18)\",\"Available money on univ-energy grown by 3.876656%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.094 seconds (t=18)\",\"Available money on univ-energy grown by 3.968909%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.355 seconds (t=18)\",\"Available money on univ-energy grown by 3.978217%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.074 seconds (t=18)\",\"Available money on univ-energy grown by 4.195651%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.111 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1793488.4619133368,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6552,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"91.3.9.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"74.9.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.9.5.8\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.9.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.9.5.8\",\"module\":{}}},\"server\":\"74.9.5.8\",\"logs\":[\"Executing grow() on server univ-energy in 120.781 seconds (t=18)\",\"Available money on univ-energy grown by 3.743123%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.477 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.465 seconds (t=18)\",\"Available money on univ-energy grown by 3.759106%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 124.932 seconds (t=18)\",\"Available money on univ-energy grown by 3.809972%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.308 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 4.152811%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.386 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.502 seconds (t=18)\",\"Available money on univ-energy grown by 4.029151%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.766 seconds (t=18)\",\"Available money on univ-energy grown by 4.104045%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.658 seconds (t=18)\",\"Available money on univ-energy grown by 4.203512%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.022 seconds (t=18)\",\"Available money on univ-energy grown by 4.225731%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.450 seconds (t=18)\",\"Available money on univ-energy grown by 4.362228%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.042 seconds (t=18)\",\"Available money on univ-energy grown by 4.477077%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.354 seconds (t=18)\",\"Available money on univ-energy grown by 4.554476%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.632 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.228 seconds (t=18)\",\"Available money on univ-energy grown by 3.706615%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 126.565 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.557 seconds (t=18)\",\"Available money on univ-energy grown by 3.683645%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.308 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.836 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.358 seconds (t=18)\",\"Available money on univ-energy grown by 3.963706%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.519 seconds (t=18)\",\"Available money on univ-energy grown by 4.030085%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.607 seconds (t=18)\",\"Available money on univ-energy grown by 4.151819%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.297 seconds (t=18)\",\"Available money on univ-energy grown by 4.159268%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.063 seconds (t=18)\",\"Available money on univ-energy grown by 4.400593%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.041 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1793488.4619133368,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6552,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"85.7.5.3\",\"70.2.0.7\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"78.5.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"78.5.0.3\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.5.0.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.5.0.3\",\"module\":{}}},\"server\":\"78.5.0.3\",\"logs\":[\"Executing grow() on server univ-energy in 120.781 seconds (t=18)\",\"Available money on univ-energy grown by 0.331358%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.754 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.465 seconds (t=18)\",\"Available money on univ-energy grown by 3.744534%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.406 seconds (t=18)\",\"Available money on univ-energy grown by 3.734280%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.754 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.281 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.744 seconds (t=18)\",\"Available money on univ-energy grown by 3.933443%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.515 seconds (t=18)\",\"Available money on univ-energy grown by 4.007328%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.347 seconds (t=18)\",\"Available money on univ-energy grown by 4.096310%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.882 seconds (t=18)\",\"Available money on univ-energy grown by 4.115216%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.356 seconds (t=18)\",\"Available money on univ-energy grown by 4.252603%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.757 seconds (t=18)\",\"Available money on univ-energy grown by 4.358128%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.154 seconds (t=18)\",\"Available money on univ-energy grown by 4.430024%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.452 seconds (t=18)\",\"Available money on univ-energy grown by 4.637070%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 101.823 seconds (t=18)\",\"Available money on univ-energy grown by 3.699124%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 126.801 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.557 seconds (t=18)\",\"Available money on univ-energy grown by 3.676246%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.544 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.358 seconds (t=18)\",\"Available money on univ-energy grown by 4.194132%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.196 seconds (t=18)\",\"Available money on univ-energy grown by 4.106468%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.499 seconds (t=18)\",\"Available money on univ-energy grown by 4.182279%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.495 seconds (t=18)\",\"Available money on univ-energy grown by 4.312460%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.198 seconds (t=18)\",\"Available money on univ-energy grown by 4.323988%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.902 seconds (t=18)\",\"Available money on univ-energy grown by 4.584195%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.897 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1803342.7941216517,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6588,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-538324.cct\",\"type\":\"Total Ways to Sum\",\"data\":70,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-447844.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":163263472,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":194,\"moneyAvailable\":66011380,\"moneyMax\":1650284500,\"hackDifficulty\":33,\"baseDifficulty\":33,\"minDifficulty\":11,\"serverGrowth\":30,\"serversOnNetwork\":[\"77.9.0.4\",\"52.2.7.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"55.0.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.0.9.6\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-531945-SpeakersfortheDead.cct\",\"type\":\"Total Ways to Sum\",\"data\":33,\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}}],\"dir\":0,\"requiredHackingSkill\":243,\"moneyAvailable\":56842306,\"moneyMax\":1421057650,\"hackDifficulty\":38,\"baseDifficulty\":38,\"minDifficulty\":13,\"serverGrowth\":32,\"serversOnNetwork\":[\"89.8.0.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"93.0.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.0.0.2\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.0.0.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.0.0.2\",\"module\":{}}},\"server\":\"93.0.0.2\",\"logs\":[\"Executing grow() on server univ-energy in 102.026 seconds (t=18)\",\"Available money on univ-energy grown by 3.828217%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 122.761 seconds (t=18)\",\"Available money on univ-energy grown by 3.729674%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 125.906 seconds (t=18)\",\"Available money on univ-energy grown by 3.719501%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 126.241 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 4.098724%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.826 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.744 seconds (t=18)\",\"Available money on univ-energy grown by 3.907146%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.310 seconds (t=18)\",\"Available money on univ-energy grown by 3.981633%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.096 seconds (t=18)\",\"Available money on univ-energy grown by 4.062572%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.796 seconds (t=18)\",\"Available money on univ-energy grown by 4.088604%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.092 seconds (t=18)\",\"Available money on univ-energy grown by 4.220859%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.565 seconds (t=18)\",\"Available money on univ-energy grown by 4.321839%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.035 seconds (t=18)\",\"Available money on univ-energy grown by 4.393088%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.306 seconds (t=18)\",\"Available money on univ-energy grown by 4.599352%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.631 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.878 seconds (t=18)\",\"Available money on univ-energy grown by 3.956716%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.758 seconds (t=18)\",\"Available money on univ-energy grown by 4.004098%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.367 seconds (t=18)\",\"Available money on univ-energy grown by 4.079012%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.271 seconds (t=18)\",\"Available money on univ-energy grown by 4.243004%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.941 seconds (t=18)\",\"Available money on univ-energy grown by 4.239642%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.027 seconds (t=18)\",\"Available money on univ-energy grown by 4.324526%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.902 seconds (t=18)\",\"Available money on univ-energy grown by 4.465292%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.572 seconds (t=18)\",\"Available money on univ-energy grown by 4.479384%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.250 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.318 seconds (t=18)\",\"Available money on univ-energy grown by 4.013572%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.050 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1803342.7941216517,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6588,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"21.6.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.6.7.9\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.6.7.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.6.7.9\",\"module\":{}}},\"server\":\"21.6.7.9\",\"logs\":[\"Executing grow() on server univ-energy in 108.802 seconds (t=36)\",\"Available money on univ-energy grown by 9.137766%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 105.861 seconds (t=36)\",\"Available money on univ-energy grown by 9.332002%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 103.755 seconds (t=36)\",\"Available money on univ-energy grown by 9.551683%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 101.512 seconds (t=36)\",\"Available money on univ-energy grown by 8.168524%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 117.737 seconds (t=36)\",\"Available money on univ-energy grown by 8.554696%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 112.656 seconds (t=36)\",\"Available money on univ-energy grown by 8.290188%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 116.056 seconds (t=36)\",\"Available money on univ-energy grown by 8.559958%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 112.578 seconds (t=36)\",\"Available money on univ-energy grown by 8.735672%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 110.405 seconds (t=36)\",\"Available money on univ-energy grown by 8.952022%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 107.887 seconds (t=36)\",\"Available money on univ-energy grown by 9.007647%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 107.256 seconds (t=36)\",\"Available money on univ-energy grown by 9.336384%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 103.645 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 101.016 seconds (t=36)\",\"Available money on univ-energy grown by 7.880768%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 121.753 seconds (t=36)\",\"Available money on univ-energy grown by 8.011445%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 119.822 seconds (t=36)\",\"Available money on univ-energy grown by 8.318436%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 115.623 seconds (t=36)\",\"Available money on univ-energy grown by 8.539996%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 112.758 seconds (t=36)\",\"Available money on univ-energy grown by 8.682260%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 111.004 seconds (t=36)\",\"Available money on univ-energy grown by 8.884015%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 108.589 seconds (t=36)\",\"Available money on univ-energy grown by 9.193907%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 105.120 seconds (t=36)\",\"Available money on univ-energy grown by 9.274168%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 104.260 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 102.123 seconds (t=36)\",\"Available money on univ-energy grown by 7.599282%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 125.961 seconds (t=36)\",\"Available money on univ-energy grown by 7.770306%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 123.314 seconds (t=36)\",\"Available money on univ-energy grown by 7.517577%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 127.242 seconds (t=36)\",\"Available money on univ-energy grown by 0.000000%. Gained 9,854.3322 hacking exp (t=36)\",\"Executing grow() on server univ-energy in 120.320 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":3586976.9238266735,\"threads\":36,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,13104,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-375691-Netburners.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[72,172,30,62,198,183,7,3,59,2,71,172,51,15,29,183,113,64,31],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571153-NWO.cct\",\"type\":\"Total Ways to Sum\",\"data\":19,\"reward\":{\"type\":2,\"name\":\"NWO\"}}}],\"dir\":0,\"requiredHackingSkill\":522,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"hackDifficulty\":50,\"baseDifficulty\":50,\"minDifficulty\":17,\"serverGrowth\":27,\"serversOnNetwork\":[\"53.4.1.2\",\"98.0.6.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"43.3.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.3.9.1\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.3.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.3.9.1\",\"module\":{}}},\"server\":\"43.3.9.1\",\"logs\":[\"Executing grow() on server univ-energy in 102.276 seconds (t=18)\",\"Available money on univ-energy grown by 3.812687%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.261 seconds (t=18)\",\"Available money on univ-energy grown by 3.698927%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 126.925 seconds (t=18)\",\"Available money on univ-energy grown by 3.674110%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.760 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.460 seconds (t=18)\",\"Available money on univ-energy grown by 4.199197%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.170 seconds (t=18)\",\"Available money on univ-energy grown by 4.073279%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.523 seconds (t=18)\",\"Available money on univ-energy grown by 4.201226%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 112.104 seconds (t=18)\",\"Available money on univ-energy grown by 4.294618%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.728 seconds (t=18)\",\"Available money on univ-energy grown by 4.395032%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.282 seconds (t=18)\",\"Available money on univ-energy grown by 4.416802%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.769 seconds (t=18)\",\"Available money on univ-energy grown by 4.574847%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 103.172 seconds (t=18)\",\"Available money on univ-energy grown by 3.788801%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 123.916 seconds (t=18)\",\"Available money on univ-energy grown by 3.769293%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 124.540 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.228 seconds (t=18)\",\"Available money on univ-energy grown by 4.742680%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.615 seconds (t=18)\",\"Available money on univ-energy grown by 4.159019%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 113.152 seconds (t=18)\",\"Available money on univ-energy grown by 4.227787%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.329 seconds (t=18)\",\"Available money on univ-energy grown by 4.319155%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.056 seconds (t=18)\",\"Available money on univ-energy grown by 4.471320%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 105.455 seconds (t=18)\",\"Available money on univ-energy grown by 4.509297%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.581 seconds (t=18)\",\"Available money on univ-energy grown by 4.605443%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.445 seconds (t=18)\",\"Available money on univ-energy grown by 0.437477%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.364 seconds (t=18)\",\"Available money on univ-energy grown by 3.987340%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.822 seconds (t=18)\",\"Available money on univ-energy grown by 3.999723%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.457 seconds (t=18)\",\"Available money on univ-energy grown by 4.216764%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.579 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1827978.624642439,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6678,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-939580.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[40,13,5],[42,4,2],[39,25,17],[39,8,17],[35,40,46],[48,29,1],[11,10,15],[34,2,21],[39,32,5]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1010,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"hackDifficulty\":22.434,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":51,\"serversOnNetwork\":[\"39.9.7.1\",\"26.3.0.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"4.5.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.5.2.9\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":734,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"hackDifficulty\":58,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":47,\"serversOnNetwork\":[\"3.4.1.3\",\"65.7.8.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.2.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.2.6.0\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.2.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.2.6.0\",\"module\":{}}},\"server\":\"59.2.6.0\",\"logs\":[\"Executing grow() on server univ-energy in 117.215 seconds (t=146)\",\"Available money on univ-energy grown by 39.374559%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 114.416 seconds (t=146)\",\"Available money on univ-energy grown by 40.274203%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 112.291 seconds (t=146)\",\"Available money on univ-energy grown by 41.245400%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 110.101 seconds (t=146)\",\"Available money on univ-energy grown by 42.723546%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 106.949 seconds (t=146)\",\"Available money on univ-energy grown by 43.186376%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 105.995 seconds (t=146)\",\"Available money on univ-energy grown by 44.999086%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 102.510 seconds (t=146)\",\"Available money on univ-energy grown by 25.011576%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 100.584 seconds (t=146)\",\"Available money on univ-energy grown by 37.165322%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 120.016 seconds (t=146)\",\"Available money on univ-energy grown by 38.035075%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 117.728 seconds (t=146)\",\"Available money on univ-energy grown by 38.285892%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 117.071 seconds (t=146)\",\"Available money on univ-energy grown by 39.648792%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 113.688 seconds (t=146)\",\"Available money on univ-energy grown by 40.752603%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 111.131 seconds (t=146)\",\"Available money on univ-energy grown by 41.561340%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 109.344 seconds (t=146)\",\"Available money on univ-energy grown by 43.793366%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 104.728 seconds (t=146)\",\"Available money on univ-energy grown by 45.281197%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 101.928 seconds (t=146)\",\"Available money on univ-energy grown by 9.072152%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 99.852 seconds (t=146)\",\"Available money on univ-energy grown by 37.409768%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 119.299 seconds (t=146)\",\"Available money on univ-energy grown by 38.211329%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 117.190 seconds (t=146)\",\"Available money on univ-energy grown by 4.167741%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 111.178 seconds (t=146)\",\"Available money on univ-energy grown by 39.918445%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 112.994 seconds (t=146)\",\"Available money on univ-energy grown by 40.860776%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 110.820 seconds (t=146)\",\"Available money on univ-energy grown by 42.289267%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 107.726 seconds (t=146)\",\"Available money on univ-energy grown by 42.459393%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 107.385 seconds (t=146)\",\"Available money on univ-energy grown by 45.541380%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 101.393 seconds (t=146)\",\"Available money on univ-energy grown by 20.491643%. Gained 39,964.7917 hacking exp (t=146)\",\"Executing grow() on server univ-energy in 121.535 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":14667078.566276198,\"threads\":146,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,53582,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":511,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"24.1.8.0\",\"63.6.7.2\",\"24.6.8.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"23.2.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.2.2.5\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.2.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.2.2.5\",\"module\":{}}},\"server\":\"23.2.2.5\",\"logs\":[\"Executing grow() on server univ-energy in 118.537 seconds (t=73)\",\"Available money on univ-energy grown by 17.754174%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 115.235 seconds (t=73)\",\"Available money on univ-energy grown by 18.255243%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 112.338 seconds (t=73)\",\"Available money on univ-energy grown by 18.629378%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 110.292 seconds (t=73)\",\"Available money on univ-energy grown by 19.066586%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 108.003 seconds (t=73)\",\"Available money on univ-energy grown by 19.704348%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 104.838 seconds (t=73)\",\"Available money on univ-energy grown by 19.877478%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 104.016 seconds (t=73)\",\"Available money on univ-energy grown by 20.660131%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 100.459 seconds (t=73)\",\"Available money on univ-energy grown by 16.634943%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 122.244 seconds (t=73)\",\"Available money on univ-energy grown by 16.590018%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 122.521 seconds (t=73)\",\"Available money on univ-energy grown by 16.926897%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 120.292 seconds (t=73)\",\"Available money on univ-energy grown by 16.962458%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 120.062 seconds (t=73)\",\"Available money on univ-energy grown by 17.537160%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 116.449 seconds (t=73)\",\"Available money on univ-energy grown by 17.925315%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 114.142 seconds (t=73)\",\"Available money on univ-energy grown by 18.237576%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 112.380 seconds (t=73)\",\"Available money on univ-energy grown by 19.093626%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 107.790 seconds (t=73)\",\"Available money on univ-energy grown by 19.655044%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 104.997 seconds (t=73)\",\"Available money on univ-energy grown by 20.077873%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 103.006 seconds (t=73)\",\"Available money on univ-energy grown by 20.605947%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 100.613 seconds (t=73)\",\"Available money on univ-energy grown by 17.043273%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 119.456 seconds (t=73)\",\"Available money on univ-energy grown by 17.953779%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 113.931 seconds (t=73)\",\"Available money on univ-energy grown by 17.366897%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 117.402 seconds (t=73)\",\"Available money on univ-energy grown by 17.686406%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 115.471 seconds (t=73)\",\"Available money on univ-energy grown by 18.258780%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 112.193 seconds (t=73)\",\"Available money on univ-energy grown by 18.315564%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 111.842 seconds (t=73)\",\"Available money on univ-energy grown by 19.466960%. Gained 19,982.3959 hacking exp (t=73)\",\"Executing grow() on server univ-energy in 105.859 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":7333539.283138099,\"threads\":73,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,26791,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":346,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"55.1.1.3\",\"3.4.1.3\",\"90.8.2.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"52.2.7.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.2.7.6\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"52.2.7.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"52.2.7.6\",\"module\":{}}},\"server\":\"52.2.7.6\",\"logs\":[\"Executing grow() on server univ-energy in 109.361 seconds (t=18)\",\"Available money on univ-energy grown by 4.435109%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 106.407 seconds (t=18)\",\"Available money on univ-energy grown by 4.518672%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.491 seconds (t=18)\",\"Available money on univ-energy grown by 4.626582%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.130 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 119.447 seconds (t=18)\",\"Available money on univ-energy grown by 4.107923%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.590 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.744 seconds (t=18)\",\"Available money on univ-energy grown by 3.915505%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 120.060 seconds (t=18)\",\"Available money on univ-energy grown by 3.990314%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 117.847 seconds (t=18)\",\"Available money on univ-energy grown by 4.071610%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 115.559 seconds (t=18)\",\"Available money on univ-energy grown by 4.097758%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.842 seconds (t=18)\",\"Available money on univ-energy grown by 4.232933%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 111.256 seconds (t=18)\",\"Available money on univ-energy grown by 4.334498%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 108.726 seconds (t=18)\",\"Available money on univ-energy grown by 4.403658%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.069 seconds (t=18)\",\"Available money on univ-energy grown by 4.610939%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 102.382 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 99.878 seconds (t=18)\",\"Available money on univ-energy grown by 3.981633%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 118.048 seconds (t=18)\",\"Available money on univ-energy grown by 4.046028%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 116.184 seconds (t=18)\",\"Available money on univ-energy grown by 4.126202%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 114.003 seconds (t=18)\",\"Available money on univ-energy grown by 4.264859%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 110.389 seconds (t=18)\",\"Available money on univ-energy grown by 4.290115%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 109.772 seconds (t=18)\",\"Available money on univ-energy grown by 4.377053%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 107.634 seconds (t=18)\",\"Available money on univ-energy grown by 4.517498%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.376 seconds (t=18)\",\"Available money on univ-energy grown by 4.532512%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 104.054 seconds (t=18)\",\"Available money on univ-energy grown by 3.667909%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 127.787 seconds (t=18)\",\"Available money on univ-energy grown by 0.000000%. Gained 4,927.1661 hacking exp (t=18)\",\"Executing grow() on server univ-energy in 121.535 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":1808269.9602258091,\"threads\":18,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,6606,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":216,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"78.5.0.3\",\"27.7.8.9\",\"70.9.3.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"39.9.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"39.9.7.1\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"39.9.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"39.9.7.1\",\"module\":{}}},\"server\":\"39.9.7.1\",\"logs\":[\"Executing grow() on server univ-energy in 108.328 seconds (t=9)\",\"Available money on univ-energy grown by 2.212620%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 105.388 seconds (t=9)\",\"Available money on univ-energy grown by 2.258172%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 103.281 seconds (t=9)\",\"Available money on univ-energy grown by 2.309620%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 101.025 seconds (t=9)\",\"Available money on univ-energy grown by 1.985683%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 117.191 seconds (t=9)\",\"Available money on univ-energy grown by 0.000000%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 111.348 seconds (t=9)\",\"Available money on univ-energy grown by 2.027126%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 114.800 seconds (t=9)\",\"Available money on univ-energy grown by 2.090250%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 111.394 seconds (t=9)\",\"Available money on univ-energy grown by 2.137012%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 108.991 seconds (t=9)\",\"Available money on univ-energy grown by 2.190733%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 106.355 seconds (t=9)\",\"Available money on univ-energy grown by 2.202808%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 105.783 seconds (t=9)\",\"Available money on univ-energy grown by 2.280087%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 102.245 seconds (t=9)\",\"Available money on univ-energy grown by 1.888203%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 123.061 seconds (t=9)\",\"Available money on univ-energy grown by 1.877397%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 123.745 seconds (t=9)\",\"Available money on univ-energy grown by 1.862513%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 124.692 seconds (t=9)\",\"Available money on univ-energy grown by 1.930451%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 120.388 seconds (t=9)\",\"Available money on univ-energy grown by 1.954211%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 118.948 seconds (t=9)\",\"Available money on univ-energy grown by 1.940686%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 119.739 seconds (t=9)\",\"Available money on univ-energy grown by 1.977327%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 117.557 seconds (t=9)\",\"Available money on univ-energy grown by 0.000000%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 111.178 seconds (t=9)\",\"Available money on univ-energy grown by 2.051162%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 113.375 seconds (t=9)\",\"Available money on univ-energy grown by 2.088618%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 111.378 seconds (t=9)\",\"Available money on univ-energy grown by 2.151824%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 108.153 seconds (t=9)\",\"Available money on univ-energy grown by 2.158771%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 107.825 seconds (t=9)\",\"Available money on univ-energy grown by 2.288190%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 101.807 seconds (t=9)\",\"Available money on univ-energy grown by 0.000000%. Gained 2,463.5831 hacking exp (t=9)\",\"Executing grow() on server univ-energy in 99.318 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":77368.60999962327,\"onlineMoneyMade\":0,\"onlineExpGained\":896744.2309566684,\"threads\":9,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,3276,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":506,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"63.6.7.2\",\"43.3.9.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"91.3.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.3.9.8\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.3.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.3.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"91.3.9.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"univ-energy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"91.3.9.8\",\"module\":{}}},\"server\":\"91.3.9.8\",\"logs\":[\"Attempting to hack univ-energy in 31.450 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $560,499,052.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 32.435 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $440,455,212.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 34.002 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $891,166,928.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 37.030 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,848,650,392.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 31.357 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $2,171,546,748.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 32.858 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $2,271,696,672.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 34.595 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $2,203,908,264.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 36.634 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,631,009,476.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 32.589 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $861,137,316.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 34.226 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,201,296,200.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 36.959 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $2,360,473,320.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 31.922 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $694,944,300.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 32.189 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $703,812,304.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 34.929 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,755,414,612.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 39.215 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $847,268,248.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 31.152 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $835,553,916.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 33.806 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $458,887,648.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 35.528 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,017,877,308.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 31.051 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $999,204,452.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 32.954 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $677,377,256.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 34.651 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $743,020,240.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 36.906 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,578,023,932.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 31.082 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,217,784,024.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 32.611 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $671,011,460.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 33.569 seconds (t=4)\",\"Script SUCCESSFULLY hacked univ-energy for $1,508,923,456.00 and 1,094.9258 exp (t=4)\",\"Attempting to hack univ-energy in 36.734 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":76732.20999962096,\"onlineMoneyMade\":1495261192524,\"onlineExpGained\":1325955.1449188835,\"threads\":4,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[1495261192524,4844,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-254803-BitRunners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[21,39,34],[15,22,40],[16,8,5]],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"dir\":0,\"requiredHackingSkill\":58,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"85.7.5.3\",\"89.8.0.7\",\"87.8.7.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"48.0.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.0.9.8\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"61.3.5.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.7.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.7.2.3\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-214210-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":21174507,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"73.7.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.7.3.0\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.0.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.0.2.9\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":98.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"59.0.2.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"59.0.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"59.0.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"59.0.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"59.0.2.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"ecorp\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"59.0.2.9\",\"module\":{}}},\"server\":\"59.0.2.9\",\"logs\":[\"Executing weaken() on server ecorp in 197.572 seconds (t=24)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41.610000000000056,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":24,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"28.0.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.0.0.6\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":94.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"28.0.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"28.0.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"28.0.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"28.0.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"28.0.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"megacorp\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"28.0.0.6\",\"module\":{}}},\"server\":\"28.0.0.6\",\"logs\":[\"Executing weaken() on server megacorp in 207.214 seconds (t=23)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.61000000000014,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":23,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"45.1.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.1.0.8\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":98.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"45.1.0.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"45.1.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"45.1.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"45.1.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"45.1.0.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"b-and-a\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"45.1.0.8\",\"module\":{}}},\"server\":\"45.1.0.8\",\"logs\":[\"Executing weaken() on server b-and-a in 135.422 seconds (t=24)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.40999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":24,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.4.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.4.0.3\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1582.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"20.4.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"20.4.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"20.4.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"20.4.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"20.4.0.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"nwo\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"20.4.0.3\",\"module\":{}}},\"server\":\"20.4.0.3\",\"logs\":[\"Executing grow() on server nwo in 155.835 seconds (t=386)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.61000000000014,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":386,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.8.4.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.8.4.2\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":98.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.8.4.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"76.8.4.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.8.4.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.8.4.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"76.8.4.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"clarkinc\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.8.4.2\",\"module\":{}}},\"server\":\"76.8.4.2\",\"logs\":[\"Executing weaken() on server clarkinc in 116.474 seconds (t=24)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":35.60999999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":24,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"39.5.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"39.5.8.9\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":815.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"39.5.8.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"39.5.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"39.5.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"39.5.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"39.5.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"4sigma\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"39.5.8.9\",\"module\":{}}},\"server\":\"39.5.8.9\",\"logs\":[\"Executing grow() on server 4sigma in 94.639 seconds (t=199)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.61000000000014,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":199,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.4.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.4.1.3\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":109.35,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"4.4.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"4.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"4.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"4.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"4.4.1.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"blade\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"4.4.1.3\",\"module\":{}}},\"server\":\"4.4.1.3\",\"logs\":[\"Attempting to hack blade in 44.631 seconds (t=27)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.40999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":27,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"85.3.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.3.8.7\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1197.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"85.3.8.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"85.3.8.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"85.3.8.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"85.3.8.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"85.3.8.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"kuai-gong\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"85.3.8.7\",\"module\":{}}},\"server\":\"85.3.8.7\",\"logs\":[\"Executing grow() on server kuai-gong in 151.661 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":35.60999999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":292,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.2.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.2.5.6\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":90.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"67.2.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"67.2.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.2.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.2.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"67.2.5.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"omnitek\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.2.5.6\",\"module\":{}}},\"server\":\"67.2.5.6\",\"logs\":[\"Executing weaken() on server omnitek in 160.887 seconds (t=22)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":155.6099999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":22,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.3.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.3.8.5\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":114.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"50.3.8.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"50.3.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"50.3.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"50.3.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"50.3.8.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"alpha-ent\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"50.3.8.5\",\"module\":{}}},\"server\":\"50.3.8.5\",\"logs\":[\"Executing weaken() on server alpha-ent in 56.354 seconds (t=28)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.409999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":28,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"80.6.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.6.0.2\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1123.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"80.6.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"80.6.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"80.6.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"80.6.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"80.6.0.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"global-pharm\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"80.6.0.2\",\"module\":{}}},\"server\":\"80.6.0.2\",\"logs\":[\"Executing grow() on server global-pharm in 96.637 seconds (t=274)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.60999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":274,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.8.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.8.5.2\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":102.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"12.8.5.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"12.8.5.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"12.8.5.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"12.8.5.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"12.8.5.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zeus-med\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"12.8.5.2\",\"module\":{}}},\"server\":\"12.8.5.2\",\"logs\":[\"Executing weaken() on server zeus-med in 115.175 seconds (t=25)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":53.61000000000023,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":25,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.4.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.4.6.1\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":86.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"21.4.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"21.4.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"21.4.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"21.4.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"21.4.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zb-def\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"21.4.6.1\",\"module\":{}}},\"server\":\"21.4.6.1\",\"logs\":[\"Executing weaken() on server zb-def in 89.871 seconds (t=21)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":35.60999999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":21,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.9.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.9.3.8\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":127.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"67.9.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"67.9.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.9.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.9.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"67.9.3.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"deltaone\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.9.3.8\",\"module\":{}}},\"server\":\"67.9.3.8\",\"logs\":[\"Executing weaken() on server deltaone in 129.742 seconds (t=31)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":119.61000000000116,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":31,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"18.1.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.1.2.1\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1074.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"18.1.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"18.1.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"18.1.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"18.1.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"18.1.2.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"rho-construction\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"18.1.2.1\",\"module\":{}}},\"server\":\"18.1.2.1\",\"logs\":[\"Executing grow() on server rho-construction in 36.640 seconds (t=262)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.409999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":262,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.4.2.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.4.2.7\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1168.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"61.4.2.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"61.4.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"61.4.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"61.4.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"61.4.2.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"nova-med\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"61.4.2.7\",\"module\":{}}},\"server\":\"61.4.2.7\",\"logs\":[\"Executing grow() on server nova-med in 86.178 seconds (t=285)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":53.61000000000023,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":285,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"55.7.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.7.9.1\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":98.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"55.7.9.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"55.7.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"55.7.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"55.7.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"55.7.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"unitalife\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"55.7.9.1\",\"module\":{}}},\"server\":\"55.7.9.1\",\"logs\":[\"Executing weaken() on server unitalife in 101.517 seconds (t=24)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.60999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":24,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.5.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.5.3.4\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":90.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.5.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"33.5.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"33.5.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"33.5.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"33.5.3.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zb-institute\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"33.5.3.4\",\"module\":{}}},\"server\":\"33.5.3.4\",\"logs\":[\"Executing weaken() on server zb-institute in 90.571 seconds (t=22)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.60999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":22,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"64.7.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.7.9.7\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1180.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"64.7.9.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"64.7.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"64.7.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"64.7.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"64.7.9.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"fulcrumtech\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"64.7.9.7\",\"module\":{}}},\"server\":\"64.7.9.7\",\"logs\":[\"Executing grow() on server fulcrumtech in 130.122 seconds (t=288)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":53.61000000000023,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":288,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"57.8.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.8.0.1\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":135.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.8.0.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"57.8.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"57.8.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"57.8.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"57.8.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"galactic-cyber\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"57.8.0.1\",\"module\":{}}},\"server\":\"57.8.0.1\",\"logs\":[\"Executing weaken() on server galactic-cyber in 95.809 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.61000000000014,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"85.4.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.4.7.4\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":97.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"85.4.7.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"85.4.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"85.4.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"85.4.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"85.4.7.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"aerocorp\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"85.4.7.4\",\"module\":{}}},\"server\":\"85.4.7.4\",\"logs\":[\"Attempting to hack aerocorp in 30.100 seconds (t=24)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.40999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":24,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.1.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.1.2.5\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1004.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"5.1.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"5.1.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"5.1.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"5.1.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"5.1.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"titan-labs\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"5.1.2.5\",\"module\":{}}},\"server\":\"5.1.2.5\",\"logs\":[\"Executing grow() on server titan-labs in 77.073 seconds (t=245)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":35.60999999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":245,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.9.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.9.3.3\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":118.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.9.3.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"76.9.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.9.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.9.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"76.9.3.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"powerhouse-fitness\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.9.3.3\",\"module\":{}}},\"server\":\"76.9.3.3\",\"logs\":[\"Executing weaken() on server powerhouse-fitness in 115.123 seconds (t=29)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":53.61000000000023,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":29,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"6.4.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.4.0.5\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":161.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"6.4.0.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"6.4.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"6.4.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"6.4.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"6.4.0.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"the-hub\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"6.4.0.5\",\"module\":{}}},\"server\":\"6.4.0.5\",\"logs\":[\"[INF] bot23/the-hub: weaken by 1.8999999999999986\",\"[INF] bot23/the-hub: requires 38 threads for 23 seconds\",\"[INF] bot23/the-hub: using 155.79999999999998GB of 1048570.3GB\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.409999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"the-hub\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"6.4.0.5\",\"module\":{}}},\"server\":\"6.4.0.5\",\"logs\":[\"Executing weaken() on server the-hub in 23.910 seconds (t=38)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.410000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":38,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.7.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.7.0.6\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1223.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.7.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"72.7.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"72.7.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"72.7.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"72.7.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"comptek\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"72.7.0.6\",\"module\":{}}},\"server\":\"72.7.0.6\",\"logs\":[\"Executing grow() on server comptek in 25.198 seconds (t=297)\",\"Available money on comptek grown by 105.633633%. Gained 51,484.3200 hacking exp (t=297)\",\"Running script: ms-control.js on bot24 with 1 threads and args: [comptek]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.60999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":51484.32000271427,\"threads\":297,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,297,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"comptek\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"72.7.0.6\",\"module\":{}}},\"server\":\"72.7.0.6\",\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.210000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"64.2.7.5\":[0,0,0,0],\"26.3.0.5\":[0,0,0,0],\"17.3.5.6\":[0,0,0,0],\"30.3.9.8\":[0,0,0,0],\"10.9.8.4\":[0,0,0,0],\"61.3.5.7\":[0,0,0,0],\"80.5.0.1\":[0,0,0,0],\"64.8.8.5\":[0,0,0,0],\"54.7.6.2\":[0,0,0,0],\"4.4.3.6\":[0,0,0,0],\"63.2.6.2\":[0,0,0,0],\"2.6.7.0\":[0,0,0,0],\"4.6.5.2\":[0,0,0,0],\"85.5.8.4\":[0,0,0,0],\"63.6.7.2\":[0,0,0,0],\"24.6.8.6\":[0,0,0,0],\"82.9.2.1\":[0,0,0,0],\"88.6.0.9\":[0,0,0,0],\"46.0.1.8\":[0,0,0,0],\"15.2.3.6\":[0,0,0,0],\"24.1.8.0\":[0,0,0,0],\"59.4.8.0\":[0,0,0,0],\"98.0.6.9\":[0,0,0,0],\"65.7.8.8\":[0,0,0,0],\"11.0.3.5\":[0,0,0,0],\"74.6.5.8\":[0,0,0,0],\"62.6.3.0\":[0,0,0,0],\"81.8.9.0\":[0,0,0,0],\"57.0.0.8\":[0,0,0,0],\"97.2.2.9\":[0,0,0,0],\"97.9.6.1\":[0,0,0,0],\"70.7.9.9\":[0,0,0,0],\"3.4.1.3\":[0,0,0,0],\"90.8.2.4\":[0,0,0,0],\"21.5.9.3\":[0,0,0,0],\"68.0.6.6\":[0,0,0,0],\"77.7.7.5\":[0,0,0,0],\"76.0.0.4\":[0,0,0,0],\"53.4.1.2\":[0,0,0,0],\"27.7.8.9\":[0,0,0,0],\"70.9.3.7\":[0,0,0,0],\"81.2.6.6\":[0,0,0,0],\"21.4.0.1\":[0,0,0,0],\"45.9.7.1\":[0,0,0,0],\"55.1.1.3\":[0,0,0,0],\"85.5.1.6\":[0,0,0,0],\"85.7.5.3\":[0,0,0,0],\"11.7.7.7\":[0,0,0,0],\"77.9.0.4\":[0,0,0,0],\"58.5.4.9\":[0,0,0,0],\"70.2.0.7\":[0,0,0,0],\"89.8.0.7\":[0,0,0,0],\"62.8.4.4\":[0,0,0,0],\"83.1.4.1\":[0,0,0,0],\"87.8.7.8\":[0,0,0,0],\"74.9.5.8\":[0,0,0,0],\"78.5.0.3\":[0,0,0,0],\"55.0.9.6\":[0,0,0,0],\"93.0.0.2\":[0,0,0,0],\"21.6.7.9\":[0,0,0,0],\"43.3.9.1\":[0,0,0,0],\"4.5.2.9\":[0,0,0,0],\"59.2.6.0\":[0,0,0,0],\"23.2.2.5\":[0,0,0,0],\"52.2.7.6\":[0,0,0,0],\"39.9.7.1\":[0,0,0,0],\"91.3.9.8\":[0,0,0,0],\"48.0.9.8\":[0,0,0,0],\"12.7.2.3\":[0,0,0,0],\"73.7.3.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":216175.1126545217,\"favor\":126,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1275669.0637158903,\"favor\":93,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":253264.68844687505,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":224402.97151258623,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":186,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":111,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":101,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":1119589.9514553219,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":196,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":1987614.5757638556,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":2329932.7036446873,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":246074.36480044416,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":662581.5442021426,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":161,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":230,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1836.9049473657985,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":109,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1852.791835981652,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":110,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":1852.791835981652,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":4,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":51,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":17,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":26,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":28,\"isBanned\":true,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1809.1028922880553,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":60,\"isBanned\":true,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":1824.9897809039087,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":282945.28231569374,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":504945.7814547442,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":149,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":2013.7044481537798,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":71,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":1815.0604755190002,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":39,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1821.018058749945,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":38,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1850.8059749046704,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":54,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":1817.046336595982,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":27,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1852.791835981652,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"63.2.6.2\",\"BitRunners Server\":\"59.2.6.0\",\"The Black Hand Server\":\"23.2.2.5\",\"NiteSec Server\":\"52.2.7.6\",\"The Dark Army Server\":\"39.9.7.1\",\"CyberSec Server\":\"91.3.9.8\",\"Daedalus Server\":\"48.0.9.8\",\"w0r1d_d43m0n\":\"12.7.2.3\",\"Darkweb Server\":\"73.7.3.0\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":215203.4956468618,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":24.945070009033003,\"cap\":142669841,\"totalShares\":94800000,\"maxShares\":19000000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":362921.01357268053,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":true,\"otlkMag\":27.55250261652844,\"cap\":657697548,\"totalShares\":71700000,\"maxShares\":14300000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":2075754.0851812542,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":16.428125696612135,\"cap\":301243502,\"totalShares\":69400000,\"maxShares\":13900000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":148190.12720700869,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":10.354868008539226,\"cap\":480897911,\"totalShares\":61800000,\"maxShares\":12400000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":37154.8714270837,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":5.8262680657316785,\"cap\":258039055,\"totalShares\":51000000,\"maxShares\":10200000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":1732763.2040287456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":true,\"otlkMag\":10.001421425161096,\"cap\":179470706,\"totalShares\":32500000,\"maxShares\":6500000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":9509640.59608241,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":18.44271879953005,\"cap\":181049706,\"totalShares\":72800000,\"maxShares\":14600000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":230442.20452728053,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":true,\"otlkMag\":5.635863365665573,\"cap\":548751152,\"totalShares\":68100000,\"maxShares\":13600000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":59332.581398058,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":4.648588347047174,\"cap\":351631180,\"totalShares\":58400000,\"maxShares\":11700000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":294010.95650793356,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.377287648560259,\"cap\":218622607,\"totalShares\":53100000,\"maxShares\":10600000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":718374.5605362123,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":11.073662516281221,\"cap\":46542241,\"totalShares\":54100000,\"maxShares\":10800000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":22659.102259922976,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":4.138192675366342,\"cap\":103420657,\"totalShares\":115400000,\"maxShares\":23100000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":141139.17602862004,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":6.056388587525681,\"cap\":237410580,\"totalShares\":39400000,\"maxShares\":7900000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":156797.4235918093,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":14.936021036429224,\"cap\":384395298,\"totalShares\":40200000,\"maxShares\":8000000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":18141.2148445537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":2.7617387504209896,\"cap\":188773177,\"totalShares\":38700000,\"maxShares\":7700000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":35826.49428604162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.610722422340558,\"cap\":203272141,\"totalShares\":68300000,\"maxShares\":13700000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":44836.55462788589,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":4.81101399315798,\"cap\":253302119,\"totalShares\":43600000,\"maxShares\":8700000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":67121.26333829816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":10.710967888014615,\"cap\":23592731,\"totalShares\":32200000,\"maxShares\":6400000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":34859.92790363958,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":2.75616735964342,\"cap\":59944951,\"totalShares\":27500000,\"maxShares\":5500000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":12338.454339647184,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.54,\"b\":true,\"otlkMag\":0.2968347655067038,\"cap\":85474764,\"totalShares\":91500000,\"maxShares\":18300000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":313380.1679948966,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":true,\"otlkMag\":4.719894430265564,\"cap\":36756959,\"totalShares\":41700000,\"maxShares\":8300000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2498.260746697314,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":0.8790275334820218,\"cap\":4291836,\"totalShares\":82200000,\"maxShares\":16400000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":46778380.01176902,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.95,\"b\":true,\"otlkMag\":26.087506239457607,\"cap\":69997449,\"totalShares\":41700000,\"maxShares\":8300000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":9331.8749239971,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":false,\"otlkMag\":1.5397852056812338,\"cap\":18889169,\"totalShares\":29000000,\"maxShares\":5800000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":16240.927310128654,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":4.2320224806953135,\"cap\":68240754,\"totalShares\":50000000,\"maxShares\":10000000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1796372.3129383402,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.16,\"b\":true,\"otlkMag\":0.15485765626342227,\"cap\":36045841,\"totalShares\":31100000,\"maxShares\":6200000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":7620.89802990548,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.99,\"b\":false,\"otlkMag\":1.3546091850800672,\"cap\":45629532,\"totalShares\":31900000,\"maxShares\":6400000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":722.1913584145581,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":0.2976070649128731,\"cap\":41966342,\"totalShares\":23500000,\"maxShares\":4700000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":10376.933455923046,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.85,\"b\":false,\"otlkMag\":1.449217179254884,\"cap\":35790300,\"totalShares\":17000000,\"maxShares\":3400000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":9767983.940499863,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.96,\"b\":true,\"otlkMag\":51.690460169342174,\"cap\":26168937,\"totalShares\":28900000,\"maxShares\":5800000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":208084.19695470468,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.45,\"b\":true,\"otlkMag\":6.870011654294479,\"cap\":2190906,\"totalShares\":352100000,\"maxShares\":70400000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":31502.257924122943,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":4.10288182598875,\"cap\":340665444,\"totalShares\":23500000,\"maxShares\":4700000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":181702.9389443177,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":11.303386147176921,\"cap\":256348901,\"totalShares\":29200000,\"maxShares\":5800000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":108899,\"lastUpdate\":1549811016582}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.43.0\"","AllGangsSave":"","CorporationResearchTreesSave":""}}