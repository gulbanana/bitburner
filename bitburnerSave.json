{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":1007,\"hp\":32,\"max_hp\":32,\"strength\":310,\"defense\":227,\"dexterity\":312,\"agility\":202,\"charisma\":139,\"intelligence\":0,\"hacking_chance_mult\":1.4639113152279,\"hacking_speed_mult\":1.3864459442373307,\"hacking_money_mult\":1.9087279053424997,\"hacking_grow_mult\":1.2071006516,\"hacking_exp\":1793137479.3127217,\"strength_exp\":11537.053871757493,\"defense_exp\":11416.116871675047,\"dexterity_exp\":11335.979312315787,\"agility_exp\":22995.83462957878,\"charisma_exp\":6531.790577638755,\"intelligence_exp\":0,\"hacking_mult\":2.091037653779372,\"strength_mult\":3.0794738044643912,\"defense_mult\":2.265833568502228,\"dexterity_mult\":3.119993196628397,\"agility_mult\":1.6600754314684385,\"charisma_mult\":1.6730415031176,\"hacking_exp_mult\":2.8394999811037165,\"strength_exp_mult\":1.6796805567013997,\"defense_exp_mult\":1.6796805567013997,\"dexterity_exp_mult\":1.9316326402066095,\"agility_exp_mult\":1.6796805567013997,\"charisma_exp_mult\":1.6796805567013997,\"company_rep_mult\":2.0156166680416803,\"faction_rep_mult\":1.526982324274,\"money\":\"146685435771420.63314\",\"total_money\":\"270424706159096939.94\",\"lifetime_money\":\"270424706159096939.94\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"OmniTek Incorporated\":\"Software Engineering Intern\",\"MegaCorp\":\"Software Engineering Intern\",\"Bachman & Associates\":\"Software Engineering Intern\"},\"companyName\":\"Bachman & Associates\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"70.8.6.8\",\"34.6.8.9\",\"49.3.0.6\",\"44.4.1.3\",\"50.8.6.0\",\"55.3.1.0\",\"3.4.0.9\",\"46.7.5.8\",\"24.2.1.6\",\"47.2.7.0\",\"33.9.6.4\",\"79.3.7.6\",\"72.0.8.1\",\"86.8.3.7\",\"26.3.5.6\",\"60.4.8.2\",\"88.2.4.8\",\"76.5.7.5\",\"76.0.7.0\",\"53.3.3.3\",\"68.9.2.5\",\"68.6.4.6\",\"33.2.4.6\",\"15.5.6.2\",\"21.7.6.2\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":230542503.95959327,\"onlineTimeSeconds\":163676.00000060975,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":230339345.71329746,\"onlineTimeSeconds\":163676.00000060975,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":230262499.20548964,\"onlineTimeSeconds\":163676.00000060975,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":230549251.0566779,\"onlineTimeSeconds\":163676.00000060975,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":230088528.04873988,\"onlineTimeSeconds\":162656.00000055038,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":229937984.3610121,\"onlineTimeSeconds\":162536.0000005434,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":229750377.73267356,\"onlineTimeSeconds\":162445.80000053815,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":230118316.0844172,\"onlineTimeSeconds\":162356.00000053292,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":230029168.27039102,\"onlineTimeSeconds\":162085.8000005172,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":229484783.90345463,\"onlineTimeSeconds\":161815.80000050148,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":229283232.95145863,\"onlineTimeSeconds\":160225.80000040893,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":229581050.72234818,\"onlineTimeSeconds\":159655.80000037572,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":228986131.36127347,\"onlineTimeSeconds\":158695.80000031984,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":228780182.0637369,\"onlineTimeSeconds\":158275.8000002954,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":228036822.4625674,\"onlineTimeSeconds\":157015.60000022204,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":227089106.16387516,\"onlineTimeSeconds\":155965.60000016092,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":225912360.76336777,\"onlineTimeSeconds\":154975.6000001033,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":219346605.31085432,\"onlineTimeSeconds\":150055.3999998168,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":216247797.69861153,\"onlineTimeSeconds\":146755.1999996246,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":204372118.49236932,\"onlineTimeSeconds\":137724.99999909897,\"moneyGainRatePerSecond\":1489.1374105222249}}],\"totalHacknetNodeProduction\":29782.748210444486,\"factions\":[\"Netburners\",\"Netburners\",\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"Volhaven\",\"BitRunners\",\"Tian Di Hui\",\"Slum Snakes\",\"Tetrads\",\"The Syndicate\",\"Bachman & Associates\",\"MegaCorp\",\"OmniTek Incorporated\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":33,\"karma\":-99,\"crime_money_mult\":2.0747042449375,\"crime_success_mult\":1.2071006516,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":750,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3278107167600002,\"hacknet_node_money_mult\":3.0444210090212875,\"hacknet_node_purchase_cost_mult\":0.6172789960259999,\"hacknet_node_ram_cost_mult\":0.8069006484,\"hacknet_node_core_cost_mult\":0.8069006484,\"hacknet_node_level_cost_mult\":0.68586555114,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1550597459584,\"totalPlaytime\":1727735600,\"playtimeSinceLastAug\":163859200,\"playtimeSinceLastBitnode\":720834000,\"scriptProdSinceLastAug\":575841929823318,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":26260.05,\"cpuCores\":5,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport { programs } from './lib-world.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let loop = !ns.args.includes('noloop');\\n    let debug = ns.args.includes('debug');\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\n\\n    do {\\n        await run(ns, log);\\n        await ns.sleep(30000);\\n    } while (loop)\\n}\\n\\n/**\\n * @param {IGame} ns\\n * @param {Logger} log\\n */\\nasync function run(ns, log) {\\n    let purchased = true;\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\n    for (let program of programs()) {\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\n            cash = cash - program.price;\\n        }\\n    }\\n\\n    log.debug('loading costs');\\n    let numNodes = ns.hacknet.numNodes();\\n    let maxProduction = 0;\\n    for (let i = 0; i < numNodes; i++) {\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\n    }\\n\\n    let costCap = (maxProduction * 60 * 60 * 24) || Infinity;\\n    /**\\n     * @param {string} name\\n     * @param {number} uncappedCost\\n     */\\n    function getCappedCost(name, uncappedCost) {\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\n            return Infinity;\\n        } else {\\n            return uncappedCost;\\n        }\\n    }\\n\\n    let costs = [];\\n    for (let i = 0; i < numNodes; i++) {\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\n    }\\n\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\n\\n    log.debug('begin purchase run');\\n    while (purchased) {\\n        purchased = false;\\n\\n        let minCost = Math.min.apply(null, costs);\\n        let minIdx = costs.indexOf(minCost);\\n        \\n        if (buyNodeCost < minCost) {\\n            if (buyNodeCost <= cash) {\\n                let newIdx = numNodes;\\n                \\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\n                ns.hacknet.purchaseNode();\\n                cash = cash - buyNodeCost;\\n                log.info(`remaining budget: ${format.money(cash)}`);\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\n                \\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\n                \\n                numNodes = numNodes + 1;\\n                purchased = true;\\n            }\\n        } else if (minCost <= cash) {\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\n            let itemIdx = minIdx - (nodeIdx * 3);\\n            \\n            let cost = minCost;\\n            let count = 1;\\n            \\n            let getF;\\n            let buyF;\\n            let n;\\n            if (itemIdx == 0) {\\n                n = 'level'\\n                getF = ns.hacknet.getLevelUpgradeCost;\\n                buyF = ns.hacknet.upgradeLevel;\\n            } else if (itemIdx == 1) {\\n                n = 'ram';\\n                getF = ns.hacknet.getRamUpgradeCost;\\n                buyF = ns.hacknet.upgradeRam;\\n            } else if (itemIdx == 2) {\\n                n = 'core';\\n                getF = ns.hacknet.getCoreUpgradeCost;\\n                buyF = ns.hacknet.upgradeCore;\\n            }\\n\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\n                count = count + 1;\\n                cost = cost + getF(nodeIdx, count);\\n            }\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\n            buyF(nodeIdx, count);\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\n            \\n            if (count == 1) {\\n                cash = cash - cost;               \\n            } else {\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\n            }\\n            log.info(`remaining budget: ${format.money(cash)}`);\\n            \\n            purchased = true;\\n        }\\n    }\\n\\n    log.debug('purchase run complete');\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number' || !Number.isNaN(parseInt(ns.args[0]));\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? parseInt(ns.args[0]) : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    let maxPurchaseRam = ns.getPurchasedServerMaxRam();\\r\\n    for (let power = 0; Math.pow(2, power) <= maxPurchaseRam; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (ram > minRam || existingServers.length < limit) {\\r\\n        let processes = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                let ps = ns.ps(existingServers[i]);\\r\\n                if (ps.length > 0) {\\r\\n                    processes.push(existingServers[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processes.length > 0) {\\r\\n            if (dryRun) {\\r\\n                log.info('scripts running on existing servers, continuing dry run');    \\r\\n            } else {\\r\\n                log.info('scripts running on existing servers, exit');\\r\\n                ns.exit();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.2,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.script\",\"code\":\"import * as servers from 'lib-servers.js';\\n\\ntprint(servers.map(ns));\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as world from './lib-world.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let log = new Logger(ns, {});\\n    let host = ns.args[0]\\n\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\n\\n    if (ns.args.length > 1) {\\n        let target = ns.args[1];\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\n        worker.enrol(ns);\\n        await ns.exec('ms-control.js', host, 1, target);\\n    }\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of world.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    let top = ns.ps(ns.getHostname()).filter(p => p.filename == 'dh-control.js');\\r\\n    if (top.length > 0) {\\r\\n        let excludedTarget = top[0].args[0];\\r\\n        log.info(`${excludedTarget.padEnd(20)} ignored - DH victim`);\\r\\n        targets.splice(targets.findIndex(t => t.name == excludedTarget), 1);\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----')\\r\\n        let bots = ns.getPurchasedServers()\\r\\n            .filter(b => ns.ps(b).length == 0) //ignore busy\\r\\n            .filter(b => ns.getServerRam(b)[0] >= 16384); // ignore too small\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of world.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            log.info(`run ms-setup.js ${bots[i]} ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let worker of world.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----');\\r\\n        log.info(`run dh-control.js ${targets[0].name}`)\\r\\n        await ns.exec('dh-control.js', ns.getHostname(), 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":8.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n    for (let stock of market.getAll(ns)) {\\r\\n        lastAssets = lastAssets + stock.position.shares * stock.price;\\r\\n    }\\r\\n\\r\\n    let assetWindow = new SlidingWindow(6);\\r\\n    let timeWindow = new SlidingWindow(6);\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            assets = 0;\\r\\n            for (let stock of market.getAll(ns)) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            assetWindow.reset();\\r\\n            timeWindow.reset();\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n\\r\\n            assetWindow.push(assetChange);\\r\\n            timeWindow.push(timeChange);\\r\\n\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, lastAssets + assetWindow.average())}, ${format.money(assetWindow.average()/timeWindow.average())}/sec`);\\r\\n        }\\r\\n\\r\\n        lastAssets = assets;\\r\\n        lastTime = time;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(5000);\\r\\n        tick();\\r\\n    }\\r\\n} \\r\\n\\r\\nclass SlidingWindow {\\r\\n    /** @param {number} size */\\r\\n    constructor(size) {\\r\\n        this.size = size;\\r\\n        /** @type {number[]} */\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    /** @param {number} value */\\r\\n    push(value) {\\r\\n        if (this.values.length < this.size) {\\r\\n            this.values.push(value);\\r\\n        } else {\\r\\n            for (let i = 0; i < this.size-1; i++) {\\r\\n                this.values[i] = this.values[i+1];\\r\\n            }\\r\\n            this.values[this.size-1] = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    average() {\\r\\n        let sum = this.values.reduce((a, b) => a + b, 0);\\r\\n        return sum / this.values.length;\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = path + ' -> ' + p.name;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport { TICK_LENGTH } from './lib-life-L0.js'; // 7.80GB total\\n//import { LifeL1 as Life } from './lib-life-L1.js'; // 14.80GB total\\n//import { LifeL2 as Life } from './lib-life-L2.js'; // 28.30GB total\\nimport { LifeL3 as Life } from './lib-life-L3.js'; // 43.30GB total\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let debug = ns.args.includes('debug');\\n    let log = new Logger(ns, { showDebug: debug });\\n    let life = new Life(ns, log);\\n\\n    while (true) {\\n        await life.tick();\\n        await ns.sleep(TICK_LENGTH * 1000);\\n    }\\n}\",\"ramUsage\":48.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    console.log(ns);\\n    \\n    let access = false;\\n    try\\n    {\\n        let symbols = ns.getStockSymbols();\\n    }\\n    catch (error) { }\\n    \\n    ns.getStockVolatility('');\\n}\",\"ramUsage\":6.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let log = new Logger(ns, {});\\n\\n    let facsByRep = FactionWithAugs.getAllWithAugs(ns)\\n        .sort((a, b) => b.reputation - a.reputation);\\n\\n    let facsByName = {};\\n    for (let f of facsByRep) {\\n        facsByName[f.name] = f;\\n    }\\n\\n    let augsByPrice = facsByRep\\n        .map(f => f.augmentations)\\n        .reduce((a, b) => a.concat(b), [])\\n        .filter(a => !a.owned)\\n        .sort((a, b) => b.price - a.price);\\n\\n    ns.tprint('----- LOCKED -----');\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\n    for (let aug of groupAugs(locked)) {\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\n    }\\n\\n    ns.tprint('----- UNLOCKED -----');\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\n    for (let aug of groupAugs(unlocked)) {\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\n    }\\n}\\n\\n/** @param {Augmentation[]} augs */\\nfunction groupAugs(augs) {\\n    /** @type {{name: string, factions: string[], price: number}[]} */\\n    let augsWithFacs = [];\\n    for (let a of augs) {\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\n            augsWithFacs[a.name] = {\\n                factions: [],\\n                name: a.name,\\n                price: a.price\\n            };\\n            augsWithFacs.push(augsWithFacs[a.name]);\\n        } \\n\\n        augsWithFacs[a.name].factions.push(a.faction);\\n    }\\n    return augsWithFacs;\\n}\",\"ramUsage\":47.8,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport let TICK_LENGTH =  20; // seconds\\r\\nlet STOCK_MARKET_MIN =        100000000;\\r\\nlet HACKNET_BUYS_MAX =      10000000000;\\r\\nlet PURCHASED_SERVERS_MIN = 22528000000;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.lastBots = this.ns.getPurchasedServers().length;\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n        this.beganFarm = false;\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n        log.debug('market access: ' + this.marketAccess);\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / TICK_LENGTH;\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickJoinFactions();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.cash < HACKNET_BUYS_MAX) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else if (this.cash >= HACKNET_BUYS_MAX) {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // once able to buy good enough servers for MS, switch to buying those\\r\\n        let reqRAM = 16384;\\r\\n        let bots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= reqRAM).length;\\r\\n        let botCost = this.ns.getPurchasedServerCost(reqRAM);\\r\\n        let botLimit = this.ns.getPurchasedServerLimit();\\r\\n        if (this.cash >= botCost && bots < botLimit) {\\r\\n            this.log.info(`${bots} ${format.ram(reqRAM)} servers owned; ordering a new one for ${format.money(botCost)}`);\\r\\n            await this.ns.exec('buy-servers.js', this.ns.getHostname(), 1, [bots+1])\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (bots == 0) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                await this.dhStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) { // based on an msRunning check, but only once at init startup\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.skill / this.lastEval > 1.1 || bots > this.lastBots) {\\r\\n                await this.msStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill, unless farming it via bots\\r\\n        if (bots == 0) {\\r\\n            this.beganFarm = true;\\r\\n            this.ensureRunning('farm-worker.js', true);\\r\\n        } else if (this.beganFarm) {\\r\\n            this.ensureKilled('farm-worker.js');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {boolean} [maxThreads=false]\\r\\n     */\\r\\n    async ensureRunning(script, maxThreads) {\\r\\n        let threads = 1;\\r\\n        if (maxThreads) {\\r\\n            threads = this.getMaxThreads(script);\\r\\n            if (threads <= 0) return;\\r\\n        }\\r\\n\\r\\n        if (!this.ns.scriptRunning(script, 'home')) {\\r\\n            let threads = 1;\\r\\n            if (maxThreads) {\\r\\n                threads = this.getMaxThreads(script);\\r\\n            }\\r\\n    \\r\\n            await this.ns.exec(script, 'home', threads);\\r\\n            this.log.info(`started ${script} (${threads} threads)`);\\r\\n        } else {\\r\\n            let top = this.ns.ps('home');\\r\\n            let p = top.find(s => s.filename == script);\\r\\n            if (p.threads != threads) {\\r\\n                await this.ensureKilled(script);\\r\\n                await this.ensureRunning(script, maxThreads);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - 64; // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        let servers = this.ns.getPurchasedServers();\\r\\n        if (servers.length == 0) return false;\\r\\n        let server1 = 'bot0'; // servers[0]; - wrong because it changes\\r\\n        let top = this.ns.ps(server1);\\r\\n        if (top.length == 0) return false;\\r\\n        return top[0].filename.startsWith('ms');\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n}\",\"ramUsage\":12.65,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\nimport { TICK_LENGTH, LifeL0 } from './lib-life-L0.js';\\n\\nlet WORK_OVERRIDE_TICKS = 10;\\nlet STAT_GOAL_BASE =     100;\\nlet DARKWEB_MIN =     200000;\\nlet TRAIN_MIN =      5000000;\\n\\nexport class LifeL1 extends LifeL0 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n    }\\n\\n    tickDarkwebPurchases() {\\n        // buy darkweb router\\n        if (this.cash >= DARKWEB_MIN) {\\n            if (!this.ns.getCharacterInformation().tor) {\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\n                this.ns.purchaseTor();\\n                this.cash = this.getCash();\\n            }\\n        }\\n\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\n        for (var program of programs()) {\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\n                this.ns.purchaseProgram(program.name);\\n                this.cash = this.getCash();\\n                this.resetHackEval();\\n            }\\n        }\\n    }\\n\\n    /** @param {Program} program */\\n    hasProgram(program) {\\n        return this.ns.fileExists(program.name, 'home');\\n    }\\n\\n    // fullscreen \\\"work\\\" actions\\n    tickPerformWork() {\\n        if (this.ns.isBusy() || (this.lastWork && this.lastWork.name == 'nothing')) {\\n            if (this.lastWork && !this.countup) {\\n                if (this.lastWork.isRep) {\\n                    this.ns.stopAction();\\n                }\\n\\n                let workItem = this.selectWork();\\n                \\n                if (this.lastWork.name == workItem.name) {\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\n                    if (this.lastWork.isRep) {\\n                        if (workItem.doWork != null) {\\n                            workItem.doWork();\\n                        } \\n                    }\\n                } else {\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\n                    if (workItem.doWork != null) {\\n                        workItem.doWork();\\n                    } \\n                }\\n\\n                this.lastWork = workItem;              \\n            } else {\\n                this.log.info('automated work overridden by player, pause indefinitely');\\n                this.lastWork = null;\\n            }\\n        } else {\\n            if (!this.lastWork && !this.countup) {\\n                let workItem = this.selectWork();\\n                this.log.info(`start work ${workItem.name}`);\\n                if (workItem.doWork != null) {\\n                    workItem.doWork();\\n                } \\n\\n                this.lastWork = workItem;          \\n            } else {    \\n                if (!this.lastWork) {\\n                    /** @type {number | undefined} */\\n                    this.countup = 0;\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    this.lastWork = new WorkItem('override', null, false);\\n                } else {\\n                    this.countup = this.countup || 0;\\n                    if (this.countup == 0) {\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    } else {\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    }\\n                }\\n                \\n                this.countup = this.countup + 1;\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_LENGTH)}`);\\n                    this.countup = 0;\\n                    this.lastWork = null;\\n                }\\n            }\\n        }\\n    }\\n\\n    selectWork() {\\n        for (let jobF of [this.workWriteCode, this.workTrainCombatStats, this.workForFactions, this.workTrainCharisma]) {\\n            let job = jobF.bind(this)();\\n            if (job != null) return job;\\n        }\\n\\n        return new WorkItem('nothing', null, false);\\n    }\\n\\n    /** @returns {WorkItem | null} */\\n    workWriteCode() {\\n        return null;\\n    }\\n\\n    workTrainCombatStats() {\\n        let info = this.ns.getCharacterInformation();\\n        let stats = this.ns.getStats();\\n        \\n        if (this.cash >= TRAIN_MIN) {\\n            let statGoals = {};\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility']) {\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\n                if (stats[stat] < statGoals[stat]) {\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\n                    return new WorkItem('train-' + stat, () => {\\n                        let gym = this.getBestGym();\\n                        this.ensureCity(info, gym.city);\\n                        this.ns.gymWorkout(gym.name, stat);\\n                    }, true);\\n                }\\n            }\\n        }\\n\\n        return null;\\n    }\\n\\n    /** @returns {WorkItem | null} */\\n    workForFactions() {\\n        return null;\\n    }\\n\\n    workTrainCharisma() {\\n        let info = this.ns.getCharacterInformation();\\n\\n        if (this.cash >= TRAIN_MIN) {\\n            return new WorkItem('university', () => {\\n                let uni = this.getBestUniversity();\\n                this.ensureCity(info, uni.city);\\n                this.ns.universityCourse(uni.name, 'Leadership');\\n            }, true);\\n        }\\n\\n        return null;\\n    }\\n\\n    getBestGym() {\\n        let gs = gyms();\\n        gs.sort((a, b) => b.price - a.price);\\n        return gs[0];\\n    }\\n\\n    getBestUniversity() {\\n        let us = universities();\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\n        return us[0];\\n    }\\n   \\n    /**\\n     * @param {ICharacterInfo} info\\n     * @param {string} name\\n     */\\n    ensureCity(info, name) {\\n        if (info.city != name) {\\n            if (this.ns.travelToCity(name)) {\\n                this.log.info('travelled to ' + name);\\n            } else {\\n                this.log.error(`travel to ${name} failed`);\\n            }\\n        }\\n    }\\n}\\n\\nexport class WorkItem {\\n    /**\\n     * @param {string} name\\n     * @param {() => void | null} doWork\\n     * @param {boolean} isRep\\n     */\\n    constructor(name, doWork, isRep) {\\n        this.name = name;\\n        this.doWork = doWork;\\n        this.isRep = isRep;\\n    }\\n}\",\"ramUsage\":19.65,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport { Logger } from './lib-log.js';\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\n\\nexport class LifeL2 extends LifeL1 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n    }\\n\\n    // persists through aug reset, makes early farming better\\n    tickUpgradeHomeSystem() {\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\n            this.log.info(`purchasing home RAM upgrade`);\\n            this.ns.upgradeHomeRam();\\n            this.cash = this.getCash();\\n        }\\n    }\\n\\n    tickJoinFactions() {\\n        for (let invite of this.ns.checkFactionInvitations()) {\\n            if (!Faction.cities().includes(invite)) {\\n                this.log.info(`join faction ${invite}`);\\n                this.ns.joinFaction(invite);\\n            }\\n        }\\n    }\\n\\n    workForFactions() {\\n        let factions = Faction.getAll(this.ns);\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\n        factions = factions.filter(f => f.favor + f.favorGain < 150);\\n        this.log.debug(`factions with favour < 150: ${factions.map(f => f.name)}`);\\n\\n        if (factions.length > 0) {\\n            factions.sort((a, b) => a.reputation - b.reputation);\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\n        }\\n\\n        return null;\\n    }\\n}\\n\\nexport class Faction {\\n    /**\\n     * @param {string} name\\n     * @param {number} rep\\n     * @param {number} fav\\n     * @param {number} fvg\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\n     */\\n    constructor(name, rep, fav, fvg, job) {\\n        this.name = name;\\n        this.reputation = rep;\\n        this.favor = fav;\\n        this.favorGain = fvg;\\n        this.job = job;\\n    }\\n\\n    static cities() {\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\n    }\\n\\n    static gangs() {\\n        return ['Slum Snakes', 'Tetrads'];\\n    }\\n\\n    /**\\n     * @param {IGame} ns\\n     * @returns Faction[]\\n     */\\n    static getAll(ns) {\\n        let info = ns.getCharacterInformation();\\n        return info.factions.map(f => \\n        {\\n            let rep = ns.getFactionRep(f);\\n            let fav = ns.getFactionFavor(f);\\n            let fvg = ns.getFactionFavorGain(f);\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\n        });\\n    }\\n}\",\"ramUsage\":33.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { programs } from './lib-world.js';\\nimport { WorkItem } from './lib-life-L1.js';\\nimport { LifeL2, Faction } from './lib-life-L2.js';\\n\\nexport class LifeL3 extends LifeL2 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n        /** @type {{[key: string]: boolean}} */\\n        this.hadProgram = {};\\n        /** @type {string} */\\n        this.savingForAug = '';\\n    }\\n\\n    workWriteCode() {\\n        for (let program of programs()) {\\n            if (this.hasProgram(program)) {\\n                if (!this.hadProgram[program.name]) {\\n                    this.hadProgram[program.name] = true;\\n                    this.resetHackEval();\\n                }    \\n            }\\n            else if (program.req <= this.skill)  {\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\n            }\\n        }\\n\\n        return null;\\n    }  \\n\\n    // L3 override which takes augs into account\\n    workForFactions() {\\n        let factions = FactionWithAugs.getAllWithAugs(this.ns);\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\n\\n        if (factions.length > 0) {\\n            factions.sort((a, b) => a.reputation - b.reputation);\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\n        }\\n\\n        // if all factions are maxed out, buy some of their augs\\n        this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\n\\n        let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\n        this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\n\\n        // augs we don't already have\\n        let availableAugs = FactionWithAugs.getAllWithAugs(this.ns)\\n            .map(f => f.augmentations)\\n            .reduce((a, b) => a.concat(b), [])\\n            .filter(a => !a.owned);\\n\\n        // most expensive augs first, because the price doubles each time\\n        let affordableAugs = availableAugs\\n            .filter(a => a.price <= maxAugCost)\\n            .sort((a, b) => b.price - a.price);\\n\\n        if (affordableAugs.length > 0) {\\n            this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\n            if (affordableAugs[0].price > this.cash) {\\n                if (this.savingForAug != affordableAugs[0].name) {\\n                    this.savingForAug = affordableAugs[0].name;\\n                    this.log.info(`saving for aug ${affordableAugs[0]}`);\\n                }\\n            }\\n\\n            for (let a of affordableAugs) {\\n                if (a.price <= this.cash) {\\n                    if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\n                        this.log.info(`bought aug ${a}`);\\n                        this.cash = this.getCash();\\n                        this.savingForAug = '';\\n                    } else {\\n                        this.log.info(`failed to buy aug ${a}`);\\n                    }\\n                }\\n            }\\n        } \\n\\n        return null;\\n    }\\n}\\n\\nexport class FactionWithAugs extends Faction {\\n    /**\\n     * @param {string} name\\n     * @param {number} rep\\n     * @param {number} fav\\n     * @param {number} fvg\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\n     * @param {Augmentation[]} augs\\n     */\\n    constructor(name, rep, fav, fvg, job, augs) {\\n        super(name, rep, fav, fvg, job)\\n        this.augmentations = augs;\\n    }\\n\\n    maxAugRep() {\\n        return this.augmentations\\n            .filter(a => !a.owned)\\n            .map(a => a.requiredReputation)\\n            .reduce((a, b) => Math.max(a, b), 0);\\n    }\\n\\n\\n    /**\\n     * @param {IGame} ns\\n     * @returns FactionWithAugs[]\\n     */\\n    static getAllWithAugs(ns) {\\n        let info = ns.getCharacterInformation();\\n        let augInfo = ns.getOwnedAugmentations(true);\\n        return info.factions.map(f => \\n        {\\n            let rep = ns.getFactionRep(f);\\n            let fav = ns.getFactionFavor(f);\\n            let fvg = ns.getFactionFavorGain(f);\\n            let augs = ns.getAugmentationsFromFaction(f).map(a => {\\n                let [aRep, aPrc] = ns.getAugmentationCost(a);\\n                let has = augInfo.includes(a);\\n                return new Augmentation(a, f, aRep, aPrc, has);\\n            })\\n            return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\n        });\\n    }\\n}\\n\\nexport class Augmentation {\\n    /**\\n     * @param {string} name\\n     * @param {string} fac\\n     * @param {number} rep\\n     * @param {number} prc\\n     * @param {boolean} has\\n     */\\n    constructor(name, fac, rep, prc, has) {\\n        this.name = name;\\n        this.faction = fac;\\n        this.requiredReputation = rep;\\n        this.price = prc;\\n        this.owned = has;\\n    }\\n\\n    toString() {\\n        if (this.owned) {\\n            return `${this.name} (OWNED)`\\n        } else {\\n            return `${this.name} (${format.money(this.price)})`\\n        }\\n    }\\n}\",\"ramUsage\":48.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L4.js\",\"code\":\"\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] status: security level 12 / goal 10; decreasing\",\"[INF] status: money $9715337 / goal $5625000; increasing\",\"[INF] assigning phantasy grow -> hack x18\",\"[INF] status: security level 9 / goal 10; decreasing\",\"[INF] status: money $10171638 / goal $5625000; increasing\",\"[INF] assigning CSEC weaken -> hack x4\",\"[INF] assigning silver-helix grow -> hack x37\",\"[INF] status: security level 7 / goal 10; decreasing\",\"[INF] status: money $9607189 / goal $5625000; \",\"[INF] assigning global-pharm weaken -> hack x4\",\"[INF] assigning the-hub grow -> hack x37\",\"[INF] status: security level 7 / goal 10; \",\"[INF] status: money $11250000 / goal $5625000; \",\"[INF] assigning foodnstuff weaken -> hack x9\",\"[INF] assigning rothman-uni grow -> hack x37\",\"[INF] status: security level 7 / goal 10; \",\"[INF] status: money $4066090 / goal $5625000; \",\"[INF] assigning joesguns weaken -> grow x9\",\"[INF] assigning silver-helix hack -> grow x36\",\"[INF] status: security level 5 / goal 10; decreasing\",\"[INF] status: money $9096087 / goal $5625000; \",\"[INF] assigning harakiri-sushi weaken -> hack x9\",\"[INF] assigning joesguns grow -> hack x9\",\"[INF] status: security level 8 / goal 10; \",\"[INF] status: money $5121027 / goal $5625000; \",\"[INF] assigning sigma-cosmetics weaken -> grow x9\",\"[INF] assigning the-hub hack -> grow x36\",\"[INF] status: security level 5 / goal 10; \",\"[INF] status: money $7424918 / goal $5625000; \",\"[INF] assigning nectar-net weaken -> hack x9\",\"[INF] assigning sigma-cosmetics grow -> hack x9\",\"[INF] status: security level 9 / goal 10; \",\"[INF] status: money $10773124 / goal $5625000; increasing\",\"[INF] assigning hong-fang-tea weaken -> hack x9\",\"[INF] assigning silver-helix grow -> hack x37\",\"[INF] status: security level 8 / goal 10; \",\"[INF] status: money $5356142 / goal $5625000; \",\"[INF] assigning netlink weaken -> grow x9\",\"[INF] assigning silver-helix hack -> grow x36\",\"[INF] status: security level 11 / goal 10; \",\"[INF] status: money $4643453 / goal $5625000; decreasing\",\"[INF] assigning CSEC hack -> weaken x4\",\"[INF] assigning rothman-uni hack -> grow x36\",\"[INF] status: security level 19 / goal 10; increasing\",\"[INF] status: money $8465517 / goal $5625000; \",\"[INF] assigning global-pharm hack -> weaken x4\",\"[INF] assigning netlink grow -> hack x9\",\"[INF] status: security level 19 / goal 10; \",\"[INF] status: money $7384989 / goal $5625000; \",\"[INF] assigning foodnstuff hack -> weaken x9\",\"[INF] assigning silver-helix grow -> hack x37\"],\"logUpd\":true,\"offlineRunningTime\":3991.1380000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":116374.80999886752,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 6.926 seconds (t=15000)\"],\"logUpd\":true,\"offlineRunningTime\":3985.503,\"offlineMoneyMade\":0,\"offlineExpGained\":18907453.48669934,\"onlineRunningTime\":112167.20999892875,\"onlineMoneyMade\":0,\"onlineExpGained\":1080619590.6820047,\"threads\":15000,\"dataMap\":{\"77.1.4.1\":[0,0,0,234540000]}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"AutoLink.exe-18.38%-INC\",\"FTPCrack.exe\",\"FTPCrack.exe-34.29%-INC\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"relaySMTP.exe-23.07%-INC\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"HTTPWorm.exe-80.61%-INC\",\"SQLInject.exe\",\"SQLInject.exe-75.68%-INC\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"77.1.4.1\",\"92.1.8.4\",\"74.1.2.0\",\"66.0.6.8\",\"61.5.6.0\",\"17.9.1.5\",\"87.9.5.8\",\"70.8.6.8\",\"34.6.8.9\",\"49.3.0.6\",\"44.4.1.3\",\"50.8.6.0\",\"55.3.1.0\",\"3.4.0.9\",\"46.7.5.8\",\"24.2.1.6\",\"47.2.7.0\",\"33.9.6.4\",\"79.3.7.6\",\"72.0.8.1\",\"86.8.3.7\",\"26.3.5.6\",\"60.4.8.2\",\"88.2.4.8\",\"76.5.7.5\",\"76.0.7.0\",\"53.3.3.3\",\"68.9.2.5\",\"68.6.4.6\",\"33.2.4.6\",\"15.5.6.2\",\"21.7.6.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"97.8.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.8.6.2\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1359,\"moneyAvailable\":36854354975.25,\"moneyMax\":138203831157.1875,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"83.1.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.5.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.5.9.2\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578373.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"53799\",59],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1293,\"moneyAvailable\":34250604904.5,\"moneyMax\":128439768391.875,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"75.1.9.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"75.1.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"75.1.9.9\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934511.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,1,6,0,1,4,7,0,3,5,7,2,1,0,3,5,7,0,9],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1102,\"moneyAvailable\":17303199870.75,\"moneyMax\":64886999515.3125,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":68,\"serversOnNetwork\":[\"70.8.5.8\",\"5.5.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.9.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.9.2.2\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.9.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.9.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.9.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"9.9.2.2\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 15.015 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.595999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.826 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.069999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.837 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.549999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.763 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.0399999999999805. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.432 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.0079999999999805. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.388 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.74399999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.392 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.483999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.767 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.877999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.063999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.194 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.143999999999987. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.844 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.409999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.666 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.181999999999976. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.896 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.873999999999963. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.299 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.143999999999945. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.573 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.925999999999938. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 24.464 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 11.035999999999934. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 21.885 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.90199999999994. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 27.161 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 16.42999999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 29.247 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 20.66400000000003. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 35.025 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":40610.80999997002,\"onlineMoneyMade\":0,\"onlineExpGained\":222428.40720123742,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,35244]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1157,\"moneyAvailable\":15227692182.75,\"moneyMax\":57103845685.3125,\"hackDifficulty\":94,\"baseDifficulty\":94,\"minDifficulty\":31,\"serverGrowth\":71,\"serversOnNetwork\":[\"70.8.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"83.1.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.1.1.5\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-708068-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[0,1],[1,0],[0,0],[1,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-17853-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[199,115,1,72,188],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":1032,\"moneyAvailable\":29161715578.5,\"moneyMax\":109356433419.375,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":84,\"serversOnNetwork\":[\"70.8.5.8\",\"97.8.6.2\",\"70.2.7.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.5.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.5.4.0\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146873.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(a)))(a((aa)()a\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1175,\"moneyAvailable\":12177282642,\"moneyMax\":45664809907.5,\"hackDifficulty\":45,\"baseDifficulty\":45,\"minDifficulty\":15,\"serverGrowth\":49,\"serversOnNetwork\":[\"0.3.6.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.8.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.8.5.8\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.8.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"70.8.5.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"70.8.5.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 13.246 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.665350%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.857 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.663906%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.650 seconds (t=292)\",\"Available money on harakiri-sushi grown by 32.074544%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 11.719 seconds (t=292)\",\"Available money on harakiri-sushi grown by 5.531432%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.700 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.664525%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.912 seconds (t=292)\",\"Available money on harakiri-sushi grown by 60.128300%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.532 seconds (t=292)\",\"Available money on harakiri-sushi grown by 54.080583%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 17.401 seconds (t=292)\",\"Available money on harakiri-sushi grown by 41.587873%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.082 seconds (t=292)\",\"Available money on harakiri-sushi grown by 2.581433%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.408 seconds (t=292)\",\"Available money on harakiri-sushi grown by 25.713867%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.796 seconds (t=292)\",\"Available money on harakiri-sushi grown by 19.411840%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 17.150 seconds (t=292)\",\"Available money on harakiri-sushi grown by 49.895390%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.617 seconds (t=292)\",\"Available money on harakiri-sushi grown by 37.257854%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.453 seconds (t=292)\",\"Available money on harakiri-sushi grown by 18.516103%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.200 seconds (t=292)\",\"Available money on harakiri-sushi grown by 39.577101%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.052 seconds (t=292)\",\"Available money on harakiri-sushi grown by 58.253673%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.715 seconds (t=292)\",\"Available money on harakiri-sushi grown by 59.364138%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.628 seconds (t=292)\",\"Available money on harakiri-sushi grown by 59.120590%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.665 seconds (t=292)\",\"Available money on harakiri-sushi grown by 56.426715%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 17.045 seconds (t=292)\",\"Available money on harakiri-sushi grown by 54.183426%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 17.390 seconds (t=292)\",\"Available money on harakiri-sushi grown by 47.978054%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 18.508 seconds (t=292)\",\"Available money on harakiri-sushi grown by 42.916240%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 19.652 seconds (t=292)\",\"Available money on harakiri-sushi grown by 39.488290%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 20.600 seconds (t=292)\",\"Available money on harakiri-sushi grown by 24.832898%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 27.546 seconds (t=292)\",\"Available money on harakiri-sushi grown by 23.218423%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 28.845 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":3991.142,\"offlineMoneyMade\":0,\"offlineExpGained\":187632.877613962,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":11171303.294192577,\"threads\":292,\"dataMap\":{\"61.5.6.0\":[0,0,1770104,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-932798-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,19],[12,17],[5,13],[23,32],[11,20],[9,16],[24,29],[16,19],[19,23],[19,27],[11,16],[15,24],[7,8],[2,3],[13,19]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":39708676243,\"moneyMax\":52944133005,\"hackDifficulty\":38.692,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":98,\"serversOnNetwork\":[\"4.9.5.4\",\"75.1.9.9\",\"9.9.2.2\",\"83.1.1.5\",\"34.8.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"0.3.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.3.6.6\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-31976.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":584993515,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1110,\"moneyAvailable\":14840344243.5,\"moneyMax\":55651290913.125,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":98,\"serversOnNetwork\":[\"87.8.8.4\",\"43.5.4.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.3.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.3.9.4\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374384-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":27,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":1001,\"moneyAvailable\":19079127839.25,\"moneyMax\":71546729397.1875,\"hackDifficulty\":98,\"baseDifficulty\":98,\"minDifficulty\":33,\"serverGrowth\":97,\"serversOnNetwork\":[\"87.8.8.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.9.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.9.5.4\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.9.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"4.9.5.4\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"4.9.5.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 15.639 seconds (t=292)\",\"Available money on harakiri-sushi grown by 11.137114%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.285 seconds (t=292)\",\"Available money on harakiri-sushi grown by 29.981207%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.141 seconds (t=292)\",\"Available money on harakiri-sushi grown by 11.515382%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.231 seconds (t=292)\",\"Available money on harakiri-sushi grown by 33.878201%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.831 seconds (t=292)\",\"Available money on harakiri-sushi grown by 60.655813%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.460 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.668349%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.899 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.666895%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.324 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.667327%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.674 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.669022%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.700 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.669425%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.302 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.665101%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.562 seconds (t=292)\",\"Available money on harakiri-sushi grown by 36.259270%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 11.741 seconds (t=292)\",\"Available money on harakiri-sushi grown by 38.986038%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.451 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.664795%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.615 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.665630%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.351 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.667163%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.661 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.665790%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.045 seconds (t=292)\",\"Available money on harakiri-sushi grown by 50.580720%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.505 seconds (t=292)\",\"Available money on harakiri-sushi grown by 48.892849%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 18.320 seconds (t=292)\",\"Available money on harakiri-sushi grown by 45.703363%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 18.989 seconds (t=292)\",\"Available money on harakiri-sushi grown by 41.067928%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 20.146 seconds (t=292)\",\"Available money on harakiri-sushi grown by 36.083810%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 21.709 seconds (t=292)\",\"Available money on harakiri-sushi grown by 33.820736%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 22.572 seconds (t=292)\",\"Available money on harakiri-sushi grown by 31.909805%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 23.395 seconds (t=292)\",\"Available money on harakiri-sushi grown by 26.528878%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 26.347 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":3991.143,\"offlineMoneyMade\":0,\"offlineExpGained\":186909.95654976077,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":11160246.247052168,\"threads\":292,\"dataMap\":{\"61.5.6.0\":[0,0,1768352,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1229,\"moneyAvailable\":1228127584.5,\"moneyMax\":4605478441.875,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":98,\"serversOnNetwork\":[\"27.5.1.0\",\"70.8.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"87.0.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.0.0.3\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1403,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"34.8.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.5.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.5.1.1\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109677.cct\",\"type\":\"Total Ways to Sum\",\"data\":53,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1064,\"moneyAvailable\":871721562,\"moneyMax\":3268955857.5,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":69,\"serversOnNetwork\":[\"68.1.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"15.6.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.6.5.2\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":938,\"moneyAvailable\":669453841.5,\"moneyMax\":2510451905.625,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":63,\"serversOnNetwork\":[\"45.3.7.3\",\"23.2.9.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.2.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.2.9.7\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":938,\"moneyAvailable\":616117743,\"moneyMax\":2310441536.25,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":70,\"serversOnNetwork\":[\"15.6.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.8.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.8.8.4\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.8.8.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"87.8.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.8.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"87.8.8.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 18.222 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.4959999999999845. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.054 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.393999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.185 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.695999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.692 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.265999999999979. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.375 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.533999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.470 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.273999999999978. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.386 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.81599999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.761 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.379999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.896 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.923999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.367 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.435999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.607 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.327999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.460 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.909999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.984 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.0799999999999805. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.486 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.181999999999963. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.990 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.819999999999947. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.861 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 11.295999999999939. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 22.240 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.363999999999935. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 23.697 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 16.70199999999994. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 29.618 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.845999999999975. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 27.085 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.864000000000033. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 32.568 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":40653.00999996941,\"onlineMoneyMade\":0,\"onlineExpGained\":222542.0070006252,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,35262]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656382-TheSyndicate.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[107,27,165,185,79,152,163,180,152,84,104,113,52,71,145,5,172,36,160,47],\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}}],\"dir\":0,\"requiredHackingSkill\":842,\"moneyAvailable\":455247092.25,\"moneyMax\":1707176595.9375,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":74,\"serversOnNetwork\":[\"12.3.1.1\",\"0.3.6.6\",\"79.3.9.4\",\"13.2.6.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"79.9.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.9.0.0\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.9.0.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.9.0.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"79.9.0.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 15.704 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.680426%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.910 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.984 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262304%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.521 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262487%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.292 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262216%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.361 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261914%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.073 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261820%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.080 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.743104%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.796 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.219806%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.036 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262115%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.761 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261865%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.027 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261814%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.868 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261822%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.187 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261746%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.903 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.981522%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.405 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262043%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.755 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261956%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.139 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262061%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.244 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262067%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.154 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.065074%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.128 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.600867%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 21.696 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.361373%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 22.823 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.103854%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.234 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.971228%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.048 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.853251%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.841 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":3991.145,\"offlineMoneyMade\":0,\"offlineExpGained\":23737.0510364613,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":1412954.3047848074,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,223884,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549350-OmniTekIncorporated.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[148,166,8,93,34,61,54,79,76,144,185,90,126,200,115,188,110,61,36,105,50,141,188,41,69,140],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-87881.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[140,92,103,175,66,79,114,124,149,62,109,77,90,8,175,126,134,85,1,63,149,167,78,85,133,8,178,52],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247074-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,0,10,10,0,10,3],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229447.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,0,0,-6,4,-5,-7,-8,-10,-9,10],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":866,\"moneyAvailable\":560498465.25,\"moneyMax\":2101869244.6875,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":68,\"serversOnNetwork\":[\"27.5.1.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"81.4.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.4.7.7\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-719406-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[175,64,87,103,137,75,44,200,178,26,9,130,119,70,69,85,194,157,61,132,64,58,194,34,15,85,59,165,190,36,172,87,63,55,32,5,93,192],\"reward\":{\"type\":2,\"name\":\"Bachman & Associates\"}}}],\"dir\":0,\"requiredHackingSkill\":917,\"moneyAvailable\":703492458.75,\"moneyMax\":2638096720.3125,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":86,\"serversOnNetwork\":[\"98.6.0.0\",\"17.6.5.1\",\"49.9.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.4.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.4.4.1\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"82.4.4.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"82.4.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"82.4.4.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 13.881 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106488%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.337 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106641%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.994 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106490%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.328 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.936582%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.252 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107661%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.095 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107416%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.412 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106847%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.272 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106653%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.337 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106436%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.241 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.940919%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.001 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.038960%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.923 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.555508%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.528 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106480%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.436 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106828%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.150 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106698%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.588 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106543%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.466 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.743051%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.039 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 17.202 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 18.775 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.281870%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 20.277 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.343966%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 22.054 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.720044%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 23.519 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.322472%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.596 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.066477%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.371 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.784023%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.297 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.146,\"offlineMoneyMade\":0,\"offlineExpGained\":47934.417598824424,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":2858246.68579556,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,452892,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-359380.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[103,88,87,147,104,120,186,13,128,136],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-933834.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[17,27],[15,24],[20,28],[21,25],[20,25],[12,13],[2,9],[4,9],[17,19],[16,19],[12,22],[6,13],[18,22],[12,17],[17,25],[21,27],[16,17],[15,23]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-853769.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0],[0,0,0,1,1,0,0,0],[0,0,0,1,0,1,0,0],[0,1,0,0,0,0,0,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":896,\"moneyAvailable\":1586679182.25,\"moneyMax\":3173645486.25,\"hackDifficulty\":34.744,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":80,\"serversOnNetwork\":[\"50.3.5.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"27.5.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.5.1.0\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.5.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"27.5.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.5.1.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"27.5.1.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.941 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,454.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.264 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,609.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.688 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,480.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.979 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $102,429.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.200 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,374.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.573 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $53,640.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.896 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $116,028.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.392 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,975.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.022 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $61,542.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.267 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,264.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,092.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.943 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,983.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.577 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,588.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.223 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,891.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.175 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,643.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.514 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,252.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.517 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,143.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.184 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $96,318.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.020 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,695.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.777 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $96,408.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.317 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,204.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.984 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,621.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.498 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $96,624.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.557 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,564.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.081 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,048.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.627 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":17267.81000002776,\"onlineMoneyMade\":283415877,\"onlineExpGained\":190222.8640747963,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[283415877,30141,0,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200717-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[190,176,51,152,118,141,1,43,186,75,4,54,61,43,79,143,48,60,155,33],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"dir\":0,\"requiredHackingSkill\":873,\"moneyAvailable\":1241228849.5,\"moneyMax\":2483110147.5,\"hackDifficulty\":24,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":65,\"serversOnNetwork\":[\"49.9.5.8\",\"4.9.5.4\",\"79.9.0.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"79.5.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.5.4.8\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.5.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.5.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.5.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"79.5.4.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.423999999999989. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.320 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.137999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.930 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.037999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.523 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.461999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.737 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.247999999999979. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.986 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.065999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.197 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.937999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.022 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.509999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.438 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.009999999999978. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.026 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.063999999999963. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.194 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.787999999999947. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.452 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.043999999999938. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 23.261 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 11.855999999999934. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 23.004 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 15.801999999999941. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.389 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 15.673999999999976. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.215 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 19.76400000000003. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 33.797 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":40689.00999996888,\"onlineMoneyMade\":0,\"onlineExpGained\":222542.0070006252,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,35262]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-742441.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-10,-9,-2,-4,-6,0,7,-6,-4,-4],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116619-Bachman&Associates.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-4,2,4,5,-6,5,5,-1,8,-6,-4,-3,10,-3,5,-9],\"reward\":{\"type\":2,\"name\":\"Bachman & Associates\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518603.cct\",\"type\":\"Total Ways to Sum\",\"data\":47,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":840,\"moneyAvailable\":406324938.75,\"moneyMax\":1523718520.3125,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":70,\"serversOnNetwork\":[\"49.9.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"72.7.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.7.7.3\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":918,\"moneyAvailable\":613289331,\"moneyMax\":2299834991.25,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":80,\"serversOnNetwork\":[\"44.7.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"14.6.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.6.2.5\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":874,\"moneyAvailable\":1178052819.8125,\"moneyMax\":2356590827.8125,\"hackDifficulty\":24.834,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":84,\"serversOnNetwork\":[\"38.0.9.4\",\"50.3.5.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"63.6.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.6.2.9\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":852,\"moneyAvailable\":875235912.75,\"moneyMax\":3282134672.8125,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":58,\"serversOnNetwork\":[\"90.7.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.3.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.3.5.4\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.3.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"50.3.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"50.3.5.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 15.032 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.447621%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.525 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.281248%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.342 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261918%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.883 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262163%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.630 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262278%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.949 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262172%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.263 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261911%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.169 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.511365%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.213 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.408 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.796 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.150 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.617 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.453 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.200 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.052 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.715 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.772 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.057061%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.146 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.596855%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 18.775 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.143056%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 19.631 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.713717%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 21.220 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.458589%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 22.347 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.217167%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 23.583 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.047650%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.572 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.930210%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.321 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":39272.2099999895,\"onlineMoneyMade\":0,\"onlineExpGained\":495749.524528195,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,78552,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105321-OmniTekIncorporated.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8272942\",17],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}}],\"dir\":0,\"requiredHackingSkill\":924,\"moneyAvailable\":707340732.75,\"moneyMax\":2652527747.8125,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":61,\"serversOnNetwork\":[\"14.6.2.5\",\"82.4.4.1\",\"81.1.9.3\",\"44.7.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"17.6.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.6.5.1\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-522367.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[65,49,118,7,135,137,137,72,136,78,22,147,140,24,166,20,109,182,31,94,76,43,98,58,105,181,138,165,180,185,84,87,39]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-750177-Bachman&Associates.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"55949832\",\"reward\":{\"type\":0,\"name\":\"Bachman & Associates\"}}}],\"dir\":0,\"requiredHackingSkill\":784,\"moneyAvailable\":1350627361.875,\"moneyMax\":2701822741.875,\"hackDifficulty\":19,\"baseDifficulty\":57,\"minDifficulty\":19,\"serverGrowth\":70,\"serversOnNetwork\":[\"81.4.7.7\",\"68.1.5.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"12.3.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.3.1.1\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-287883.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[6,8],[3,6,3],[3,7,2,7],[7,3,3,7,3],[1,1,4,7,9,6],[4,4,2,6,8,6,4],[6,8,8,5,4,9,3,9],[4,8,1,2,1,4,2,7,6],[9,2,8,3,7,6,6,7,9,5],[6,3,8,5,9,5,7,2,3,5,8],[6,4,8,5,9,7,1,3,2,2,1,2]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":802,\"moneyAvailable\":1368376481.4375,\"moneyMax\":2737054403.4375,\"hackDifficulty\":20,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":75,\"serversOnNetwork\":[\"49.9.5.8\",\"87.8.8.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"81.1.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.1.9.3\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.1.9.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"81.1.9.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.1.9.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"81.1.9.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 17.324 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.695999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.597 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.109999999999989. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.527 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.345999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.849 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.341999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.208 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.719999999999979. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.630 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.949999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.038 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.133999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.925 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.901999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.243 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.345999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.849 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.235999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.064 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.295999999999977. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.051 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.969999999999987. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.971 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.159999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.595 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.943999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.665 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.147999999999962. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.579 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.575999999999944. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.893 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.539999999999937. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 21.208 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.091999999999935. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 26.056 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 13.407999999999943. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 25.122 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 17.329999999999977. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 30.475 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 17.964000000000034. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 31.340 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":3889.7360000000003,\"offlineMoneyMade\":0,\"offlineExpGained\":2071.2754372188615,\"onlineRunningTime\":43757.809999924226,\"onlineMoneyMade\":0,\"onlineExpGained\":238105.17951674943,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,37728]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":779,\"moneyAvailable\":1061882924.375,\"moneyMax\":2123793849.375,\"hackDifficulty\":24,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":75,\"serversOnNetwork\":[\"50.3.5.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"45.3.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.3.7.3\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537155-OmniTekIncorporated.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"7815173130\",\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701914.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a)())(aaa)a(a\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-25318.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,1],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-668071.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[26,16,18,26,10,31],[27,43,30,8,50,13],[45,15,7,19,21,9],[37,36,6,18,48,11],[10,5,26,37,16,15],[15,36,40,37,25,30],[49,2,1,6,25,25],[44,7,25,29,47,50],[14,25,39,31,15,4],[36,36,28,9,20,3],[1,25,44,1,14,36],[24,8,8,45,47,30],[34,34,46,18,11,25]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":875,\"moneyAvailable\":4196567891.25,\"moneyMax\":4196567891.25,\"hackDifficulty\":25,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":64,\"serversOnNetwork\":[\"38.3.8.6\",\"15.6.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"38.3.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.3.8.6\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"38.3.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.3.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.3.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"38.3.8.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 30.415 seconds (t=4)\",\"Server security level on harakiri-sushi weakened to 18.976000000000063. Gained 25.2444 hacking exp (t=4)\",\"Executing weaken() on server harakiri-sushi in 32.721 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.01000000000013,\"onlineMoneyMade\":0,\"onlineExpGained\":25.24439986394676,\"threads\":4,\"dataMap\":{\"61.5.6.0\":[0,0,0,4]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":801,\"moneyAvailable\":4769883703.125,\"moneyMax\":4769883703.125,\"hackDifficulty\":30.44,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":88,\"serversOnNetwork\":[\"62.2.3.7\",\"45.3.7.3\",\"98.6.0.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"49.9.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.9.5.8\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730247.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[1,138,14,178,136,157,66,62,16,165,164,31,149,162,189,73,153,98,175,74,180,36,13,149,104,141,55,37,99,185,133,4,138,55,54,170,179,167,188],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-757883-BitRunners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,2],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-678886-OmniTekIncorporated.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[8,5]],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}}],\"dir\":0,\"requiredHackingSkill\":777,\"moneyAvailable\":1699248164.8125,\"moneyMax\":3398818862.8125,\"hackDifficulty\":25.514,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":76,\"serversOnNetwork\":[\"81.4.7.7\",\"27.5.1.0\",\"79.5.4.8\",\"12.3.1.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"44.7.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.7.9.3\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":829,\"moneyAvailable\":1846838117.0625,\"moneyMax\":3694004249.0625,\"hackDifficulty\":26,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":77,\"serversOnNetwork\":[\"50.3.5.4\",\"72.7.7.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"98.6.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.6.0.0\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"98.6.0.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"98.6.0.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"98.6.0.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.043 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261861%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.693 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261891%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.235 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261814%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.119 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.831 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.304101%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.617 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.596533%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.056 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.931139%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.486 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.137827%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.163 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262049%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.047 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262077%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.661 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261816%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.850 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.035903%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.490 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.217 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.139137%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.156 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.149317%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.145 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261987%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.366 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261993%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.977 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261885%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.538 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261879%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.420 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.192354%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 19.469 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.786469%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 20.921 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.491944%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 22.190 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.298468%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 23.150 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.100507%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.253 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.972937%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.041 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":3991.147,\"offlineMoneyMade\":0,\"offlineExpGained\":23718.093815821572,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":1413635.9035811338,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,223992,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":797,\"moneyAvailable\":1461742488.1875,\"moneyMax\":2924521512.1875,\"hackDifficulty\":25,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":79,\"serversOnNetwork\":[\"38.3.8.6\",\"81.4.7.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"90.7.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.7.5.5\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"90.7.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.7.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.7.5.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"90.7.5.5\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 14.715 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.735999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.652 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.373999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.158 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.187999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.634 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.001999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.109 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.633999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.242 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.99199999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.366 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.165999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.604 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.38399999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.536 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.177999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.985 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.625999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.867 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.543999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.390 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.587999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.179 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.869999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.200 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.375999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.525 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.789999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.820 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.309999999999961. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.435 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.439999999999944. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 21.072 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.867999999999936. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.291 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 13.263999999999935. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 24.926 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.00199999999994. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 25.933 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.229999999999976. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 31.703 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.232000000000035. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 31.706 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":3991.1479999999997,\"offlineMoneyMade\":0,\"offlineExpGained\":10300.172090009866,\"onlineRunningTime\":115712.40999887716,\"onlineMoneyMade\":0,\"onlineExpGained\":609803.7231134378,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,96624]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":730,\"moneyAvailable\":1114074860,\"moneyMax\":2229293385,\"hackDifficulty\":26.998,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":55,\"serversOnNetwork\":[\"61.5.7.8\",\"63.6.2.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"62.2.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.2.3.7\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.2.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.2.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"62.2.3.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 15.119 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.190148%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.084 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262116%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.792 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262247%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.150 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262333%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.791 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262073%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.813 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261788%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.075 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.621709%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.010 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.835642%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.639 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262080%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.879 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262103%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.482 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261896%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.866 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261806%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.588 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261806%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.080 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.052 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.733 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.011895%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.353 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.143656%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.150 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262011%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.894 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.191861%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.082 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.735513%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.814 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.597786%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 21.709 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.029897%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.677 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.855995%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.825 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.695808%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.011 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.624482%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.585 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":19272.41000003505,\"onlineMoneyMade\":0,\"onlineExpGained\":249237.95985673973,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,39492,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978235.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-40842-Bachman&Associates.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[20,18,21,37,6,50,13,8,1,7,39,29,15,34,25],[1,43,22,36,18,2,27,13,31,43,7,34,17,39,9]],\"reward\":{\"type\":2,\"name\":\"Bachman & Associates\"}}}],\"dir\":0,\"requiredHackingSkill\":496,\"moneyAvailable\":851871773.4375,\"moneyMax\":1704007988.4375,\"hackDifficulty\":18.49,\"baseDifficulty\":52,\"minDifficulty\":17,\"serverGrowth\":52,\"serversOnNetwork\":[\"76.9.2.9\",\"38.3.8.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"68.8.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.8.2.3\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"68.8.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.8.2.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"68.8.2.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.709 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.799421%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.058 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.672446%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.442 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.709195%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.416 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106947%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.624 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107467%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.182 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107471%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.685 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107233%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.992 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106605%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.724 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106390%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.678 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.814 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.555029%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.325 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.646804%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.242 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.453 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.200 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.052 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.715 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.772 seconds (t=73)\",\"Available money on harakiri-sushi grown by 1.735544%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 17.202 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 18.775 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.478354%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 19.954 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.592819%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 21.539 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.069232%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 22.666 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.510881%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.072 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.222111%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.891 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.968703%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.683 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.1479999999997,\"offlineMoneyMade\":0,\"offlineExpGained\":47864.38546074848,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":2856403.844605492,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,452600,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-451494-OmniTekIncorporated.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[123,19,189,114,174,46,97,96,12,194,55,153,125,177,114]],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}}],\"dir\":0,\"requiredHackingSkill\":541,\"moneyAvailable\":925543571.4375,\"moneyMax\":1851854903.4375,\"hackDifficulty\":17,\"baseDifficulty\":52,\"minDifficulty\":17,\"serverGrowth\":50,\"serversOnNetwork\":[\"61.5.7.8\",\"93.7.6.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"63.8.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.8.8.0\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"63.8.8.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.8.8.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"63.8.8.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 15.744 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.759718%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.936 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.984 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262248%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.934 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262412%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.693 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262119%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.685 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262008%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.820 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261921%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.887 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261767%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.412 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010498%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.359 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.060928%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.281 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261895%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.628 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261899%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.643 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261930%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.012 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261812%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.246 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.715 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.790 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.991261%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.386 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.862188%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.600 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.833437%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.648 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.312837%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.600 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.800401%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.748 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.055466%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.520 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.917654%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.404 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.736563%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.692 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.663093%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.267 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":695.2100000000212,\"onlineMoneyMade\":0,\"onlineExpGained\":8633.584753469793,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,1368,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":408,\"moneyAvailable\":176902468.5,\"moneyMax\":663384256.875,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":46,\"serversOnNetwork\":[\"76.9.2.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"76.9.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.9.2.9\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"76.9.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.9.2.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"76.9.2.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 19.154 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.887931%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.605 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.716033%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.849 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.643646%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.424 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":83.01000000000064,\"onlineMoneyMade\":0,\"onlineExpGained\":681.5987963265626,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,108,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-464835-OmniTekIncorporated.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[110,172,165,170,73,59,4,135,148,192,74,192,133,168,19,34,125,110,27,51,145,114,148,22,89,114,91,93,195,73,118,163,85,135,152,131,99,25,171,113,35,113,14,50,131,141,58,72,128],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731457.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":369419116,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690939-Bachman&Associates.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[32,24,2,35,11,44,12,41,6,33],[34,19,16,50,21,17,18,32,25,30],[38,7,50,32,2,26,32,6,3,7]],\"reward\":{\"type\":2,\"name\":\"Bachman & Associates\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-339640-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":55,\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":387,\"moneyAvailable\":132332870.25,\"moneyMax\":496248263.4375,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":36,\"serversOnNetwork\":[\"16.7.6.7\",\"62.2.3.7\",\"63.8.8.0\",\"38.0.9.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"61.5.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.5.7.8\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.5.7.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"61.5.7.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 12.984 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106329%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.329 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106291%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.280 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107018%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.182 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107523%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.713 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107604%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.272 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106991%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.265 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106392%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.702 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.182687%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.809 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.612533%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.482 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107050%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.610 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106986%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.102 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106631%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.597 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106499%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.427 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106443%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.145 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.052 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.715 seconds (t=73)\",\"Available money on harakiri-sushi grown by 4.754295%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.772 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.835801%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.984 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.379934%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 18.644 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.897678%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 19.307 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.018628%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 20.735 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.356399%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 22.032 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.973215%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 22.891 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.590974%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 23.856 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.327641%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.585 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.1499999999996,\"offlineMoneyMade\":0,\"offlineExpGained\":47788.01880673275,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":2853639.58282039,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,452162,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-367008.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())))())(((a(()\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549042-Netburners.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,6,5,6,1,7,0,0],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":729,\"moneyAvailable\":1465423464.5625,\"moneyMax\":2931122466.5625,\"hackDifficulty\":26.986,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":77,\"serversOnNetwork\":[\"16.7.6.7\",\"90.7.5.5\",\"68.8.2.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"9.6.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.6.4.6\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.6.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"9.6.4.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.040 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $156,654.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.363 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $124,416.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.787 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $221,364.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.618 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $162,756.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.314 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,006.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.738 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,662.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.010 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $192,582.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.585 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $180,504.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.015 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $126,252.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.261 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $178,866.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.308 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $199,062.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.937 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $168,210.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.559 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $165,114.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.204 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $190,656.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.157 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $181,944.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.496 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $189,522.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.499 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $191,178.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.166 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $196,452.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.951 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $202,788.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.066 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $190,566.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.329 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $184,266.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.996 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $161,406.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.510 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $190,998.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.570 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $167,202.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.094 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,350.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.639 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1235.610000000144,\"onlineMoneyMade\":44281494,\"onlineExpGained\":27945.550649389155,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[44281494,4428,0,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-25022-MegaCorp.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,0,6,0,0,2],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"dir\":0,\"requiredHackingSkill\":440,\"moneyAvailable\":387093943.4375,\"moneyMax\":774605033.4375,\"hackDifficulty\":21.394,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":50,\"serversOnNetwork\":[\"59.3.1.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"76.3.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.3.7.9\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":612,\"moneyAvailable\":343012708.5,\"moneyMax\":1286297656.875,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":60,\"serversOnNetwork\":[\"16.7.6.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"22.7.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.7.0.1\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"22.7.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.7.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.7.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"22.7.0.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.871 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $189,468.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.117 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $141,030.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.491 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $111,834.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.914 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $189,882.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.388 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,722.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.454 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $106,884.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.827 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $114,174.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.474 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $180,756.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.085 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $147,114.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.114 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $103,068.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.359 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,998.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.556 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $171,612.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.778 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $115,524.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.743 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $114,894.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.386 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,102.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.512 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $136,188.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.038 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $139,194.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.655 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $150,300.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.421 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,566.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.208 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,812.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.912 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,068.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.628 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,200.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.292 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $147,816.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.063 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,678.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.925 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $141,174.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.372 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":20719.010000040314,\"onlineMoneyMade\":659381400,\"onlineExpGained\":454058.3981528475,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[659381400,71946,0,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":417,\"moneyAvailable\":606143171.0625,\"moneyMax\":1212306359.0625,\"hackDifficulty\":21,\"baseDifficulty\":63,\"minDifficulty\":21,\"serverGrowth\":30,\"serversOnNetwork\":[\"61.9.5.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"61.9.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.9.5.1\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.9.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.9.5.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"61.9.5.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 16.453 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.200 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.052 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.715 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.772 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.202 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 18.775 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.912990%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 20.434 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.487196%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 22.212 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.193128%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 23.716 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.017623%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.758 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.898547%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.528 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.776459%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.397 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":251.00999999999428,\"onlineMoneyMade\":0,\"onlineExpGained\":2726.3951853062504,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,432,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-126133.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a(a)\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":275,\"moneyAvailable\":499095573.75,\"moneyMax\":499095573.75,\"hackDifficulty\":14.898,\"baseDifficulty\":37,\"minDifficulty\":12,\"serverGrowth\":52,\"serversOnNetwork\":[\"93.3.0.1\",\"22.7.0.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"8.1.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"8.1.6.1\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-694617-OmniTekIncorporated.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9639900969\",44],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-4312.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(aaa((()a)(a)))))))\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":343,\"moneyAvailable\":314426828.9375,\"moneyMax\":629396805.9375,\"hackDifficulty\":18,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":64,\"serversOnNetwork\":[\"25.2.3.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"16.8.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.8.8.1\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.8.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.8.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.8.8.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"16.8.8.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.039 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,873.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.559 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,071.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.720 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,452.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.242 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $69,714.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.688 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41.01000000000005,\"onlineMoneyMade\":313110,\"onlineExpGained\":227.19959877552085,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[313110,36,0,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-877160.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":955138414,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":391,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":48,\"serversOnNetwork\":[\"93.3.0.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"80.9.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.9.3.6\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":265,\"moneyAvailable\":55468611,\"moneyMax\":208007291.25,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":53,\"serversOnNetwork\":[\"25.2.3.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"77.1.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.1.4.1\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.1.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.1.4.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"77.1.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"77.1.4.1\",\"ramUsage\":1.75,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.0100000000000025,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":9,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-782093.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[185,112,182,104,64,181,53,101,14,41,155,115,188,154,146,150,77,87,52,147,144,25,59,20,64,199,42,1,159,123],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-547057.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a())(a\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"92.1.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.1.8.4\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.1.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"92.1.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.1.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"92.1.8.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.948 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,221.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.270 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,646.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.694 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $130,806.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.985 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $101,097.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.206 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,393.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.579 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $52,956.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.902 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $114,624.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.398 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,133.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.049 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $58,185.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.295 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,656.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.341 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,899.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.970 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,200.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.641 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $69,534.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.284 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,730.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.237 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,752.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.575 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,947.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.579 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,493.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.296 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,146.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.132 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,634.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.839 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,823.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.504 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,299.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.070 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,868.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.590 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,923.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.750 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,086.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.199 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $66,645.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.713 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":209.00999999999667,\"onlineMoneyMade\":3223224,\"onlineExpGained\":2044.7963889796877,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[3223224,324,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-831165.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[36,101,94,108,61,26,135,134,100,175,110,113,35,165,184,65,84,139,168,127,83,84,165,74,174,50,166,12,110,170,41,128,62,53,125,11,51,21,38,110,152,12,133,130,85,125,132],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-190940-Volhaven.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[160,49,107,28,96,114,157,113,105,12,8,167,145,83,41,173,184,5,58,82,165]],\"reward\":{\"type\":0,\"name\":\"Volhaven\"}}}],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":6468750,\"moneyMax\":6468750,\"hackDifficulty\":10.24,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"74.1.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.1.2.0\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.1.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.1.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"74.1.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"74.1.2.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.084 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,700.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.457 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $59,184.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.881 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,576.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.661 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $71,253.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.370 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $56,583.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.794 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $60,372.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.441 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,626.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.359 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,870.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.093 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $53,136.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.338 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,513.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.486 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,443.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.757 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $62,595.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.697 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $62,154.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.340 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,349.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.417 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,737.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.992 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,249.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.609 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,081.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.376 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,223.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.163 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,576.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.869 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,258.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.585 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,851.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.150 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,011.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.020 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,313.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.832 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,710.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.280 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,000.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.743 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":293.2099999999919,\"onlineMoneyMade\":4859469,\"onlineExpGained\":3237.5942825511765,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[4859469,513,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"6.5.7.3\",\"50.5.8.8\",\"25.4.8.9\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"6.5.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.5.7.3\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.5.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"6.5.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.5.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"6.5.7.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 16.194 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.167999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.971 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.647999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.217999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.945 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.241999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.437 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.895999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.600 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.597999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.558 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.647 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.041999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.164 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.72599999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.638 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.335999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.836 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.58399999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.444 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.577999999999989. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.166 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.657999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.545 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.461999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.737 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.48199999999996. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.305 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 11.295999999999946. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 22.240 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.003999999999936. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.112 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.739999999999934. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 26.940 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.543999999999942. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 23.943 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 19.329999999999973. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 33.204 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 17.332000000000036. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 30.478 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":20016.61000003776,\"onlineMoneyMade\":0,\"onlineExpGained\":111895.80239694146,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,17730]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248556-OmniTekIncorporated.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,5],[12,18],[25,33],[13,15],[3,5],[12,13],[24,27],[20,27],[25,34],[25,27],[20,27],[22,24],[7,12],[16,17],[12,21],[20,21],[14,18],[7,14]],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712359-CyberSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23911549245\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"74.1.2.0\",\"4.0.0.5\",\"25.2.3.3\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"50.5.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.5.8.8\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"50.5.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"50.5.8.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.154 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,541.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.093 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,323.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.466 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $58,104.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.890 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,749.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.670 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,196.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.429 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $55,548.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.803 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $59,283.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.449 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,925.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.368 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,493.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.101 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $52,182.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.347 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,998.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.544 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,877.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.766 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $59,958.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.718 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $59,589.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.361 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,037.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.439 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,668.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.013 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,171.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.631 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,859.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.397 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,992.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.184 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,696.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.888 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,342.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.604 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,246.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.268 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,419.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.039 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,460.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.850 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,044.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.347 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":215.2099999999963,\"onlineMoneyMade\":2907036,\"onlineExpGained\":2101.596288673568,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[2907036,333,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-705424.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[8,3],[9,5,1],[3,1,2,4]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22785.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,49,48,18,15,43,20,27,44,4,41,19,23,39,45],[39,12,9,2,4,41,11,20,33,15,27,14,1,33,14],[3,16,7,4,31,24,2,39,16,28,48,41,8,9,42],[19,3,39,35,24,14,15,30,15,22,24,39,1,10,28],[32,10,40,45,31,36,18,36,3,40,26,40,1,36,28],[36,19,38,22,26,2,22,41,27,29,46,38,5,14,46],[13,37,50,26,41,4,33,6,29,46,35,44,28,27,13],[27,8,2,7,31,7,25,22,25,9,12,33,31,37,11],[24,36,2,25,35,21,39,48,43,47,24,28,16,48,44],[30,26,29,26,45,30,3,42,36,38,6,36,33,24,7],[4,19,47,49,46,35,47,9,43,31,19,25,4,28,12],[14,34,22,28,16,11,3,41,30,31,7,2,13,22,37],[15,43,21,29,17,47,40,10,32,49,22,28,47,2,32],[36,1,50,8,37,37,30,48,4,35,23,45,46,44,22],[6,43,7,49,12,1,21,22,20,49,34,2,29,13,34]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"74.1.2.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"4.0.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.0.0.5\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.0.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"4.0.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.0.0.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"4.0.0.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.883 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $195,804.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.180 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $137,412.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.503 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,990.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.927 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $196,254.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.450 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $139,050.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.466 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $104,184.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.839 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $111,330.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.486 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $177,966.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.790 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $139,806.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.138 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,974.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.384 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $156,204.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.581 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $164,880.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.496 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $118,440.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.731 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $117,738.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.373 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $158,202.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.451 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $139,608.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.025 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,614.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.643 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $153,900.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.409 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $158,166.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.196 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $155,520.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.900 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,794.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.616 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,710.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.280 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,146.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.051 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,066.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.862 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,450.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.360 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":16805.410000026077,\"onlineMoneyMade\":556949862,\"onlineExpGained\":373629.74018632824,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[556949862,59202,0,0]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-482815.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,1,0,0,5,3,8,1,1,0,10,3,5,0],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"6.5.7.3\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"25.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.2.3.3\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.2.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.2.3.3\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"25.2.3.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 16.277 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.255961%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 19.266 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.143131%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.000 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.991994%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.919 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.833440%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.980 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.741748%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.653 seconds (t=36)\",\"Script killed\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":125.01000000000124,\"onlineMoneyMade\":0,\"onlineExpGained\":1135.9979938776044,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,180,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":63270390,\"moneyMax\":126562500,\"hackDifficulty\":10.82,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"6.5.7.3\",\"8.1.6.1\",\"80.9.3.6\",\"59.3.1.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"66.0.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.0.6.8\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.0.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"66.0.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.0.6.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"66.0.6.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.972 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $89,442.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.295 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,911.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.719 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $124,317.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.010 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,627.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.289 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,243.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.663 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,505.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.985 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,955.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.867 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,373.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.030 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $60,435.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.276 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,743.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.323 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,373.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.952 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,727.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.610 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,917.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.253 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,653.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.206 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,549.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.545 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,942.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.548 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,578.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.265 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,357.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.101 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,998.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.808 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,070.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.473 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,997.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.039 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,701.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.553 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,133.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.714 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,370.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.236 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,506.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.682 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":173.2099999999987,\"onlineMoneyMade\":2337453,\"onlineExpGained\":1533.5972917347658,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[2337453,243,0,0]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"61.5.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.5.6.0\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.5.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"61.5.6.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.966 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,612.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.289 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $71,829.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.712 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $125,910.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.004 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,229.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.281 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $64,422.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.654 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,324.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.977 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $100,737.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.858 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,404.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.003 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,927.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.249 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $65,052.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.896 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,667.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.539 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,800.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.617 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,026.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.259 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,645.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.212 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,568.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.551 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,925.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.554 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,543.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.271 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,295.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.107 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,900.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.814 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,999.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.479 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,043.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.045 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,054.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.565 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,018.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.726 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,552.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.249 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,940.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.694 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":299.20999999999157,\"onlineMoneyMade\":5496705,\"onlineExpGained\":3294.394182245057,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[5496705,522,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995719.cct\",\"type\":\"Total Ways to Sum\",\"data\":22,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-632012.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":5721966.645962569,\"moneyMax\":11250000,\"hackDifficulty\":20.810000000000084,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"13.7.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.7.5.8\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"13.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.7.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"13.7.5.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.923 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $201,186.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.246 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,246.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.669 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $273,132.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.575 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $158,562.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.326 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $125,730.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.750 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,502.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.022 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $187,812.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.597 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $170,568.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.043 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $119,358.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.288 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $169,416.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.335 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $188,406.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.964 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $145,764.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.629 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,270.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.272 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $167,310.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.224 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,192.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.563 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $165,834.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.566 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $173,016.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.284 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $182,484.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.120 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $179,640.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.826 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $179,874.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.492 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $164,178.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.057 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,506.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.577 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $177,948.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.738 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $155,718.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.193 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $136,332.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.706 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":497.2099999999803,\"onlineMoneyMade\":21024558,\"onlineExpGained\":12041.578735102636,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[21024558,1908,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243780-OmniTekIncorporated.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":669921011,\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}}],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":33737625,\"moneyMax\":67500000,\"hackDifficulty\":7.75,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"25.4.8.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"53.9.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.9.0.0\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"53.9.0.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"53.9.0.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"53.9.0.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"53.9.0.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.053 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $152,622.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.375 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $121,248.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.799 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $215,694.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.630 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,458.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.339 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $122,526.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.762 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,396.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.035 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $183,150.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.609 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $164,178.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.061 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $114,912.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.307 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,314.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.354 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $188,946.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.033 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $135,234.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.666 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $134,064.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.309 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $165,690.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.362 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $149,580.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.293 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,986.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.591 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $165,024.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.308 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $174,276.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.144 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $171,198.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.851 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $171,630.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.516 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,956.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.131 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $136,188.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.602 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $169,848.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.763 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,332.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.261 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $131,814.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.725 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":38702.0099999978,\"onlineMoneyMade\":1250708886,\"onlineExpGained\":840979.3148674867,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[1250708886,133254,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"17.9.1.5\",\"93.3.0.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"93.3.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.3.0.1\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.0.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"93.3.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"93.3.0.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.105 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,756.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.478 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $114,732.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.902 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $194,904.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.375 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $146,484.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.442 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $109,674.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.815 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $117,090.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.462 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $183,528.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.380 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $143,424.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.126 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $100,494.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.372 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,056.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.569 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $169,092.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.484 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $122,958.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.712 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $122,130.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.355 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,890.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.432 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,882.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.007 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $147,888.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.624 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,444.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.391 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,710.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.178 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $161,208.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.882 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $166,554.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.598 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,110.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.261 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $156,276.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.033 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $164,700.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.844 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $149,472.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.341 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $127,530.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.806 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":39446.409999986965,\"onlineMoneyMade\":1264897152,\"onlineExpGained\":854270.4913958522,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[1264897152,135360,0,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":207,\"moneyAvailable\":171303316.875,\"moneyMax\":171303316.875,\"hackDifficulty\":11.978,\"baseDifficulty\":26,\"minDifficulty\":9,\"serverGrowth\":36,\"serversOnNetwork\":[\"53.9.0.0\",\"61.9.5.1\",\"16.8.8.1\",\"16.7.6.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"59.3.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.3.1.9\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":263,\"moneyAvailable\":35445779.25,\"moneyMax\":132921672.1875,\"hackDifficulty\":44,\"baseDifficulty\":44,\"minDifficulty\":15,\"serverGrowth\":29,\"serversOnNetwork\":[\"25.2.3.3\",\"9.6.4.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"17.9.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.9.1.5\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.9.1.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"17.9.1.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.9.1.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"17.9.1.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.935 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $195,966.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.258 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $155,178.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.682 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $269,046.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.280 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $177,030.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.274 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,228.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.648 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,006.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.970 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $206,550.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.852 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $189,954.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.991 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,804.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.237 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $135,036.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.883 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $204,660.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.526 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,122.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.592 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $155,268.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.235 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $179,640.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.187 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $171,198.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.526 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $178,344.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.530 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $185,760.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.247 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $195,516.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.083 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $193,068.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.790 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $186,102.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.342 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $180,054.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.008 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,788.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.522 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $186,552.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.582 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,386.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.106 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $150,894.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.651 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":533.2099999999843,\"onlineMoneyMade\":22575960,\"onlineExpGained\":12723.1775314292,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[22575960,2016,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"53.9.0.0\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"38.0.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.0.9.4\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"38.0.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.0.9.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"38.0.9.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 11.158 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.177776%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.475 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262302%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.772 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262449%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.493 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262166%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.523 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261947%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.414 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261810%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.300 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.906899%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.499 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.114794%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.198 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262071%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.923 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261848%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.228 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261807%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.097 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261889%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.645 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261764%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.276 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261922%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.877 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261936%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.979 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261982%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.698 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261903%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.337 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261897%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.202 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.813078%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.713 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.454536%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 18.670 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.088581%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 19.814 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.828080%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 20.757 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.222230%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 23.554 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.675334%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.173 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.559198%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.140 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11553.41000000697,\"onlineMoneyMade\":0,\"onlineExpGained\":148588.53759919005,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,23544,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-674044.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[0,0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":515,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":30,\"serversOnNetwork\":[\"76.9.2.9\",\"14.6.2.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"34.8.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.8.2.0\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.8.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"34.8.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.8.2.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"34.8.2.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.984 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $176,580.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.307 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $140,004.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.731 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $245,484.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.022 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $167,076.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.302 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,390.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.725 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,876.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.998 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $197,478.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.572 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $194,886.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.979 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $136,224.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.224 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $138,438.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.871 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $207,468.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.821 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $138,654.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.653 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $137,376.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.296 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,552.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.249 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,668.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.588 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,188.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.603 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $161,154.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.321 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $170,316.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.156 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $167,130.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.863 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $167,634.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.529 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,284.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.143 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $133,146.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.614 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $165,942.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.775 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $150,840.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.274 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $128,862.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.737 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":40184.60999997622,\"onlineMoneyMade\":1287566784,\"onlineExpGained\":875059.2546838084,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[1287566784,138654,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-242808.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1053,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"hackDifficulty\":55,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":52,\"serversOnNetwork\":[\"70.8.5.8\",\"87.0.0.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"93.7.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.7.6.7\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":751,\"moneyAvailable\":632462548,\"moneyMax\":1265625000,\"hackDifficulty\":14,\"baseDifficulty\":42,\"minDifficulty\":14,\"serverGrowth\":56,\"serversOnNetwork\":[\"68.8.2.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"68.1.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.1.5.5\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"68.1.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.1.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.1.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"68.1.5.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.028 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,794.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.351 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $127,656.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.775 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $227,160.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.605 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $186,516.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.250 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $139,230.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.623 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,884.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.946 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $217,062.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.827 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $205,092.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.954 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $143,298.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.200 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $145,476.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.847 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $217,692.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.796 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $164,034.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.571 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $161,100.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.216 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $186,156.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.169 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $177,570.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.508 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $184,950.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.511 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $186,678.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.178 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $197,136.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.014 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $198,000.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.078 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $181,746.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.354 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $175,932.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.021 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,242.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.534 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $193,068.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.695 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,660.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.118 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $147,510.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.663 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":40220.6099999757,\"onlineMoneyMade\":1305797400,\"onlineExpGained\":876990.4512734,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[1305797400,138960,0,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":529,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"17.6.5.1\",\"88.5.1.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"43.8.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.8.1.3\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"43.8.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.8.1.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"43.8.1.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.717 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106489%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.357 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106923%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.071 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106947%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.213 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106634%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.370 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.807832%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.172 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.519869%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.554 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.544834%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.329 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.797179%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.119 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.347688%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.678 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.452560%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.600 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106638%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.137 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106509%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.966 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106884%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.700 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106731%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.119 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106485%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.165 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.083277%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.156 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.107042%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.925 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106998%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.733 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106982%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.615 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.388129%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.652 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.128159%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 22.535 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.405962%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.362 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.107749%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.242 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.755108%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.397 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.558109%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.109 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.157,\"offlineMoneyMade\":0,\"offlineExpGained\":47843.24730918706,\"onlineRunningTime\":116370.80999886758,\"onlineMoneyMade\":0,\"onlineExpGained\":2852718.162225356,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,452016,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-257146.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-798300.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":361,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"16.7.6.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"16.7.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.7.6.7\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.7.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.7.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.7.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"16.7.6.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.991 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,013.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.313 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,220.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.737 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $120,843.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.721 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,482.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.238 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,515.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.611 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $49,572.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.934 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,747.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.122 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,574.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.997 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $64,737.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.243 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $65,862.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.890 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,873.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.532 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,663.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.604 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,826.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.247 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,670.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.200 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,539.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.539 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,977.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.542 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $89,631.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.259 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,437.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.095 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,105.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.802 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,159.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.467 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,969.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.033 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,538.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.547 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,213.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.707 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,288.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.230 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $71,307.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.676 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1883.8100000002914,\"onlineMoneyMade\":28351827,\"onlineExpGained\":19027.966397449934,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[28351827,3015,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347398.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[1,12],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-68626-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,6],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":217,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"93.3.0.1\",\"76.9.2.9\",\"61.5.7.8\",\"76.3.7.9\",\"43.8.1.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"13.2.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.2.6.9\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"13.2.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.2.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.2.6.9\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"13.2.6.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 3.954 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,006.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.276 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,692.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.700 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,150.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.992 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,846.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.256 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $67,833.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.629 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $47,700.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.952 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $105,867.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.834 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,954.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.960 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $69,849.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.206 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,956.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.853 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $106,245.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.803 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,608.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.598 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,753.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.241 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,705.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.194 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,547.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.532 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,021.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.536 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,693.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.253 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,526.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.089 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,230.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.796 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,257.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.461 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,950.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.027 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,384.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.541 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,302.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.701 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,224.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.224 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,108.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.670 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":17225.610000027606,\"onlineMoneyMade\":279879012,\"onlineExpGained\":189938.86457632695,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[279879012,30096,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":509,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"87.8.8.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"25.4.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.4.8.9\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.4.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.4.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.4.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"25.4.8.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 30.453 seconds (t=4)\",\"Server security level on harakiri-sushi weakened to 19.129999999999974. Gained 25.2444 hacking exp (t=4)\",\"Executing weaken() on server harakiri-sushi in 32.931 seconds (t=4)\",\"Server security level on harakiri-sushi weakened to 17.132000000000037. Gained 25.2444 hacking exp (t=4)\",\"Executing weaken() on server harakiri-sushi in 30.205 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":89.01000000000073,\"onlineMoneyMade\":0,\"onlineExpGained\":50.48879972789352,\"threads\":4,\"dataMap\":{\"61.5.6.0\":[0,0,0,8]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":51,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"74.1.2.0\",\"13.7.5.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"70.2.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.2.7.8\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"83.1.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.8.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.8.6.1\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-94237.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[58,56,146,195,151],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.9.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.9.5.8\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.8.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.8.6.8\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":467.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"70.8.6.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"70.8.6.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"70.8.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"70.8.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"70.8.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"70.8.6.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"omnitek\",1],\"server\":\"70.8.6.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server omnitek in 1,227.934 seconds (t=114)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":281.2099999999926,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":114,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"34.6.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.6.8.9\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2673.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"34.6.8.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"34.6.8.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"34.6.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"34.6.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"34.6.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"34.6.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"alpha-ent\",1],\"server\":\"34.6.8.9\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server alpha-ent in 256.491 seconds (t=652)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":113.01000000000107,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":652,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"49.3.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.3.0.6\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":12854.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"49.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"49.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"49.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"49.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"49.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"49.3.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"deltaone\",1],\"server\":\"49.3.0.6\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack deltaone in 188.292 seconds (t=3174)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.00999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":3174,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"44.4.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.4.1.3\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":123,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.4.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.4.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"44.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.4.1.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"rho-construction\",1],\"server\":\"44.4.1.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server rho-construction in 319.727 seconds (t=30)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":131.2100000000011,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":30,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.8.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.8.6.0\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":200.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"50.8.6.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"50.8.6.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"50.8.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"50.8.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"50.8.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"50.8.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"global-pharm\",1],\"server\":\"50.8.6.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server global-pharm in 838.720 seconds (t=49)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":737.4100000000308,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":49,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"55.3.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.3.1.0\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":291.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"55.3.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"55.3.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"55.3.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"55.3.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"55.3.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"55.3.1.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"nova-med\",1],\"server\":\"55.3.1.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server nova-med in 683.205 seconds (t=71)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":167.20999999999904,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":71,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"3.4.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.4.0.9\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":246,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"3.4.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"3.4.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"3.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"3.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"3.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"3.4.0.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zb-institute\",1],\"server\":\"3.4.0.9\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zb-institute in 678.033 seconds (t=60)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41.01000000000005,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":60,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"46.7.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.7.5.8\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2095.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.7.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.7.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"46.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"46.7.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"applied-energetics\",1],\"server\":\"46.7.5.8\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server applied-energetics in 443.270 seconds (t=511)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":311.2099999999909,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":511,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.2.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.2.1.6\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2652.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"24.2.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"24.2.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"24.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"24.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"24.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"24.2.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"zeus-med\",1],\"server\":\"24.2.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server zeus-med in 593.774 seconds (t=647)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":575.2099999999939,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":647,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"47.2.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.2.7.0\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2136.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"47.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"47.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"47.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"47.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"47.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"47.2.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"zb-def\",1],\"server\":\"47.2.7.0\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server zb-def in 412.044 seconds (t=521)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.01000000000013,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":521,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.9.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.9.6.4\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":5498.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.9.6.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.9.6.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"33.9.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.9.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.9.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"33.9.6.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"catalyst\",1],\"server\":\"33.9.6.4\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server catalyst in 244.481 seconds (t=1341)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":233.2099999999953,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1341,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.3.7.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.3.7.6\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2488.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.3.7.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.3.7.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"79.3.7.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.3.7.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.3.7.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"79.3.7.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"unitalife\",1],\"server\":\"79.3.7.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server unitalife in 549.311 seconds (t=607)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.009999999999952,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":607,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.0.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.0.8.1\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":237.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.0.8.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.0.8.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"72.0.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.0.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.0.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"72.0.8.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"the-hub\",1],\"server\":\"72.0.8.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server the-hub in 146.606 seconds (t=58)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":143.2100000000004,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":58,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.8.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.8.3.7\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2902.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.8.3.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.8.3.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"86.8.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.8.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.8.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"86.8.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"titan-labs\",1],\"server\":\"86.8.3.7\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server titan-labs in 577.342 seconds (t=708)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":545.2099999999871,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":708,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.3.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.3.5.6\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2513.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.3.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.3.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"26.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"26.3.5.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"solaris\",1],\"server\":\"26.3.5.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server solaris in 515.765 seconds (t=613)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":461.20999999998236,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":613,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"60.4.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.4.8.2\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":246,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"60.4.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"60.4.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"60.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"60.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"60.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"60.4.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"lexo-corp\",1],\"server\":\"60.4.8.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server lexo-corp in 679.253 seconds (t=60)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":377.20999999998713,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":60,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.2.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.2.4.8\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":635.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"88.2.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"88.2.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"univ-energy\",1],\"server\":\"88.2.4.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server univ-energy in 1,068.959 seconds (t=155)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":167.20999999999904,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":155,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.5.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.5.7.5\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2214,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.5.7.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.5.7.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"76.5.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.5.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.5.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"76.5.7.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"comptek\",1],\"server\":\"76.5.7.5\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server comptek in 173.978 seconds (t=540)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":65.01000000000039,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":540,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.0.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.0.7.0\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":479.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.0.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.0.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"76.0.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.0.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.0.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"76.0.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"galactic-cyber\",1],\"server\":\"76.0.7.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server galactic-cyber in 747.367 seconds (t=117)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":329.20999999998986,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":117,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.3.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.3.3.3\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1968,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.3.3.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.3.3.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"53.3.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.3.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.3.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"53.3.3.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"snap-fitness\",1],\"server\":\"53.3.3.3\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server snap-fitness in 292.438 seconds (t=480)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":59.0100000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":480,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"68.9.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.9.2.5\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":114.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.9.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.9.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"68.9.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.9.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.9.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"68.9.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"summit-uni\",1],\"server\":\"68.9.2.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server summit-uni in 327.995 seconds (t=28)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":209.20999999999665,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":28,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"68.6.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.6.4.6\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1927,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.6.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.6.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"68.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"68.6.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"phantasy\",1],\"server\":\"68.6.4.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server phantasy in 26.613 seconds (t=470)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.009999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":470,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.2.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.2.4.6\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":246,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.2.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.2.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"33.2.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.2.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.2.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"33.2.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"omega-net\",1],\"server\":\"33.2.4.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server omega-net in 91.419 seconds (t=60)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":83.01000000000064,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":60,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"15.5.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.5.6.2\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2837.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"15.5.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"15.5.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"15.5.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"15.5.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"15.5.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"15.5.6.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"silver-helix\",1],\"server\":\"15.5.6.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server silver-helix in 49.759 seconds (t=692)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":17.009999999999973,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":692,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.7.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.7.6.2\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":131072,\"ramUsed\":6762.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"21.7.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"21.7.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"21.7.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"21.7.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"21.7.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"21.7.6.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"sigma-cosmetics\",1],\"server\":\"21.7.6.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server sigma-cosmetics in 5.957 seconds (t=1648)\",\"Available money on sigma-cosmetics grown by 100.375738%. Gained 7,592.9952 hacking exp (t=1648)\",\"Sleeping for 1000 milliseconds\",\"Running script: ms-control.js on bot0 with 1 threads and args: [\\\"sigma-cosmetics\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.009999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":7592.995162630711,\"threads\":1648,\"dataMap\":{\"92.1.8.4\":[0,0,1648,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"sigma-cosmetics\"],\"server\":\"21.7.6.2\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.210000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":3623.57104135708,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":231652.9726287635,\"favor\":3,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":21.78572128956421,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":103002.15896475951,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":220149.65128327784,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":106888.7270027504,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":66,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":283247.36019310233,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":111,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":132403.34855495425,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":96,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":2052.653624316965,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":57,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":79,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":25677.807637358106,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":157013.64054880684,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":96,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":1551.8034219550773,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":71,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1585.397033089104,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":30,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":2063.3425005868817,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":69,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":1612.8827149260367,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":61,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":2052.653624316965,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"87.0.0.3\",\"BitRunners Server\":\"68.1.5.5\",\"The Black Hand Server\":\"43.8.1.3\",\"NiteSec Server\":\"16.7.6.7\",\"The Dark Army Server\":\"13.2.6.9\",\"CyberSec Server\":\"25.4.8.9\",\"Daedalus Server\":\"70.2.7.8\",\"w0r1d_d43m0n\":\"25.8.6.1\",\"Darkweb Server\":\"87.9.5.8\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":1842775.9717234066,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":22.472914803360325,\"cap\":366654439,\"totalShares\":100600000,\"maxShares\":20100000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":3362326.8136798143,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":14.75800039277428,\"cap\":401619321,\"totalShares\":80200000,\"maxShares\":16000000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":62107.35441850627,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":3.320060308458692,\"cap\":263067375,\"totalShares\":98200000,\"maxShares\":19600000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":553697.9531518059,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":5.430441754655799,\"cap\":108376738,\"totalShares\":93500000,\"maxShares\":18700000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":8842468.728333248,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":8.323442490145116,\"cap\":214387280,\"totalShares\":52900000,\"maxShares\":10600000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":31934220.52899154,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":true,\"otlkMag\":10.051159721160873,\"cap\":425914236,\"totalShares\":26700000,\"maxShares\":5300000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":175659.97687011515,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":2.290224499698889,\"cap\":107276846,\"totalShares\":97400000,\"maxShares\":19500000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":11830256.11048346,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":5.771934303124485,\"cap\":684897570,\"totalShares\":56400000,\"maxShares\":11300000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":17269621.54196647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":16.464482188151095,\"cap\":260892064,\"totalShares\":52300000,\"maxShares\":10500000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":347802828.7105276,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":26.833910854480642,\"cap\":352229499,\"totalShares\":49900000,\"maxShares\":10000000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":266074.1462977273,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":8.33533270371136,\"cap\":216591696,\"totalShares\":57500000,\"maxShares\":11500000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":2070097.2751540772,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":11.8612782577488,\"cap\":133870294,\"totalShares\":124300000,\"maxShares\":24900000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":437455.5751720911,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":11.794444357162568,\"cap\":140942451,\"totalShares\":37200000,\"maxShares\":7400000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":784343.6449008769,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":11.593798934761534,\"cap\":522704395,\"totalShares\":32700000,\"maxShares\":6500000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":87379.52996751256,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":4.383073478536631,\"cap\":89012095,\"totalShares\":66600000,\"maxShares\":13300000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":41001.076309942204,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":2.7073743401826817,\"cap\":153465909,\"totalShares\":53400000,\"maxShares\":10700000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":211717097.9977444,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":46.731839393467666,\"cap\":271802654,\"totalShares\":29300000,\"maxShares\":5900000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":2961684.1154673714,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":10.104457416664122,\"cap\":476313205,\"totalShares\":24500000,\"maxShares\":4900000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":256159.82346677492,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":3.8439250197610173,\"cap\":91405915,\"totalShares\":31500000,\"maxShares\":6300000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":29998.292925824557,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":true,\"otlkMag\":0.21070509840555607,\"cap\":60444724,\"totalShares\":95100000,\"maxShares\":19000000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":217883.94532612315,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":2.8159593036149198,\"cap\":58289883,\"totalShares\":39600000,\"maxShares\":7900000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":7621.393768083722,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":0.7925656454244097,\"cap\":117900395,\"totalShares\":30600000,\"maxShares\":6100000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":14410.620468319827,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":false,\"otlkMag\":0.4683914944529882,\"cap\":54813192,\"totalShares\":57500000,\"maxShares\":11500000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3851.8454570899726,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":true,\"otlkMag\":0.13662687704261361,\"cap\":76828317,\"totalShares\":51100000,\"maxShares\":10200000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":323162.0916066172,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":true,\"otlkMag\":7.588417233202066,\"cap\":49611140,\"totalShares\":33900000,\"maxShares\":6800000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":244.6818423793156,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.23,\"b\":true,\"otlkMag\":0.7883099460895876,\"cap\":33152098,\"totalShares\":28200000,\"maxShares\":5600000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":18527.562270983097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":0.653818437511332,\"cap\":137927286,\"totalShares\":8600000,\"maxShares\":1700000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":310.2940832070936,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":0.3124365508961896,\"cap\":17557147,\"totalShares\":62200000,\"maxShares\":12400000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":70239.72873734288,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.65,\"b\":true,\"otlkMag\":1.3784756845917618,\"cap\":65080122,\"totalShares\":11100000,\"maxShares\":2200000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":13440.066238526992,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.85,\"b\":true,\"otlkMag\":0.42475125194718544,\"cap\":10809207,\"totalShares\":82700000,\"maxShares\":16500000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":334479.89775220526,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":true,\"otlkMag\":2.186862538762142,\"cap\":717578,\"totalShares\":168600000,\"maxShares\":33700000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":47176.131201364944,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":3.9911907418851986,\"cap\":31838172,\"totalShares\":19200000,\"maxShares\":3800000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":10669034.875014083,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":27.28280275426793,\"cap\":397656349,\"totalShares\":21000000,\"maxShares\":4200000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":26,\"lastUpdate\":1550597454397}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.43.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}