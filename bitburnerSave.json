{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":5302,\"hp\":340,\"max_hp\":340,\"strength\":1451,\"defense\":3303,\"dexterity\":858,\"agility\":506,\"charisma\":276,\"intelligence\":0,\"hacking_chance_mult\":2.86419555042687,\"hacking_speed_mult\":2.8019609269703576,\"hacking_money_mult\":9.292211686473616,\"hacking_grow_mult\":4.34270406454029,\"hacking_exp\":23867694647.840828,\"strength_exp\":11583.751890198639,\"defense_exp\":11757.786624125876,\"dexterity_exp\":11924.337864493786,\"agility_exp\":11583.751890198639,\"charisma_exp\":11468.236335554464,\"intelligence_exp\":0,\"hacking_mult\":9.391396405360315,\"strength_mult\":14.384483726656557,\"defense_mult\":32.59841529492469,\"dexterity_mult\":8.438324336410835,\"agility_mult\":5.023591701507744,\"charisma_mult\":2.751537295292726,\"hacking_exp_mult\":12.822753204185428,\"strength_exp_mult\":3.4806946785453,\"defense_exp_mult\":3.4806946785453,\"dexterity_exp_mult\":4.002798880327095,\"agility_exp_mult\":3.4806946785453,\"charisma_exp_mult\":2.9005788987877503,\"company_rep_mult\":9.954786780639559,\"faction_rep_mult\":3.0135884662729877,\"money\":\"11305199429601.350299\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Sector-12\",\"location\":\"NWO\",\"jobs\":{\"Bachman & Associates\":\"Junior Software Engineer\",\"ECorp\":\"Junior Software Engineer\",\"MegaCorp\":\"Junior Software Engineer\",\"KuaiGong International\":\"Junior Software Engineer\",\"Four Sigma\":\"Senior Software Engineer\",\"NWO\":\"Software Engineering Intern\"},\"companyName\":\"NWO\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"66.4.0.9\"],\"hacknetNodes\":[],\"factions\":[\"Daedalus\",\"Slum Snakes\",\"Tetrads\",\"Tian Di Hui\",\"The Dark Army\",\"Speakers for the Dead\",\"The Syndicate\",\"Bachman & Associates\",\"ECorp\",\"MegaCorp\",\"KuaiGong International\",\"Four Sigma\"],\"factionInvitations\":[\"Sector-12\",\"Volhaven\",\"Chongqing\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"The Red Pill\"}],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":54,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"Graphene BranchiBlades Upgrade\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":4}],\"numPeopleKilled\":39,\"karma\":-117,\"crime_money_mult\":5.611238941107255,\"crime_success_mult\":3.0026696674821434,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":500,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.6205117098025976,\"hacknet_node_money_mult\":5.006951670526469,\"hacknet_node_purchase_cost_mult\":0.3734575377122971,\"hacknet_node_ram_cost_mult\":0.488179787859212,\"hacknet_node_core_cost_mult\":0.488179787859212,\"hacknet_node_level_cost_mult\":0.4149528196803301,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1551357028079,\"totalPlaytime\":2487301200,\"playtimeSinceLastAug\":27506000,\"playtimeSinceLastBitnode\":582156800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":1969544.8683286468,\"gang\":0,\"hacking\":8961322861855.438,\"hacknetnode\":0,\"infiltration\":0,\"stock\":15693178123777.582,\"total\":24654498034470.438,\"work\":-4920707.813137341}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":4895562.417788065,\"gang\":0,\"hacking\":84595617344925.48,\"hacknetnode\":0,\"infiltration\":0,\"stock\":428747674850291.1,\"total\":513343264649522.7,\"work\":-32440717.014371756}},\"scriptProdSinceLastAug\":19035166668582.07,\"total_money\":\"275820126137160696.69\",\"lifetime_money\":\"275820126137160696.69\",\"totalHacknetNodeProduction\":0,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":1048576,\"ramUsed\":1048422.8,\"cpuCores\":5,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let costCap = (maxProduction * 60 * 60 * 1) || Infinity;\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} uncappedCost\\r\\n     */\\r\\n    function getCappedCost(name, uncappedCost) {\\r\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\r\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let costs = [];\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\r\\n    }\\r\\n\\r\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        /** @type {number} */\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        /** @type {number} */\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = cost + getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number' || !Number.isNaN(parseInt(ns.args[0]));\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? parseInt(ns.args[0]) : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    let maxPurchaseRam = ns.getPurchasedServerMaxRam();\\r\\n    for (let power = 0; Math.pow(2, power) <= maxPurchaseRam; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (ram > minRam || existingServers.length < limit) {\\r\\n        let processes = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                let ps = ns.ps(existingServers[i]);\\r\\n                if (ps.length > 0) {\\r\\n                    processes.push(existingServers[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processes.length > 0) {\\r\\n            if (dryRun) {\\r\\n                log.info('scripts running on existing servers, continuing dry run');    \\r\\n            } else {\\r\\n                log.info('scripts running on existing servers, exit');\\r\\n                ns.exit();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.2,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as world from './lib-world.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let log = new Logger(ns, {});\\n    let host = ns.args[0]\\n\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\n\\n    if (ns.args.length > 1) {\\n        let target = ns.args[1];\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\n        worker.enrol(ns);\\n        await ns.exec('ms-control.js', host, 1, target);\\n    }\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of world.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    let top = ns.ps(ns.getHostname()).filter(p => p.filename == 'dh-control.js');\\r\\n    if (top.length > 0) {\\r\\n        let excludedTarget = top[0].args[0];\\r\\n        log.info(`${excludedTarget.padEnd(20)} ignored - DH victim`);\\r\\n        targets.splice(targets.findIndex(t => t.name == excludedTarget), 1);\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----')\\r\\n        let bots = ns.getPurchasedServers()\\r\\n            .filter(b => ns.ps(b).length == 0) //ignore busy\\r\\n            .filter(b => ns.getServerRam(b)[0] >= 16384); // ignore too small\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of world.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            log.info(`run ms-setup.js ${bots[i]} ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let worker of world.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----');\\r\\n        log.info(`run dh-control.js ${targets[0].name}`)\\r\\n        await ns.exec('dh-control.js', ns.getHostname(), 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":8.8,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args.length == 0 ? 'foodnstuff' : ns.args[0];\\r\\n\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n    for (let stock of market.getAll(ns)) {\\r\\n        lastAssets = lastAssets + stock.position.shares * stock.price;\\r\\n    }\\r\\n\\r\\n    let assetWindow = new SlidingWindow(6);\\r\\n    let timeWindow = new SlidingWindow(6);\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            assets = 0;\\r\\n            for (let stock of market.getAll(ns)) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            assetWindow.reset();\\r\\n            timeWindow.reset();\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n\\r\\n            assetWindow.push(assetChange);\\r\\n            timeWindow.push(timeChange);\\r\\n\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, lastAssets + assetWindow.average())}, ${format.money(assetWindow.average()/timeWindow.average())}/sec`);\\r\\n        }\\r\\n\\r\\n        lastAssets = assets;\\r\\n        lastTime = time;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(5000);\\r\\n        tick();\\r\\n    }\\r\\n} \\r\\n\\r\\nclass SlidingWindow {\\r\\n    /** @param {number} size */\\r\\n    constructor(size) {\\r\\n        this.size = size;\\r\\n        /** @type {number[]} */\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    /** @param {number} value */\\r\\n    push(value) {\\r\\n        if (this.values.length < this.size) {\\r\\n            this.values.push(value);\\r\\n        } else {\\r\\n            for (let i = 0; i < this.size-1; i++) {\\r\\n                this.values[i] = this.values[i+1];\\r\\n            }\\r\\n            this.values[this.size-1] = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    average() {\\r\\n        let sum = this.values.reduce((a, b) => a + b, 0);\\r\\n        return sum / this.values.length;\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = `${path}; connect ${p.name}`;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\n//import { LifeL0 as Life } from './lib-life-L0.js';\\r\\n//import { LifeL1 as Life } from './lib-life-L1.js';\\r\\n//import { LifeL2 as Life } from './lib-life-L2.js';\\r\\nimport { LifeL3 as Life } from './lib-life-L3.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n    let life = new Life(ns, log);\\r\\n\\r\\n    while (true) {\\r\\n        let nextTick = await life.tick();\\r\\n        await ns.sleep(nextTick);\\r\\n    }\\r\\n}\",\"ramUsage\":60.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    //console.log(ns.getBitNodeMultipliers())\\n    console.log(ns.getCharacterInformation())\\n    console.log(ns.getOwnedAugmentations())\\n}\",\"ramUsage\":4.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n\\r\\n    let facsByRep = FactionWithAugs.getAll(ns)\\r\\n        .sort((a, b) => b.reputation - a.reputation);\\r\\n\\r\\n    /** @type {{[key: string]: FactionWithAugs}} */\\r\\n    let facsByName = {};\\r\\n    for (let f of facsByRep) {\\r\\n        facsByName[f.name] = f;\\r\\n    }\\r\\n\\r\\n    let augsByPrice = facsByRep\\r\\n        .map(f => f.augmentations)\\r\\n        .reduce((a, b) => a.concat(b), [])\\r\\n        .filter(a => !a.owned)\\r\\n        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n    ns.tprint('----- LOCKED -----');\\r\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\r\\n    for (let aug of groupAugs(locked)) {\\r\\n        let facs = aug.factions.map(name => {\\r\\n            let f = facsByName[name];\\r\\n            if (f.favor + f.favorGain >= FAVOUR_MAX) {\\r\\n                if (f.favor >= FAVOUR_MAX) {\\r\\n                    return `${name} (donate)`;\\r\\n                } else {\\r\\n                    return `${name} (reset)`;\\r\\n                }\\r\\n            } else {\\r\\n                let diff = Math.floor(aug.requiredReputation - f.reputation);\\r\\n                return `${name} (+${diff})`;\\r\\n            }\\r\\n        });\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${facs}]`)\\r\\n    }\\r\\n\\r\\n    ns.tprint('----- UNLOCKED -----');\\r\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\r\\n    for (let aug of groupAugs(unlocked)) {\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${aug.factions}]`)\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {Augmentation[]} augs */\\r\\nfunction groupAugs(augs) {\\r\\n    /** @type {{name: string, factions: string[], price: number, requiredReputation: number}[]} */\\r\\n    let augsWithFacs = [];\\r\\n    for (let a of augs) {\\r\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\r\\n            augsWithFacs[a.name] = {\\r\\n                factions: [],\\r\\n                name: a.name,\\r\\n                price: a.price,\\r\\n                requiredReputation: a.requiredReputation\\r\\n            };\\r\\n            augsWithFacs.push(augsWithFacs[a.name]);\\r\\n        } \\r\\n\\r\\n        augsWithFacs[a.name].factions.push(a.faction);\\r\\n    }\\r\\n    return augsWithFacs;\\r\\n}\",\"ramUsage\":60.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { enrol } from './lib-world.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport const TICK_SECONDS =             20;\\r\\nconst STOCK_MARKET_MIN =         100000000;\\r\\nconst HACKNET_BUYS_MAX =       10000000000;\\r\\nconst PURCHASED_SERVER_PRICE = 22528000000;\\r\\nconst PURCHASED_SERVER_RAM =         16384;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.lastBots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n        this.beganFarm = false;\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n        log.debug('market access: ' + this.marketAccess);\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickAcceptInvites() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / (this.nextTickLength / 1000);\\r\\n        this.nextTickLength = TICK_SECONDS * 1000;\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickAcceptInvites();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n        return this.nextTickLength;\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.shouldBuyNodes()) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // once able to buy good enough servers for MS, switch to buying those\\r\\n        let bots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        let botCost = this.ns.getPurchasedServerCost(PURCHASED_SERVER_RAM);\\r\\n        let botLimit = this.ns.getPurchasedServerLimit();\\r\\n        if (this.cash >= botCost && bots < botLimit) {\\r\\n            this.log.info(`${bots} ${format.ram(PURCHASED_SERVER_RAM)} servers owned; ordering a new one for ${format.money(botCost)}`);\\r\\n            await this.ns.exec('buy-servers.js', this.ns.getHostname(), 1, [bots+1])\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (bots == 0) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                await this.dhStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) { // based on an msRunning check, but only once at init startup\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.skill / this.lastEval > 1.1 || bots > this.lastBots) {\\r\\n                if (this.skill / this.lastEval > 1.1) {\\r\\n                    this.log.debug(`skill ${this.skill} / lastEval ${this.lastEval} > 1.1`);\\r\\n                }\\r\\n                if (bots > this.lastBots) {\\r\\n                    this.log.debug(`bots ${bots} > lastBots ${this.lastBots}`);\\r\\n                }\\r\\n\\r\\n                await this.msStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill\\r\\n        if (this.shouldFarm()) {\\r\\n            let target = 'foodnstuff';\\r\\n\\r\\n            if (this.ns.scriptRunning('dh-control.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'dh-control.js');\\r\\n                target = p.args[0];\\r\\n            }\\r\\n            \\r\\n            if (!this.beganFarm) {\\r\\n                enrol(this.ns, target);\\r\\n                this.beganFarm = true;\\r\\n            }\\r\\n            \\r\\n            this.ensureRunningWithArg('farm-worker.js', target, true);\\r\\n        } else if (this.beganFarm) {\\r\\n            this.ensureKilled('farm-worker.js');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureRunning(script) {\\r\\n        if (!this.ns.scriptRunning(script, this.ns.getHostname())) {    \\r\\n            await this.ns.exec(script, this.ns.getHostname(), 1);\\r\\n            this.log.info(`run ${script} -t ${1}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {string} arg\\r\\n     * @param {boolean} [maxThreads]\\r\\n     */\\r\\n    async ensureRunningWithArg(script, arg, maxThreads) {\\r\\n        if (!this.ns.isRunning(script, this.ns.getHostname(), arg)) {   \\r\\n            // not running with right arg\\r\\n            if (this.ns.scriptRunning(script, this.ns.getHostname())) { \\r\\n                // running with wrong arg\\r\\n                await this.ensureKilled(script);\\r\\n            } else {\\r\\n                // not running at all\\r\\n                let threads = 1;\\r\\n                if (maxThreads) {\\r\\n                    threads = this.getMaxThreads(script);\\r\\n                    if (threads <= 0) return;\\r\\n                }\\r\\n        \\r\\n                await this.ns.exec(script, this.ns.getHostname(), threads, arg);\\r\\n                this.log.info(`run ${script} -t ${threads} ${arg}`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - 64; // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        let servers = this.ns.getPurchasedServers();\\r\\n        if (servers.length == 0) return false;\\r\\n        let server1 = 'bot0'; // servers[0]; - wrong because it changes\\r\\n        let top = this.ns.ps(server1);\\r\\n        if (top.length == 0) return false;\\r\\n        return top[0].filename.startsWith('ms');\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n    \\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.cash <= HACKNET_BUYS_MAX;\\r\\n    }\\r\\n\\r\\n    shouldFarm() {\\r\\n        return true;\\r\\n    }\\r\\n}\",\"ramUsage\":13.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\r\\nimport { TICK_SECONDS, LifeL0 } from './lib-life-L0.js';\\r\\n\\r\\nconst WORK_OVERRIDE_TICKS =  9;\\r\\nconst STAT_GOAL_BASE =     100;\\r\\nconst DARKWEB_MIN =     200000;\\r\\nconst TRAIN_MIN =      5000000;\\r\\n\\r\\nexport class LifeL1 extends LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        /** @type {WorkItem} */\\r\\n        this.lastWork = null;\\r\\n    }\\r\\n\\r\\n    tickDarkwebPurchases() {\\r\\n        // buy darkweb router\\r\\n        if (this.cash >= DARKWEB_MIN) {\\r\\n            if (!this.ns.getCharacterInformation().tor) {\\r\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\r\\n                this.ns.purchaseTor();\\r\\n                this.cash = this.getCash();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\r\\n        for (var program of programs()) {\\r\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\r\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\r\\n                this.ns.purchaseProgram(program.name);\\r\\n                this.cash = this.getCash();\\r\\n                this.resetHackEval();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {Program} program */\\r\\n    hasProgram(program) {\\r\\n        return this.ns.fileExists(program.name, 'home');\\r\\n    }\\r\\n\\r\\n    // fullscreen \\\"work\\\" actions\\r\\n    tickPerformWork() {\\r\\n        // continue automation if:\\r\\n        // - we're still doing something, or\\r\\n        // - we deliberately didn't do anything, or\\r\\n        // - we did something which may have finished early\\r\\n        if (this.ns.isBusy() || (this.lastWork && (this.lastWork.name == 'nothing' || this.lastWork.name.startsWith('crime')))) {\\r\\n            // has work been selected, and not overridden (countup>0)?\\r\\n            if (this.lastWork && !this.countup) {\\r\\n                if (this.lastWork.isRep) {\\r\\n                    this.ns.stopAction();\\r\\n                }\\r\\n\\r\\n                let workItem = this.selectWork();\\r\\n                \\r\\n                // is work actually still ongoing?\\r\\n                if (this.ns.isBusy() && this.lastWork.name == workItem.name) {\\r\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\r\\n                    if (this.lastWork.isRep) {\\r\\n                        if (workItem.doWork != null) {\\r\\n                            workItem.doWork();\\r\\n                        } \\r\\n                    }\\r\\n                } else {\\r\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\r\\n                    if (workItem.doWork != null) {\\r\\n                        workItem.doWork();\\r\\n                    } \\r\\n                }\\r\\n\\r\\n                this.lastWork = workItem;              \\r\\n            } else {\\r\\n                this.log.info('automated work overridden by player, pause indefinitely');\\r\\n                this.lastWork = null;\\r\\n            }\\r\\n        } else {\\r\\n            if (!this.lastWork && !this.countup) {\\r\\n                let workItem = this.selectWork();\\r\\n                this.log.info(`start work ${workItem.name}`);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;          \\r\\n            } else {    \\r\\n                if (!this.lastWork) {\\r\\n                    /** @type {number | undefined} */\\r\\n                    this.countup = 0;\\r\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    this.lastWork = new WorkItem('override', null, false);\\r\\n                } else {\\r\\n                    this.countup = this.countup || 0;\\r\\n                    if (this.countup == 0) {\\r\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    } else {\\r\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                this.countup = this.countup + 1;\\r\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\r\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_SECONDS)}`);\\r\\n                    this.countup = 0;\\r\\n                    this.lastWork = null;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    selectWork() {\\r\\n        for (let jobF of [this.workWriteCode, this.workTrainStats, this.workCommitCrimes, this.workForFactions, this.workForCompanies, this.workJoinCompanies]) {\\r\\n            let job = jobF.bind(this)();\\r\\n            if (job != null) return job;\\r\\n        }\\r\\n\\r\\n        return new WorkItem('nothing', null, false);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workWriteCode() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workTrainStats() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        this.guessCharismaMult(info.mult);\\r\\n\\r\\n        let stats = this.ns.getStats();\\r\\n        \\r\\n        if (this.cash >= TRAIN_MIN) {\\r\\n            let statGoals = {};\\r\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility', 'charisma']) {\\r\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\r\\n                \\r\\n                if (stats[stat] < statGoals[stat]) {\\r\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\r\\n                    return new WorkItem('train-' + stat, () => {\\r\\n                        if (stat == 'charisma') {\\r\\n                            let uni = this.getBestUniversity();\\r\\n                            this.ensureCity(info, uni.city);\\r\\n                            this.ns.universityCourse(uni.name, 'Leadership');            \\r\\n                        } else {\\r\\n                            let gym = this.getBestGym();\\r\\n                            this.ensureCity(info, gym.city);\\r\\n                            this.ns.gymWorkout(gym.name, stat);\\r\\n                        }\\r\\n                    }, false);\\r\\n                }\\r\\n            }\\r\\n            this.log.debug(`stat goals reached - ${JSON.stringify(statGoals)}`);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        mult.charisma = Math.min(mult.agility, mult.defense, mult.dexterity, mult.agility);\\r\\n        mult.charismaExp = Math.min(mult.agilityExp, mult.defenseExp, mult.dexterityExp, mult.agilityExp);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForFactions() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n    \\r\\n    getBestGym() {\\r\\n        let gs = gyms();\\r\\n        gs.sort((a, b) => b.price - a.price);\\r\\n        return gs[0];\\r\\n    }\\r\\n\\r\\n    getBestUniversity() {\\r\\n        let us = universities();\\r\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\r\\n        return us[0];\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @param {ICharacterInfo} info\\r\\n     * @param {string} name\\r\\n     */\\r\\n    ensureCity(info, name) {\\r\\n        if (info.city != name) {\\r\\n            if (this.ns.travelToCity(name)) {\\r\\n                this.log.info('travelled to ' + name);\\r\\n            } else {\\r\\n                this.log.error(`travel to ${name} failed`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.ns.getCharacterInformation().bitnode != 4;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class WorkItem {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {() => void | null} doWork\\r\\n     * @param {boolean} isRep\\r\\n     */\\r\\n    constructor(name, doWork, isRep) {\\r\\n        this.name = name;\\r\\n        this.doWork = doWork;\\r\\n        this.isRep = isRep;\\r\\n    }\\r\\n}\",\"ramUsage\":19.65,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\r\\n\\r\\nconst COMPANY_REP_MAX = 200000; // level required for most factions\\r\\nexport const FAVOUR_MAX = 150; // level required for donations\\r\\n\\r\\nexport class LifeL2 extends LifeL1 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n    }\\r\\n\\r\\n    // persists through aug reset, makes early farming better\\r\\n    tickUpgradeHomeSystem() {\\r\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\r\\n            this.log.info(`purchasing home RAM upgrade`);\\r\\n            this.ns.upgradeHomeRam();\\r\\n            this.cash = this.getCash();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    tickAcceptInvites() {\\r\\n        for (let invite of this.ns.checkFactionInvitations()) {\\r\\n            if (this.shouldAcceptInvite(invite)) {\\r\\n                this.log.info(`join faction ${invite}`);\\r\\n                this.ns.joinFaction(invite);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        // when we've run out of work to do, take another job\\r\\n        let companies = Company.getAll(this.ns).filter(c => !c.employed);\\r\\n        if (companies.length > 0) {\\r\\n            if (this.ns.applyToCompany(companies[0].name, 'software')) {\\r\\n                this.log.info(`now employed by ${companies[0]}`);\\r\\n            } else {\\r\\n                this.log.error(`rejected by ${companies[0]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n\\r\\n        let companies = Company.getCurrent(this.ns);\\r\\n        this.log.debug(`current companies: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => !info.factions.includes(c.faction));\\r\\n        this.log.debug(`companies without faction membership: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => c.reputation < COMPANY_REP_MAX);\\r\\n        this.log.debug(`companies with reputation < ${COMPANY_REP_MAX}: ${companies}`);\\r\\n\\r\\n        if (companies.length > 0) {\\r\\n            companies.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`companies sorted by rep: ${companies}`);\\r\\n\\r\\n            let c = companies[0].name;\\r\\n            return new WorkItem('company-' + c, () => {\\r\\n                if (this.lastWork && this.lastWork.name == 'company-' + c) {\\r\\n                    this.log.debug(`already working for ${c}`);\\r\\n                    if (this.ns.applyToCompany(c, 'software')) {\\r\\n                        this.log.info(`promoted by ${c}`);\\r\\n                    }\\r\\n                    this.ns.workForCompany();\\r\\n                } else {\\r\\n                    this.log.debug(`not currently working for ${c}`);\\r\\n                    this.ns.applyToCompany(c, 'software');\\r\\n                    if (!this.ns.workForCompany()) {\\r\\n                        this.log.error(`rejected by ${c}`);\\r\\n                    }\\r\\n                }\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workForFactions() {\\r\\n        let factions = Faction.getCurrent(this.ns);\\r\\n        this.log.debug(`current factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => {\\r\\n                this.ns.workForFaction(factions[0].name, factions[0].job)\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.job = job;\\r\\n    }\\r\\n\\r\\n    static cities() {\\r\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\r\\n    }\\r\\n\\r\\n    static gangs() {\\r\\n        return ['Slum Snakes', 'Tetrads'];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Faction[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => \\r\\n        {\\r\\n            let rep = ns.getFactionRep(f);\\r\\n            let fav = ns.getFactionFavor(f);\\r\\n            let fvg = ns.getFactionFavorGain(f);\\r\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @type {{[key: string]: string}} */\\r\\nlet companyFactions = {\\r\\n    'Bachman & Associates': 'Bachman & Associates',\\r\\n    'ECorp': 'ECorp',\\r\\n    'MegaCorp': 'MegaCorp',\\r\\n    'KuaiGong International': 'KuaiGong International',\\r\\n    'Four Sigma': 'Four Sigma',\\r\\n    'NWO': 'NWO',\\r\\n    'Blade Industries': 'Blade Industries',\\r\\n    'OmniTek Incorporated': 'OmniTek Incorporated',\\r\\n    'Clarke Incorporated': 'Clarke Incorporated',\\r\\n    'Fulcrum Technologies': 'Fulcrum Secret Technologies',\\r\\n}\\r\\n\\r\\nclass Company {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {string} faction\\r\\n     * @param {boolean} employed\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, faction, employed) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.faction = faction;\\r\\n        this.employed = employed;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static factions() {\\r\\n        return Object.getOwnPropertyNames(companyFactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let i = 0; i < info.jobs.length; i++) {\\r\\n            let c = info.jobs[i];\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], true));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let c of Company.factions()) {\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], info.jobs.includes(c)));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n}\",\"ramUsage\":39.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport { WorkItem } from './lib-life-L1.js';\\r\\nimport { LifeL2, Faction, FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\nconst DONATE_AMOUNT = 1000000000000;\\r\\nconst TRAVEL_MIN =           200000;\\r\\n\\r\\nexport class LifeL3 extends LifeL2 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        \\r\\n        /** @type {{[key: string]: boolean}} */\\r\\n        this.hadProgram = {};\\r\\n        for (let program of programs())\\r\\n        {\\r\\n            this.hadProgram[program.name] = true;\\r\\n        }\\r\\n\\r\\n        /** @type {string} */\\r\\n        this.savingForAug = '';\\r\\n\\r\\n        /** @type {number} */\\r\\n        this.homicides = 0;\\r\\n        let factions = this.ns.getCharacterInformation().factions;\\r\\n        for (let gang of Gang.getAll()) {\\r\\n            if (factions.includes(gang.name)) {\\r\\n                this.homicides = Math.max(this.homicides, gang.requiredKarma);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.log.debug(`assumed starting homicides: ${this.homicides}`);\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction) || !FactionWithAugs.get(this.ns, faction).hasAllAugs();\\r\\n    }\\r\\n\\r\\n    workWriteCode() {\\r\\n        for (let program of programs()) {\\r\\n            if (this.hasProgram(program)) {\\r\\n                if (!this.hadProgram[program.name]) {\\r\\n                    this.hadProgram[program.name] = true;\\r\\n                    this.resetHackEval();\\r\\n                }    \\r\\n            }\\r\\n            else if (program.req <= this.skill)  {\\r\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }  \\r\\n\\r\\n    // L3 override which takes augs into account\\r\\n    workForFactions() {\\r\\n        let factions = FactionWithAugs.getAll(this.ns);\\r\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\r\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\r\\n        let allReqsMet = factions.length == 0;\\r\\n\\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n        let reqsCouldBeMetAfterDonations = factions.length == 0 && !allReqsMet;\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\r\\n        }\\r\\n\\r\\n        if (reqsCouldBeMetAfterDonations && this.cash >= DONATE_AMOUNT) {\\r\\n            for (let f of FactionWithAugs.getAll(this.ns)) {\\r\\n                if (f.favor >= FAVOUR_MAX && f.maxAugRep() > f.reputation) {\\r\\n                    if (this.ns.donateToFaction(f.name, DONATE_AMOUNT)) {\\r\\n                        this.log.info(`donated ${format.money(DONATE_AMOUNT)} to faction ${f}`);\\r\\n                        this.cash = this.getCash();\\r\\n                        if (this.cash < DONATE_AMOUNT) {\\r\\n                            break;\\r\\n                        }\\r\\n                    } else {\\r\\n                        this.log.error(`failed to donate to faction ${f}`);\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            allReqsMet = FactionWithAugs.getAll(this.ns).filter(f => f.maxAugRep() > f.reputation).length == 0;\\r\\n        }\\r\\n\\r\\n        // if all factions are maxed out, buy some of their augs\\r\\n        if (allReqsMet) {\\r\\n            this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\r\\n\\r\\n            let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\r\\n            this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\r\\n\\r\\n            // augs we don't already have\\r\\n            let availableAugs = FactionWithAugs.getAll(this.ns)\\r\\n                .map(f => f.augmentations)\\r\\n                .reduce((a, b) => a.concat(b), [])\\r\\n                .filter(a => !a.owned);\\r\\n\\r\\n            // most expensive augs first, because the price doubles each time\\r\\n            let affordableAugs = availableAugs\\r\\n                .filter(a => a.price <= maxAugCost)\\r\\n                .sort((a, b) => b.price - a.price);\\r\\n\\r\\n            if (affordableAugs.length > 0) {\\r\\n                this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\r\\n                if (affordableAugs[0].price > this.cash) {\\r\\n                    if (this.savingForAug != affordableAugs[0].name) {\\r\\n                        this.savingForAug = affordableAugs[0].name;\\r\\n                        this.log.info(`saving for aug ${affordableAugs[0]}`);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                for (let a of affordableAugs) {\\r\\n                    if (a.price <= this.cash) {\\r\\n                        if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\r\\n                            this.log.info(`bought aug ${a}`);\\r\\n                            this.cash = this.getCash();\\r\\n                            this.savingForAug = '';\\r\\n                        } else {\\r\\n                            this.log.info(`failed to buy aug ${a}`);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let stats = this.ns.getStats();\\r\\n\\r\\n        let gangs = Gang.getAll().filter(g => !info.factions.includes(g.name)).sort((a, b) => a.requiredKarma - b.requiredKarma);\\r\\n        this.log.debug(`unjoined gangs: ${gangs}`);\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredStats <= Math.min(stats.agility, stats.defense, stats.dexterity, stats.strength));\\r\\n            this.log.debug(`gangs with high enough combat stats: ${gangs}`);\\r\\n        }\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredKarma > this.homicides);\\r\\n            this.log.debug(`gangs needing lower karma: ${gangs}`);\\r\\n        }\\r\\n        \\r\\n        for (let gang of gangs) {\\r\\n            if (gang.requiredLocation == null || this.cash >= TRAVEL_MIN) {\\r\\n                return new WorkItem('crime-homicide', () => {\\r\\n                    if (gang.requiredLocation != null) {\\r\\n                        this.ensureCity(this.ns.getCharacterInformation(), gang.requiredLocation);\\r\\n                    }\\r\\n\\r\\n                    this.nextTickLength = this.ns.commitCrime('homicide') + 1000;\\r\\n                }, false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        // start with SF1-1\\r\\n        let stat = 1.16; \\r\\n        let statExp = 1.16;\\r\\n\\r\\n        let augs = this.ns.getOwnedAugmentations();        \\r\\n        if (augs.includes(\\\"NeuroFlux Governor\\\")) {\\r\\n            let level = augs.length / 2; // XXX \\r\\n            for (let i = 0; i < level; i++) {\\r\\n                stat = stat * 1.01;\\r\\n                statExp = statExp * 1.01;\\r\\n            }\\r\\n        }\\r\\n        if (augs.includes(\\\"FocusWire\\\")) { \\r\\n            statExp = statExp * 1.05;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer I\\\")) { \\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer II\\\")) { \\r\\n            statExp = statExp * 1.15;\\r\\n        }\\r\\n        if (augs.includes(\\\"Power Recirculation Core\\\")) { \\r\\n            stat = stat * 1.05;\\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Enhancement\\\")) { \\r\\n            stat = stat * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Processor Implant\\\")) { \\r\\n            stat = stat * 1.2;\\r\\n        }\\r\\n\\r\\n        mult.charisma = stat;\\r\\n        mult.charismaExp = statExp;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class FactionWithAugs extends Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     * @param {Augmentation[]} augs\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job, augs) {\\r\\n        super(name, rep, fav, fvg, job)\\r\\n        this.augmentations = augs;\\r\\n    }\\r\\n\\r\\n    maxAugRep() {\\r\\n        return this.augmentations\\r\\n            .filter(a => !a.owned)\\r\\n            .map(a => a.requiredReputation)\\r\\n            .reduce((a, b) => Math.max(a, b), 0);\\r\\n    }\\r\\n\\r\\n    hasAllAugs() {\\r\\n        return this.augmentations\\r\\n        .map(a => a.owned)\\r\\n        .reduce((a, b) => a && b, true);\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns FactionWithAugs[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let augInfo = ns.getOwnedAugmentations(true);\\r\\n        return info.factions.map(f => FactionWithAugs.get(ns, f));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @param {string} f\\r\\n     * @returns FactionWithAugs\\r\\n     */\\r\\n    static get(ns, f) {\\r\\n        let rep = ns.getFactionRep(f);\\r\\n        let fav = ns.getFactionFavor(f);\\r\\n        let fvg = ns.getFactionFavorGain(f);\\r\\n        let augInfo = ns.getOwnedAugmentations(true);\\r\\n        let augs = ns.getAugmentationsFromFaction(f).map(a => {\\r\\n            let [aRep, aPrc] = ns.getAugmentationCost(a);\\r\\n            let has = augInfo.includes(a);\\r\\n            return new Augmentation(a, f, aRep, aPrc, has);\\r\\n        })\\r\\n        return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Augmentation {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} fac\\r\\n     * @param {number} rep\\r\\n     * @param {number} prc\\r\\n     * @param {boolean} has\\r\\n     */\\r\\n    constructor(name, fac, rep, prc, has) {\\r\\n        this.name = name;\\r\\n        this.faction = fac;\\r\\n        this.requiredReputation = rep;\\r\\n        this.price = prc;\\r\\n        this.owned = has;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        if (this.owned) {\\r\\n            return `${this.name} (OWNED)`\\r\\n        } else {\\r\\n            return `${this.name} (${format.money(this.price)})`\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Gang {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} requiredKarma\\r\\n     * @param {number} requiredStats\\r\\n     * @param {string|null} requiredLocation\\r\\n     */\\r\\n    constructor(name, requiredKarma, requiredStats, requiredLocation) {\\r\\n        this.name = name;\\r\\n        this.requiredKarma = requiredKarma;\\r\\n        this.requiredStats = requiredStats;\\r\\n        this.requiredLocation = requiredLocation;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static getAll() {\\r\\n        return [\\r\\n            new Gang('Slum Snakes', 9, 30, null),\\r\\n            new Gang('Tetrads', 18, 75, 'Chongqing'),\\r\\n            new Gang('Speakers for the Dead', 45, 300, null),\\r\\n            new Gang('The Dark Army', 45, 300, 'Chongqing'),\\r\\n            new Gang('The Syndicate', 90, 200, 'Sector-12'),\\r\\n            // no silhouette - special company reqs\\r\\n        ];\\r\\n    }\\r\\n}\",\"ramUsage\":60.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L4.js\",\"code\":\"\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"fac-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let f = FactionWithAugs.get(ns, 'Bachman & Associates');\\r\\n    ns.tprint(`${f.name}: ${f.reputation}`);\\r\\n    for (var aug of f.augmentations) {\\r\\n        ns.tprint(aug);\\r\\n    }\\r\\n}\",\"ramUsage\":60.15,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"galactic-cyber\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] status: security level 23 / goal 39; \",\"[INF] status: money $2094654473 / goal $1096232449; increasing\",\"[INF] assigning netlink grow -> hack x18\",\"[INF] status: security level 20 / goal 39; decreasing\",\"[INF] status: money $919363529 / goal $1096232449; \",\"[INF] assigning neo-net hack -> grow x18\",\"[INF] status: security level 24 / goal 39; \",\"[INF] status: money $1912900400 / goal $1096232449; \",\"[INF] assigning neo-net grow -> hack x18\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $265573650 / goal $1096232449; \",\"[INF] assigning neo-net hack -> grow x18\",\"[INF] status: security level 20 / goal 39; decreasing\",\"[INF] status: money $2192464898 / goal $1096232449; \",\"[INF] assigning neo-net grow -> hack x18\",\"[INF] status: security level 23 / goal 39; \",\"[INF] status: money $1556514106 / goal $1096232449; \",\"[INF] assigning iron-gym grow -> hack x18\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $1972873817 / goal $1096232449; \",\"[INF] assigning zer0 grow -> hack x18\",\"[INF] status: security level 26 / goal 39; \",\"[INF] status: money $1884996160 / goal $1096232449; \",\"[INF] assigning rho-construction grow -> hack x18\",\"[INF] status: security level 22 / goal 39; \",\"[INF] status: money $755154121 / goal $1096232449; decreasing\",\"[INF] assigning neo-net hack -> grow x18\",\"[INF] status: security level 20 / goal 39; decreasing\",\"[INF] status: money $1471172766 / goal $1096232449; \",\"[INF] assigning neo-net grow -> hack x18\",\"[INF] status: security level 23 / goal 39; \",\"[INF] status: money $203430109 / goal $1096232449; \",\"[INF] assigning neo-net hack -> grow x18\",\"[INF] status: security level 23 / goal 39; \",\"[INF] status: money $905196617 / goal $1096232449; \",\"[INF] assigning phantasy hack -> grow x18\",\"[INF] status: security level 25 / goal 39; \",\"[INF] status: money $293522983 / goal $1096232449; \",\"[INF] assigning netlink hack -> grow x18\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $458118170 / goal $1096232449; \",\"[INF] assigning iron-gym hack -> grow x18\",\"[INF] status: security level 26 / goal 39; \",\"[INF] status: money $2097951641 / goal $1096232449; increasing\",\"[INF] assigning neo-net grow -> hack x18\",\"[INF] status: security level 22 / goal 39; \",\"[INF] status: money $437511901 / goal $1096232449; \",\"[INF] assigning neo-net hack -> grow x18\",\"[INF] status: security level 20 / goal 39; decreasing\",\"[INF] status: money $2192464898 / goal $1096232449; \",\"[INF] assigning neo-net grow -> hack x18\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[\"galactic-cyber\"],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server galactic-cyber in 58.880 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.869 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.869 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.858 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.847 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.847 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.836 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.825 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.814 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.814 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.803 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.792 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.781 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.781 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.770 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.759 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.759 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.748 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.737 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.726 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.726 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.715 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.704 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.704 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.693 seconds (t=599093)\",\"Server security level on galactic-cyber weakened to 20. Gained 55,107,625.1323 hacking exp (t=599093)\",\"Executing weaken() on server galactic-cyber in 58.682 seconds (t=599093)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26372.810000060883,\"onlineMoneyMade\":0,\"onlineExpGained\":23365633056.101067,\"threads\":599093,\"dataMap\":{\"81.0.1.5\":[0,0,0,254015432]}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe-6.25%-INC\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"80.7.7.2\",\"59.3.6.0\",\"47.6.5.4\",\"49.5.5.0\",\"67.9.3.2\",\"35.7.2.3\",\"21.7.2.3\",\"66.4.0.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"48.7.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.7.9.3\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1146,\"moneyAvailable\":25474140484.5,\"moneyMax\":95528026816.875,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"92.6.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.1.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.1.4.6\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1182,\"moneyAvailable\":41996106588,\"moneyMax\":157485399705,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"89.0.1.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"97.1.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.1.0.8\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1085,\"moneyAvailable\":20200656506.25,\"moneyMax\":75752461898.4375,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":72,\"serversOnNetwork\":[\"87.7.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"93.9.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.9.7.0\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.9.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"93.9.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"93.9.7.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 47.496 seconds (t=146)\",\"Available money on galactic-cyber grown by 94.807497%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.964 seconds (t=146)\",\"Available money on galactic-cyber grown by 97.018431%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.037 seconds (t=146)\",\"Available money on galactic-cyber grown by 97.075840%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.014 seconds (t=146)\",\"Available money on galactic-cyber grown by 100.880963%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 54.528 seconds (t=146)\",\"Available money on galactic-cyber grown by 103.326960%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 53.611 seconds (t=146)\",\"Available money on galactic-cyber grown by 106.726854%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 52.428 seconds (t=146)\",\"Available money on galactic-cyber grown by 110.041889%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 51.335 seconds (t=146)\",\"Available money on galactic-cyber grown by 112.819261%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 50.475 seconds (t=146)\",\"Available money on galactic-cyber grown by 100.109857%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 49.233 seconds (t=146)\",\"Available money on galactic-cyber grown by 16.478478%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 47.303 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 57.462 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.509 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.177 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.195 seconds (t=146)\",\"Available money on galactic-cyber grown by 2.110364%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.381 seconds (t=146)\",\"Available money on galactic-cyber grown by 14.854737%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.068 seconds (t=146)\",\"Available money on galactic-cyber grown by 65.775249%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 55.705 seconds (t=146)\",\"Available money on galactic-cyber grown by 55.785404%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 55.281 seconds (t=146)\",\"Available money on galactic-cyber grown by 100.646207%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 54.505 seconds (t=146)\",\"Available money on galactic-cyber grown by 104.906629%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 52.953 seconds (t=146)\",\"Available money on galactic-cyber grown by 110.809088%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 51.007 seconds (t=146)\",\"Available money on galactic-cyber grown by 79.798858%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 53.305 seconds (t=146)\",\"Available money on galactic-cyber grown by 70.798089%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 48.194 seconds (t=146)\",\"Available money on galactic-cyber grown by 92.524843%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 57.794 seconds (t=146)\",\"Available money on galactic-cyber grown by 90.446788%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 58.725 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26286.210000060568,\"onlineMoneyMade\":0,\"onlineExpGained\":6056850.412978177,\"threads\":146,\"dataMap\":{\"81.0.1.5\":[0,0,65846,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":918,\"moneyAvailable\":11279077729.5,\"moneyMax\":42296541485.625,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":65,\"serversOnNetwork\":[\"26.0.4.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"92.6.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.6.2.9\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1218,\"moneyAvailable\":24878425630.5,\"moneyMax\":93294096114.375,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":92,\"serversOnNetwork\":[\"26.0.4.1\",\"48.7.9.3\",\"13.0.9.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"98.8.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.8.7.1\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1046,\"moneyAvailable\":62950700764.6875,\"moneyMax\":62950700764.6875,\"hackDifficulty\":17,\"baseDifficulty\":50,\"minDifficulty\":17,\"serverGrowth\":48,\"serversOnNetwork\":[\"20.6.3.2\",\"37.6.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"26.0.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.0.4.1\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"26.0.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"26.0.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"26.0.4.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 48.599 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 47.496 seconds (t=73)\",\"Available money on galactic-cyber grown by 38.324371%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 57.821 seconds (t=73)\",\"Available money on galactic-cyber grown by 37.735876%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.555 seconds (t=73)\",\"Available money on galactic-cyber grown by 37.703710%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.597 seconds (t=73)\",\"Available money on galactic-cyber grown by 38.498521%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 57.581 seconds (t=73)\",\"Available money on galactic-cyber grown by 36.633414%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 57.039 seconds (t=73)\",\"Available money on galactic-cyber grown by 39.565578%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 56.252 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.318318%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 55.387 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.626599%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 55.018 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.403093%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 54.152 seconds (t=73)\",\"Available money on galactic-cyber grown by 43.112959%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 52.366 seconds (t=73)\",\"Available money on galactic-cyber grown by 44.216543%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 51.302 seconds (t=73)\",\"Available money on galactic-cyber grown by 45.962459%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 49.698 seconds (t=73)\",\"Available money on galactic-cyber grown by 47.599664%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 48.290 seconds (t=73)\",\"Available money on galactic-cyber grown by 9.322199%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.299 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 60.396 seconds (t=73)\",\"Available money on galactic-cyber grown by 4.888312%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 47.124 seconds (t=73)\",\"Available money on galactic-cyber grown by 1.046450%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.018 seconds (t=73)\",\"Available money on galactic-cyber grown by 37.367449%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.917 seconds (t=73)\",\"Available money on galactic-cyber grown by 37.653783%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.541 seconds (t=73)\",\"Available money on galactic-cyber grown by 38.509715%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 57.439 seconds (t=73)\",\"Available money on galactic-cyber grown by 39.668064%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 56.035 seconds (t=73)\",\"Available money on galactic-cyber grown by 37.632452%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.547 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.723777%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 53.718 seconds (t=73)\",\"Available money on galactic-cyber grown by 42.009504%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 53.406 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26184.210000060197,\"onlineMoneyMade\":0,\"onlineExpGained\":3021710.294723037,\"threads\":73,\"dataMap\":{\"81.0.1.5\":[0,0,32850,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1053,\"moneyAvailable\":13007517495.75,\"moneyMax\":48778190609.0625,\"hackDifficulty\":96,\"baseDifficulty\":96,\"minDifficulty\":32,\"serverGrowth\":97,\"serversOnNetwork\":[\"96.9.7.7\",\"93.9.7.0\",\"92.6.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"87.7.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.7.3.5\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1044,\"moneyAvailable\":13476389343,\"moneyMax\":50536460036.25,\"hackDifficulty\":67,\"baseDifficulty\":67,\"minDifficulty\":22,\"serverGrowth\":78,\"serversOnNetwork\":[\"81.2.1.8\",\"97.1.0.8\",\"89.0.1.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.6.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.6.3.2\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1254,\"moneyAvailable\":16178029740.75,\"moneyMax\":60667611527.8125,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":94,\"serversOnNetwork\":[\"92.4.7.4\",\"98.8.7.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.9.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.9.7.7\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1024,\"ramUsed\":1023.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.9.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"96.9.7.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"96.9.7.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 62.302 seconds (t=585)\",\"Available money on galactic-cyber grown by 798.839266%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 60.788 seconds (t=585)\",\"Available money on galactic-cyber grown by 223.787716%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 61.606 seconds (t=585)\",\"Available money on galactic-cyber grown by 56.842488%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 48.111 seconds (t=585)\",\"Available money on galactic-cyber grown by 34.407728%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 59.341 seconds (t=585)\",\"Available money on galactic-cyber grown by 28.378771%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 58.237 seconds (t=585)\",\"Available money on galactic-cyber grown by 25.546903%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 57.733 seconds (t=585)\",\"Available money on galactic-cyber grown by 57.299034%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 57.629 seconds (t=585)\",\"Available money on galactic-cyber grown by 160.336654%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 58.350 seconds (t=585)\",\"Available money on galactic-cyber grown by 130.100159%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 57.855 seconds (t=585)\",\"Available money on galactic-cyber grown by 202.029325%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 57.677 seconds (t=585)\",\"Available money on galactic-cyber grown by 345.376604%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 56.839 seconds (t=585)\",\"Available money on galactic-cyber grown by 332.940630%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 55.941 seconds (t=585)\",\"Available money on galactic-cyber grown by 529.747887%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 55.573 seconds (t=585)\",\"Available money on galactic-cyber grown by 812.925219%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 55.377 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,217.897791%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 54.949 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,229.904070%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 54.298 seconds (t=585)\",\"Available money on galactic-cyber grown by 765.469201%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 52.866 seconds (t=585)\",\"Available money on galactic-cyber grown by 397.782491%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 52.271 seconds (t=585)\",\"Available money on galactic-cyber grown by 379.965145%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 50.585 seconds (t=585)\",\"Available money on galactic-cyber grown by 136.004960%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 48.885 seconds (t=585)\",\"Available money on galactic-cyber grown by 270.755058%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 63.495 seconds (t=585)\",\"Available money on galactic-cyber grown by 728.286244%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 50.603 seconds (t=585)\",\"Available money on galactic-cyber grown by 424.238871%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 64.476 seconds (t=585)\",\"Available money on galactic-cyber grown by 261.150053%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 60.918 seconds (t=585)\",\"Available money on galactic-cyber grown by 132.888859%. Gained 53,811.2792 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 48.403 seconds (t=585)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26358.21000006083,\"onlineMoneyMade\":0,\"onlineExpGained\":23784585.415724058,\"threads\":585,\"dataMap\":{\"81.0.1.5\":[0,0,258570,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":956,\"moneyAvailable\":1169731086,\"moneyMax\":4386491572.5,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":84,\"serversOnNetwork\":[\"60.7.8.6\",\"26.0.4.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"37.6.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.6.7.4\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1315,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"98.8.7.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.4.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.4.7.4\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1052,\"moneyAvailable\":853704969,\"moneyMax\":3201393633.75,\"hackDifficulty\":91,\"baseDifficulty\":91,\"minDifficulty\":30,\"serverGrowth\":92,\"serversOnNetwork\":[\"31.3.2.9\",\"20.6.3.2\",\"64.5.0.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"55.4.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.4.9.5\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245175-KuaiGongInternational.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[7,8],[1,2,4],[6,9,3,6],[2,5,4,3,5],[4,9,2,7,8,8],[7,2,7,5,6,2,1],[1,7,4,7,2,4,8,5],[2,7,9,6,7,8,2,3,7],[1,3,1,6,3,3,8,8,5,3],[1,3,3,6,9,7,5,4,8,9,5],[4,1,4,3,5,3,3,2,8,4,2,5]],\"reward\":{\"type\":0,\"name\":\"KuaiGong International\"}}}],\"dir\":0,\"requiredHackingSkill\":941,\"moneyAvailable\":679598044.5,\"moneyMax\":2548492666.875,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":70,\"serversOnNetwork\":[\"37.3.7.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"16.7.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.7.8.4\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":921,\"moneyAvailable\":604298811,\"moneyMax\":2266120541.25,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":74,\"serversOnNetwork\":[\"78.5.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"81.2.1.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.2.1.8\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.2.1.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"81.2.1.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"81.2.1.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 51.788 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.793419%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.015 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.314623%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.819 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.652049%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.088 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.448416%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.446 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.564359%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.808 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.856988%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.951 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.183208%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.029 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.479442%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.229 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.708011%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.618 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.131727%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 52.544 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.825587%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.865 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.513158%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.331 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.259251%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.769 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.079882%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.218 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.865723%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.872 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.796005%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.104 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.718257%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.344 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.754162%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.207 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.297717%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 60.710 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.842241%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 62.308 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.384989%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.465 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.570708%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.662 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.806148%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.007 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.378494%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.396 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.491711%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.074 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25866.21000005904,\"onlineMoneyMade\":0,\"onlineExpGained\":1480224.1114972117,\"threads\":36,\"dataMap\":{\"81.0.1.5\":[0,0,16092,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":887,\"moneyAvailable\":484078606.5,\"moneyMax\":1815294774.375,\"hackDifficulty\":94,\"baseDifficulty\":94,\"minDifficulty\":31,\"serverGrowth\":72,\"serversOnNetwork\":[\"31.3.2.9\",\"87.7.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"18.8.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.8.6.7\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"18.8.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"18.8.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"18.8.6.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 53.693 seconds (t=73)\",\"Available money on galactic-cyber grown by 42.249849%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 53.324 seconds (t=73)\",\"Available money on galactic-cyber grown by 43.517388%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 52.034 seconds (t=73)\",\"Available money on galactic-cyber grown by 44.089545%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 51.471 seconds (t=73)\",\"Available money on galactic-cyber grown by 45.783326%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 49.912 seconds (t=73)\",\"Available money on galactic-cyber grown by 47.622350%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 48.325 seconds (t=73)\",\"Available money on galactic-cyber grown by 14.584231%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.012 seconds (t=73)\",\"Available money on galactic-cyber grown by 2.585757%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.243 seconds (t=73)\",\"Available money on galactic-cyber grown by 2.735471%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 60.197 seconds (t=73)\",\"Available money on galactic-cyber grown by 4.880698%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 47.401 seconds (t=73)\",\"Available money on galactic-cyber grown by 9.615281%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.254 seconds (t=73)\",\"Available money on galactic-cyber grown by 17.024043%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 57.462 seconds (t=73)\",\"Available money on galactic-cyber grown by 9.719636%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 56.509 seconds (t=73)\",\"Available money on galactic-cyber grown by 17.161814%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 56.177 seconds (t=73)\",\"Available money on galactic-cyber grown by 26.073654%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 56.195 seconds (t=73)\",\"Available money on galactic-cyber grown by 39.459755%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 56.334 seconds (t=73)\",\"Available money on galactic-cyber grown by 23.434366%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 55.655 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.023860%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 54.515 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.360130%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 54.138 seconds (t=73)\",\"Available money on galactic-cyber grown by 42.629172%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 52.814 seconds (t=73)\",\"Available money on galactic-cyber grown by 44.241055%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 51.221 seconds (t=73)\",\"Available money on galactic-cyber grown by 46.747736%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 48.955 seconds (t=73)\",\"Available money on galactic-cyber grown by 15.326821%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 50.998 seconds (t=73)\",\"Available money on galactic-cyber grown by 4.407712%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 64.630 seconds (t=73)\",\"Available money on galactic-cyber grown by 14.362560%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 61.349 seconds (t=73)\",\"Available money on galactic-cyber grown by 4.849208%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 48.537 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26148.210000060066,\"onlineMoneyMade\":0,\"onlineExpGained\":3021710.294723037,\"threads\":73,\"dataMap\":{\"81.0.1.5\":[0,0,32850,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-312104.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":343569503,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":895,\"moneyAvailable\":536649102,\"moneyMax\":2012434132.5,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":63,\"serversOnNetwork\":[\"0.8.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"17.6.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.6.7.9\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":876,\"moneyAvailable\":727941605.25,\"moneyMax\":2729781019.6875,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":90,\"serversOnNetwork\":[\"51.4.5.5\",\"95.1.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"28.8.4.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.8.4.2\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"28.8.4.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"28.8.4.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"28.8.4.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.159 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $177,624,882.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.544 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $125,599,482.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.624 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $138,388,698.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.037 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $148,697,442.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.072 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $117,762,246.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.294 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $170,915,364.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.074 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $150,417,630.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.538 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $91,708,776.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.757 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $30,045,834.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.523 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $186,685,632.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.859 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $65,783,502.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.455 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $41,387,040.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.598 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,242,524.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.602 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $157,369,590.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.236 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $69,729,768.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.179 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $29,527,020.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.026 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $171,876,078.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.699 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $103,294,368.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.351 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,794,276.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.018 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $21,509,892.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.865 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $203,392,944.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.984 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $82,480,158.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.625 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $36,011,106.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.394 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $59,549,598.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.928 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $131,073,318.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.432 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":159970162680,\"onlineExpGained\":2510917.075039775,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[159970162680,27432,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":847,\"moneyAvailable\":885190658.25,\"moneyMax\":3319464968.4375,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":85,\"serversOnNetwork\":[\"91.6.8.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"0.8.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.8.5.5\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"0.8.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"0.8.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"0.8.5.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 54.582 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.468951%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.297 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.896439%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.184 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.083084%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 52.714 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.739365%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.112 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.359116%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.702 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.023461%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.293 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.784441%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.187 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.496238%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 60.131 seconds (t=36)\",\"Available money on galactic-cyber grown by 14.475641%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.284 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.595010%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.821 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.839 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.642494%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.086 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.573 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.377 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.669526%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.084 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.244421%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.800 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.726597%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.001 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.012426%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 52.773 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.673697%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.179 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.461552%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.387 seconds (t=36)\",\"Available money on galactic-cyber grown by 10.952315%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 64.089 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.035802%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.662 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 65.377 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.620804%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.865 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.356500%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.286 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25938.210000059302,\"onlineMoneyMade\":0,\"onlineExpGained\":1483535.5748338946,\"threads\":36,\"dataMap\":{\"81.0.1.5\":[0,0,16128,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":801,\"moneyAvailable\":577064736.75,\"moneyMax\":2163992762.8125,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":75,\"serversOnNetwork\":[\"31.1.6.6\",\"18.8.6.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"5.0.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.0.7.1\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.0.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"5.0.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"5.0.7.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 50.136 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.541221%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.335 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.196934%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.957 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.607214%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.798 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.524193%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 60.081 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.701077%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.479 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.553120%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.301 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.051 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.736843%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.285 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.909450%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.790 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.213765%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.924 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.845335%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.254 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.237347%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 52.273 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.855840%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.785 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.320966%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.730 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.059747%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.174 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 60.396 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 61.072 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.965 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.539128%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.832 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.077354%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 61.472 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.335950%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 60.578 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.600159%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.675 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.383074%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 65.530 seconds (t=36)\",\"Available money on galactic-cyber grown by 10.225520%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.124 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.731167%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.226 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25902.21000005917,\"onlineMoneyMade\":0,\"onlineExpGained\":1483535.5748338946,\"threads\":36,\"dataMap\":{\"81.0.1.5\":[0,0,16128,0]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":815,\"moneyAvailable\":519907122,\"moneyMax\":1949651707.5,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":84,\"serversOnNetwork\":[\"95.1.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"31.1.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.1.6.6\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":929,\"moneyAvailable\":614005847.25,\"moneyMax\":2302521927.1875,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":73,\"serversOnNetwork\":[\"78.5.2.0\",\"0.8.5.5\",\"60.7.8.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"81.0.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.0.1.5\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":870,\"moneyAvailable\":741194265.960695,\"moneyMax\":2192464898.4375,\"hackDifficulty\":21.688000000000017,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":83,\"serversOnNetwork\":[\"60.6.1.9\",\"37.3.7.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"11.6.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.6.3.0\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":906,\"moneyAvailable\":803547545.25,\"moneyMax\":3013303294.6875,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":56,\"serversOnNetwork\":[\"42.1.7.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"51.4.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"51.4.5.5\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"51.4.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"51.4.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"51.4.5.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.185 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $161,515,800.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.570 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $114,425,298.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.650 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $126,389,088.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.063 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $132,354,684.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.104 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $105,091,182.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.326 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $153,099,648.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.106 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $133,734,402.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.570 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $81,748,170.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.789 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $31,502,394.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.659 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $165,740,814.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.891 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $53,075,124.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.513 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $33,540,174.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.656 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $16,465,014.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.765 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $127,353,492.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.294 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $56,636,406.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.237 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $24,061,428.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.084 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $138,265,704.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.757 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $75,599,946.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.435 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,765,576.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.102 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,764,118.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.057 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $163,622,214.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.123 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $66,189,240.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.761 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,511,804.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.478 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $97,524,504.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.540 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $105,191,550.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.568 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":160237602432,\"onlineExpGained\":2509261.3433714337,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[160237602432,27414,0,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":938,\"moneyAvailable\":729346516.5,\"moneyMax\":2735049436.875,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":61,\"serversOnNetwork\":[\"25.0.5.6\",\"17.6.7.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"63.5.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.5.2.9\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":792,\"moneyAvailable\":742259061.75,\"moneyMax\":2783471481.5625,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":69,\"serversOnNetwork\":[\"89.3.0.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"31.3.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.3.2.9\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":798,\"moneyAvailable\":586570610.25,\"moneyMax\":2199639788.4375,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":73,\"serversOnNetwork\":[\"95.1.8.7\",\"92.4.7.4\",\"81.2.1.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"78.5.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"78.5.2.0\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.5.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"78.5.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"78.5.2.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.361 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $93,185,838.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.343 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $95,118,444.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.711 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $28,361,583.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.883 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $52,933,617.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.544 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,956,987.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.708 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $63,832,950.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.718 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $43,425,252.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.674 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $29,453,076.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.867 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,062,380.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.002 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $59,035,419.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.969 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $41,183,415.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.165 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $10,379,565.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.852 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,545,081.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.518 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $81,691,749.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.849 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $24,969,042.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.488 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,367,403.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.492 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $87,687,459.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.194 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $29,186,271.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.806 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $12,765,159.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.497 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $94,513,257.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.050 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $60,598,017.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.507 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,316,189.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.276 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,582,967.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.228 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $96,428,727.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $35,447,634.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.895 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":78589010394,\"onlineExpGained\":1255458.5375198876,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[78589010394,13716,0,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":760,\"moneyAvailable\":537729945.75,\"moneyMax\":2016487296.5625,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":78,\"serversOnNetwork\":[\"37.3.7.9\",\"16.7.8.4\",\"31.1.6.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"37.3.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.3.7.9\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":821,\"moneyAvailable\":1184747096.25,\"moneyMax\":4442801610.9375,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":58,\"serversOnNetwork\":[\"81.0.1.5\",\"55.4.9.5\",\"78.5.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.2.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.2.3.6\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.2.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.2.3.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"25.2.3.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 57.185 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.846657%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.121 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.901647%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 53.794 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.094518%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.714 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.212383%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.076 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.495327%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.591 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.819895%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 49.014 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.127247%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 47.595 seconds (t=18)\",\"Available money on galactic-cyber grown by 4.581019%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.341 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.927 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.613 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 59.100 seconds (t=18)\",\"Available money on galactic-cyber grown by 3.564370%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.452 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.251425%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.731 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.304203%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.372 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.181400%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.179 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.175912%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.207 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.229 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.207606%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.990 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.187592%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.114 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.231198%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.821 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.403105%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.677 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.648658%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 55.139 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.278790%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.475 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.069112%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.706 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.199331%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.000 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25506.21000005773,\"onlineMoneyMade\":0,\"onlineExpGained\":728521.9340702158,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[0,0,7920,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":785,\"moneyAvailable\":1202701890.75,\"moneyMax\":4510132090.3125,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":83,\"serversOnNetwork\":[\"42.1.7.0\",\"91.6.8.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"95.1.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.1.8.7\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":777,\"moneyAvailable\":926175916.5,\"moneyMax\":3473159686.875,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":69,\"serversOnNetwork\":[\"17.6.7.9\",\"5.0.7.1\",\"31.3.2.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"89.3.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.3.0.5\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":808,\"moneyAvailable\":1055669865,\"moneyMax\":3958761993.75,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":70,\"serversOnNetwork\":[\"91.6.8.9\",\"63.5.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"91.6.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.6.8.9\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.6.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"91.6.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"91.6.8.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.250 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $66,292,020.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.687 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $50,885,901.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.822 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $51,813,639.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.721 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $89,874,333.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.007 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $70,879,095.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.229 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $75,532,653.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.796 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $91,080,702.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.473 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $55,299,492.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.692 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,366,438.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.353 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $93,546,072.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.689 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $41,777,694.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.377 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $22,049,424.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.413 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $10,850,445.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.524 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $99,609,282.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.157 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $40,479,840.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.045 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,147,106.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.896 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $92,062,197.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 20.443 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,719,464.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.461 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,340,213.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.236 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $8,155,332.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.083 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $70,758,000.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.149 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $28,670,904.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.787 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $16,280,082.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.716 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $49,520,511.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.671 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $43,442,946.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.607 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":77772021111,\"onlineExpGained\":1256079.4368955155,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[77772021111,13716,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":783,\"moneyAvailable\":760015883.25,\"moneyMax\":2850059562.1875,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":76,\"serversOnNetwork\":[\"25.2.3.6\",\"28.8.4.2\",\"89.3.0.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"98.1.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.1.7.3\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"98.1.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"98.1.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"98.1.7.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.068 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $99,277,470.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.348 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $76,509,126.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.477 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $78,137,892.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.841 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $100,204,812.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.821 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $93,746,223.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.150 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $38,906,676.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.082 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,138,463.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.290 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $30,481,056.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.085 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,720,189.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.223 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $93,101,139.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.855 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $38,000,916.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.403 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $20,090,952.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.439 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $9,905,094.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.550 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $90,722,970.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.183 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $40,100,733.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.127 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $16,943,400.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.974 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $88,097,220.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 20.504 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,612,148.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.542 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,062,627.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.262 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $8,079,147.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.161 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $70,614,549.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.230 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,097,012.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.813 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,841,621.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.742 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $45,292,896.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.697 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $39,530,997.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.634 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":78502371453,\"onlineExpGained\":1256079.4368955155,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[78502371453,13716,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":716,\"moneyAvailable\":547366104,\"moneyMax\":2052622890,\"hackDifficulty\":62,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":65,\"serversOnNetwork\":[\"30.2.9.4\",\"25.0.5.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"42.1.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.1.7.0\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.1.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"42.1.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"42.1.7.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 14.809 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $67,097,790.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.072 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $41,126,382.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.210 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $48,197,304.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.823 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $92,079,576.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.364 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $44,503,362.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.347 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,130,888.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.296 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $173,312,334.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.002 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $88,957,656.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.032 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,121,450.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.778 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $184,461,642.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 20.361 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $85,055,058.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.403 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $31,193,928.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.070 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $21,038,400.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.025 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $184,207,806.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.091 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $74,415,654.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.729 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $29,761,560.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.446 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $93,575,592.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.404 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $118,313,874.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.536 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":317.40999999999053,\"onlineMoneyMade\":1426550256,\"onlineExpGained\":29803.17003014504,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[1426550256,324,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":492,\"moneyAvailable\":434657129.25,\"moneyMax\":1629964234.6875,\"hackDifficulty\":48,\"baseDifficulty\":48,\"minDifficulty\":16,\"serverGrowth\":43,\"serversOnNetwork\":[\"83.9.9.1\",\"11.6.3.0\",\"25.2.3.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"49.7.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.7.9.1\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.7.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"49.7.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.7.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"49.7.9.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.107 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $86,140,467.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.387 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $66,579,525.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.516 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $79,204,437.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.985 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $86,826,303.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.860 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $81,510,570.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.190 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $46,515,114.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.333 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $87,514,641.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.329 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,429,652.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.124 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,665,560.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $81,517,950.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.894 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $50,399,343.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.953 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,252,255.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.670 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $7,501,977.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.778 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $57,876,570.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.307 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $25,781,445.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.250 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,038,739.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.309 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $62,666,001.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.770 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $34,305,012.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.448 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $12,614,004.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.115 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $8,538,921.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.070 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $74,206,215.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.136 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $30,052,026.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.774 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,051,058.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.702 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $51,780,915.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.658 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,744,091.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.581 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":78091821630,\"onlineExpGained\":1257114.269188229,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[78091821630,13707,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":536,\"moneyAvailable\":452793125.25,\"moneyMax\":1697974219.6875,\"hackDifficulty\":62,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":54,\"serversOnNetwork\":[\"83.9.9.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"19.8.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.8.4.8\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"19.8.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"19.8.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"19.8.4.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 55.010 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.778864%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.507 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.970528%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 53.393 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.982111%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 53.337 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.294150%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 51.624 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.503667%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.549 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.807040%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 49.056 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.117778%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 47.637 seconds (t=18)\",\"Available money on galactic-cyber grown by 4.564969%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.927 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.613 seconds (t=18)\",\"Available money on galactic-cyber grown by 4.559974%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 59.100 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.156727%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.368 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.276675%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.564 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.329777%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.205 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.268943%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.594 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.269645%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.598 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.271050%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.569 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.375634%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.884 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.317682%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.241 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.426371%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.539 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.613463%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 55.363 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.882974%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 53.760 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.541682%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 55.794 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.382804%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 51.049 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.554013%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.167 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.680317%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 49.549 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25476.01000005762,\"onlineMoneyMade\":0,\"onlineExpGained\":733489.1290752401,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[0,0,7974,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":411,\"moneyAvailable\":223358923.5,\"moneyMax\":837595963.125,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":34,\"serversOnNetwork\":[\"30.2.9.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"83.9.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.9.9.1\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"83.9.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"83.9.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"83.9.9.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 18.541 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $68,748,246.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.308 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $144,934,074.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.983 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $173,983,338.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.438 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $79,666,506.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.805 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $103,698,666.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.250 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $82,408,752.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.470 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $139,501,818.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.354 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $82,851,948.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.700 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $56,250,270.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.893 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,617,116.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.028 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $112,568,436.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.995 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $78,607,026.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.191 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $19,822,950.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.878 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $25,904,502.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.544 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $156,014,910.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.876 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,711,358.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.514 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $25,564,140.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.518 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $167,233,626.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.220 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $55,691,334.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.832 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $24,371,712.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.523 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $180,833,922.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.076 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $115,600,284.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.533 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $50,234,634.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.302 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $33,590,628.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.254 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $183,923,262.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.341 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2784.009999999659,\"onlineMoneyMade\":17898900012,\"onlineExpGained\":278162.92028135294,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[17898900012,3024,0,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":372,\"moneyAvailable\":182667420.75,\"moneyMax\":685002827.8125,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":39,\"serversOnNetwork\":[\"89.6.8.4\",\"42.1.7.0\",\"49.7.9.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"24.3.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.3.7.3\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"24.3.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"24.3.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"24.3.7.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 58.763 seconds (t=73)\",\"Available money on galactic-cyber grown by 39.858550%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 55.960 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.192268%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 55.563 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.121222%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 54.510 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.227541%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 54.403 seconds (t=73)\",\"Available money on galactic-cyber grown by 42.601864%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 52.932 seconds (t=73)\",\"Available money on galactic-cyber grown by 43.799209%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 51.731 seconds (t=73)\",\"Available money on galactic-cyber grown by 45.090582%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 50.517 seconds (t=73)\",\"Available money on galactic-cyber grown by 46.454220%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 49.307 seconds (t=73)\",\"Available money on galactic-cyber grown by 47.701916%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 48.251 seconds (t=73)\",\"Available money on galactic-cyber grown by 21.467484%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.460 seconds (t=73)\",\"Available money on galactic-cyber grown by 14.535495%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.523 seconds (t=73)\",\"Available money on galactic-cyber grown by 19.832280%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.010 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 58.526 seconds (t=73)\",\"Available money on galactic-cyber grown by 9.563173%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.110 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.020 seconds (t=73)\",\"Available money on galactic-cyber grown by 9.485577%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 60.396 seconds (t=73)\",\"Available money on galactic-cyber grown by 4.505427%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 61.072 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 47.965 seconds (t=73)\",\"Available money on galactic-cyber grown by 4.543075%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.689 seconds (t=73)\",\"Available money on galactic-cyber grown by 35.949510%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 60.868 seconds (t=73)\",\"Available money on galactic-cyber grown by 36.450176%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 60.151 seconds (t=73)\",\"Available money on galactic-cyber grown by 37.220709%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 59.090 seconds (t=73)\",\"Available money on galactic-cyber grown by 14.019430%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 65.071 seconds (t=73)\",\"Available money on galactic-cyber grown by 20.367970%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 47.363 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.465735%. Gained 6,714.9118 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 55.086 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26250.210000060437,\"onlineMoneyMade\":0,\"onlineExpGained\":3014995.382956986,\"threads\":73,\"dataMap\":{\"81.0.1.5\":[0,0,32777,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":748,\"moneyAvailable\":715457391,\"moneyMax\":2682965216.25,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":75,\"serversOnNetwork\":[\"84.2.1.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"30.2.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.2.9.4\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"30.2.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"30.2.9.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"30.2.9.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 52.259 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.504609%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.695 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.088820%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.322 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.342142%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.758 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.134979%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.074 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.564359%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.958 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.595915%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.589 seconds (t=36)\",\"Available money on galactic-cyber grown by 11.530904%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.685 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.133643%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.629 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.525662%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.748 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.294197%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.802 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.552158%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.298 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.823533%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.028 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.555488%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.254 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.534200%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.587 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.520141%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.091 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.171608%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.913 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.351863%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.344 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.265851%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.594 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.421607%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.134 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.835774%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.907 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.381958%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.387 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.524919%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.806 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.353738%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.912 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.596660%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.322 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.880110%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.654 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26010.210000059564,\"onlineMoneyMade\":0,\"onlineExpGained\":1490158.5015072604,\"threads\":36,\"dataMap\":{\"81.0.1.5\":[0,0,16200,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":430,\"moneyAvailable\":230774597.25,\"moneyMax\":865404739.6875,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":41,\"serversOnNetwork\":[\"84.2.1.8\",\"98.1.7.3\",\"19.8.4.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"71.3.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"71.3.6.8\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318505.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,5,9,10,4,8,7,6,6,0,4,2,7,0,10,9,10,10,0,8,3,2,10],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":632,\"moneyAvailable\":327535934.25,\"moneyMax\":1228259753.4375,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":65,\"serversOnNetwork\":[\"84.2.1.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.0.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.0.8.8\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.0.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.0.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"61.0.8.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 63.610 seconds (t=36)\",\"Available money on galactic-cyber grown by 5.010117%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.882 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.057478%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.366 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.770009%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.276 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.550048%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.486 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.591327%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.670 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.593837%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.877 seconds (t=36)\",\"Available money on galactic-cyber grown by 14.659623%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.196 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.782 seconds (t=36)\",\"Available money on galactic-cyber grown by 14.377810%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.613 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.137368%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.956 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.115854%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.117 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.362675%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.355 seconds (t=36)\",\"Available money on galactic-cyber grown by 10.545381%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.870 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.393641%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.240 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.378144%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.296 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.401399%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.216 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.611933%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.583 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.526484%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.823 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.709469%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.289 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.167975%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.987 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.905595%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.031 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.963875%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.543 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.990063%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.413 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.397409%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 49.498 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.248417%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.923 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26046.210000059695,\"onlineMoneyMade\":0,\"onlineExpGained\":1466978.2581504802,\"threads\":36,\"dataMap\":{\"81.0.1.5\":[0,0,15948,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":400,\"moneyAvailable\":303529301.25,\"moneyMax\":1138234879.6875,\"hackDifficulty\":66,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":27,\"serversOnNetwork\":[\"76.7.8.4\",\"60.6.1.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"89.6.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.6.8.4\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.6.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.6.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"89.6.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"89.6.8.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.198 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $79,962,624.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.635 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $61,141,257.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.770 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $57,717,612.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.076 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $65,633,976.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.172 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,845,809.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.339 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $81,003,807.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.223 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $60,698,970.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.583 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,183,221.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.802 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,541,947.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.725 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $75,136,095.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.904 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $57,395,133.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.073 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,245,102.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.709 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,626,072.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.215 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $98,704,863.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.671 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $28,994,670.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.370 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,378,031.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.322 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,516,418.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.074 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $31,107,294.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.555 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $12,467,385.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.275 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $7,716,798.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.174 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $67,338,558.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.243 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $24,898,473.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.826 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,171,013.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.755 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $43,317,135.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.710 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,709,793.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.647 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":78705603747,\"onlineExpGained\":1257942.1350223997,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[78705603747,13716,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-141669-ECorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[4,3],[9,1,6],[2,3,1,6],[9,7,6,3,9],[9,4,1,5,6,4],[3,3,2,9,5,8,7],[1,6,4,7,3,3,3,1],[9,4,8,8,2,4,7,8,3],[8,7,8,6,2,6,8,7,7,1],[4,3,7,7,5,1,3,8,3,9,1]],\"reward\":{\"type\":0,\"name\":\"ECorp\"}}}],\"dir\":0,\"requiredHackingSkill\":303,\"moneyAvailable\":126120836.25,\"moneyMax\":472953135.9375,\"hackDifficulty\":41,\"baseDifficulty\":41,\"minDifficulty\":14,\"serverGrowth\":51,\"serversOnNetwork\":[\"67.1.7.0\",\"83.9.9.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"60.9.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.9.0.3\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":396,\"moneyAvailable\":12354506.625,\"moneyMax\":646750625.625,\"hackDifficulty\":20.77600000000002,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":58,\"serversOnNetwork\":[\"33.5.8.0\",\"22.7.0.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"76.7.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.7.8.4\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.7.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"76.7.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"76.7.8.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 47.265 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.698102%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.832 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.782034%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.325 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":143.2100000000004,\"onlineMoneyMade\":0,\"onlineExpGained\":3311.4633366827816,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[0,0,36,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":421,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":54,\"serversOnNetwork\":[\"67.1.7.0\",\"61.0.8.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"31.9.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.9.4.7\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":293,\"moneyAvailable\":58412097,\"moneyMax\":219045363.75,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":48,\"serversOnNetwork\":[\"62.5.7.2\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"80.7.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.7.7.2\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"80.7.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"80.7.7.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 18.581 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $28,366,623.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.348 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $97,547,949.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.330 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $95,197,644.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.666 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,814,810.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.844 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $42,926,346.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.290 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $40,248,045.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.616 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $67,483,539.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.497 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $35,157,078.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.046 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,255,330.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.076 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,541,035.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.585 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $48,275,325.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.338 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $23,312,934.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.321 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $8,966,835.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.270 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $90,815,310.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.976 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $46,573,452.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.006 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,329,665.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.645 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $84,630,744.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 20.236 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $54,155,556.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.325 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $19,803,843.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.992 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $11,262,996.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.839 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $92,393,154.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.876 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,624,805.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.573 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $20,751,660.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.341 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,962,110.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.716 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $75,720,906.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.380 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":78033482010,\"onlineExpGained\":1254837.6381442593,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[78033482010,13689,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":1500000,\"moneyMax\":5625000,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\",\"18.1.3.2\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"59.3.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.3.6.0\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.3.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.3.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"59.3.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"59.3.6.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.282 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $75,882,951.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.957 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $66,502,395.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.200 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $41,787,027.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.779 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $54,326,673.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.224 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $43,129,107.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.444 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $72,894,330.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.328 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $50,140,458.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.635 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $33,902,532.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.828 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $19,582,344.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.963 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $68,289,480.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.930 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,491,326.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.125 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $11,948,031.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.813 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,524,775.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.479 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $94,036,923.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.810 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $28,694,817.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.449 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,322,167.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.453 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,373,345.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.155 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $33,687,891.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.767 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,372,137.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.484 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,813,735.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.178 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $66,608,811.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.481 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,482,617.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.195 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,776,921.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.990 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $92,135,907.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.207 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $38,938,455.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.868 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":79047437157,\"onlineExpGained\":1258563.0343980277,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[79047437157,13716,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":3156376.7255365383,\"moneyMax\":6468750,\"hackDifficulty\":12.067999999999993,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"47.6.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.6.5.4\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.6.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.6.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"47.6.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"47.6.5.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.374 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $96,548,724.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.412 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $90,969,804.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.724 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,037,881.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.896 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $50,533,299.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.557 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $36,271,080.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.721 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $60,845,328.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.731 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,613,232.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.713 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $25,590,177.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.906 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,868,207.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.041 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $51,040,602.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.008 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $35,716,977.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.204 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $9,017,919.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.892 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,754,430.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.662 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $61,669,386.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.928 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,911,691.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.566 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,861,948.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.994 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $65,629,206.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.272 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $21,913,938.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.885 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $9,618,894.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.575 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $89,035,353.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.699 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $58,115,007.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.364 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,748,845.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.182 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,274,433.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.924 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $96,621,219.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.194 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $40,811,400.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.855 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":80149578912,\"onlineExpGained\":1259804.8331492837,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[80149578912,13716,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"37.9.2.4\",\"20.0.2.0\",\"9.9.7.2\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"37.9.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.9.2.4\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.9.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.9.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"37.9.2.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"37.9.2.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 16.609 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $67,471,578.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.907 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $95,314,068.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.809 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $77,396,418.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.033 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $40,115,448.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.063 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $40,635,630.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.572 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $106,407,936.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.325 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $51,297,228.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.308 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $19,697,544.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.257 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $199,949,256.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.963 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $102,355,902.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.993 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $31,457,484.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.631 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $184,947,066.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 20.223 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $119,371,662.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.312 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $43,601,094.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.979 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $24,760,242.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.826 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $203,817,078.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.863 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $104,930,334.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.560 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $45,659,700.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.328 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $30,582,576.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.280 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $166,890,348.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.367 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":353.4099999999885,\"onlineMoneyMade\":1756658592,\"onlineExpGained\":33114.633366827824,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[1756658592,360,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"47.6.5.4\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"20.0.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.0.2.0\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.0.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.0.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"20.0.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"20.0.2.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.322 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $65,945,799.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.997 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $79,365,411.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.451 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $36,110,061.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.818 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,122,749.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.264 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,528,434.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.483 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $63,738,081.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.367 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $35,882,712.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.726 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $24,437,196.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.919 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,211,792.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.054 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $48,663,576.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.021 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $34,087,716.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.217 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $10,175,409.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.009 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,154,013.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.675 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $58,891,968.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.941 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,069,606.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.579 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $92,557,845.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 20.162 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $62,586,666.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.285 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $20,908,737.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.898 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $12,965,355.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.800 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,977,533.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.811 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $63,532,026.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.494 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,572,589.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.263 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,157,154.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.003 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,113,920.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.301 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,151,865.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.882 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":77942966580,\"onlineExpGained\":1260632.6989834544,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[77942966580,13725,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"47.6.5.4\",\"21.5.7.3\",\"67.1.7.0\",\"33.5.8.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"62.5.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.5.7.2\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.5.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.5.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"62.5.7.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.634 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.009999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":18,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"18.1.3.2\",\"31.9.4.7\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"21.5.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.5.7.3\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.5.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"21.5.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"21.5.7.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 50.722 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.132335%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.242 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.801693%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.772 seconds (t=36)\",\"Available money on galactic-cyber grown by 7.062216%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.292 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.341 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.381 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.733 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.596564%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.773 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.583995%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.782 seconds (t=36)\",\"Available money on galactic-cyber grown by 11.565109%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.199 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.254 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.462 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.509 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.177 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.195 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.381 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.068 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.705 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.660112%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.415 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.222269%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.839 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.772808%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.371 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.575033%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.392 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.073009%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.709 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.944589%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.454 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.081383%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.128 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.597322%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 59.662 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26082.210000059826,\"onlineMoneyMade\":0,\"onlineExpGained\":1486847.0381705775,\"threads\":36,\"dataMap\":{\"81.0.1.5\":[0,0,16164,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"20.0.2.0\",\"65.8.0.1\",\"84.2.1.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"49.5.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.5.5.0\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.5.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.5.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"49.5.5.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"49.5.5.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.211 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $76,342,491.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.648 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $58,428,639.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.783 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $55,217,088.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.090 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $62,638,272.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.185 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $45,706,590.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.352 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $77,503,923.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.236 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $57,899,979.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.596 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $35,504,811.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.815 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,851,863.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.738 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $71,630,640.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.917 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $49,765,032.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.112 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $11,503,251.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.748 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $11,880,378.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.254 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $98,482,590.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.797 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,699,075.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.383 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,746,501.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.335 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $96,794,037.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.087 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,935,686.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.594 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $10,815,651.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,038,426.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.637 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $58,261,059.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.283 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $25,564,536.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.051 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $12,308,931.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.794 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,400,084.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.139 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $45,542,520.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.594 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":77821179597,\"onlineExpGained\":1255458.5375198876,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[77821179597,13689,0,0]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"67.9.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.9.3.2\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.9.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.9.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"67.9.3.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"67.9.3.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.335 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $97,622,028.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.288 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $95,276,835.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.621 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $34,422,840.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.831 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $44,975,385.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.277 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $42,122,484.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.603 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $70,515,567.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 19.484 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $28,227,366.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.792 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $21,001,770.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.037 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $21,247,299.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.546 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $38,164,122.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.087 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,872,758.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.282 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $9,499,239.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.179 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $90,992,835.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.853 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $64,578,501.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.915 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $19,793,241.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.553 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $19,717,641.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.981 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $68,820,408.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.259 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $22,967,712.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.871 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $10,075,608.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.562 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $93,409,551.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.686 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $60,936,120.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.351 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $24,395,310.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.064 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,900,635.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.911 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,325,987.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.181 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $42,774,912.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.842 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":77572366965,\"onlineExpGained\":1258149.1014809422,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[77572366965,13698,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":3000000,\"moneyMax\":11250000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"67.1.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.1.7.0\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.1.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"67.1.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"67.1.7.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 55.158 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.575621%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.078 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.780449%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 49.081 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 48.537 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":179.20999999999836,\"onlineMoneyMade\":0,\"onlineExpGained\":4967.195005024172,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[0,0,54,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"20.0.2.0\",\"89.6.8.4\",\"76.7.8.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"9.9.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.9.7.2\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.9.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.9.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.9.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"9.9.7.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.054 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $44,660,484.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.426 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $168,008,238.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.464 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $158,838,318.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.776 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $46,743,606.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.949 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $87,740,388.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.609 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $74,027,160.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.880 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $105,145,488.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.783 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $62,168,796.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.779 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $46,153,836.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.024 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $46,570,032.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.533 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $84,158,136.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.074 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $59,134,248.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.269 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $20,870,442.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.166 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $200,383,596.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.840 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $141,948,918.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.902 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $43,458,462.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.540 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $43,184,358.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.968 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $151,713,918.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.246 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $50,577,534.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.858 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $22,160,718.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.549 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $188,551,296.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.198 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $90,856,800.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.599 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $39,614,742.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.367 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $55,789,614.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.795 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $144,434,124.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.406 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11282.410000005984,\"onlineMoneyMade\":71650543680,\"onlineExpGained\":1119274.6077987954,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[71650543680,12168,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737562-KuaiGongInternational.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"KuaiGong International\"}}}],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"47.6.5.4\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"33.5.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.5.8.0\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"33.5.8.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"33.5.8.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"33.5.8.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 53.953 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.947450%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 53.543 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.148343%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.411 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.253526%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 51.857 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.564334%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.893716%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 48.670 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.184432%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 47.344 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.419085%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.680 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.533447%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 55.950 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.635612%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 55.321 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.768585%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.506 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.061513%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.827 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.266734%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 51.720 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.537172%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.325 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.809016%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 49.001 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.155759%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 47.435 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.115935%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.635 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.079569%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.874 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.076888%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 58.873 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.881407%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 60.251 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.684229%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 61.723 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.417288%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 63.838 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.319944%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 51.374 seconds (t=18)\",\"Available money on galactic-cyber grown by 1.816238%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 65.377 seconds (t=18)\",\"Available money on galactic-cyber grown by 4.878170%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 47.479 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.369876%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.859 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25440.01000005749,\"onlineMoneyMade\":0,\"onlineExpGained\":726866.2024018744,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[0,0,7902,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-916779-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[122,171,3,141,26,85]],\"reward\":{\"type\":2,\"name\":\"Bachman & Associates\"}}}],\"dir\":0,\"requiredHackingSkill\":197,\"moneyAvailable\":48787724.25,\"moneyMax\":182953965.9375,\"hackDifficulty\":26,\"baseDifficulty\":26,\"minDifficulty\":9,\"serverGrowth\":31,\"serversOnNetwork\":[\"20.0.2.0\",\"60.9.0.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"65.8.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.8.0.1\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":225,\"moneyAvailable\":40743933.75,\"moneyMax\":152789751.5625,\"hackDifficulty\":41,\"baseDifficulty\":41,\"minDifficulty\":14,\"serverGrowth\":29,\"serversOnNetwork\":[\"21.5.7.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"35.7.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.7.2.3\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.7.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.7.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"35.7.2.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"35.7.2.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 51.569 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.392759%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.979 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.539975%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.236 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":113.01000000000107,\"onlineMoneyMade\":0,\"onlineExpGained\":3311.4633366827816,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[0,0,36,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"60.6.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.6.1.9\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.6.1.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.6.1.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"60.6.1.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.133 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $195,349,590.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.518 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $137,871,198.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.597 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $151,534,494.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.011 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $163,671,192.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.046 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $129,342,924.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.268 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $187,139,052.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.047 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $165,720,042.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.512 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $100,822,212.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.731 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,987,214.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.497 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $169,982,550.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.728 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $72,486,306.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.429 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $38,356,506.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.465 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,927,828.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.576 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $173,166,192.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.210 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $76,602,150.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.153 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,388,948.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.000 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $168,762,402.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 20.530 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $59,344,416.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.581 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $23,798,772.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.301 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,741,550.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.197 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $128,430,504.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.269 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,510,460.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.853 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,061,704.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.781 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $89,314,038.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.791 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $78,737,256.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.725 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":159887486826,\"onlineExpGained\":2512158.873791031,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[159887486826,27432,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":476,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":39,\"serversOnNetwork\":[\"61.0.8.8\",\"81.0.1.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"89.0.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.0.1.9\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.0.1.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"89.0.1.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"89.0.1.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.094 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $189,520,218.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.374 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $146,193,552.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.503 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $149,476,050.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.867 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $191,206,188.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.847 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $179,081,280.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.177 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $101,990,520.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.320 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $192,902,022.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.316 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $58,175,442.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.111 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $35,762,958.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.249 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $178,251,318.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 19.881 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $59,703,264.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.481 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,637,334.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.625 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,433,008.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.733 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $143,020,548.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.262 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $63,476,856.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 17.205 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,919,198.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.052 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $155,782,422.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 14.725 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $93,729,960.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.377 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $34,335,072.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.044 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $19,570,284.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.891 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $203,106,780.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.065 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $81,958,176.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.703 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $32,736,798.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 16.420 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $102,577,104.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 18.378 seconds (t=18)\",\"Script SUCCESSFULLY hacked galactic-cyber for $130,350,060.00 and 1,655.7317 exp (t=18)\",\"Attempting to hack galactic-cyber in 15.510 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":161098126902,\"onlineExpGained\":2502638.4166980674,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[161098126902,27396,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1008,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":51,\"serversOnNetwork\":[\"87.7.3.5\",\"59.1.4.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"25.0.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.0.5.6\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":770,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":54,\"serversOnNetwork\":[\"98.1.7.3\",\"51.4.5.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"60.7.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.7.8.6\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.7.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.7.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"60.7.8.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 52.845 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.326897%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 52.114 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.777373%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.034 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.051670%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.415 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.821660%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.721 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.438009%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.152 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.704645%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.388 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.031949%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 55.447 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.323245%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.656 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.484693%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.214 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.845334%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 53.264 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.575036%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.460 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.188553%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 50.051 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.910870%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 48.480 seconds (t=36)\",\"Available money on galactic-cyber grown by 10.013773%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 47.258 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.139919%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.012 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.124870%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.058 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.000172%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 58.229 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.214041%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.772 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.156504%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.937 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.252109%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.645 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.654983%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 56.427 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.212081%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 54.847 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.381251%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 57.224 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.094300%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 52.539 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.417278%. Gained 3,311.4633 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 51.740 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25974.210000059433,\"onlineMoneyMade\":0,\"onlineExpGained\":1483535.5748338946,\"threads\":36,\"dataMap\":{\"81.0.1.5\":[0,0,16128,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":509,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"31.1.6.6\",\"96.9.7.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"22.7.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.7.0.3\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.7.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"22.7.0.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"22.7.0.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 62.590 seconds (t=146)\",\"Available money on galactic-cyber grown by 9.223779%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 61.077 seconds (t=146)\",\"Available money on galactic-cyber grown by 4.886600%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 47.203 seconds (t=146)\",\"Available money on galactic-cyber grown by 93.775965%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 57.405 seconds (t=146)\",\"Available money on galactic-cyber grown by 93.444084%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 57.540 seconds (t=146)\",\"Available money on galactic-cyber grown by 96.949578%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.054 seconds (t=146)\",\"Available money on galactic-cyber grown by 99.020410%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 55.230 seconds (t=146)\",\"Available money on galactic-cyber grown by 101.278699%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 54.349 seconds (t=146)\",\"Available money on galactic-cyber grown by 103.940146%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 53.391 seconds (t=146)\",\"Available money on galactic-cyber grown by 105.958765%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 52.670 seconds (t=146)\",\"Available money on galactic-cyber grown by 109.241502%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 51.572 seconds (t=146)\",\"Available money on galactic-cyber grown by 115.284813%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 49.726 seconds (t=146)\",\"Available money on galactic-cyber grown by 71.518816%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 48.275 seconds (t=146)\",\"Available money on galactic-cyber grown by 22.285099%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 58.526 seconds (t=146)\",\"Available money on galactic-cyber grown by 27.537102%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 58.822 seconds (t=146)\",\"Available money on galactic-cyber grown by 7.014396%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 59.020 seconds (t=146)\",\"Available money on galactic-cyber grown by 45.542021%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 60.108 seconds (t=146)\",\"Available money on galactic-cyber grown by 73.194926%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 60.928 seconds (t=146)\",\"Available money on galactic-cyber grown by 76.523167%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 47.974 seconds (t=146)\",\"Available money on galactic-cyber grown by 25.913859%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 59.545 seconds (t=146)\",\"Available money on galactic-cyber grown by 87.650171%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 60.107 seconds (t=146)\",\"Available money on galactic-cyber grown by 89.475900%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 59.222 seconds (t=146)\",\"Available money on galactic-cyber grown by 91.540994%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 58.245 seconds (t=146)\",\"Available money on galactic-cyber grown by 86.589337%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 60.613 seconds (t=146)\",\"Available money on galactic-cyber grown by 95.805397%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.396 seconds (t=146)\",\"Available money on galactic-cyber grown by 95.148906%. Gained 13,429.8235 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 56.650 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26322.2100000607,\"onlineMoneyMade\":0,\"onlineExpGained\":6003131.118849766,\"threads\":146,\"dataMap\":{\"81.0.1.5\":[0,0,65262,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":349,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"60.9.0.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"84.2.1.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"84.2.1.8\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"84.2.1.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"84.2.1.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"84.2.1.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 48.623 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 47.203 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.240950%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.875 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.252124%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 57.792 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.466667%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.389 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.597488%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 55.574 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.770164%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.526 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.891892%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 53.810 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.022054%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 53.074 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.209769%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.032 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.550266%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 50.279 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.869653%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 48.745 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.213267%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 47.183 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.414719%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.656 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.380680%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.864 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.368435%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.952 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.385732%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.830 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.476986%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.239 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.476986%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 56.228 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.561206%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 55.694 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.775699%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.393 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.112389%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 52.479 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.712881%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 54.763 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.663030%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 49.651 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.862656%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 48.695 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.904442%. Gained 1,655.7317 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 60.048 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":13454.810000013887,\"onlineMoneyMade\":0,\"onlineExpGained\":390752.67372856685,\"threads\":18,\"dataMap\":{\"81.0.1.5\":[0,0,4248,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":211,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"21.5.7.3\",\"24.3.7.3\",\"30.2.9.4\",\"71.3.6.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"64.5.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.5.0.7\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"64.5.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"64.5.0.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"64.5.0.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.263 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $63,293,562.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.700 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $48,630,402.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.835 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $49,388,661.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.734 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $85,760,361.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.020 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $67,703,805.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.242 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $72,243,423.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.809 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $86,872,698.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.486 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $52,798,464.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.705 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $14,679,576.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.366 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $89,165,646.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 14.702 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $39,844,359.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.390 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $21,047,301.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.426 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $10,366,947.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $95,061,834.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.170 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $38,660,544.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.058 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $16,388,109.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.909 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $91,977,885.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 20.491 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $34,190,172.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.529 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $13,686,444.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.249 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $8,458,605.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 17.148 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $67,470,759.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.162 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $27,353,556.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.800 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,544,134.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 16.729 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $47,359,296.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 18.684 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $41,440,608.00 and 827.8658 exp (t=9)\",\"Attempting to hack galactic-cyber in 15.620 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":79347433617,\"onlineExpGained\":1252147.0741832044,\"threads\":9,\"dataMap\":{\"81.0.1.5\":[79347433617,13707,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":515,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"92.4.7.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"18.1.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.1.3.2\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"18.1.3.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"18.1.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"18.1.3.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"18.1.3.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 15.269 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $26,858,396.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 16.706 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $22,352,512.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 17.894 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $20,923,416.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 14.740 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $30,022,176.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 16.078 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $23,827,412.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 17.300 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $34,690,064.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 19.079 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $30,341,004.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 15.544 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $18,538,428.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 16.763 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $6,081,776.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 17.529 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,611,712.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 14.865 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $12,041,664.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 15.487 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $7,606,428.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 16.630 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,732,528.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 17.739 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $28,885,740.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 16.268 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $12,841,624.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 17.211 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $5,453,964.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 18.058 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $31,378,268.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 14.731 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $17,152,572.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 15.409 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $6,298,096.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 16.076 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $4,254,816.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 17.031 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $37,127,788.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 15.097 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $15,015,632.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 15.735 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $6,012,880.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 16.452 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $22,102,052.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 18.514 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $23,865,336.00 and 367.9404 exp (t=4)\",\"Attempting to hack galactic-cyber in 15.542 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":26388.41000006094,\"onlineMoneyMade\":34571939660,\"onlineExpGained\":560649.1399189286,\"threads\":4,\"dataMap\":{\"81.0.1.5\":[34571939660,6104,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":55,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"80.7.7.2\",\"62.5.7.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"13.0.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.0.9.5\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"92.6.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"41.2.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.2.9.7\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.7.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.7.2.3\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"66.4.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.4.0.9\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":392.85,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"66.4.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"66.4.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"66.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"66.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"66.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"66.4.0.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"clarkinc\",1],\"server\":\"66.4.0.9\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack clarkinc in 14.989 seconds (t=97)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.009999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":97,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":203251.55191278856,\"favor\":111,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":201870.64820042253,\"favor\":61,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":204635.99096481325,\"favor\":172,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":200942.9129238152,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":202460.91435255526,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":150,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":3014221.3198508993,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":156,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":3014145.9801392425,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":463282.6083166254,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":150,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":3014167.075258506,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":114612.07096991743,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":462845.74694182986,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":273,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":87,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":104,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":36,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":53,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":14,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":11,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":77,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":24,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":150,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":3014185.1567893038,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":150,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":3014185.1567893038,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":241,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":596.6905163220517,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":83,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":599.7041047883247,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":60,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":599.7041047883247,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":36,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":58,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":599.7041047883247,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":36,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"37.6.7.4\",\"BitRunners Server\":\"60.7.8.6\",\"The Black Hand Server\":\"22.7.0.3\",\"NiteSec Server\":\"84.2.1.8\",\"The Dark Army Server\":\"64.5.0.7\",\"CyberSec Server\":\"18.1.3.2\",\"Daedalus Server\":\"13.0.9.5\",\"w0r1d_d43m0n\":\"41.2.9.7\",\"Darkweb Server\":\"21.7.2.3\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":92497.68156342376,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":19.564239695165753,\"cap\":484183621,\"totalShares\":92800000,\"maxShares\":18600000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":167122.5856412217,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":true,\"otlkMag\":21.49430307539618,\"cap\":207637066,\"totalShares\":81900000,\"maxShares\":16400000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":64595.235277521606,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":8.23470095365348,\"cap\":436909081,\"totalShares\":77800000,\"maxShares\":15600000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":19284.27353731165,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":13.837284955468093,\"cap\":324413507,\"totalShares\":114200000,\"maxShares\":22800000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":40576.091780658804,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":7.856035191465589,\"cap\":406841691,\"totalShares\":42500000,\"maxShares\":8500000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":406348.34448265046,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":21.17779442021247,\"cap\":708664632,\"totalShares\":28700000,\"maxShares\":5700000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":33504.028345790284,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":6.5806301458831316,\"cap\":506328577,\"totalShares\":72000000,\"maxShares\":14400000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":46865.78235807552,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":11.821899770143528,\"cap\":602220998,\"totalShares\":58100000,\"maxShares\":11600000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":65857.35106361989,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":10.694856239580615,\"cap\":162057067,\"totalShares\":57600000,\"maxShares\":11500000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11432.045553534996,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":11.333613329451168,\"cap\":117505373,\"totalShares\":131600000,\"maxShares\":26300000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":20281.239178545107,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":13.361829586437235,\"cap\":227056743,\"totalShares\":67300000,\"maxShares\":13500000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":27749.535407728083,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":8.191416771519455,\"cap\":155159077,\"totalShares\":104500000,\"maxShares\":20900000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":52517.96606844784,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":12.135096795169138,\"cap\":35548498,\"totalShares\":51300000,\"maxShares\":10300000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":55018.712761334245,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":13.331631806664177,\"cap\":354842319,\"totalShares\":36800000,\"maxShares\":7400000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12905.457435357019,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":4.44012512761095,\"cap\":47295188,\"totalShares\":52600000,\"maxShares\":10500000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":12777.99455726516,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":2.9117425076254566,\"cap\":324002928,\"totalShares\":41900000,\"maxShares\":8400000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":33425.48736705254,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":11.547025948236678,\"cap\":358014543,\"totalShares\":26900000,\"maxShares\":5400000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":16848.514313363637,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.007482057377869,\"cap\":40929043,\"totalShares\":53700000,\"maxShares\":10700000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":19222.097042802387,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":3.0135476684409177,\"cap\":400642353,\"totalShares\":30700000,\"maxShares\":6100000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":7200.344250805525,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.4,\"b\":true,\"otlkMag\":1.1027734266753508,\"cap\":88877541,\"totalShares\":86200000,\"maxShares\":17200000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":16522.163733699606,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.32,\"b\":false,\"otlkMag\":5.4671934456563145,\"cap\":89051696,\"totalShares\":56700000,\"maxShares\":11300000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3974.3004526119657,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":1.0016594002802965,\"cap\":72304460,\"totalShares\":51800000,\"maxShares\":10400000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":4747.021215936317,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.97,\"b\":true,\"otlkMag\":1.6100726744725509,\"cap\":37269295,\"totalShares\":43000000,\"maxShares\":8600000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6980.5009390637015,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":true,\"otlkMag\":1.0264585366954506,\"cap\":172114007,\"totalShares\":27900000,\"maxShares\":5600000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3054.1065770064984,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":3.908896017417353,\"cap\":32748220,\"totalShares\":101500000,\"maxShares\":20300000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":831.4935575680636,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.3,\"b\":false,\"otlkMag\":1.174381987237838,\"cap\":20720298,\"totalShares\":54300000,\"maxShares\":10900000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3688.644062639129,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":0.5786085187236577,\"cap\":10468671,\"totalShares\":21000000,\"maxShares\":4200000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":6415.706348141668,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":1.2627699076242394,\"cap\":40430412,\"totalShares\":10500000,\"maxShares\":2100000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":7217.429653141796,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.88,\"b\":false,\"otlkMag\":1.93452555644231,\"cap\":17126949,\"totalShares\":19800000,\"maxShares\":4000000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":5436.452294248184,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.69,\"b\":true,\"otlkMag\":1.1177678446839407,\"cap\":12473315,\"totalShares\":35400000,\"maxShares\":7100000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":9744.856166833182,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.73,\"b\":false,\"otlkMag\":15.28785920909672,\"cap\":16739141,\"totalShares\":71800000,\"maxShares\":14400000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":71773.43553169981,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":10.825836955555767,\"cap\":463753469,\"totalShares\":14100000,\"maxShares\":2800000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":71391.06936932699,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":14.409206402759036,\"cap\":497379556,\"totalShares\":17700000,\"maxShares\":3500000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":10,\"lastUpdate\":1551357026087}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.44.0\"","AllGangsSave":"","CorporationResearchTreesSave":""}}