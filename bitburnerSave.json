{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":3679,\"hp\":47,\"max_hp\":47,\"strength\":309,\"defense\":376,\"dexterity\":312,\"agility\":190,\"charisma\":1104,\"intelligence\":0,\"hacking_chance_mult\":2.448011125199547,\"hacking_speed_mult\":2.5088585843881934,\"hacking_money_mult\":7.056160460439947,\"hacking_grow_mult\":4.286994643381715,\"hacking_exp\":114584568487.51599,\"strength_exp\":8452.66665243685,\"defense_exp\":8390.193136897773,\"dexterity_exp\":8327.719621358696,\"agility_exp\":8746.292175470513,\"charisma_exp\":133840.02356275838,\"intelligence_exp\":0,\"hacking_mult\":5.98405452950576,\"strength_mult\":3.3914194149782513,\"defense_mult\":4.128684505190915,\"dexterity_mult\":3.4360433546490183,\"agility_mult\":2.057757428823223,\"charisma_mult\":6.208548128106637,\"hacking_exp_mult\":8.338774270887129,\"strength_exp_mult\":3.1236757769536525,\"defense_exp_mult\":3.1236757769536525,\"dexterity_exp_mult\":3.1236757769536525,\"agility_exp_mult\":3.1236757769536525,\"charisma_exp_mult\":6.247351553907305,\"company_rep_mult\":5.399496700162743,\"faction_rep_mult\":3.718661639230539,\"money\":\"58505700298476.193856\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Aevum\",\"location\":\"Blade Industries\",\"jobs\":{\"Fulcrum Technologies\":\"Lead Software Developer\",\"Bachman & Associates\":\"Senior Software Engineer\",\"ECorp\":\"Senior Software Engineer\",\"MegaCorp\":\"Senior Software Engineer\",\"KuaiGong International\":\"Senior Software Engineer\",\"Four Sigma\":\"Senior Software Engineer\",\"NWO\":\"Senior Software Engineer\",\"Blade Industries\":\"Senior Software Engineer\"},\"companyName\":\"Blade Industries\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"52.0.0.9\",\"79.2.7.0\",\"18.6.4.5\",\"88.2.2.5\",\"72.9.3.1\",\"7.2.5.0\",\"91.0.4.3\",\"58.1.7.1\",\"61.3.0.4\",\"69.3.1.7\",\"46.3.0.6\",\"96.5.8.3\",\"2.9.8.5\",\"54.6.3.4\",\"53.4.5.4\",\"30.7.7.2\",\"62.4.1.6\",\"94.7.2.2\",\"1.5.6.7\",\"26.6.9.1\",\"57.3.6.5\",\"86.2.9.4\",\"56.3.0.2\",\"8.3.9.5\",\"32.2.2.1\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":3260476640.4871655,\"onlineTimeSeconds\":68085.19999959476,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":3260476165.98594,\"onlineTimeSeconds\":68085.19999959476,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":3260463495.028305,\"onlineTimeSeconds\":68085.19999959476,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":3260481671.0876136,\"onlineTimeSeconds\":68085.19999959476,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":3260425331.3838377,\"onlineTimeSeconds\":68025.19999959454,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":3260293434.6766653,\"onlineTimeSeconds\":67815.19999959378,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":3260289290.107658,\"onlineTimeSeconds\":67815.19999959378,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":3260283073.2541466,\"onlineTimeSeconds\":67815.19999959378,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":3256377295.882473,\"onlineTimeSeconds\":67815.19999959378,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":3255970020.8810897,\"onlineTimeSeconds\":67725.19999959345,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":3254731624.112677,\"onlineTimeSeconds\":67485.19999959257,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":3254428869.5311027,\"onlineTimeSeconds\":67305.19999959192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":3254428869.5311027,\"onlineTimeSeconds\":67305.19999959192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":3254359793.380978,\"onlineTimeSeconds\":67305.19999959192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":3254359793.380978,\"onlineTimeSeconds\":67305.19999959192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":3254221641.080729,\"onlineTimeSeconds\":67305.19999959192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":3254221641.080729,\"onlineTimeSeconds\":67305.19999959192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":3254221641.080729,\"onlineTimeSeconds\":67305.19999959192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":3252978270.37849,\"onlineTimeSeconds\":67275.19999959182,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":3252840118.078241,\"onlineTimeSeconds\":67275.19999959182,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-20\",\"totalMoneyGenerated\":3243534179.13348,\"onlineTimeSeconds\":67125.19999959126,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-21\",\"totalMoneyGenerated\":3232669882.241912,\"onlineTimeSeconds\":66855.19999959029,\"moneyGainRatePerSecond\":48353.30508653118}}],\"factions\":[\"Netburners\",\"BitRunners\",\"NiteSec\",\"CyberSec\",\"The Black Hand\",\"Daedalus\",\"Tian Di Hui\",\"Bachman & Associates\",\"ECorp\",\"MegaCorp\",\"Fulcrum Secret Technologies\",\"KuaiGong International\",\"Four Sigma\",\"NWO\"],\"factionInvitations\":[\"Sector-12\",\"Aevum\",\"Chongqing\",\"New Tokyo\",\"Volhaven\",\"Ishima\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":47,\"name\":\"NeuroFlux Governor\"},{\"level\":48,\"name\":\"NeuroFlux Governor\"},{\"level\":49,\"name\":\"NeuroFlux Governor\"},{\"level\":50,\"name\":\"NeuroFlux Governor\"},{\"level\":51,\"name\":\"NeuroFlux Governor\"},{\"level\":52,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":46,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":2.1557458778148058,\"crime_success_mult\":2.4497112247895516,\"isWorking\":false,\"workType\":\"Working for Company\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":2.5868950533777664,\"hacknet_node_money_mult\":4.942721095477253,\"hacknet_node_purchase_cost_mult\":0.36617945918155914,\"hacknet_node_ram_cost_mult\":0.4786659597144565,\"hacknet_node_core_cost_mult\":0.4786659597144565,\"hacknet_node_level_cost_mult\":0.406866065757288,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1552658007836,\"totalPlaytime\":3788277400,\"playtimeSinceLastAug\":68093000,\"playtimeSinceLastBitnode\":352431200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":773448783409578.5,\"hacknetnode\":71612532743.66107,\"infiltration\":0,\"stock\":467443555815215.44,\"total\":1240964057276598.5,\"work\":105526745.82686384}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1208356462874660.8,\"hacknetnode\":258136466929.42422,\"infiltration\":0,\"stock\":1064609572529967.2,\"total\":2273224461888868,\"work\":289406542.2798986}},\"scriptProdSinceLastAug\":1211761376115151.8,\"total_money\":\"275820126137160696.69\",\"lifetime_money\":\"275820126137160696.69\",\"totalHacknetNodeProduction\":0,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":4194304,\"ramUsed\":2096892.05,\"cpuCores\":5,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let costCap = (maxProduction * 60 * 60 * 1) || Infinity;\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} uncappedCost\\r\\n     */\\r\\n    function getCappedCost(name, uncappedCost) {\\r\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\r\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let costs = [];\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\r\\n    }\\r\\n\\r\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        /** @type {number} */\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        /** @type {number} */\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = cost + getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nconst LARGEST_USEFUL_SERVER = 16384;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number' || !Number.isNaN(parseInt(ns.args[0]));\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? parseInt(ns.args[0]) : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    let maxPurchaseRam = Math.min(ns.getPurchasedServerMaxRam(), LARGEST_USEFUL_SERVER);\\r\\n    for (let power = 0; Math.pow(2, power) <= maxPurchaseRam; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (ram > minRam || existingServers.length < limit) {\\r\\n        let processes = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                let ps = ns.ps(existingServers[i]);\\r\\n                if (ps.length > 0) {\\r\\n                    processes.push(existingServers[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processes.length > 0) {\\r\\n            if (dryRun) {\\r\\n                log.info('scripts running on existing servers, continuing dry run');    \\r\\n            } else {\\r\\n                log.info('scripts running on existing servers, exit');\\r\\n                ns.exit();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.2,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: false });\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    log.info(`copy scripts to ${host}`);\\r\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n\\r\\n        log.info(`execute attack on ${target}`);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    function getFreeRam() {\\r\\n        let ram = ns.getServerRam(ns.getHostname())\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of world.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    let top = ns.ps(ns.getHostname()).filter(p => p.filename == 'dh-control.js');\\r\\n    if (top.length > 0) {\\r\\n        let excludedTarget = top[0].args[0];\\r\\n        log.info(`${excludedTarget.padEnd(20)} ignored - DH victim`);\\r\\n        targets.splice(targets.findIndex(t => t.name == excludedTarget), 1);\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----')\\r\\n\\r\\n        let req = ns.getScriptRam('ms-setup.js');\\r\\n        if (getFreeRam() < req) {\\r\\n            log.error('insufficient ram to run ms-setup.js');\\r\\n        }\\r\\n\\r\\n        let bots = ns.getPurchasedServers()\\r\\n            .filter(b => ns.ps(b).length == 0) //ignore busy\\r\\n            .filter(b => ns.getServerRam(b)[0] >= 16384) // ignore too small\\r\\n            .sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of world.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            log.info(`run ms-setup.js ${bots[i]} ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n\\r\\n            while (getFreeRam() < req) {\\r\\n                await ns.sleep(1 * 1000);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.85,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let worker of world.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----');\\r\\n        log.info(`run dh-control.js ${targets[0].name}`)\\r\\n        await ns.exec('dh-control.js', ns.getHostname(), 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":8.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args.length == 0 ? 'foodnstuff' : ns.args[0];\\r\\n\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n    for (let stock of market.getAll(ns)) {\\r\\n        lastAssets = lastAssets + stock.position.shares * stock.price;\\r\\n    }\\r\\n\\r\\n    let assetWindow = new SlidingWindow(6);\\r\\n    let timeWindow = new SlidingWindow(6);\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            assets = 0;\\r\\n            for (let stock of market.getAll(ns)) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            assetWindow.reset();\\r\\n            timeWindow.reset();\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n\\r\\n            assetWindow.push(assetChange);\\r\\n            timeWindow.push(timeChange);\\r\\n\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, lastAssets + assetWindow.average())}, ${format.money(assetWindow.average()/timeWindow.average())}/sec`);\\r\\n        }\\r\\n\\r\\n        lastAssets = assets;\\r\\n        lastTime = time;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(5000);\\r\\n        tick();\\r\\n    }\\r\\n} \\r\\n\\r\\nclass SlidingWindow {\\r\\n    /** @param {number} size */\\r\\n    constructor(size) {\\r\\n        this.size = size;\\r\\n        /** @type {number[]} */\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    /** @param {number} value */\\r\\n    push(value) {\\r\\n        if (this.values.length < this.size) {\\r\\n            this.values.push(value);\\r\\n        } else {\\r\\n            for (let i = 0; i < this.size-1; i++) {\\r\\n                this.values[i] = this.values[i+1];\\r\\n            }\\r\\n            this.values[this.size-1] = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    average() {\\r\\n        let sum = this.values.reduce((a, b) => a + b, 0);\\r\\n        return sum / this.values.length;\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = `${path}; connect ${p.name}`;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\n//import { LifeL0 as Life } from './lib-life-L0.js';\\r\\n//import { LifeL1 as Life } from './lib-life-L1.js';\\r\\n//import { LifeL2 as Life } from './lib-life-L2.js';\\r\\nimport { LifeL3 as Life } from './lib-life-L3.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n    let life = new Life(ns, log);\\r\\n\\r\\n    while (true) {\\r\\n        let nextTick = await life.tick();\\r\\n        await ns.sleep(nextTick);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    //console.log(ns.getBitNodeMultipliers())\\n    console.log(ns.getCharacterInformation())\\n    console.log(ns.getOwnedAugmentations())\\n}\",\"ramUsage\":8.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n\\r\\n    let facsByRep = FactionWithAugs.getAll(ns)\\r\\n        .sort((a, b) => b.reputation - a.reputation);\\r\\n\\r\\n    /** @type {{[key: string]: FactionWithAugs}} */\\r\\n    let facsByName = {};\\r\\n    for (let f of facsByRep) {\\r\\n        facsByName[f.name] = f;\\r\\n    }\\r\\n\\r\\n    let augsByPrice = facsByRep\\r\\n        .map(f => f.augmentations)\\r\\n        .reduce((a, b) => a.concat(b), [])\\r\\n        .filter(a => !a.owned)\\r\\n        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n    ns.tprint('----- LOCKED -----');\\r\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\r\\n    for (let aug of groupAugs(locked)) {\\r\\n        let facs = aug.factions.map(name => {\\r\\n            let f = facsByName[name];\\r\\n            if (f.favor + f.favorGain >= FAVOUR_MAX) {\\r\\n                if (f.favor >= FAVOUR_MAX) {\\r\\n                    return `${name} (donate)`;\\r\\n                } else {\\r\\n                    return `${name} (reset)`;\\r\\n                }\\r\\n            } else {\\r\\n                let diff = Math.floor(aug.requiredReputation - f.reputation);\\r\\n                return `${name} (+${diff})`;\\r\\n            }\\r\\n        });\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${facs}]`)\\r\\n    }\\r\\n\\r\\n    ns.tprint('----- UNLOCKED -----');\\r\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\r\\n    for (let aug of groupAugs(unlocked)) {\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${aug.factions}]`)\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {Augmentation[]} augs */\\r\\nfunction groupAugs(augs) {\\r\\n    /** @type {{name: string, factions: string[], price: number, requiredReputation: number}[]} */\\r\\n    let augsWithFacs = [];\\r\\n    for (let a of augs) {\\r\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\r\\n            augsWithFacs[a.name] = {\\r\\n                factions: [],\\r\\n                name: a.name,\\r\\n                price: a.price,\\r\\n                requiredReputation: a.requiredReputation\\r\\n            };\\r\\n            augsWithFacs.push(augsWithFacs[a.name]);\\r\\n        } \\r\\n\\r\\n        augsWithFacs[a.name].factions.push(a.faction);\\r\\n    }\\r\\n    return augsWithFacs;\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { enrol } from './lib-world.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport const TICK_SECONDS =             20;\\r\\nconst STOCK_MARKET_MIN =         100000000;\\r\\nconst HACKNET_BUYS_MAX =       10000000000;\\r\\nconst PURCHASED_SERVER_PRICE = 22528000000;\\r\\nconst PURCHASED_SERVER_RAM =         16384;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.lastBots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n        this.beganFarm = false;\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n        log.debug('market access: ' + this.marketAccess);\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickAcceptInvites() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / (this.nextTickLength / 1000);\\r\\n        this.nextTickLength = TICK_SECONDS * 1000;\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickAcceptInvites();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n        return this.nextTickLength;\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.shouldBuyNodes()) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // once able to buy good enough servers for MS, switch to buying those\\r\\n        let bots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        let botCost = this.ns.getPurchasedServerCost(PURCHASED_SERVER_RAM);\\r\\n        let botLimit = this.ns.getPurchasedServerLimit();\\r\\n        if (this.cash >= botCost && bots < botLimit) {\\r\\n            this.log.info(`${bots} ${format.ram(PURCHASED_SERVER_RAM)} servers owned; ordering a new one for ${format.money(botCost)}`);\\r\\n            await this.ns.exec('buy-servers.js', this.ns.getHostname(), 1, [bots+1])\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (bots == 0) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                await this.dhStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) { // based on an msRunning check, but only once at init startup\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.skill / this.lastEval > 1.1 || bots > this.lastBots) {\\r\\n                if (this.skill / this.lastEval > 1.1) {\\r\\n                    this.log.debug(`skill ${this.skill} / lastEval ${this.lastEval} > 1.1`);\\r\\n                    await this.msStop();\\r\\n                    await this.ns.sleep(10 * 1000);    \\r\\n                }\\r\\n                \\r\\n                if (bots > this.lastBots) {\\r\\n                    this.log.debug(`bots ${bots} > lastBots ${this.lastBots}`);\\r\\n                }\\r\\n\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill\\r\\n        if (this.shouldFarm()) {\\r\\n            let target = 'foodnstuff';\\r\\n\\r\\n            if (this.ns.scriptRunning('dh-control.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'dh-control.js');\\r\\n                target = p.args[0];\\r\\n            } else if (this.ns.scriptRunning('farm-worker.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'farm-worker.js');\\r\\n                target = p.args[0];\\r\\n            }\\r\\n            \\r\\n            if (!this.beganFarm) {\\r\\n                enrol(this.ns, target);\\r\\n                this.beganFarm = true;\\r\\n            }\\r\\n            \\r\\n            this.ensureRunningWithArg('farm-worker.js', target, true);\\r\\n        } else if (this.beganFarm) {\\r\\n            this.ensureKilled('farm-worker.js');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureRunning(script) {\\r\\n        if (!this.ns.scriptRunning(script, this.ns.getHostname())) {    \\r\\n            await this.ns.exec(script, this.ns.getHostname(), 1);\\r\\n            this.log.info(`run ${script} -t ${1}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {string} arg\\r\\n     * @param {boolean} [maxThreads]\\r\\n     */\\r\\n    async ensureRunningWithArg(script, arg, maxThreads) {\\r\\n        if (!this.ns.isRunning(script, this.ns.getHostname(), arg)) {   \\r\\n            // not running with right arg\\r\\n            if (this.ns.scriptRunning(script, this.ns.getHostname())) { \\r\\n                // running with wrong arg\\r\\n                await this.ensureKilled(script);\\r\\n            } else {\\r\\n                // not running at all\\r\\n                let threads = 1;\\r\\n                if (maxThreads) {\\r\\n                    threads = this.getMaxThreads(script);\\r\\n                    if (threads <= 0) return;\\r\\n                }\\r\\n        \\r\\n                await this.ns.exec(script, this.ns.getHostname(), threads, arg);\\r\\n                this.log.info(`run ${script} -t ${threads} ${arg}`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - this.spareRamNeeded(); // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        let servers = this.ns.getPurchasedServers();\\r\\n        if (servers.length == 0) return false;\\r\\n        let server1 = 'bot0'; // servers[0]; - wrong because it changes\\r\\n        let top = this.ns.ps(server1);\\r\\n        if (top.length == 0) return false;\\r\\n        return top[0].filename.startsWith('ms');\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n    \\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.cash <= HACKNET_BUYS_MAX;\\r\\n    }\\r\\n\\r\\n    shouldFarm() {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return 128;\\r\\n    }\\r\\n}\",\"ramUsage\":13.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\r\\nimport { TICK_SECONDS, LifeL0 } from './lib-life-L0.js';\\r\\n\\r\\nconst WORK_OVERRIDE_TICKS =  9;\\r\\nconst STAT_GOAL_BASE =      90;\\r\\nconst DARKWEB_MIN =     200000;\\r\\nconst TRAIN_MIN =      5000000;\\r\\n\\r\\nexport class LifeL1 extends LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        /** @type {WorkItem} */\\r\\n        this.lastWork = null;\\r\\n    }\\r\\n\\r\\n    tickDarkwebPurchases() {\\r\\n        // buy darkweb router\\r\\n        if (this.cash >= DARKWEB_MIN) {\\r\\n            if (!this.ns.getCharacterInformation().tor) {\\r\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\r\\n                this.ns.purchaseTor();\\r\\n                this.cash = this.getCash();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\r\\n        for (var program of programs()) {\\r\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\r\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\r\\n                this.ns.purchaseProgram(program.name);\\r\\n                this.cash = this.getCash();\\r\\n                this.resetHackEval();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {Program} program */\\r\\n    hasProgram(program) {\\r\\n        return this.ns.fileExists(program.name, 'home');\\r\\n    }\\r\\n\\r\\n    // fullscreen \\\"work\\\" actions\\r\\n    tickPerformWork() {\\r\\n        // continue automation if:\\r\\n        // - we're still doing something, or\\r\\n        // - we deliberately didn't do anything, or\\r\\n        // - we did something which may have finished early\\r\\n        if (this.ns.isBusy() || (this.lastWork && (this.lastWork.name == 'nothing' || this.lastWork.name.startsWith('crime')))) {\\r\\n            // has work been selected, and not overridden (countup>0)?\\r\\n            if (this.lastWork && !this.countup) {\\r\\n                if (this.lastWork.isRep) {\\r\\n                    this.ns.stopAction();\\r\\n                }\\r\\n\\r\\n                let workItem = this.selectWork();\\r\\n                \\r\\n                // is work actually still ongoing?\\r\\n                if (this.ns.isBusy() && this.lastWork.name == workItem.name) {\\r\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\r\\n                    if (this.lastWork.isRep) {\\r\\n                        if (workItem.doWork != null) {\\r\\n                            workItem.doWork();\\r\\n                        } \\r\\n                    }\\r\\n                } else {\\r\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\r\\n                    if (workItem.doWork != null) {\\r\\n                        workItem.doWork();\\r\\n                    } \\r\\n                }\\r\\n\\r\\n                this.lastWork = workItem;              \\r\\n            } else {\\r\\n                this.log.info('automated work overridden by player, pause indefinitely');\\r\\n                this.lastWork = null;\\r\\n            }\\r\\n        } else {\\r\\n            if (!this.lastWork && !this.countup) {\\r\\n                let workItem = this.selectWork();\\r\\n                this.log.info(`start work ${workItem.name}`);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;          \\r\\n            } else {    \\r\\n                if (!this.lastWork) {\\r\\n                    /** @type {number | undefined} */\\r\\n                    this.countup = 0;\\r\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    this.lastWork = new WorkItem('override', null, false);\\r\\n                } else {\\r\\n                    this.countup = this.countup || 0;\\r\\n                    if (this.countup == 0) {\\r\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    } else {\\r\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                this.countup = this.countup + 1;\\r\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\r\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_SECONDS)}`);\\r\\n                    this.countup = 0;\\r\\n                    this.lastWork = null;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    selectWork() {\\r\\n        for (let jobF of [this.workWriteCode, this.workTrainStats, this.workCommitCrimes, this.workJoinCities, this.workForFactions, this.workForCompanies, this.workJoinCompanies]) {\\r\\n            let job = jobF.bind(this)();\\r\\n            if (job != null) return job;\\r\\n        }\\r\\n\\r\\n        return new WorkItem('nothing', null, false);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workWriteCode() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workTrainStats() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        this.guessCharismaMult(info.mult);\\r\\n\\r\\n        let stats = this.ns.getStats();\\r\\n        \\r\\n        if (this.cash >= TRAIN_MIN) {\\r\\n            let statGoals = {};\\r\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility', 'charisma']) {\\r\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\r\\n                \\r\\n                if (stats[stat] < statGoals[stat]) {\\r\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\r\\n                    return new WorkItem('train-' + stat, () => {\\r\\n                        if (stat == 'charisma') {\\r\\n                            let uni = this.getBestUniversity();\\r\\n                            this.ensureCity(info, uni.city);\\r\\n                            this.ns.universityCourse(uni.name, 'Leadership');            \\r\\n                        } else {\\r\\n                            let gym = this.getBestGym();\\r\\n                            this.ensureCity(info, gym.city);\\r\\n                            this.ns.gymWorkout(gym.name, stat);\\r\\n                        }\\r\\n                    }, false);\\r\\n                }\\r\\n            }\\r\\n            this.log.debug(`stat goals reached - ${JSON.stringify(statGoals)}`);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        mult.charisma = Math.min(mult.agility, mult.defense, mult.dexterity, mult.agility);\\r\\n        mult.charismaExp = Math.min(mult.agilityExp, mult.defenseExp, mult.dexterityExp, mult.agilityExp);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForFactions() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCities() {        \\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n    \\r\\n    getBestGym() {\\r\\n        let gs = gyms();\\r\\n        gs.sort((a, b) => b.price - a.price);\\r\\n        return gs[0];\\r\\n    }\\r\\n\\r\\n    getBestUniversity() {\\r\\n        let us = universities();\\r\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\r\\n        return us[0];\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @param {ICharacterInfo} info\\r\\n     * @param {string} name\\r\\n     */\\r\\n    ensureCity(info, name) {\\r\\n        if (info.city != name) {\\r\\n            if (this.ns.travelToCity(name)) {\\r\\n                this.log.info('travelled to ' + name);\\r\\n            } else {\\r\\n                this.log.error(`travel to ${name} failed`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.ns.getCharacterInformation().bitnode != 4;\\r\\n    }\\r\\n\\r\\n    shouldCommitCrimes() {\\r\\n        return this.cash >= TRAIN_MIN && this.ns.getCharacterInformation().bitnode == 2;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return this.ns.getCharacterInformation().bitnode == 4 ? 64 : 128;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class WorkItem {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {() => void | null} doWork\\r\\n     * @param {boolean} isRep\\r\\n     */\\r\\n    constructor(name, doWork, isRep) {\\r\\n        this.name = name;\\r\\n        this.doWork = doWork;\\r\\n        this.isRep = isRep;\\r\\n    }\\r\\n}\",\"ramUsage\":25.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\r\\n\\r\\nconst COMPANY_REP_MAX = 200000;  // level required for most factions\\r\\nexport const FAVOUR_MAX = 150;   // level required for donations\\r\\nconst CITY_MONEY_REQ = 50200000; // volhaven 50m + travel 200k\\r\\n\\r\\nexport class LifeL2 extends LifeL1 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n    }\\r\\n\\r\\n    // persists through aug reset, makes early farming better\\r\\n    tickUpgradeHomeSystem() {\\r\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\r\\n            this.log.info(`purchasing home RAM upgrade`);\\r\\n            this.ns.upgradeHomeRam();\\r\\n            this.cash = this.getCash();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    tickAcceptInvites() {\\r\\n        for (let invite of this.ns.checkFactionInvitations()) {\\r\\n            if (this.shouldAcceptInvite(invite)) {\\r\\n                this.log.info(`join faction ${invite}`);\\r\\n                this.ns.joinFaction(invite);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCities() {\\r\\n        if (this.cash < CITY_MONEY_REQ) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let joins = info.factions;\\r\\n        let invites = this.ns.checkFactionInvitations();\\r\\n\\r\\n        /** @type {{[key: string]: string[]}} */\\r\\n        let preclusions = {\\r\\n            'Sector-12': ['Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'], \\r\\n            'Aevum':     ['Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'], \\r\\n            'Chongqing': ['Sector-12', 'Aevum', 'Volhaven'], \\r\\n            'New Tokyo': ['Sector-12', 'Aevum', 'Volhaven'], \\r\\n            'Ishima':    ['Sector-12', 'Aevum', 'Volhaven'], \\r\\n            'Volhaven':  ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima']\\r\\n        };\\r\\n\\r\\n        for (let city of Faction.cities()) {\\r\\n            if (info.city != city &&\\r\\n                !joins.includes(city) && \\r\\n                !invites.includes(city) && \\r\\n                !preclusions[city].map(joins.includes.bind(joins)).reduce((a, b) => a || b, false)) {\\r\\n                    this.log.info(`Travelling to ${city} for a faction invite.`);\\r\\n                    this.ns.travelToCity(city);\\r\\n                    return null;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let joinedCities = Faction.getCurrent(this.ns).filter(f => Faction.cities().includes(f.name));\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        // when we've run out of work to do, take another job\\r\\n        let companies = Company.getAll(this.ns).filter(c => !c.employed);\\r\\n        if (companies.length > 0) {\\r\\n            if (this.ns.applyToCompany(companies[0].name, 'software')) {\\r\\n                this.log.info(`now employed by ${companies[0]}`);\\r\\n            } else {\\r\\n                this.log.error(`rejected by ${companies[0]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n\\r\\n        let companies = Company.getCurrent(this.ns);\\r\\n        this.log.debug(`current companies: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => !info.factions.includes(c.faction));\\r\\n        this.log.debug(`companies without faction membership: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => c.reputation < COMPANY_REP_MAX);\\r\\n        this.log.debug(`companies with reputation < ${COMPANY_REP_MAX}: ${companies}`);\\r\\n\\r\\n        if (companies.length > 0) {\\r\\n            companies.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`companies sorted by rep: ${companies}`);\\r\\n\\r\\n            let c = companies[0].name;\\r\\n            return new WorkItem('company-' + c, () => {\\r\\n                if (this.lastWork && this.lastWork.name == 'company-' + c) {\\r\\n                    this.log.debug(`already working for ${c}`);\\r\\n                    if (this.ns.applyToCompany(c, 'software')) {\\r\\n                        this.log.info(`promoted by ${c}`);\\r\\n                    }\\r\\n                    this.ns.workForCompany();\\r\\n                } else {\\r\\n                    this.log.debug(`not currently working for ${c}`);\\r\\n                    this.ns.applyToCompany(c, 'software');\\r\\n                    if (!this.ns.workForCompany()) {\\r\\n                        this.log.error(`rejected by ${c}`);\\r\\n                    }\\r\\n                }\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workForFactions() {\\r\\n        let factions = Faction.getCurrent(this.ns);\\r\\n        this.log.debug(`current factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => {\\r\\n                this.ns.workForFaction(factions[0].name, factions[0].job)\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.job = job;\\r\\n    }\\r\\n\\r\\n    static cities() {\\r\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\r\\n    }\\r\\n\\r\\n    static gangs() {\\r\\n        return ['Slum Snakes', 'Tetrads'];\\r\\n    }\\r\\n\\r\\n    static companies() {\\r\\n        return Object.getOwnPropertyNames(companyFactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Faction[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => \\r\\n        {\\r\\n            let rep = ns.getFactionRep(f);\\r\\n            let fav = ns.getFactionFavor(f);\\r\\n            let fvg = ns.getFactionFavorGain(f);\\r\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @type {{[key: string]: string}} */\\r\\nlet companyFactions = {\\r\\n    'Bachman & Associates': 'Bachman & Associates',\\r\\n    'ECorp': 'ECorp',\\r\\n    'MegaCorp': 'MegaCorp',\\r\\n    'KuaiGong International': 'KuaiGong International',\\r\\n    'Four Sigma': 'Four Sigma',\\r\\n    'NWO': 'NWO',\\r\\n    'Blade Industries': 'Blade Industries',\\r\\n    'OmniTek Incorporated': 'OmniTek Incorporated',\\r\\n    'Clarke Incorporated': 'Clarke Incorporated',\\r\\n    'Fulcrum Technologies': 'Fulcrum Secret Technologies',\\r\\n}\\r\\n\\r\\nclass Company {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {string} faction\\r\\n     * @param {boolean} employed\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, faction, employed) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.faction = faction;\\r\\n        this.employed = employed;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let i = 0; i < info.jobs.length; i++) {\\r\\n            let c = info.jobs[i];\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], true));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let c of Faction.companies()) {\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], info.jobs.includes(c)));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n}\",\"ramUsage\":64.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport { WorkItem } from './lib-life-L1.js';\\r\\nimport { LifeL2, Faction, FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\nconst DONATE_AMOUNT = 1000000000000;\\r\\nconst TRAVEL_MIN =           200000;\\r\\n\\r\\nexport class LifeL3 extends LifeL2 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        \\r\\n        /** @type {{[key: string]: boolean}} */\\r\\n        this.hadProgram = {};\\r\\n        for (let program of programs())\\r\\n        {\\r\\n            this.hadProgram[program.name] = true;\\r\\n        }\\r\\n\\r\\n        /** @type {string} */\\r\\n        this.savingForAug = '';\\r\\n\\r\\n        /** @type {number} */\\r\\n        this.homicides = 0;\\r\\n        let factions = this.ns.getCharacterInformation().factions;\\r\\n        for (let gang of Gang.getAll()) {\\r\\n            if (factions.includes(gang.name)) {\\r\\n                this.homicides = Math.max(this.homicides, gang.requiredKarma);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.log.debug(`assumed starting homicides: ${this.homicides}`);\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction) || !FactionWithAugs.get(this.ns, faction).hasAllAugs();\\r\\n    }\\r\\n\\r\\n    workWriteCode() {\\r\\n        for (let program of programs()) {\\r\\n            if (this.hasProgram(program)) {\\r\\n                if (!this.hadProgram[program.name]) {\\r\\n                    this.hadProgram[program.name] = true;\\r\\n                    this.resetHackEval();\\r\\n                }    \\r\\n            }\\r\\n            else if (program.req <= this.skill)  {\\r\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }  \\r\\n\\r\\n    // L3 override which takes augs into account\\r\\n    workForFactions() {\\r\\n        let factions = FactionWithAugs.getAll(this.ns);\\r\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\r\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\r\\n        let allReqsMet = factions.length == 0;\\r\\n\\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n        let reqsCouldBeMetAfterDonations = factions.length == 0 && !allReqsMet;\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\r\\n        }\\r\\n\\r\\n        if (reqsCouldBeMetAfterDonations && this.cash >= DONATE_AMOUNT) {\\r\\n            for (let f of FactionWithAugs.getAll(this.ns)) {\\r\\n                if (f.favor >= FAVOUR_MAX && f.maxAugRep() > f.reputation) {\\r\\n                    if (this.ns.donateToFaction(f.name, DONATE_AMOUNT)) {\\r\\n                        this.log.info(`donated ${format.money(DONATE_AMOUNT)} to faction ${f}`);\\r\\n                        this.cash = this.getCash();\\r\\n                        if (this.cash < DONATE_AMOUNT) {\\r\\n                            break;\\r\\n                        }\\r\\n                    } else {\\r\\n                        this.log.error(`failed to donate to faction ${f}`);\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            allReqsMet = FactionWithAugs.getAll(this.ns).filter(f => f.maxAugRep() > f.reputation).length == 0;\\r\\n        }\\r\\n\\r\\n        // if all factions are maxed out, buy some of their augs\\r\\n        if (allReqsMet) {\\r\\n            this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\r\\n\\r\\n            let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\r\\n            this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\r\\n\\r\\n            // augs we don't already have\\r\\n            let availableAugs = FactionWithAugs.getAll(this.ns)\\r\\n                .map(f => f.augmentations)\\r\\n                .reduce((a, b) => a.concat(b), [])\\r\\n                .filter(a => !a.owned);\\r\\n\\r\\n            // most expensive augs first, because the price doubles each time\\r\\n            let affordableAugs = availableAugs\\r\\n                .filter(a => a.price <= maxAugCost)\\r\\n                .sort((a, b) => b.price - a.price);\\r\\n\\r\\n            if (affordableAugs.length > 0) {\\r\\n                this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\r\\n                if (affordableAugs[0].price > this.cash) {\\r\\n                    if (this.savingForAug != affordableAugs[0].name) {\\r\\n                        this.savingForAug = affordableAugs[0].name;\\r\\n                        this.log.info(`saving for aug ${affordableAugs[0]}`);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                for (let a of affordableAugs) {\\r\\n                    if (a.price <= this.cash) {\\r\\n                        if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\r\\n                            this.log.info(`bought aug ${a}`);\\r\\n                            this.cash = this.getCash();\\r\\n                            this.savingForAug = '';\\r\\n                        } else {\\r\\n                            this.log.info(`failed to buy aug ${a}`);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        if (!this.shouldCommitCrimes()) {\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let stats = this.ns.getStats();\\r\\n\\r\\n        let gangs = Gang.getAll().filter(g => !info.factions.includes(g.name)).sort((a, b) => a.requiredKarma - b.requiredKarma);\\r\\n        this.log.debug(`unjoined gangs: ${gangs}`);\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredStats <= Math.min(stats.agility, stats.defense, stats.dexterity, stats.strength));\\r\\n            this.log.debug(`gangs with high enough combat stats: ${gangs}`);\\r\\n        }\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredKarma > this.homicides);\\r\\n            this.log.debug(`gangs needing lower karma: ${gangs}`);\\r\\n        }\\r\\n        \\r\\n        for (let gang of gangs) {\\r\\n            if (gang.requiredLocation == null || this.cash >= TRAVEL_MIN) {\\r\\n                return new WorkItem('crime-homicide', () => {\\r\\n                    if (gang.requiredLocation != null) {\\r\\n                        this.ensureCity(this.ns.getCharacterInformation(), gang.requiredLocation);\\r\\n                    }\\r\\n\\r\\n                    this.nextTickLength = this.ns.commitCrime('homicide') + 1000;\\r\\n                }, false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        // start with SF1-2\\r\\n        let stat = 1.24; \\r\\n        let statExp = 1.24;\\r\\n\\r\\n        let augs = this.ns.getOwnedAugmentations();        \\r\\n        if (augs.includes(\\\"NeuroFlux Governor\\\")) {\\r\\n            let level = augs.length / 2; // XXX \\r\\n            for (let i = 0; i < level; i++) {\\r\\n                stat = stat * 1.01;\\r\\n                statExp = statExp * 1.01;\\r\\n            }\\r\\n        }\\r\\n        if (augs.includes(\\\"FocusWire\\\")) { \\r\\n            statExp = statExp * 1.05;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer I\\\")) { \\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer II\\\")) { \\r\\n            statExp = statExp * 1.15;\\r\\n        }\\r\\n        if (augs.includes(\\\"Power Recirculation Core\\\")) { \\r\\n            stat = stat * 1.05;\\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Enhancement\\\")) { \\r\\n            stat = stat * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Processor Implant\\\")) { \\r\\n            stat = stat * 1.2;\\r\\n        }\\r\\n        if (augs.includes(\\\"Enhanced Social Interaction Implant\\\")) {\\r\\n            stat = stat * 1.6;\\r\\n            statExp = statExp * 1.6;\\r\\n        }\\r\\n        if (augs.includes(\\\"SmartJaw\\\")) {\\r\\n            stat = stat * 1.5;\\r\\n            statExp = statExp * 1.5;\\r\\n        }\\r\\n\\r\\n        mult.charisma = stat;\\r\\n        mult.charismaExp = statExp;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class FactionWithAugs extends Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     * @param {Augmentation[]} augs\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job, augs) {\\r\\n        super(name, rep, fav, fvg, job)\\r\\n        this.augmentations = augs;\\r\\n    }\\r\\n\\r\\n    maxAugRep() {\\r\\n        return this.augmentations\\r\\n            .filter(a => !a.owned)\\r\\n            .map(a => a.requiredReputation)\\r\\n            .reduce((a, b) => Math.max(a, b), 0);\\r\\n    }\\r\\n\\r\\n    hasAllAugs() {\\r\\n        return this.augmentations\\r\\n        .map(a => a.owned)\\r\\n        .reduce((a, b) => a && b, true);\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns FactionWithAugs[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => FactionWithAugs.get(ns, f));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @param {string} f\\r\\n     * @returns FactionWithAugs\\r\\n     */\\r\\n    static get(ns, f) {\\r\\n        let rep = ns.getFactionRep(f);\\r\\n        let fav = ns.getFactionFavor(f);\\r\\n        let fvg = ns.getFactionFavorGain(f);\\r\\n        let augInfo = ns.getOwnedAugmentations(true);\\r\\n        let augs = ns.getAugmentationsFromFaction(f).map(a => {\\r\\n            let [aRep, aPrc] = ns.getAugmentationCost(a);\\r\\n            let has = augInfo.includes(a);\\r\\n            return new Augmentation(a, f, aRep, aPrc, has);\\r\\n        })\\r\\n        return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Augmentation {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} fac\\r\\n     * @param {number} rep\\r\\n     * @param {number} prc\\r\\n     * @param {boolean} has\\r\\n     */\\r\\n    constructor(name, fac, rep, prc, has) {\\r\\n        this.name = name;\\r\\n        this.faction = fac;\\r\\n        this.requiredReputation = rep;\\r\\n        this.price = prc;\\r\\n        this.owned = has;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        if (this.owned) {\\r\\n            return `${this.name} (OWNED)`\\r\\n        } else {\\r\\n            return `${this.name} (${format.money(this.price)})`\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Gang {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} requiredKarma\\r\\n     * @param {number} requiredStats\\r\\n     * @param {string|null} requiredLocation\\r\\n     */\\r\\n    constructor(name, requiredKarma, requiredStats, requiredLocation) {\\r\\n        this.name = name;\\r\\n        this.requiredKarma = requiredKarma;\\r\\n        this.requiredStats = requiredStats;\\r\\n        this.requiredLocation = requiredLocation;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static getAll() {\\r\\n        return [\\r\\n            new Gang('Slum Snakes', 9, 30, null),\\r\\n            new Gang('Tetrads', 18, 75, 'Chongqing'),\\r\\n            new Gang('Speakers for the Dead', 45, 300, null),\\r\\n            new Gang('The Dark Army', 45, 300, 'Chongqing'),\\r\\n            new Gang('The Syndicate', 90, 200, 'Sector-12'),\\r\\n            // no silhouette - special company reqs\\r\\n        ];\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L4.js\",\"code\":\"\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"fac-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let f = FactionWithAugs.get(ns, 'Bachman & Associates');\\r\\n    ns.tprint(`${f.name}: ${f.reputation}`);\\r\\n    for (var aug of f.augmentations) {\\r\\n        ns.tprint(aug);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"buy-nodes.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":7.5,\"logs\":[],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":68079.60999959474,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"galactic-cyber\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] status: security level 25 / goal 39; increasing\",\"[INF] status: money $17161911997 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $3188708445 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 22 / goal 39; \",\"[INF] status: money $1759572150 / goal $10114813812; decreasing\",\"[INF] assigning nectar-net hack -> grow x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $14218387711 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $3970295025 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 23 / goal 39; increasing\",\"[INF] status: money $17236092834 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $14246235133 / goal $10114813812; \",\"[INF] assigning joesguns grow -> hack x9\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $2416149845 / goal $10114813812; decreasing\",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 24 / goal 39; increasing\",\"[INF] status: money $20229627625 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $3677058029 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 24 / goal 39; \",\"[INF] status: money $15903818605 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $6101776611 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $1350832059 / goal $10114813812; decreasing\",\"[INF] assigning joesguns hack -> grow x9\",\"[INF] status: security level 24 / goal 39; increasing\",\"[INF] status: money $20229627625 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $9262491654 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 22 / goal 39; \",\"[INF] status: money $16781298871 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 24 / goal 39; increasing\",\"[INF] status: money $20229627625 / goal $10114813812; increasing\",\"[INF] assigning joesguns grow -> hack x9\"],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[\"galactic-cyber\"],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server galactic-cyber in 93.729 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.729 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.729 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.703 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.703 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.703 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.678 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.678 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.678 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.653 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.653 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.653 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.628 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.628 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.628 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.603 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.603 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.603 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.603 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.578 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.578 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.578 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.553 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.553 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.553 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 93.528 seconds (t=1198214)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":32017.410000081432,\"onlineMoneyMade\":0,\"onlineExpGained\":60630057772.58152,\"threads\":1198214,\"dataMap\":{\"23.6.4.5\":[0,0,0,402599904]}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"FTPCrack.exe-2.56%-INC\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"SQLInject.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"40.1.6.0\",\"91.2.5.0\",\"78.1.6.8\",\"50.5.8.2\",\"40.1.5.9\",\"59.6.0.7\",\"96.2.2.9\",\"52.0.0.9\",\"79.2.7.0\",\"18.6.4.5\",\"88.2.2.5\",\"72.9.3.1\",\"7.2.5.0\",\"91.0.4.3\",\"58.1.7.1\",\"61.3.0.4\",\"69.3.1.7\",\"46.3.0.6\",\"96.5.8.3\",\"2.9.8.5\",\"54.6.3.4\",\"53.4.5.4\",\"30.7.7.2\",\"62.4.1.6\",\"94.7.2.2\",\"1.5.6.7\",\"26.6.9.1\",\"57.3.6.5\",\"86.2.9.4\",\"56.3.0.2\",\"8.3.9.5\",\"32.2.2.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.1.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.1.2.5\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-258144-Bachman&Associates.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":377425401,\"reward\":{\"type\":0,\"name\":\"Bachman & Associates\"}}}],\"dir\":0,\"requiredHackingSkill\":1136,\"moneyAvailable\":1566534887225,\"moneyMax\":1566534887225,\"hackDifficulty\":34.646,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"74.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"48.0.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.0.9.2\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1280,\"moneyAvailable\":1353461564725,\"moneyMax\":1353461564725,\"hackDifficulty\":34.638,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"74.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"14.8.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.8.0.2\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994377.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,18],[3,6],[1,10],[5,9],[15,19],[6,7],[12,22]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1027,\"moneyAvailable\":467752393375,\"moneyMax\":467752393375,\"hackDifficulty\":28.751999999999995,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":75,\"serversOnNetwork\":[\"23.5.0.9\",\"18.6.0.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"74.7.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.7.8.7\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.7.8.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"74.7.8.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 86.494 seconds (t=73)\",\"Available money on galactic-cyber grown by 50.271251%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 78.757 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 83.492 seconds (t=73)\",\"Available money on galactic-cyber grown by 19.314176%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 75.489 seconds (t=73)\",\"Available money on galactic-cyber grown by 45.304911%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 85.663 seconds (t=73)\",\"Available money on galactic-cyber grown by 46.426635%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 83.959 seconds (t=73)\",\"Available money on galactic-cyber grown by 47.710886%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 82.122 seconds (t=73)\",\"Available money on galactic-cyber grown by 48.798927%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 80.618 seconds (t=73)\",\"Available money on galactic-cyber grown by 50.377669%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 78.596 seconds (t=73)\",\"Available money on galactic-cyber grown by 51.690315%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 76.982 seconds (t=73)\",\"Available money on galactic-cyber grown by 52.410723%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 76.132 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 94.710 seconds (t=73)\",\"Available money on galactic-cyber grown by 33.188242%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 96.531 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 99.041 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 99.925 seconds (t=73)\",\"Available money on galactic-cyber grown by 10.780811%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 76.348 seconds (t=73)\",\"Available money on galactic-cyber grown by 45.804958%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 84.817 seconds (t=73)\",\"Available money on galactic-cyber grown by 46.900138%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 83.218 seconds (t=73)\",\"Available money on galactic-cyber grown by 47.557096%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 82.248 seconds (t=73)\",\"Available money on galactic-cyber grown by 49.265011%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 79.939 seconds (t=73)\",\"Available money on galactic-cyber grown by 50.171150%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 78.777 seconds (t=73)\",\"Available money on galactic-cyber grown by 21.003346%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 76.892 seconds (t=73)\",\"Available money on galactic-cyber grown by 19.325744%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 75.367 seconds (t=73)\",\"Available money on galactic-cyber grown by 3.911458%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 91.785 seconds (t=73)\",\"Available money on galactic-cyber grown by 32.865964%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 90.794 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 87.382 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":2.1903082114861556,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":7431626.4391394565,\"threads\":73,\"dataMap\":{\"23.6.4.5\":[0,0,49348,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":974,\"moneyAvailable\":491288954550,\"moneyMax\":491288954550,\"hackDifficulty\":31,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":80,\"serversOnNetwork\":[\"19.6.6.7\",\"56.1.2.5\",\"48.0.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"2.5.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.5.0.4\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-939155-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[97,79,10,145,44,148,172,123,184,119,197,166,64,156,30,175,145,107,153],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}}],\"dir\":0,\"requiredHackingSkill\":1111,\"moneyAvailable\":628704562125,\"moneyMax\":628704562125,\"hackDifficulty\":34.05,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":75,\"serversOnNetwork\":[\"82.2.7.7\",\"34.3.3.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"17.7.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.7.9.2\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1103,\"moneyAvailable\":245161540076,\"moneyMax\":494604408075,\"hackDifficulty\":21.056,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":48,\"serversOnNetwork\":[\"82.2.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"32.3.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.3.5.2\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.3.5.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"32.3.5.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.626 seconds (t=73)\",\"Available money on galactic-cyber grown by 39.480662%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 96.012 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.779215%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.448 seconds (t=73)\",\"Available money on galactic-cyber grown by 39.061100%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 96.831 seconds (t=73)\",\"Available money on galactic-cyber grown by 42.169475%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 90.881 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 98.477 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 92.301 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 88.930 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 89.167 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 91.113 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 92.750 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 91.439 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 94.110 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 94.717 seconds (t=73)\",\"Available money on galactic-cyber grown by 38.695882%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 97.531 seconds (t=73)\",\"Available money on galactic-cyber grown by 36.697459%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 96.824 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.358674%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 94.144 seconds (t=73)\",\"Available money on galactic-cyber grown by 27.748074%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 96.950 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 95.328 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.689 seconds (t=73)\",\"Available money on galactic-cyber grown by 7.229939%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.845 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 92.224 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.191 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.598 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 92.843 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 91.139 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":2.190689931285996,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":7398645.848433216,\"threads\":73,\"dataMap\":{\"23.6.4.5\":[0,0,49129,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-757387-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,5],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":915,\"moneyAvailable\":421567811975,\"moneyMax\":421567811975,\"hackDifficulty\":33.647999999999996,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":95,\"serversOnNetwork\":[\"80.4.9.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"19.6.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.6.6.7\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":913,\"moneyAvailable\":299801154744,\"moneyMax\":618878575725,\"hackDifficulty\":19.658,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":76,\"serversOnNetwork\":[\"58.2.8.4\",\"74.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"23.5.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.5.0.9\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1209,\"moneyAvailable\":595735906525,\"moneyMax\":595735906525,\"hackDifficulty\":33.660000000000004,\"baseDifficulty\":97,\"minDifficulty\":32,\"serverGrowth\":95,\"serversOnNetwork\":[\"25.8.2.5\",\"14.8.0.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"6.4.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.4.7.2\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1024,\"ramUsed\":1023.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.4.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"6.4.7.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 95.857 seconds (t=585)\",\"Available money on galactic-cyber grown by 117.182902%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 100.601 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,618.542526%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 82.255 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,263.569009%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 105.502 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,196.087665%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 81.825 seconds (t=585)\",\"Available money on galactic-cyber grown by 75.506266%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 98.477 seconds (t=585)\",\"Available money on galactic-cyber grown by 52.430085%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 92.301 seconds (t=585)\",\"Available money on galactic-cyber grown by 51.620176%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 88.930 seconds (t=585)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 89.167 seconds (t=585)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 91.113 seconds (t=585)\",\"Available money on galactic-cyber grown by 44.624611%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 92.750 seconds (t=585)\",\"Available money on galactic-cyber grown by 2.626441%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 91.439 seconds (t=585)\",\"Available money on galactic-cyber grown by 122.198719%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 94.110 seconds (t=585)\",\"Available money on galactic-cyber grown by 456.673357%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 94.717 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,717.944835%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 95.902 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,795.132490%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 94.655 seconds (t=585)\",\"Available money on galactic-cyber grown by 2,029.654449%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 91.405 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,874.870411%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 93.478 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,982.858385%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 92.005 seconds (t=585)\",\"Available money on galactic-cyber grown by 778.678520%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 91.025 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,265.009299%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 89.982 seconds (t=585)\",\"Available money on galactic-cyber grown by 728.929623%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 87.836 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,307.647750%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 87.590 seconds (t=585)\",\"Available money on galactic-cyber grown by 2,373.174885%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 87.538 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,819.748997%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 86.132 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,271.920676%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 82.544 seconds (t=585)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":17.555528901401473,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":58850023.90951818,\"threads\":585,\"dataMap\":{\"23.6.4.5\":[0,0,390780,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":964,\"moneyAvailable\":20653177790,\"moneyMax\":42184413725,\"hackDifficulty\":28.805999999999997,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":90,\"serversOnNetwork\":[\"89.7.4.0\",\"82.2.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"18.6.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.6.0.6\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1560,\"moneyAvailable\":988967,\"moneyMax\":25000000,\"hackDifficulty\":33.002,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"14.8.0.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"80.4.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.4.9.0\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1071,\"moneyAvailable\":1143698833,\"moneyMax\":28592470825,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":68,\"serversOnNetwork\":[\"19.3.5.5\",\"32.3.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"11.8.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.8.5.2\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":947,\"moneyAvailable\":947919585,\"moneyMax\":23697989625,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":68,\"serversOnNetwork\":[\"95.1.7.4\",\"92.9.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.9.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.9.6.5\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727716.cct\",\"type\":\"Total Ways to Sum\",\"data\":82,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":875,\"moneyAvailable\":651052630,\"moneyMax\":16276315750,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":48,\"serversOnNetwork\":[\"35.7.6.6\",\"41.6.3.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.8.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.8.2.5\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.8.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"25.8.2.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 86.391 seconds (t=146)\",\"Available money on galactic-cyber grown by 105.622012%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.828 seconds (t=146)\",\"Available money on galactic-cyber grown by 119.890223%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 82.433 seconds (t=146)\",\"Available money on galactic-cyber grown by 108.158186%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 88.376 seconds (t=146)\",\"Available money on galactic-cyber grown by 125.779034%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 79.832 seconds (t=146)\",\"Available money on galactic-cyber grown by 129.986141%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 78.128 seconds (t=146)\",\"Available money on galactic-cyber grown by 52.834746%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 76.172 seconds (t=146)\",\"Available money on galactic-cyber grown by 62.888983%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.167 seconds (t=146)\",\"Available money on galactic-cyber grown by 78.976100%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 91.113 seconds (t=146)\",\"Available money on galactic-cyber grown by 102.633399%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 91.580 seconds (t=146)\",\"Available money on galactic-cyber grown by 103.029584%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 91.350 seconds (t=146)\",\"Available money on galactic-cyber grown by 102.789119%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 91.459 seconds (t=146)\",\"Available money on galactic-cyber grown by 106.437349%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.282 seconds (t=146)\",\"Available money on galactic-cyber grown by 110.884553%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 86.816 seconds (t=146)\",\"Available money on galactic-cyber grown by 113.557642%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 85.401 seconds (t=146)\",\"Available money on galactic-cyber grown by 123.156814%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 80.886 seconds (t=146)\",\"Available money on galactic-cyber grown by 123.720841%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 80.642 seconds (t=146)\",\"Available money on galactic-cyber grown by 128.770006%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 78.547 seconds (t=146)\",\"Available money on galactic-cyber grown by 82.818797%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 77.201 seconds (t=146)\",\"Available money on galactic-cyber grown by 17.920722%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.689 seconds (t=146)\",\"Available money on galactic-cyber grown by 17.929167%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.578 seconds (t=146)\",\"Available money on galactic-cyber grown by 38.033316%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 92.224 seconds (t=146)\",\"Available money on galactic-cyber grown by 6.186584%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.191 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.598 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 92.244 seconds (t=146)\",\"Available money on galactic-cyber grown by 33.311601%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 91.139 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":4.381379862571992,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":14775304.636395605,\"threads\":146,\"dataMap\":{\"23.6.4.5\":[0,0,98112,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":857,\"moneyAvailable\":644515252,\"moneyMax\":16112881300,\"hackDifficulty\":93,\"baseDifficulty\":93,\"minDifficulty\":31,\"serverGrowth\":74,\"serversOnNetwork\":[\"89.7.4.0\",\"23.5.0.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"58.2.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.2.8.4\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.2.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"58.2.8.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 74.983 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.430783%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.311 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.593617%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.874 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.410289%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.463 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.877624%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.621 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.971542%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.425 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.486855%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.655 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.081571%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.699 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.602015%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.063 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.400305%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.713 seconds (t=36)\",\"Available money on galactic-cyber grown by 8.494125%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.594 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.034826%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.417 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.144939%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.436 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.717 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.611961%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.435 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.737632%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.787 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.316388%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.048 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.749037%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.736 seconds (t=36)\",\"Available money on galactic-cyber grown by 13.688617%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.328 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.090 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.979 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.127 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.019972%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.384 seconds (t=36)\",\"Available money on galactic-cyber grown by 7.307822%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.045 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.380304%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.328 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0803402400862447,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3664911.668616711,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24336,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-706562-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[85,156,118,172,63,5,152,58,151,121,12],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":878,\"moneyAvailable\":793488119,\"moneyMax\":19837202975,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":74,\"serversOnNetwork\":[\"41.8.6.3\",\"19.6.6.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"9.0.2.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.0.2.7\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":872,\"moneyAvailable\":900128802,\"moneyMax\":22503220050,\"hackDifficulty\":89,\"baseDifficulty\":89,\"minDifficulty\":30,\"serverGrowth\":95,\"serversOnNetwork\":[\"7.1.5.6\",\"18.2.3.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"35.7.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.7.6.6\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.7.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"35.7.6.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 91.654 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.292602%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.882 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.475189%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.407 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.267742%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.997 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.725304%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.303 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.808658%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.988 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.305059%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.270 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.894233%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.299 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.405808%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.678 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.121905%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.522 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.750 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.001027%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.639 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.843503%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.710 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.811770%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.450 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.349911%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.041 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.941721%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.896 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.499780%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.972 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.321892%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.408 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.424655%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.538 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.025 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.982 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.836 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.590 seconds (t=36)\",\"Available money on galactic-cyber grown by 14.811686%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.953 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.132 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.544 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0803402400862447,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3626961.399858845,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24084,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":898,\"moneyAvailable\":27767537425,\"moneyMax\":27767537425,\"hackDifficulty\":28.478,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":90,\"serversOnNetwork\":[\"7.1.5.6\",\"56.9.6.5\",\"64.3.9.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"89.7.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.7.4.0\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.7.4.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"89.7.4.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 86.673 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.055338%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.125 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.908283%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.781 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.204866%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.739 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.240150%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.247 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.476825%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.528 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.772337%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.506 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.082161%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.849 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.298987%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.365 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.712471%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.446 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.757857%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.987 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.554449%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.043 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.320893%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.575 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.937 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.973692%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.181 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.991853%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.041 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.234120%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.212 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.416118%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.888 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.758998%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.513 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.537387%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.388 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.127 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.785 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.794 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.300129%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.729 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5401701200431224,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1821612.9003775367,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12096,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":840,\"moneyAvailable\":857731493,\"moneyMax\":21443287325,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":62,\"serversOnNetwork\":[\"64.3.9.3\",\"6.4.7.2\",\"25.8.2.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"19.3.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.3.5.5\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"19.3.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"19.3.5.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 81.862 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.594584%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.345 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.641501%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.408 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.970690%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.230 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.555151%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.112 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.258827%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.226 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.600769%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.255 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.669338%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.700 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.843727%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.248 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.109083%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.188 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.299838%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.774 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.899232%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.827 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.787941%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.361 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.385156%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.879 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.162544%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.390 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.925 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.348 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.676933%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.759 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.769646%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.819 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.025 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.982 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.836 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.590 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.953 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.132 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.544 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5401701200431224,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1810769.9664467177,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12024,0]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406234-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,27],[3,13],[17,27],[12,16],[9,19],[6,14],[18,26]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-333573.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,0,3,0,3,1,-10,-9,7,-8,0,0,1,-9,3,-4,9,0,8,2,9,6,-1,-3,5,4,6,8,9,10,-5,6,-3,-6,4,-3],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":814,\"moneyAvailable\":508048634,\"moneyMax\":12701215850,\"hackDifficulty\":68,\"baseDifficulty\":68,\"minDifficulty\":23,\"serverGrowth\":76,\"serversOnNetwork\":[\"92.9.7.4\",\"80.4.9.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"64.3.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.3.9.3\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":865,\"moneyAvailable\":867618812,\"moneyMax\":21690470300,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":71,\"serversOnNetwork\":[\"35.7.6.6\",\"89.7.4.0\",\"41.8.6.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.6.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.6.4.5\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":865,\"moneyAvailable\":20229627625,\"moneyMax\":20229627625,\"hackDifficulty\":20,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":90,\"serversOnNetwork\":[\"10.4.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"49.6.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.6.3.3\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":895,\"moneyAvailable\":1056094118,\"moneyMax\":26402352950,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":55,\"serversOnNetwork\":[\"10.4.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.4.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.4.2.2\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.4.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"43.4.2.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 95.857 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 100.601 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.255 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.651957%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 105.783 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.825 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 98.477 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.301 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.930 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.167 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.113 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.750 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.439 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.110 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.717 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.295066%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.879 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.356249%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.172 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.557961%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.995 seconds (t=18)\",\"Available money on galactic-cyber grown by 4.316249%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.594 seconds (t=18)\",\"Available money on galactic-cyber grown by 4.210655%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.958 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.599619%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.518 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 74.862 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.672 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.315004%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.759 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.147515%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.122 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.315088%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.605 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.624702%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.933 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":0.540264242733494,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1816191.4334121272,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12060,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-214954-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[13,21]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":922,\"moneyAvailable\":902885020,\"moneyMax\":22572125500,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":60,\"serversOnNetwork\":[\"44.8.6.8\",\"32.8.9.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"92.9.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.9.7.4\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":821,\"moneyAvailable\":23408310775,\"moneyMax\":23408310775,\"hackDifficulty\":21,\"baseDifficulty\":63,\"minDifficulty\":21,\"serverGrowth\":70,\"serversOnNetwork\":[\"11.8.5.2\",\"19.3.5.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"41.6.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.6.3.7\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":830,\"moneyAvailable\":11990290901,\"moneyMax\":24837357775,\"hackDifficulty\":21.746000000000002,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":73,\"serversOnNetwork\":[\"56.9.6.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"32.8.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.8.9.8\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.8.9.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"32.8.9.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.678 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.545063%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 108.192 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.492355%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.159 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.469 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.310434%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.760 seconds (t=36)\",\"Available money on galactic-cyber grown by 8.160743%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.492 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.199159%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.233 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.583192%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.781 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.124170%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.855 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.520041%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.507 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.821093%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.493 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.606903%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.028 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.282504%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 98.123 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.937 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.119 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.862682%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.729 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.906508%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.574 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.412016%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.827 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.789249%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.554 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.543524%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.179 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.919150%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 76.054 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.716914%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.203 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.316388%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.998 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.598 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.030689%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.244 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.927232%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.237 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3643225.8007550733,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24192,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-50652-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[92,17,63,5,33,121,122,165,39,75,155,50],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}}],\"dir\":0,\"requiredHackingSkill\":770,\"moneyAvailable\":740230323,\"moneyMax\":18505758075,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":75,\"serversOnNetwork\":[\"43.4.2.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"95.1.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.1.7.4\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":823,\"moneyAvailable\":38037895125,\"moneyMax\":38037895125,\"hackDifficulty\":28,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":60,\"serversOnNetwork\":[\"14.8.2.5\",\"11.8.5.2\",\"72.0.8.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"14.8.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.8.2.5\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.8.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.8.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"14.8.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"14.8.2.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 24.146 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $800,569,737.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.565 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $473,289,678.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.723 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,074,349,672.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.111 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,292,406,156.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.827 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $652,910,274.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.002 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $277,558,245.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.807 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,276,073,926.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.415 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,707,657,669.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.280 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $494,480,268.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.814 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,640,425,058.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.752 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,621,073,204.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.700 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $742,494,249.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.225 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $271,674,810.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.097 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,894,179,968.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.891 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $882,795,780.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.728 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $323,710,182.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.607 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,434,018,824.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.892 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,002,204,431.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.430 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,124,349,984.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.271 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $216,327,573.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.433 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,650,483,305.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.054 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,927,405,746.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.465 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $435,353,778.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.638 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,702,811,366.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.562 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,490,787,008.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.023 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1164.4100000001279,\"onlineMoneyMade\":63984274389,\"onlineExpGained\":60991.50336085441,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[63984274389,405,0,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":758,\"moneyAvailable\":21458559440,\"moneyMax\":43456455200,\"hackDifficulty\":27.799999999999997,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":89,\"serversOnNetwork\":[\"10.4.9.2\",\"95.1.7.4\",\"7.1.5.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"18.2.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.2.3.0\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-520650.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1052120551\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-740833.cct\",\"type\":\"Total Ways to Sum\",\"data\":90,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":782,\"moneyAvailable\":29334876725,\"moneyMax\":29334876725,\"hackDifficulty\":25.71,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":84,\"serversOnNetwork\":[\"9.0.2.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"72.0.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.0.8.5\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-502390-FulcrumTechnologies.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-4,10,0,7,2,9,-1,3,-2,1],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691251-KuaiGongInternational.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[56,11,195,57,53,68,193,32,83,4,191,166,113,63,95,83,83,197,17,133,60,177,116,45,104,1,10,32,123,165,180],\"reward\":{\"type\":0,\"name\":\"KuaiGong International\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-559881.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[30,92,65,65,121,48,196,187],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":809,\"moneyAvailable\":33755142825,\"moneyMax\":33755142825,\"hackDifficulty\":31.004,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":72,\"serversOnNetwork\":[\"95.1.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"7.1.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.1.5.6\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.1.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.1.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"7.1.5.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"7.1.5.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 29.485 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,288,767,293.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.188 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $623,078,244.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.694 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $335,490,210.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.756 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,710,604,835.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.366 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,005,947,559.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.952 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $461,416,293.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.043 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,102,278,202.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.323 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,740,981,023.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.600 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,801,458,720.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.659 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $768,988,719.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.531 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,866,399,470.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.205 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,729,733,687.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.070 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,171,914,813.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.942 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,128,748,048.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.575 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,270,531,987.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.573 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $620,574,021.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.770 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $228,435,309.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.627 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,095,575,038.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.512 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,405,727,838.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.471 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $617,528,007.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.343 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,145,047,885.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.115 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,090,332,880.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.660 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,255,962,240.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.516 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $283,967,586.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.673 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,143,999,709.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.145 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1128.4100000001197,\"onlineMoneyMade\":63607507722,\"onlineExpGained\":58280.76987814977,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[63607507722,387,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":809,\"moneyAvailable\":26664478025,\"moneyMax\":26664478025,\"hackDifficulty\":27.615999999999996,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":78,\"serversOnNetwork\":[\"14.8.2.5\",\"9.0.2.7\",\"35.7.6.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"16.2.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.2.1.9\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.2.1.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"16.2.1.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 91.076 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.570953%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.740 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.716923%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.325 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.558896%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.930 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.001271%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.088 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.162673%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.744 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.656053%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.077 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.307783%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.002 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.851518%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 76.330 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.547374%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.032 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.646763%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.980 seconds (t=36)\",\"Available money on galactic-cyber grown by 8.456894%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.254 seconds (t=36)\",\"Available money on galactic-cyber grown by 8.515117%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.310 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.139214%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 98.856 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.813466%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 100.604 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.303450%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.645 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.550669%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.968 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.977380%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.625 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.176101%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.685 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.032296%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.224 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.605203%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.713 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.149340%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.353 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.123043%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.440 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.037640%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.787 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.416332%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.219 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.076877%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.577 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3643225.8007550733,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24192,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-697874.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[47,48,42,50,38,46,41,12,3,7,28]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":657,\"moneyAvailable\":17984113850,\"moneyMax\":17984113850,\"hackDifficulty\":21.57,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":62,\"serversOnNetwork\":[\"79.6.9.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"28.5.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.5.0.2\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"28.5.0.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"28.5.0.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.048 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.649968%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 107.525 seconds (t=36)\",\"Available money on galactic-cyber grown by 13.252647%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.492 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 100.337 seconds (t=36)\",\"Available money on galactic-cyber grown by 2.100672%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.469 seconds (t=36)\",\"Available money on galactic-cyber grown by 8.238513%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.204 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.189 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.773 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.988 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.447060%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.173 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.486971%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.986 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.088460%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.609 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.748741%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.159 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.233628%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.448 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.648535%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 76.881 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.121905%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.482 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.734341%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.188 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.203474%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.552 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.508969%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.494 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.191748%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.266 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.592245%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.031 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.035299%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.708 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.450699%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.384 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.927554%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.598 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.076396%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.644 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.093327%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.541 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3648647.267720483,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24228,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":523,\"moneyAvailable\":6520063075,\"moneyMax\":13504598950,\"hackDifficulty\":18.05,\"baseDifficulty\":53,\"minDifficulty\":18,\"serverGrowth\":55,\"serversOnNetwork\":[\"84.0.8.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"42.2.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.2.1.7\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.2.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"42.2.1.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"42.2.1.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 23.635 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $863,920,755.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.456 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $382,670,667.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.365 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,874,678,291.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.850 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,392,448,392.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.718 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $429,309,873.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.477 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $151,547,877.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.120 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,065,995,683.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.347 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,665,837,135.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.093 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $588,473,172.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.794 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,123,245,079.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.731 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,126,553,668.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.679 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $884,717,487.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.204 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $323,091,126.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.085 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,657,766,645.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.616 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,052,984,187.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.707 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $385,381,026.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.593 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,878,259,031.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.871 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,389,683,006.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.409 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,596,098,556.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.230 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $306,800,757.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.412 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,119,328,549.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.841 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,745,328,536.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.423 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $619,647,894.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.599 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,169,174,140.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.345 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,929,828,122.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.811 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":66815.80999959014,\"onlineMoneyMade\":3926587420170,\"onlineExpGained\":3050930.5347839813,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[3926587420170,20259,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541672-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[55],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}}],\"dir\":0,\"requiredHackingSkill\":572,\"moneyAvailable\":7437765853,\"moneyMax\":15387016175,\"hackDifficulty\":20.052,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":53,\"serversOnNetwork\":[\"50.2.3.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"10.4.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.4.9.2\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.4.9.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"10.4.9.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.634 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.567164%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.017 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.823940%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.468 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.255257%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.013 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.773867%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.712 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.182753%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.308 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.063 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.904728%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.382 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.248097%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.025 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.746681%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.203 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.181978%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.655 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.398858%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.893 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.196459%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.294 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.053076%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.702 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.224050%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 98.412 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.329842%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.838 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.776894%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.595 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.594 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.582301%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.572 seconds (t=36)\",\"Available money on galactic-cyber grown by 12.982163%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.188 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.566 seconds (t=36)\",\"Available money on galactic-cyber grown by 7.374341%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.672 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.175 seconds (t=36)\",\"Available money on galactic-cyber grown by 7.371060%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.789 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.408693%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.272 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.428244%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.238 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3643225.8007550733,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24192,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-884776.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":270523886,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":407,\"moneyAvailable\":267757900,\"moneyMax\":6693947500,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":40,\"serversOnNetwork\":[\"65.5.8.5\",\"23.6.4.5\",\"49.6.3.3\",\"14.8.2.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"84.0.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"84.0.8.8\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"84.0.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"84.0.8.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 83.574 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.374566%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.220 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.363314%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.357 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.623814%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.086 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.794642%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.358 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.978122%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.849 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.335944%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.537 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.326756%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.634 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.159572%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.121 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.988 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.208119%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.677 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.213816%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.601 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.454486%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.454 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.760778%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.906 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.956542%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.315 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.579950%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.762 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.654550%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.251 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.331535%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.446 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.479981%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.810 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.626664%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.252 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.503835%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.459 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.458371%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.077416%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.773 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.047476%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.069 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.209746%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.567 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.514893%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.858 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":0.540264242733494,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1824323.6338602414,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12114,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":384,\"moneyAvailable\":213991922,\"moneyMax\":5349798050,\"hackDifficulty\":50,\"baseDifficulty\":50,\"minDifficulty\":17,\"serverGrowth\":44,\"serversOnNetwork\":[\"25.7.9.9\",\"28.5.0.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"37.4.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.4.4.8\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.4.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"37.4.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"37.4.4.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 29.811 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,230,085,016.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.343 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $636,341,697.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.882 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $282,494,628.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.770 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,272,470,245.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.517 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,032,142,266.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.139 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $387,918,801.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.060 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,982,032,946.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.469 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,818,929,042.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.788 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,513,301,292.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.680 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $647,154,981.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.552 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,641,334,877.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,290,273,704.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.091 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $985,034,502.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.963 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,122,277,264.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.758 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,741,165,775.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.594 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $520,341,588.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.790 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $191,911,023.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.637 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,088,776,609.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.704 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,177,947,549.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.492 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $518,406,759.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.364 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,138,740,910.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.293 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,083,698,278.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.847 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,052,544,321.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,191,101,137.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.816 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,137,528,385.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.328 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":52390.40999977648,\"onlineMoneyMade\":3026941651278,\"onlineExpGained\":2365114.9636597433,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[3026941651278,15705,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746835.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[87,144,39,91,111,86,161,56,123,63,5,200,72,163,137,67,186,57,195,68],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":771,\"moneyAvailable\":13414917476,\"moneyMax\":27217622075,\"hackDifficulty\":24.836,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":75,\"serversOnNetwork\":[\"17.5.4.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"27.6.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.6.6.6\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.6.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"27.6.6.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 80.201 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.796550%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.670 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.847425%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.030 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.490640%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.227 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.801488%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.585 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.726173%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.233 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.917707%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.699 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.182144%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.677 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.378789%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.204 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.692795%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.033 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.945353%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.352 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.639 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.710 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.359600%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.161 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.431874%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.671 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.062153%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 100.525 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.903 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.491034%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.706 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.567105%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.899 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.090 seconds (t=18)\",\"Available money on galactic-cyber grown by 2.796499%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.979 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=18)\",\"Available money on galactic-cyber grown by 3.860390%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.127 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.785 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.794 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.382 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1818902.166894832,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12078,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":462,\"moneyAvailable\":226119735,\"moneyMax\":5652993375,\"hackDifficulty\":47,\"baseDifficulty\":47,\"minDifficulty\":16,\"serverGrowth\":41,\"serversOnNetwork\":[\"41.9.8.0\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"65.5.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.5.8.5\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":608,\"moneyAvailable\":524933186,\"moneyMax\":13123329650,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":70,\"serversOnNetwork\":[\"47.0.4.6\",\"10.4.9.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.6.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.6.9.8\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.6.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.6.9.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"79.6.9.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 23.420 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,872,130,275.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.363 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $534,800,835.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.902 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $237,877,326.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.781 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,742,477,255.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.538 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $866,104,146.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.160 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $326,159,208.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.073 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,524,888,179.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.489 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,363,722,749.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.808 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,271,291,967.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.701 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $544,647,366.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.573 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,235,703,653.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.334 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,921,645,755.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.112 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $827,991,054.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.983 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,639,755,953.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.779 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,297,582,190.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.615 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $993,182,751.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.486 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $161,229,663.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.644 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,082,142,007.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.891 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $987,119,010.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.513 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $435,214,620.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.382 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,895,356,070.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.397 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,077,063,667.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.034 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $739,306,611.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.578 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,262,803,976.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.857 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,913,399,783.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.623 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":52354.609999777,\"onlineMoneyMade\":3095114833611,\"onlineExpGained\":2367825.697142448,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[3095114833611,15723,0,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":427,\"moneyAvailable\":12044148675,\"moneyMax\":12044148675,\"hackDifficulty\":23.922,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":52,\"serversOnNetwork\":[\"34.0.5.2\",\"16.2.1.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"34.0.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.0.5.2\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.0.5.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"34.0.5.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 81.447 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.307135%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.863 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.638726%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.008 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.688446%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.466 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.099909%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.158 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 74.943 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.501229%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.063 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.042210%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.833 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.394348%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.492 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.914872%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.588 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.361676%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.055 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.577804%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.293 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.367453%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.761 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.026000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.471 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.098917%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.549 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.846783%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.254 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.432786%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.501 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.866634%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.158 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.048855%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.285 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.350185%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.868 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.468647%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.328 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.367827%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.916947%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.305 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.833367%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.683 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.226368%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.025 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.846113%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.457 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0807167308477315,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3632382.8668242544,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24120,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":279,\"moneyAvailable\":3829677975,\"moneyMax\":3829677975,\"hackDifficulty\":12.59,\"baseDifficulty\":37,\"minDifficulty\":12,\"serverGrowth\":48,\"serversOnNetwork\":[\"10.4.3.4\",\"79.6.9.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"9.7.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.7.9.3\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":316,\"moneyAvailable\":6077467775,\"moneyMax\":6077467775,\"hackDifficulty\":19.942,\"baseDifficulty\":57,\"minDifficulty\":19,\"serverGrowth\":46,\"serversOnNetwork\":[\"10.4.3.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"25.7.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.7.9.9\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.7.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.7.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.7.9.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"25.7.9.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 24.167 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $741,701,160.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.673 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $398,463,444.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.742 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,067,715,628.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.299 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,199,314,665.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.931 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $548,862,822.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.023 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,108,748,455.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.140 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,270,258,891.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.579 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,144,578,950.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.639 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $913,798,431.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.511 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,110,140,782.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.101 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,253,658,805.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.049 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $623,161,197.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.246 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,135,218,841.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.393 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,276,347,508.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.409 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $740,146,167.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.749 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $271,924,299.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.618 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,664,276,732.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.167 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,677,626,973.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.451 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $735,633,477.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.322 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,151,354,851.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.937 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,096,967,482.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.472 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,498,758,399.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.495 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $338,714,676.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.662 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,780,802,459.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.851 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,095,915,292.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.502 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5924.809999996803,\"onlineMoneyMade\":405331995555,\"onlineExpGained\":307668.25028697506,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[405331995555,2043,0,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":422,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":64,\"serversOnNetwork\":[\"37.6.0.5\",\"84.0.8.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"41.9.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.9.8.0\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":254,\"moneyAvailable\":73056790,\"moneyMax\":1826419750,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":39,\"serversOnNetwork\":[\"10.4.3.4\",\"27.6.6.6\",\"50.2.3.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"40.1.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.1.6.0\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"40.1.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"40.1.6.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 26.851 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,734,324,335.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.564 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":35.809999999999974,\"onlineMoneyMade\":2734324335,\"onlineExpGained\":1355.3667413523194,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[2734324335,9,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"hackDifficulty\":10,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\",\"47.8.6.9\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"91.2.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.2.5.0\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"91.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.2.5.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"91.2.5.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 82.640 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.933344%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 81.004 seconds (t=9)\",\"Available money on galactic-cyber grown by 5.003946%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 79.895 seconds (t=9)\",\"Available money on galactic-cyber grown by 5.153431%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 77.645 seconds (t=9)\",\"Available money on galactic-cyber grown by 5.241573%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 76.402 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 75.064 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.371210%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 91.008 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.340254%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 91.652 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.426552%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 89.906 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 87.382 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":774.2100000000391,\"onlineMoneyMade\":0,\"onlineExpGained\":12198.300672170877,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,81,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":2635293.5359983444,\"moneyMax\":57500000,\"hackDifficulty\":10.455999999999996,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"78.1.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"78.1.6.8\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.1.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.1.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"78.1.6.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"78.1.6.8\",\"ramUsage\":1.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.810000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":9,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"57.2.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.2.7.1\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"57.2.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"57.2.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"57.2.7.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 87.287 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.303910%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.802 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.572558%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.530 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.734628%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.758 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 74.943 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.063 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.149558%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.189 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.522715%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.907 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.749823%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.018 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.935666%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.522 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.025480%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.818 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.379822%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.175 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.705956%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.524 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.138324%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.656 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.084666%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 100.259 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.649702%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.903 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.516008%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.425 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.592530%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.618 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.936256%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.090 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.788130%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.609 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.527 seconds (t=18)\",\"Available money on galactic-cyber grown by 1.991333%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.171 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.121900%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.358 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.366142%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.130 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2112.8100000002696,\"onlineMoneyMade\":0,\"onlineExpGained\":65057.60358491131,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,432,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"40.1.5.9\",\"5.0.3.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"14.5.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.5.9.5\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.5.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"14.5.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.5.9.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"14.5.9.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 92.328 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 90.527 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.367545%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 91.097 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 89.025 seconds (t=9)\",\"Available money on galactic-cyber grown by 2.488936%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 86.797 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":486.20999999998094,\"onlineMoneyMade\":0,\"onlineExpGained\":6776.833706761598,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,45,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"50.5.8.2\",\"10.4.3.4\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"37.6.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.6.0.5\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.6.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"37.6.0.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"37.6.0.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.960 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.918990%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.563 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.524458%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.923 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.835058%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.252 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.760778%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.951 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.968919%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.285 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.220074%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.395 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.441153%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.774 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.766775%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.522 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 74.922 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.155550%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.143 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.150727%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.164 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.385537%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.053 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.677418%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.573 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.884795%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.877 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.477879%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.458 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.551042%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.962 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.838404%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.022 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.328 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.090 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.979 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.000604%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.537 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.862100%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.837 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.458849%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.998 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.045 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.166015%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.928 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1824323.6338602414,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12114,0]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"47.8.6.9\",\"25.7.9.9\",\"17.5.4.7\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"5.0.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.0.3.2\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.0.3.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"5.0.3.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 82.937 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.462144%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 108.725 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.840089%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.619 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.275211%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.995 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.053269%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.841 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.063 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.748559%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.982 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.090392%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.625 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.595365%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.736 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.009492%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.255 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.222847%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.507 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.007180%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.908 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.849021%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 76.317 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.041 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.815246%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.925 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.916638%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 76.081 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.583204%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.736 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.039109%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.122 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.328977%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.086 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.004865%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.859 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.396207%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.630 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.804164%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 76.388 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.191 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.598 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.985017%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.843 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.139 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0807167308477315,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3664911.668616711,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24336,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"57.2.7.1\",\"47.0.4.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"50.5.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.5.8.2\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"50.5.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"50.5.8.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 95.395 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.689 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.226858%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 94.045 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.303325%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 92.424 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.191 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.237172%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.798 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.272619%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.058 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 91.139 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":666.2100000000146,\"onlineMoneyMade\":0,\"onlineExpGained\":9487.567189466237,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,63,0]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"14.5.9.5\",\"20.2.8.2\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"40.1.5.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.1.5.9\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"40.1.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.5.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"40.1.5.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 96.824 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.197230%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 94.714 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.088845%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 97.164 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.160358%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 95.543 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.234073%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.904 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.220694%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 94.193 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.296936%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 92.572 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.191 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.230978%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.931 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.265622%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 93.191 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.353675%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 91.339 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":954.4100000000801,\"onlineMoneyMade\":0,\"onlineExpGained\":13553.667413523197,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,90,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":30,\"moneyMax\":100000000,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\",\"57.2.7.1\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"80.8.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.8.2.0\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.8.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"80.8.2.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 84.152 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.806950%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.297 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.145911%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.280 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.473776%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.994 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.054550%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.108 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.063 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.189 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.489774%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.173 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.707154%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.351 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.893237%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.855 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.988977%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.100 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.329431%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.552 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.699378%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.968 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.937 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.193021%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.012005%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.900 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.028376%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.759 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.270415%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.946 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.465258%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.540 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.811432%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.179 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.960310%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.195 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.962384%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.527 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.953445%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.949 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.025 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.412656%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.723 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1821612.9003775367,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12096,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-800089.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[4,9,7,48,45,4,32,22,4,2,32],[49,5,12,30,22,17,11,7,49,38,47],[7,33,42,27,14,50,22,41,41,7,37],[40,9,47,27,29,18,23,39,21,3,28],[28,9,18,47,44,13,23,50,26,20,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803189-MegaCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,12,44,41,49,40,11,22,35,48,23,16],[30,24,35,27,46,35,34,26,15,27,36,50]],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}}],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"47.8.6.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"47.8.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.8.6.9\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.8.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"47.8.6.9\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"47.8.6.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 83.270 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.960310%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.296 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.557641%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.656 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.863607%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.985 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.793789%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.670 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.005275%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.018 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.258286%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.114 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.481038%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.492 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.806950%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.626664%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.328 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.671159%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.869 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.468957%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.954 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.970689%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.169 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.364462%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.238 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.514895%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.927 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.063223%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.493 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.084638%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.330 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.360225%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.294 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.567083%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.830 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.899586%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.602 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.760065%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.890 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.856 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.962683%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.875 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.896135%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.504 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.086119%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.706 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.261503%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.382 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1813480.6999294225,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12042,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"40.1.6.0\",\"37.6.0.5\",\"80.8.2.0\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"10.4.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.4.3.4\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.4.3.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"10.4.3.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 84.130 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.330932%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.605 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.265358%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.083 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.539272%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.812 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.694988%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.039 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.939611%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.409 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.400772%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.967 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.189 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.773 seconds (t=18)\",\"Available money on galactic-cyber grown by 1.082303%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.988 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.329260%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.573 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.341800%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.453 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.632706%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.943 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.947042%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.425 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.177174%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.634 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.796878%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.281 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.080018%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.372 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.860 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.402 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.625 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.566 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.420 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.175 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.537 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.702 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.774505%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.705 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1816191.4334121272,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12060,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736595.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-9,3,-4,-1,-9,-9,1,8,-10,7,4,-7,10,-4,1,-8,5,-8,10],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":196,\"moneyAvailable\":66719701,\"moneyMax\":1667992525,\"hackDifficulty\":31,\"baseDifficulty\":31,\"minDifficulty\":10,\"serverGrowth\":36,\"serversOnNetwork\":[\"14.5.9.5\",\"34.0.5.2\",\"9.7.9.3\",\"41.9.8.0\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"47.0.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.0.4.6\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":240,\"moneyAvailable\":47629759,\"moneyMax\":1190743975,\"hackDifficulty\":45,\"baseDifficulty\":45,\"minDifficulty\":15,\"serverGrowth\":31,\"serversOnNetwork\":[\"5.0.3.2\",\"65.5.8.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.6.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.6.0.7\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.6.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"59.6.0.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"59.6.0.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.915 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.827578%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.365 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.496574%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.749 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.096429%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.754 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.415622%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.609 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.007604%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.567 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.204 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.189 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.773 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.988 seconds (t=18)\",\"Available money on galactic-cyber grown by 2.588308%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.262 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.250610%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.253 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.518368%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.920 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.810379%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.492 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.016810%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.848 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.648022%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.281 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.736839%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.696 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.643117%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.092 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.735105%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.152 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.625 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.961142%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.899 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.672 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.214630%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.507 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.789 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.272 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.666649%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.586 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5404524881142374,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1824323.6338602414,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12114,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"72.8.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.8.2.8\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"72.8.2.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"72.8.2.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 90.542 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.703860%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.206 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.848671%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.762 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.711728%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.359 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.130049%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.554 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.381345%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.010 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.823372%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.543 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.480497%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.454 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.047994%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.752 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.113 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.750 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.046696%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.039 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.110 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.717 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.106914%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.027 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.056602%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.281 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.625341%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.357 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.860 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.322666%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 75.402 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.078000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.625 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.157645%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.566 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.321791%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.420 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.340610%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.175 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.312832%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.537 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.452421%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.702 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.650319%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.424 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0809049762284748,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":3643225.8007550733,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,24192,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":508,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"hackDifficulty\":51,\"baseDifficulty\":51,\"minDifficulty\":17,\"serverGrowth\":41,\"serversOnNetwork\":[\"50.2.3.7\",\"44.8.6.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"70.5.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.5.8.6\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.5.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"70.5.8.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 74.983 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.162794%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.148 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.792581%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.674 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.602539%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.263 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.904494%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.570 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.845586%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.270 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.066136%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.536 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.322272%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.632 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.557453%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.944 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.877981%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 75.789 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.746833%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.098 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.639 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.710 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.182424%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.176 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.060112%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.937 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.034187%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 100.858 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 76.903 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.455903%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.069 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.328 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.090 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.979 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.035713%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.189 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.897654%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.504 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.773337%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.732 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.045 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.195123%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.661 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5404524881142374,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":1832455.8343083556,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,12168,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-786952.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[92,51,175,147,65,50,21,86,74]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429921.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,1,3,-9,-2,-10,8,8,-6,7,4,-4,-8,-4,-8,4,-2,-6,-2,4,4,5,-9,-9,-7,1,-2,4,3,-2],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1036,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":57,\"serversOnNetwork\":[\"82.2.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"44.8.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.8.6.8\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":743,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":55,\"serversOnNetwork\":[\"72.8.2.8\",\"43.4.2.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"41.8.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.8.6.3\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"41.8.6.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"41.8.6.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 79.386 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 82.255 seconds (t=292)\",\"Available money on galactic-cyber grown by 36.431383%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 106.925 seconds (t=292)\",\"Available money on galactic-cyber grown by 41.088071%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 82.937 seconds (t=292)\",\"Available money on galactic-cyber grown by 38.516322%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 100.337 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 74.943 seconds (t=292)\",\"Available money on galactic-cyber grown by 18.457483%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 86.633 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 87.189 seconds (t=292)\",\"Available money on galactic-cyber grown by 125.120244%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 88.773 seconds (t=292)\",\"Available money on galactic-cyber grown by 346.252620%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 88.810 seconds (t=292)\",\"Available money on galactic-cyber grown by 320.767591%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 87.106 seconds (t=292)\",\"Available money on galactic-cyber grown by 361.422602%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 86.957 seconds (t=292)\",\"Available money on galactic-cyber grown by 384.014909%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 84.477 seconds (t=292)\",\"Available money on galactic-cyber grown by 408.166890%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 82.114 seconds (t=292)\",\"Available money on galactic-cyber grown by 427.637176%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 80.338 seconds (t=292)\",\"Available money on galactic-cyber grown by 7.733537%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 75.882 seconds (t=292)\",\"Available money on galactic-cyber grown by 12.118493%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 94.514 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 96.950 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 95.328 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 93.689 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 93.845 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 92.224 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 93.191 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 93.598 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 92.843 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 91.139 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":8.767340362742074,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":29330738.66808294,\"threads\":292,\"dataMap\":{\"23.6.4.5\":[0,0,194764,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":548,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"64.3.9.3\",\"58.2.8.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"50.2.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.2.3.7\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.2.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"50.2.3.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 91.483 seconds (t=146)\",\"Available money on galactic-cyber grown by 97.577049%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 94.919 seconds (t=146)\",\"Available money on galactic-cyber grown by 108.092059%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 88.413 seconds (t=146)\",\"Available money on galactic-cyber grown by 97.685513%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 94.845 seconds (t=146)\",\"Available money on galactic-cyber grown by 108.985192%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 87.893 seconds (t=146)\",\"Available money on galactic-cyber grown by 39.419637%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 84.922 seconds (t=146)\",\"Available money on galactic-cyber grown by 115.796476%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 84.352 seconds (t=146)\",\"Available money on galactic-cyber grown by 118.610895%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 82.981 seconds (t=146)\",\"Available money on galactic-cyber grown by 123.395473%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 80.826 seconds (t=146)\",\"Available money on galactic-cyber grown by 126.671169%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 79.441 seconds (t=146)\",\"Available money on galactic-cyber grown by 128.714400%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 78.590 seconds (t=146)\",\"Available money on galactic-cyber grown by 25.714824%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 76.028 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 94.717 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.130637%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 98.427 seconds (t=146)\",\"Available money on galactic-cyber grown by 27.986204%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 98.667 seconds (t=146)\",\"Available money on galactic-cyber grown by 4.152904%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 95.743 seconds (t=146)\",\"Available money on galactic-cyber grown by 7.117900%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 97.860 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.102817%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 74.897 seconds (t=146)\",\"Available money on galactic-cyber grown by 114.986110%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 84.661 seconds (t=146)\",\"Available money on galactic-cyber grown by 119.407372%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 82.544 seconds (t=146)\",\"Available money on galactic-cyber grown by 121.560381%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 81.567 seconds (t=146)\",\"Available money on galactic-cyber grown by 125.725893%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 79.747 seconds (t=146)\",\"Available money on galactic-cyber grown by 129.309880%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 78.290 seconds (t=146)\",\"Available money on galactic-cyber grown by 131.590849%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 77.402 seconds (t=146)\",\"Available money on galactic-cyber grown by 8.479436%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.457 seconds (t=146)\",\"Available money on galactic-cyber grown by 33.570032%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 92.323 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":4.383670181371037,\"onlineRunningTime\":67275.40999959182,\"onlineMoneyMade\":0,\"onlineExpGained\":14621395.213099817,\"threads\":146,\"dataMap\":{\"23.6.4.5\":[0,0,97090,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-669912.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[43,11,19,28,24,17,4],[8,45,5,44,42,19,38],[20,40,4,34,35,28,13],[18,6,17,11,24,11,15],[3,47,8,45,34,19,38],[11,28,30,29,31,35,14],[11,9,46,41,30,10,48]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":351,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1.002,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"41.9.8.0\",\"42.2.1.7\",\"72.8.2.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"17.5.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.5.4.7\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.5.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"17.5.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.5.4.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"17.5.4.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 23.605 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,107,880,569.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.426 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $404,257,077.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.173 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,090,566,241.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.654 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,789,508,880.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.688 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $451,551,042.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.283 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $193,923,639.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.106 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,075,578,199.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.077 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,748,424,798.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.896 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $897,307,974.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.743 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,132,499,986.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.469 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,273,890,247.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.478 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,135,387,656.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.174 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $491,882,139.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.046 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,102,701,094.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.311 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,614,355,317.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.656 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $588,188,610.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.549 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,131,205,309.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.506 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,068,708,985.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.270 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,339,587,846.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.251 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $257,615,739.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.424 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,875,605,273.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.945 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,300,246,109.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.444 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $519,378,795.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.620 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,926,950,012.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.454 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,944,588,257.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.003 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":53549.00999975962,\"onlineMoneyMade\":3045652142049,\"onlineExpGained\":2422040.366796538,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[3045652142049,16083,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":204,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"37.6.0.5\",\"37.4.4.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"82.2.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.2.7.7\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"82.2.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"82.2.7.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"82.2.7.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 23.584 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,571,699,583.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.384 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $449,482,275.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.921 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $427,428,423.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.475 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,546,511,993.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.647 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $726,807,672.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.181 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $274,248,423.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.085 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,530,714,509.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.681 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,982,110,086.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.829 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,068,031,377.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.722 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $458,396,505.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.594 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,083,932,188.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.841 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,353,012,228.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.153 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $585,100,476.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.025 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,653,543,719.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.971 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,925,864,226.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.636 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $834,013,026.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.507 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $135,459,468.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.651 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,075,343,587.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.083 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,901,809,629.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.209 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $365,397,939.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.399 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,915,367,228.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.589 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,276,347,508.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.409 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $882,110,646.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 23.558 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,687,103,324.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.837 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,893,893,921.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.436 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":66773.80999959,\"onlineMoneyMade\":3877281531216,\"onlineExpGained\":3045509.0678185723,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[3877281531216,20223,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":541,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"6.4.7.2\",\"2.5.0.4\",\"17.7.9.2\",\"70.5.8.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"20.2.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.2.8.2\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.2.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.2.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"20.2.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"20.2.8.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 23.614 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $413,428,452.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.435 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $182,986,844.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.349 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,370,636,528.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 28.829 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $666,766,360.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 23.697 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $168,460,332.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.292 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $72,480,016.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.113 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,363,975,180.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 29.253 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $651,741,288.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 23.906 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $281,533,752.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.773 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,389,346,552.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 27.641 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,219,305,660.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 23.488 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $423,470,272.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.184 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $183,792,560.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.055 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,376,029,548.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 28.486 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $601,463,016.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 23.666 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $219,550,388.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.558 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,388,770,900.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 27.677 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,255,519,060.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 29.363 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $419,438,364.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.281 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $80,740,288.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.442 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,377,667,724.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 28.382 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $717,808,072.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 23.474 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $162,198,800.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 23.648 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,013,094,740.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 26.572 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $936,450,380.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 28.033 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":66861.00999959031,\"onlineMoneyMade\":1670173299180,\"onlineExpGained\":1355969.1265707547,\"threads\":4,\"dataMap\":{\"23.6.4.5\":[1670173299180,9004,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":52,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"50.5.8.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"34.3.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.3.3.7\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"2.5.0.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"54.2.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.2.4.9\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.2.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.2.2.9\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.0.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.0.0.9\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":141,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.0.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.0.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"52.0.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.0.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.0.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"52.0.0.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"ecorp\"],\"server\":\"52.0.0.9\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot0/ecorp: weaken by 1.6460000000000008\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":8.610000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"ecorp\",1],\"server\":\"52.0.0.9\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server ecorp in 211.414 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.810000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.2.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.2.7.0\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":598.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"79.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"79.2.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"4sigma\",1],\"server\":\"79.2.7.0\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server 4sigma in 77.592 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41.81000000000006,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":146,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"18.6.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.6.4.5\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":135.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"18.6.4.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"18.6.4.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"18.6.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"18.6.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"18.6.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"18.6.4.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"megacorp\",1],\"server\":\"18.6.4.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server megacorp in 238.087 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":174.00999999999866,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.2.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.2.2.5\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":90.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"88.2.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"88.2.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"clarkinc\",1],\"server\":\"88.2.2.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server clarkinc in 125.226 seconds (t=22)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":107.810000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":22,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.9.3.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.9.3.1\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":86.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.9.3.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.9.3.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"72.9.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.9.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.9.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"72.9.3.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"nwo\",1],\"server\":\"72.9.3.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server nwo in 203.301 seconds (t=21)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":144.01000000000036,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":21,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"7.2.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.2.5.0\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":147.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"7.2.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"7.2.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"7.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"7.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"7.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"7.2.5.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"b-and-a\",1],\"server\":\"7.2.5.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server b-and-a in 158.923 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":101.81000000000091,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":36,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"91.0.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.0.4.3\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":161.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"91.0.4.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"91.0.4.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"91.0.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"91.0.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"91.0.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"91.0.4.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"blade\",1],\"server\":\"91.0.4.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server blade in 172.146 seconds (t=38)\",\"Server security level on blade weakened to 31. Gained 8,859.7065 hacking exp (t=38)\",\"Running script: ms-control.js on bot6 with 1 threads and args: [\\\"blade\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":174.00999999999866,\"onlineMoneyMade\":0,\"onlineExpGained\":8859.70645530642,\"threads\":38,\"dataMap\":{\"74.7.8.7\":[0,0,0,38]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"blade\"],\"server\":\"91.0.4.3\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1.8099999999999998,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"58.1.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.1.7.1\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":139.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"58.1.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"58.1.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"58.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"58.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"58.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"58.1.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"kuai-gong\",1],\"server\":\"58.1.7.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server kuai-gong in 218.619 seconds (t=34)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":162.00999999999934,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":34,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.3.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.3.0.4\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":135.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"61.3.0.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"61.3.0.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"61.3.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"61.3.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"61.3.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"61.3.0.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"omnitek\",1],\"server\":\"61.3.0.4\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server omnitek in 165.613 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.809999999999992,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"69.3.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.3.1.7\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":705.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"69.3.1.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"69.3.1.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"69.3.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"69.3.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"69.3.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"69.3.1.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"global-pharm\",1],\"server\":\"69.3.1.7\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server global-pharm in 90.951 seconds (t=172)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.809999999999928,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":172,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"46.3.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.3.0.6\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":100,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"46.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"46.3.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"deltaone\",1],\"server\":\"46.3.0.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server deltaone in 129.108 seconds (t=23)\",\"Server security level on deltaone weakened to 28. Gained 4,902.1536 hacking exp (t=23)\",\"Running script: ms-control.js on bot10 with 1 threads and args: [\\\"deltaone\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":131.81000000000105,\"onlineMoneyMade\":0,\"onlineExpGained\":4902.15356740618,\"threads\":23,\"dataMap\":{\"95.1.7.4\":[0,0,0,23]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"deltaone\"],\"server\":\"46.3.0.6\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2.8100000000000005,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.5.8.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.5.8.3\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":729.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"96.5.8.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"96.5.8.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args.length == 0 ? 'foodnstuff' : ns.args[0];\\r\\n\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.5.8.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"fulcrumtech\",1],\"server\":\"96.5.8.3\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server fulcrumtech in 119.583 seconds (t=178)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":178,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"2.9.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.9.8.5\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":127.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"2.9.8.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"2.9.8.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"2.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"2.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"2.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"2.9.8.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"nova-med\"],\"server\":\"2.9.8.5\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot12/nova-med: hack $14667438362.5\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.209999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"nova-med\",1],\"server\":\"2.9.8.5\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack nova-med in 27.130 seconds (t=30)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.810000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":30,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"54.6.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.6.3.4\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":123.15,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"54.6.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"54.6.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"54.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"54.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"54.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"54.6.3.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"zb-institute\",1],\"server\":\"54.6.3.4\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack zb-institute in 25.792 seconds (t=29)\",\"Script SUCCESSFULLY hacked zb-institute for $13,802,704,599.00 and 5,382.9555 exp (t=29)\",\"Running script: ms-control.js on bot13 with 1 threads and args: [\\\"zb-institute\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.809999999999928,\"onlineMoneyMade\":13802704599,\"onlineExpGained\":5382.955539440415,\"threads\":29,\"dataMap\":{\"37.4.4.8\":[13802704599,29,0,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"zb-institute\"],\"server\":\"54.6.3.4\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.010000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.4.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.4.5.4\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":131.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.4.5.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.4.5.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"53.4.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.4.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.4.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"53.4.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"lexo-corp\",1],\"server\":\"53.4.5.4\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server lexo-corp in 76.807 seconds (t=32)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":71.81000000000049,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":32,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"30.7.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.7.7.2\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":86.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"30.7.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"30.7.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"30.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"30.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"30.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"30.7.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zeus-med\",1],\"server\":\"30.7.7.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zeus-med in 135.119 seconds (t=21)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":21,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"62.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.4.1.6\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":692.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"62.4.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"62.4.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"62.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"62.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"62.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"62.4.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"applied-energetics\",1],\"server\":\"62.4.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server applied-energetics in 78.025 seconds (t=169)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11.809999999999992,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":169,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.7.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.7.2.2\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":762.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"94.7.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"94.7.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"94.7.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"94.7.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"94.7.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"94.7.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"rho-construction\",1],\"server\":\"94.7.2.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server rho-construction in 41.217 seconds (t=186)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.809999999999928,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":186,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.5.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.5.6.7\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":159.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"1.5.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"1.5.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"1.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"1.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"1.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"1.5.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"catalyst\",1],\"server\":\"1.5.6.7\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server catalyst in 55.661 seconds (t=39)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":47.810000000000144,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":39,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.6.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.6.9.1\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":119.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.6.9.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.6.9.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"26.6.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.6.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.6.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"26.6.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"zb-def\"],\"server\":\"26.6.9.1\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot19/zb-def: hack $11704155387.5\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":8.210000000000004,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"zb-def\",1],\"server\":\"26.6.9.1\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack zb-def in 23.303 seconds (t=28)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.810000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":28,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"57.3.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.3.6.5\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":135.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.3.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.3.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"57.3.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"57.3.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"57.3.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"57.3.6.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"unitalife\",1],\"server\":\"57.3.6.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server unitalife in 120.471 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":59.810000000000315,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.2.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.2.9.4\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":881.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.2.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.2.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"86.2.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.2.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.2.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"86.2.9.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"alpha-ent\",1],\"server\":\"86.2.9.4\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server alpha-ent in 49.895 seconds (t=215)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.809999999999928,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":215,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.3.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.3.0.2\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":123,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"56.3.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"56.3.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"56.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"56.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"56.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"56.3.0.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"univ-energy\",1],\"server\":\"56.3.0.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server univ-energy in 137.743 seconds (t=30)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":30,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"8.3.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"8.3.9.5\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":567.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"8.3.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"8.3.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"8.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"8.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"8.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"8.3.9.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"the-hub\",1],\"server\":\"8.3.9.5\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server the-hub in 15.220 seconds (t=137)\",\"Available money on the-hub grown by 100.911570%. Gained 13,091.7740 hacking exp (t=137)\",\"Running script: ms-control.js on bot23 with 1 threads and args: [\\\"the-hub\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":17.80999999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":13091.774033738056,\"threads\":137,\"dataMap\":{\"34.0.5.2\":[0,0,137,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"the-hub\"],\"server\":\"8.3.9.5\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2.6100000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"32.2.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.2.2.1\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":924.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"32.2.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"32.2.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"32.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"32.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"32.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"32.2.2.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"comptek\",1],\"server\":\"32.2.2.1\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server comptek in 26.588 seconds (t=224)\",\"Available money on comptek grown by 100.335294%. Gained 32,612.8410 hacking exp (t=224)\",\"Running script: ms-control.js on bot24 with 1 threads and args: [\\\"comptek\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.809999999999928,\"onlineMoneyMade\":0,\"onlineExpGained\":32612.84096720606,\"threads\":224,\"dataMap\":{\"9.7.9.3\":[0,0,224,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"comptek\"],\"server\":\"32.2.2.1\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3.210000000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":200892.61503819688,\"favor\":120,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":200985.78473824455,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":200494.09896097513,\"favor\":150,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":76783.96351404785,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":200857.14417990367,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":200384.46916521192,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":200820.13944920214,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":327824.52275185403,\"favor\":157,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":465387.4658124535,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":137,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":112991.41058194306,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":464256.53880670306,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":145,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":1637.890716768481,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":462652.7911247942,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":375928.6167843369,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":463473.71905426274,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":137,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":113195.88923974165,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":150,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":3720760.817528173,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":137,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":2095.4596359369984,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":101,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":2099.178297576229,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":55,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":77,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":14,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":77,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":55,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":24,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":24,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":2099.178297576229,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":53,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":1916.79033971077,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":48,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":2099.178297576229,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"18.6.0.6\",\"BitRunners Server\":\"41.8.6.3\",\"The Black Hand Server\":\"50.2.3.7\",\"NiteSec Server\":\"17.5.4.7\",\"The Dark Army Server\":\"82.2.7.7\",\"CyberSec Server\":\"20.2.8.2\",\"Daedalus Server\":\"34.3.3.7\",\"w0r1d_d43m0n\":\"54.2.4.9\",\"Darkweb Server\":\"96.2.2.9\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":233826.43724374485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":true,\"otlkMag\":21.370419801440267,\"cap\":480308101,\"totalShares\":110400000,\"maxShares\":22100000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":1302380.3426328758,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":18.477916305234572,\"cap\":250889829,\"totalShares\":75800000,\"maxShares\":15200000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":266544.9774574816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":19.788543513471645,\"cap\":54009245,\"totalShares\":98500000,\"maxShares\":19700000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":1258099.0506445004,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":22.90495657589528,\"cap\":114776625,\"totalShares\":124500000,\"maxShares\":24900000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":213574.18917038935,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":19.51908633491627,\"cap\":628994763,\"totalShares\":53900000,\"maxShares\":10800000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":1641790.3491944775,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":true,\"otlkMag\":6.19651320410143,\"cap\":1032156968,\"totalShares\":37500000,\"maxShares\":7500000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":77188.30223757065,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":5.2719277485468305,\"cap\":496167246,\"totalShares\":73100000,\"maxShares\":14600000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":10556493.835622128,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":false,\"otlkMag\":8.574622671285463,\"cap\":298377992,\"totalShares\":59000000,\"maxShares\":11800000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":57254.97983575389,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.38836928797025,\"cap\":442555463,\"totalShares\":54300000,\"maxShares\":10900000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":34959.86893185352,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":11.263599781330736,\"cap\":65473502,\"totalShares\":102700000,\"maxShares\":20500000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8703.534021378162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":6.16394998894234,\"cap\":93694841,\"totalShares\":67900000,\"maxShares\":13600000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":51607.758631549004,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":9.214806828225946,\"cap\":90951957,\"totalShares\":100600000,\"maxShares\":20100000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":116505.14955565812,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":10.19582104975068,\"cap\":15026438,\"totalShares\":60400000,\"maxShares\":12100000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":57259.10301484224,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":10.014492850566977,\"cap\":204346512,\"totalShares\":32600000,\"maxShares\":6500000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":31151.15066268863,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":6.199748512309674,\"cap\":251025745,\"totalShares\":40600000,\"maxShares\":8100000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":23619.566066347677,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":5.706335871504415,\"cap\":56262822,\"totalShares\":47200000,\"maxShares\":9400000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":149013.96715080817,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":4.934900353414961,\"cap\":417771491,\"totalShares\":28100000,\"maxShares\":5600000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":32556.02259574637,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":6.463965968810648,\"cap\":184249425,\"totalShares\":47200000,\"maxShares\":9400000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":72773.78532893892,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":7.45878708307027,\"cap\":376034465,\"totalShares\":25000000,\"maxShares\":5000000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":28776.302377544987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":false,\"otlkMag\":0.8318519803396951,\"cap\":133738311,\"totalShares\":53000000,\"maxShares\":10600000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6126.041385230162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":false,\"otlkMag\":0.9723578671700321,\"cap\":168959363,\"totalShares\":40800000,\"maxShares\":8200000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2888.84966411682,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":1.052784965724678,\"cap\":33887601,\"totalShares\":76300000,\"maxShares\":15300000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":58463.64890009705,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":true,\"otlkMag\":13.882733032998203,\"cap\":94376976,\"totalShares\":50400000,\"maxShares\":10100000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6765.033247097471,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":true,\"otlkMag\":1.551258853275651,\"cap\":8006683,\"totalShares\":50500000,\"maxShares\":10100000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5045.209982303925,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":4.273931086867769,\"cap\":63988516,\"totalShares\":71400000,\"maxShares\":14300000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1351095.7797067212,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.15,\"b\":true,\"otlkMag\":4.352383149715285,\"cap\":70698427,\"totalShares\":16100000,\"maxShares\":3200000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3044.0370279364483,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":false,\"otlkMag\":0.28358980849385573,\"cap\":53349715,\"totalShares\":16300000,\"maxShares\":3300000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":4308.029462304369,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":1.121555262709706,\"cap\":54532108,\"totalShares\":20500000,\"maxShares\":4100000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":143869.76492030092,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.62,\"b\":true,\"otlkMag\":2.7091021783285907,\"cap\":35585260,\"totalShares\":10500000,\"maxShares\":2100000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":2.388896274642223,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4,\"b\":true,\"otlkMag\":0.3557667985566895,\"cap\":4407913,\"totalShares\":165400000,\"maxShares\":33100000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":67757.18346860766,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.37,\"b\":false,\"otlkMag\":4.599102134455041,\"cap\":10825494,\"totalShares\":88500000,\"maxShares\":17700000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":40509.30756976806,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":10.470301265397266,\"cap\":284864313,\"totalShares\":19300000,\"maxShares\":3900000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":58187.2810525084,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.59631497770725,\"cap\":458712823,\"totalShares\":19700000,\"maxShares\":3900000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":25,\"lastUpdate\":1552658002848}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.44.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}