{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":514,\"hp\":26,\"max_hp\":26,\"strength\":162,\"defense\":162,\"dexterity\":170,\"agility\":170,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.2301799999999998,\"hacking_speed_mult\":1.2431917896,\"hacking_money_mult\":1.1716,\"hacking_grow_mult\":1.1716,\"hacking_exp\":57758727.146844305,\"strength_exp\":39335.059100752434,\"defense_exp\":39332.09495275234,\"dexterity_exp\":39102.37348274489,\"agility_exp\":39103.85555674494,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.38210723,\"strength_mult\":1.1716,\"defense_mult\":1.1716,\"dexterity_mult\":1.2301799999999998,\"agility_mult\":1.2301799999999998,\"charisma_mult\":1.2887600000000001,\"hacking_exp_mult\":1.482074,\"strength_exp_mult\":1.482074,\"defense_exp_mult\":1.482074,\"dexterity_exp_mult\":1.482074,\"agility_exp_mult\":1.482074,\"charisma_exp_mult\":1.482074,\"company_rep_mult\":1.4176360000000001,\"faction_rep_mult\":1.2887600000000001,\"money\":\"561707333.2765967266\",\"total_money\":\"266178946083311391.28\",\"lifetime_money\":\"266178946083311391.28\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Volhaven\",\"location\":\"CompuTek\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"94.6.1.1\",\"19.9.7.4\",\"65.1.3.1\",\"75.9.5.8\",\"9.6.6.9\",\"99.4.4.7\",\"21.7.2.1\",\"19.6.1.4\",\"11.7.2.6\",\"99.9.5.7\",\"98.2.4.6\",\"50.8.0.3\",\"28.4.5.0\",\"3.2.2.3\",\"90.7.5.7\",\"89.9.9.2\",\"67.2.9.9\",\"59.7.6.3\",\"73.0.7.5\",\"11.2.2.3\",\"23.6.3.4\",\"90.0.4.4\",\"76.9.0.1\",\"3.9.4.5\",\"98.1.6.6\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":167056952.243932,\"onlineTimeSeconds\":140581.99999909248,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":166803137.00971872,\"onlineTimeSeconds\":140581.99999909248,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":166560906.12122878,\"onlineTimeSeconds\":140581.99999909248,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":166420261.91648233,\"onlineTimeSeconds\":140581.99999909248,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":165952061.2582851,\"onlineTimeSeconds\":138601.9999989773,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":165642036.75716385,\"onlineTimeSeconds\":138481.9999989703,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":165420412.62993288,\"onlineTimeSeconds\":137851.79999895656,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":165234477.8159061,\"onlineTimeSeconds\":137671.79999895918,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":164973362.50912905,\"onlineTimeSeconds\":136951.79999896965,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":164709393.85230613,\"onlineTimeSeconds\":136231.79999898016,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":164387365.71469167,\"onlineTimeSeconds\":134671.79999889235,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":163925057.0883589,\"onlineTimeSeconds\":130891.59999868549,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":163170565.50690165,\"onlineTimeSeconds\":125516.5999987637,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":162566786.4495323,\"onlineTimeSeconds\":123536.59999879252,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":161093935.25045153,\"onlineTimeSeconds\":119846.39999884622,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":158065912.73837632,\"onlineTimeSeconds\":116876.19999888941,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":154997726.03724045,\"onlineTimeSeconds\":113906.19999893263,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":144515176.18661296,\"onlineTimeSeconds\":104275.79999907345,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":136899605.69443423,\"onlineTimeSeconds\":98005.5999991647,\"moneyGainRatePerSecond\":1445.3420995633555}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":113916193.5886147,\"onlineTimeSeconds\":80004.99999942664,\"moneyGainRatePerSecond\":1445.3420995633555}}],\"totalHacknetNodeProduction\":28906.84199126712,\"factions\":[\"CyberSec\",\"NiteSec\",\"NiteSec\",\"Netburners\",\"Tian Di Hui\",\"The Black Hand\",\"Sector-12\",\"Slum Snakes\",\"Aevum\",\"Tetrads\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":13,\"karma\":-39.5,\"crime_money_mult\":1.1716,\"crime_success_mult\":1.1716,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1716,\"hacknet_node_money_mult\":2.9548850375,\"hacknet_node_purchase_cost_mult\":0.6361739999999999,\"hacknet_node_ram_cost_mult\":0.8316,\"hacknet_node_core_cost_mult\":0.8316,\"hacknet_node_level_cost_mult\":0.70686,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1550300408408,\"totalPlaytime\":1430685200,\"playtimeSinceLastAug\":140621200,\"playtimeSinceLastBitnode\":423783600,\"scriptProdSinceLastAug\":36117674889,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":4096,\"ramUsed\":60.849999999999994,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let costs = [];\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(ns.hacknet.getLevelUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getRamUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getCoreUpgradeCost(i, 1));\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let nodeCostCap = (maxProduction * 60 * 60 * 24) || Infinity;\\r\\n    function getCappedNodeCost() {\\r\\n        let uncappedCost = ns.hacknet.getPurchaseNodeCost();\\r\\n        if (uncappedCost > nodeCostCap) {\\r\\n            log.debug(`capping node cost at ${format.money(nodeCostCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n    let buyNodeCost = getCappedNodeCost();\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedNodeCost();\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = cost + getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getF(nodeIdx, 1);\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\nimport * as format from 'lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number';\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n    let processes = [];\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n            let ps = ns.ps(existing);\\r\\n            if (ps.length > 0) {\\r\\n                processes.push(existing);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? ns.args[0] : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    for (let power = 0; power < 25; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (!dryRun && processes.length > 0) {\\r\\n        log.info('scripts running on existing servers, exit');\\r\\n        ns.exit();\\r\\n    } else if (ram > minRam || existingServers.length < limit) {\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.script\",\"code\":\"import * as servers from 'lib-servers.js';\\n\\ntprint(servers.map(ns));\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    ns.scp(['lib-log.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new servers.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of servers.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        let bots = ns.getPurchasedServers();\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of servers.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    let targets = [];\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        ns.spawn('dh-control.js', 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":9.45,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            lastTime = time;\\r\\n            assets = 0;\\r\\n            for (let stock of stocks) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }    \\r\\n            lastAssets = assets;\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, assets)}, ${format.money(assetChange/timeChange)}/sec`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(4000);\\r\\n        tick();\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = path + ' -> ' + p.name;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { TICK_LENGTH } from './lib-life.js';\\r\\nimport { VirtualLife as Life } from './lib-life-virtual.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n    let life = new Life(ns, log);\\r\\n\\r\\n    while (true) {\\r\\n        await life.tick();\\r\\n        await ns.sleep(TICK_LENGTH * 1000);\\r\\n    }\\r\\n}\",\"ramUsage\":43.3,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nlet HACKNET_BUYS_MAX =      10000000000;\\r\\nlet PURCHASED_SERVERS_MIN = 22528000000;\\r\\nlet STOCK_MARKET_MIN =      50000000000;\\r\\nexport let TICK_LENGTH =    20; // seconds\\r\\n\\r\\nexport class Life {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n    }\\r\\n\\r\\n    async tick() {\\r\\n        let cash = this.getCash();\\r\\n        let skill = this.ns.getHackingLevel();\\r\\n        let hasBots = this.ns.getPurchasedServers().length > 0;\\r\\n\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (cash < HACKNET_BUYS_MAX) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else if (cash >= HACKNET_BUYS_MAX) {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (cash < PURCHASED_SERVERS_MIN) {\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            } else if (skill / this.lastEval > 1.1) {\\r\\n                if (await this.dhStop() && await this.dhStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            // precondition: actually buy the servers\\r\\n            if (!hasBots) {\\r\\n                await this.runOnce('buy-servers.js');\\r\\n            }\\r\\n\\r\\n            // precondition: shut down DH (also gives time for the server-buy to go through)\\r\\n            if (this.dhRunning()) {\\r\\n                await this.dhStop();\\r\\n            }\\r\\n\\r\\n            if (!this.msRunning()) {\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            } else if (skill / this.lastEval > 1.1) {\\r\\n                if (await this.msStop() && await this.msStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill, unless farming it via bots\\r\\n        if (!hasBots) {\\r\\n            this.ensureRunning('farm-worker.js', true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /***************************/\\r\\n    /* general script controls */\\r\\n    /***************************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {boolean} [maxThreads=false]\\r\\n     */\\r\\n    async ensureRunning(script, maxThreads) {\\r\\n        let threads = 1;\\r\\n        if (maxThreads) {\\r\\n            threads = this.getMaxThreads(script);\\r\\n            if (threads <= 0) return;\\r\\n        }\\r\\n\\r\\n        if (!this.ns.scriptRunning(script, 'home')) {\\r\\n            let threads = 1;\\r\\n            if (maxThreads) {\\r\\n                threads = this.getMaxThreads(script);\\r\\n            }\\r\\n    \\r\\n            await this.ns.exec(script, 'home', threads);\\r\\n            this.log.info(`started ${script} (${threads} threads)`);\\r\\n        } else {\\r\\n            let top = this.ns.ps('home');\\r\\n            let p = top.find(s => s.filename == script);\\r\\n            if (p.threads != threads) {\\r\\n                await this.ensureKilled(script);\\r\\n                await this.ensureRunning(script, maxThreads);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - 32; // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.info('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.info('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        return this.ns.ps('bot0').length > 0;\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.info('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.info('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n}\",\"ramUsage\":7.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-virtual.js\",\"code\":\"/// <reference path=\\\"Singularity.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Program, Gym, programs, gyms, universities  } from './lib-world.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Life, TICK_LENGTH } from './lib-life.js';\\r\\n\\r\\nlet WORK_OVERRIDE_TICKS = 10;\\r\\nlet DARKWEB_MIN = 200000;\\r\\nlet TRAIN_MIN = 5000000;\\r\\nlet STAT_GOAL_BASE = 75;\\r\\n\\r\\nexport class VirtualLife extends Life {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        this.lastCash = this.getCash();\\r\\n    }\\r\\n\\r\\n    // singularity-only life automation functions\\r\\n    async tick() {\\r\\n        let cash = this.getCash();\\r\\n\\r\\n        // purchase: darkweb router\\r\\n        if (cash >= DARKWEB_MIN) {\\r\\n            if (!this.ns.getCharacterInformation().tor) {\\r\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\r\\n                this.ns.purchaseTor();\\r\\n                cash = this.getCash();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // purchase: darkweb programs (requires router, but it's cheaper than all of them)\\r\\n        for (var program of programs()) {\\r\\n            if (!this.hasProgram(program) && cash >= program.price) {\\r\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\r\\n                this.ns.purchaseProgram(program.name);\\r\\n                cash = this.getCash();\\r\\n                this.lastEval = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // purchase: home computer upgrades - persists through aug reset, makes early farming better\\r\\n        while (cash >= this.ns.getUpgradeHomeRamCost()) {\\r\\n            this.log.info(`purchasing home RAM upgrade`);\\r\\n            this.ns.upgradeHomeRam();\\r\\n            cash = this.getCash();\\r\\n        }\\r\\n\\r\\n        await super.tick();\\r\\n\\r\\n        for (let invite of this.ns.checkFactionInvitations()) {\\r\\n            if (!Faction.cities().includes(invite)) {\\r\\n                this.log.info(`join faction ${invite}`);\\r\\n                this.ns.joinFaction(invite);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // determine whether to issue fullscreen \\\"work\\\" actions\\r\\n        if (this.ns.isBusy()) {\\r\\n            if (this.lastWork && !this.countup) {\\r\\n                if (this.lastWork.isRep) {\\r\\n                    this.ns.stopAction();\\r\\n                }\\r\\n\\r\\n                let workItem = this.selectWork(cash);\\r\\n                \\r\\n                if (this.lastWork.name == workItem.name) {\\r\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\r\\n                    if (this.lastWork.isRep) {\\r\\n                        if (workItem.doWork != null) {\\r\\n                            workItem.doWork();\\r\\n                        } \\r\\n                    }\\r\\n                } else {\\r\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\r\\n                    if (workItem.doWork != null) {\\r\\n                        workItem.doWork();\\r\\n                    } \\r\\n                }\\r\\n\\r\\n                this.lastWork = workItem;              \\r\\n            } else {\\r\\n                this.log.info('automated work overridden by player, pause indefinitely');\\r\\n                this.lastWork = null;\\r\\n            }\\r\\n        } else {\\r\\n            if (!this.lastWork && !this.countup) {\\r\\n                let workItem = this.selectWork(cash);\\r\\n                this.log.info(`start work ${workItem.name}`);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;          \\r\\n            } else {    \\r\\n                if (!this.lastWork) {\\r\\n                    this.countup = 0;\\r\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\r\\n                    this.lastWork = new WorkItem('override', null, false);\\r\\n                } else {\\r\\n                    this.countup = this.countup || 0;\\r\\n                    if (this.countup == 0) {\\r\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\r\\n                    } else {\\r\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                this.countup = this.countup + 1;\\r\\n                if (this.countup > WORK_OVERRIDE_TICKS) {\\r\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_LENGTH)}`);\\r\\n                    this.countup = 0;\\r\\n                    this.lastWork = null;\\r\\n                    await this.tick();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {WorkItem}\\r\\n     * @param {number} cash\\r\\n     */\\r\\n    selectWork(cash) {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let stats = this.ns.getStats();\\r\\n        let skill = stats.hacking;\\r\\n\\r\\n        // create programs      \\r\\n        for (let program of programs()) {\\r\\n            if (!this.hasProgram(program) && program.req <= skill)  {\\r\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // improve stats\\r\\n        if (cash >= TRAIN_MIN) {\\r\\n            let statGoals = {};\\r\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility']) {\\r\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat] * info.mult[stat + 'Exp'];\\r\\n                if (stats[stat] < statGoals[stat]) {\\r\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\r\\n                    return new WorkItem('train-' + stat, () => {\\r\\n                        let gym = this.getBestGym();\\r\\n                        this.ensureCity(info, gym.city);\\r\\n                        this.ns.gymWorkout(gym.name, stat);\\r\\n                    }, true);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // work for factions\\r\\n        let factions = Faction.getAll(this.ns);\\r\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\r\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\r\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\r\\n        }\\r\\n\\r\\n        // if all factions are maxed out, buy some of their augs\\r\\n        let cashRate = (cash - this.lastCash) / TICK_LENGTH;\\r\\n        this.log.debug(`cash rate: ${format.money(cashRate)}/sec`);\\r\\n\\r\\n        let maxAugCost = cashRate * 60 * 60; // an hour's income\\r\\n        this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\r\\n\\r\\n        // augs we don't already have\\r\\n        let availableAugs = Faction.getAll(this.ns)\\r\\n            .map(f => f.augmentations)\\r\\n            .reduce((a, b) => a.concat(b), [])\\r\\n            .filter(a => !a.owned);\\r\\n\\r\\n        // most expensive augs first, because the price doubles each time\\r\\n        let affordableAugs = availableAugs\\r\\n            .filter(a => a.price <= maxAugCost)\\r\\n            .sort((a, b) => b.price - a.price);\\r\\n\\r\\n        if (affordableAugs.length > 0) {\\r\\n            this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\r\\n            for (let a of affordableAugs) {\\r\\n                if (a.price <= cash) {\\r\\n                    if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\r\\n                        this.log.info(`bought aug ${a}`);\\r\\n                        cash = this.getCash();\\r\\n                    } else {\\r\\n                        this.log.info(`failed to buy aug ${a}`);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }        \\r\\n\\r\\n        // if there's nothing else to do, improve cha\\r\\n        if (cash >= TRAIN_MIN) {\\r\\n            return new WorkItem('university', () => {\\r\\n                let uni = this.getBestUniversity();\\r\\n                this.ensureCity(info, uni.city);\\r\\n                this.ns.universityCourse(uni.name, 'Leadership');\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return new WorkItem('nothing', null, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Program} program\\r\\n     */\\r\\n    hasProgram(program) {\\r\\n        return this.ns.fileExists(program.name, 'home');\\r\\n    }\\r\\n\\r\\n    getBestGym() {\\r\\n        let gs = gyms();\\r\\n        gs.sort((a, b) => b.price - a.price);\\r\\n        return gs[0];\\r\\n    }\\r\\n\\r\\n    getBestUniversity() {\\r\\n        let us = universities();\\r\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\r\\n        return us[0];\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @param {ICharacterInfo} info\\r\\n     * @param {string} name\\r\\n     */\\r\\n    ensureCity(info, name) {\\r\\n        if (info.city != name) {\\r\\n            if (this.ns.travelToCity(name)) {\\r\\n                this.log.info('travelled to ' + name);\\r\\n            } else {\\r\\n                this.log.error(`travel to ${name} failed`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {Augmentation[]} augs\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, augs, job) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.augmentations = augs;\\r\\n        this.job = job;\\r\\n    }\\r\\n\\r\\n    maxAugRep() {\\r\\n        return this.augmentations\\r\\n            .filter(a => !a.owned)\\r\\n            .map(a => a.requiredReputation)\\r\\n            .reduce((a, b) => Math.max(a, b), 0);\\r\\n    }\\r\\n\\r\\n    static cities() {\\r\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\r\\n    }\\r\\n\\r\\n    static gangs() {\\r\\n        return ['Slum Snakes', 'Tetrads'];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Faction[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let augInfo = ns.getOwnedAugmentations(true);\\r\\n        return info.factions.map(f => \\r\\n        {\\r\\n            let rep = ns.getFactionRep(f);\\r\\n            let fav = ns.getFactionFavor(f);\\r\\n            let fvg = ns.getFactionFavorGain(f);\\r\\n            let augs = ns.getAugmentationsFromFaction(f).map(a => {\\r\\n                let [aRep, aPrc] = ns.getAugmentationCost(a);\\r\\n                let has = augInfo.includes(a);\\r\\n                return new Augmentation(a, f, aRep, aPrc, has);\\r\\n            })\\r\\n            return new Faction(f, rep, fav, fvg, augs, Faction.gangs().includes(f) ? 'security' : 'hacking');\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Augmentation {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} fac\\r\\n     * @param {number} rep\\r\\n     * @param {number} prc\\r\\n     * @param {boolean} has\\r\\n     */\\r\\n    constructor(name, fac, rep, prc, has) {\\r\\n        this.name = name;\\r\\n        this.faction = fac;\\r\\n        this.requiredReputation = rep;\\r\\n        this.price = prc;\\r\\n        this.owned = has;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        if (this.owned) {\\r\\n            return `${this.name} (OWNED)`\\r\\n        } else {\\r\\n            return `${this.name} (${format.money(this.price)})`\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass WorkItem {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {() => void | null} doWork\\r\\n     * @param {boolean} isRep\\r\\n     */\\r\\n    constructor(name, doWork, isRep) {\\r\\n        this.name = name;\\r\\n        this.doWork = doWork;\\r\\n        this.isRep = isRep;\\r\\n    }\\r\\n}\",\"ramUsage\":43.3,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"import * as servers from 'lib-servers.js';\\n\\nexport async function main(ns) {\\n    ns.tprint(servers.map(ns));\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Faction, Augmentation } from './lib-life-virtual.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n\\r\\n    let facsByRep = Faction.getAll(ns)\\r\\n        .sort((a, b) => b.reputation - a.reputation);\\r\\n\\r\\n    let facsByName = [];\\r\\n    for (let f of facsByRep) {\\r\\n        facsByName[f.name] = f;\\r\\n    }\\r\\n\\r\\n    let augsByPrice = facsByRep\\r\\n        .map(f => f.augmentations)\\r\\n        .reduce((a, b) => a.concat(b), [])\\r\\n        .filter(a => !a.owned)\\r\\n        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n    ns.tprint('----- LOCKED -----');\\r\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\r\\n    for (let aug of groupAugs(locked)) {\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\r\\n    }\\r\\n\\r\\n    ns.tprint('----- UNLOCKED -----');\\r\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\r\\n    for (let aug of groupAugs(unlocked)) {\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {Augmentation[]} augs \\r\\n */\\r\\nfunction groupAugs(augs) {\\r\\n    /** @type {{name: string, factions: string[], price: number}[]} */\\r\\n    let augsWithFacs = [];\\r\\n    for (let a of augs) {\\r\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\r\\n            augsWithFacs[a.name] = {};\\r\\n            augsWithFacs[a.name].factions = [];\\r\\n            augsWithFacs[a.name].name = a.name;\\r\\n            augsWithFacs[a.name].price = a.price;\\r\\n            augsWithFacs.push(augsWithFacs[a.name]);\\r\\n        } \\r\\n\\r\\n        augsWithFacs[a.name].factions.push(a.faction);\\r\\n    }\\r\\n    return augsWithFacs;\\r\\n}\",\"ramUsage\":43.3,\"server\":\"44.1.3.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] assigning aevum-police hack -> grow x36\",\"[INF] status: security level 25 / goal 10; \",\"[INF] status: money $5019102 / goal $5625000; increasing\",\"[INF] assigning . hack -> weaken x9\",\"[INF] status: security level 29 / goal 10; \",\"[INF] status: money $7383351 / goal $5625000; increasing\",\"[INF] assigning univ-energy hack -> weaken x9\",\"[INF] assigning silver-helix grow -> hack x37\",\"[INF] status: security level 33 / goal 10; increasing\",\"[INF] status: money $7783489 / goal $5625000; increasing\",\"[INF] assigning titan-labs hack -> weaken x9\",\"[INF] assigning I.I.I.I grow -> hack x37\",\"[INF] status: security level 27 / goal 10; \",\"[INF] status: money $9744646 / goal $5625000; increasing\",\"[INF] assigning zer0 hack -> weaken x18\",\"[INF] assigning aevum-police grow -> hack x37\",\"[INF] status: security level 28 / goal 10; \",\"[INF] status: money $10015076 / goal $5625000; increasing\",\"[INF] assigning neo-net hack -> weaken x18\",\"[INF] assigning rothman-uni grow -> hack x75\",\"[INF] status: security level 22 / goal 10; \",\"[INF] status: money $10957404 / goal $5625000; increasing\",\"[INF] assigning iron-gym hack -> weaken x18\",\"[INF] assigning zb-institute grow -> hack x75\",\"[INF] status: security level 22 / goal 10; \",\"[INF] status: money $6499120 / goal $5625000; \",\"[INF] assigning max-hardware hack -> weaken x18\",\"[INF] assigning lexo-corp grow -> hack x75\",\"[INF] status: security level 18 / goal 10; \",\"[INF] status: money $8385083 / goal $5625000; \",\"[INF] assigning avmnite-02h hack -> weaken x18\",\"[INF] assigning helios grow -> hack x75\",\"[INF] status: security level 17 / goal 10; decreasing\",\"[INF] status: money $2829907 / goal $5625000; \",\"[INF] assigning rothman-uni hack -> grow x73\",\"[INF] status: security level 9 / goal 10; decreasing\",\"[INF] status: money $3838720 / goal $5625000; \",\"[INF] assigning CSEC weaken -> grow x4\",\"[INF] assigning zb-institute hack -> grow x73\",\"[INF] status: security level 14 / goal 10; \",\"[INF] status: money $5698749 / goal $5625000; increasing\",\"[INF] assigning netlink hack -> weaken x18\",\"[INF] assigning CSEC grow -> hack x4\",\"[INF] status: security level 12 / goal 10; \",\"[INF] status: money $10878036 / goal $5625000; increasing\",\"[INF] assigning CSEC hack -> weaken x4\",\"[INF] assigning rothman-uni grow -> hack x75\",\"[INF] status: security level 7 / goal 10; decreasing\",\"[INF] status: money $2892194 / goal $5625000; \",\"[INF] assigning CSEC weaken -> grow x4\",\"[INF] assigning rothman-uni hack -> grow x73\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":45207.00999993191,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"init.js\",\"args\":[\"debug\"],\"server\":\"44.1.3.8\",\"ramUsage\":43.3,\"logs\":[\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] overriden work cancelled by player, pause 3m 20s\",\"[DBG] automated work cancelled by player, pause 3m 0s\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] automated work overridden by player, pause indefinitely\",\"[INF] overriden work cancelled by player, pause 3m 20s\",\"[DBG] automated work cancelled by player, pause 3m 0s\",\"[INF] started buy-nodes.js (1 threads)\",\"[DBG] automated work cancelled by player, pause 2m 40s\",\"[DBG] automated work cancelled by player, pause 2m 20s\",\"[DBG] automated work cancelled by player, pause 2m 0s\",\"[DBG] automated work cancelled by player, pause 1m 40s\",\"[DBG] automated work cancelled by player, pause 1m 20s\",\"[DBG] automated work cancelled by player, pause 60s\",\"[DBG] automated work cancelled by player, pause 40s\",\"[DBG] automated work cancelled by player, pause 20s\",\"[DBG] automated work cancelled by player, pause 0s\",\"[INF] resume automated work, having waited 3m 20s\",\"[DBG] joined factions: CyberSec,NiteSec,NiteSec,Netburners,Tian Di Hui,The Black Hand,Sector-12,Slum Snakes,Aevum,Tetrads\",\"[DBG] factions with aug reqs not met: NiteSec,NiteSec,The Black Hand,Tetrads\",\"[DBG] factions sorted by rep: Tetrads,NiteSec,NiteSec,The Black Hand\",\"[INF] start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[DBG] joined factions: CyberSec,NiteSec,NiteSec,Netburners,Tian Di Hui,The Black Hand,Sector-12,Slum Snakes,Aevum,Tetrads\",\"[DBG] factions with aug reqs not met: NiteSec,NiteSec,The Black Hand,Tetrads\",\"[DBG] factions sorted by rep: NiteSec,NiteSec,Tetrads,The Black Hand\",\"[INF] stop work faction-Tetrads; start work faction-NiteSec\",\"Started carrying out hacking contracts for NiteSec\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[DBG] automated work cancelled by player, pause 3m 0s\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":38193.8100000036,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"buy-nodes.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":7.5,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":237.00999999999507,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"23.6.7.3\",\"60.8.8.8\",\"66.7.1.6\",\"36.2.5.8\",\"26.3.9.9\",\"52.6.4.9\",\"2.4.7.8\",\"94.6.1.1\",\"19.9.7.4\",\"65.1.3.1\",\"75.9.5.8\",\"9.6.6.9\",\"99.4.4.7\",\"21.7.2.1\",\"19.6.1.4\",\"11.7.2.6\",\"99.9.5.7\",\"98.2.4.6\",\"50.8.0.3\",\"28.4.5.0\",\"3.2.2.3\",\"90.7.5.7\",\"89.9.9.2\",\"67.2.9.9\",\"59.7.6.3\",\"73.0.7.5\",\"11.2.2.3\",\"23.6.3.4\",\"90.0.4.4\",\"76.9.0.1\",\"3.9.4.5\",\"98.1.6.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.6.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.6.6.4\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1379,\"moneyAvailable\":41523382995.75,\"moneyMax\":155712686234.0625,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"13.7.8.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"73.7.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.7.4.9\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1177,\"moneyAvailable\":41903275812,\"moneyMax\":157137284295,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"13.7.8.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.5.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.5.1.1\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934478.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[145,192,4,95,137,96,58,21,127,23,177,32,180,27,89,3,50,110,143,122,72,166,98,32],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1019,\"moneyAvailable\":16880302398.75,\"moneyMax\":63301133995.3125,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":75,\"serversOnNetwork\":[\"95.1.7.4\",\"70.3.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.8.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.8.4.1\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"23.8.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.8.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.8.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"23.8.4.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 29.221 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 7.403999999999985. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 35.444 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 7.915999999999989. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 36.907 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5.205999999999999. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 29.163 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 6.817999999999993. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 33.770 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 6.005999999999988. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 31.449 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 6.8419999999999925. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 33.838 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 6.551999999999992. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 33.010 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 8.777999999999988. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 39.370 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 6.3139999999999885. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 32.330 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 13.617999999999986. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 53.201 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 14.910000000000014. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 56.892 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 23.310000000000088. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 80.895 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 23.10400000000021. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 80.307 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 28.910000000000274. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 96.897 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 27.746000000000365. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 93.571 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 29.01000000000044. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 97.183 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 28.50200000000049. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 95.731 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 23.724000000000565. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 82.078 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 27.110000000000653. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 91.754 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 13.024000000000733. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 51.503 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 13.078000000000737. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 51.658 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":44140.40999994744,\"onlineMoneyMade\":0,\"onlineExpGained\":139099.15680479736,\"threads\":36,\"dataMap\":{\"26.3.9.9\":[0,0,0,35964]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-553719.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,1,0],[1,0,0],[0,0,0],[1,0,0],[0,0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":948,\"moneyAvailable\":13656135216.75,\"moneyMax\":51210507062.8125,\"hackDifficulty\":93,\"baseDifficulty\":93,\"minDifficulty\":31,\"serverGrowth\":70,\"serversOnNetwork\":[\"95.1.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"32.0.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.0.6.8\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-353594.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,2,1,7,3,-3,-1,2,-7,-10,-3,-8,3,-9,-9,-9,-8,9],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1039,\"moneyAvailable\":22288359498.75,\"moneyMax\":83581348120.3125,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":86,\"serversOnNetwork\":[\"79.5.2.9\",\"85.6.2.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.1.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.1.3.5\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":990,\"moneyAvailable\":16209495988.5,\"moneyMax\":60785609956.875,\"hackDifficulty\":55,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":53,\"serversOnNetwork\":[\"5.1.5.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"95.1.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.1.7.4\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"95.1.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"95.1.7.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"95.1.7.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 30.961 seconds (t=292)\",\"Available money on harakiri-sushi grown by 61.317032%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 31.711 seconds (t=292)\",\"Available money on harakiri-sushi grown by 61.316875%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 30.271 seconds (t=292)\",\"Available money on harakiri-sushi grown by 61.316102%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 31.012 seconds (t=292)\",\"Available money on harakiri-sushi grown by 61.315518%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 29.997 seconds (t=292)\",\"Available money on harakiri-sushi grown by 61.311190%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 26.828 seconds (t=292)\",\"Available money on harakiri-sushi grown by 61.310170%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 26.321 seconds (t=292)\",\"Available money on harakiri-sushi grown by 22.745720%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 25.512 seconds (t=292)\",\"Available money on harakiri-sushi grown by 56.004616%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 35.172 seconds (t=292)\",\"Available money on harakiri-sushi grown by 50.122152%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 37.170 seconds (t=292)\",\"Available money on harakiri-sushi grown by 37.986481%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 43.219 seconds (t=292)\",\"Available money on harakiri-sushi grown by 29.192209%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 50.721 seconds (t=292)\",\"Available money on harakiri-sushi grown by 24.482855%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 56.926 seconds (t=292)\",\"Available money on harakiri-sushi grown by 15.907207%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 77.655 seconds (t=292)\",\"Available money on harakiri-sushi grown by 14.075142%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 85.372 seconds (t=292)\",\"Available money on harakiri-sushi grown by 13.787785%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 86.762 seconds (t=292)\",\"Available money on harakiri-sushi grown by 13.910927%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 86.163 seconds (t=292)\",\"Available money on harakiri-sushi grown by 14.784075%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 82.158 seconds (t=292)\",\"Available money on harakiri-sushi grown by 16.816561%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 74.455 seconds (t=292)\",\"Available money on harakiri-sushi grown by 20.337090%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 61.900 seconds (t=292)\",\"Available money on harakiri-sushi grown by 14.700588%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 77.102 seconds (t=292)\",\"Available money on harakiri-sushi grown by 19.747221%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 66.166 seconds (t=292)\",\"Available money on harakiri-sushi grown by 31.310099%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 48.527 seconds (t=292)\",\"Available money on harakiri-sushi grown by 12.475497%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 26.874 seconds (t=292)\",\"Available money on harakiri-sushi grown by 3.048542%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 37.806 seconds (t=292)\",\"Available money on harakiri-sushi grown by 6.382516%. Gained 1,129.3781 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 31.979 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":17537.610000021545,\"onlineMoneyMade\":0,\"onlineExpGained\":474338.79964799667,\"threads\":292,\"dataMap\":{\"26.3.9.9\":[0,0,122640,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1001,\"moneyAvailable\":12997182390.75,\"moneyMax\":48739433965.3125,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":96,\"serversOnNetwork\":[\"56.8.4.4\",\"52.5.1.1\",\"23.8.4.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"5.1.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.1.5.0\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1134,\"moneyAvailable\":13162920103.5,\"moneyMax\":49360950388.125,\"hackDifficulty\":68,\"baseDifficulty\":68,\"minDifficulty\":23,\"serverGrowth\":82,\"serversOnNetwork\":[\"94.2.0.6\",\"52.1.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.5.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.5.2.9\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1013,\"moneyAvailable\":19855029267,\"moneyMax\":74456359751.25,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":92,\"serversOnNetwork\":[\"94.2.0.6\",\"32.0.6.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.2.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.2.0.6\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":2047.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"94.2.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"94.2.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"94.2.0.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 34.061 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 74.947821%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 31.396 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 83.413610%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 37.755 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 98.550159%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 27.071 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 98.521840%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 33.677 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 79.371513%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 38.706 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 75.686047%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 26.234 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 33.713686%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 35.703 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 89.849021%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 35.611 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 135.872755%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 33.714 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 193.512353%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 47.859 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 185.756657%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 57.918 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 105.519572%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 68.420 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 100.878885%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 76.032 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 90.440979%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 80.503 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 87.009910%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 82.209 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 86.740348%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 82.341 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 88.781538%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 81.308 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 68.697403%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 73.065 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 26.420366%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 82.899 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 88.437109%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 73.696 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 154.670985%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 62.339 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 331.553140%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 47.827 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 579.696763%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 39.584 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 341.288475%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 37.408 seconds (t=1170)\",\"Available money on harakiri-sushi grown by 328.730447%. Gained 4,525.2478 hacking exp (t=1170)\",\"Executing grow() on server harakiri-sushi in 31.332 seconds (t=1170)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":45160.609999932596,\"onlineMoneyMade\":0,\"onlineExpGained\":4692682.01422801,\"threads\":1170,\"dataMap\":{\"26.3.9.9\":[0,0,1213290,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1021,\"moneyAvailable\":1171560559.5,\"moneyMax\":4393352098.125,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":99,\"serversOnNetwork\":[\"7.8.0.7\",\"5.1.5.0\",\"79.5.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"85.6.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.6.2.8\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325455-Sector-12.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[1,34,21,29,8,22,18],[49,49,15,25,40,6,1],[36,18,5,43,10,24,8],[34,14,1,43,50,41,23],[50,44,45,33,21,7,48],[21,29,43,10,37,32,30],[40,13,7,14,8,22,37],[3,39,16,37,12,37,23]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":1469,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"32.0.6.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.8.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.8.4.4\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150697-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[107,192,26,77,19,12,119,24,27,102,18,149,97,61,1,71,23,55,95,67,136,15,131,32,6,34]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":878,\"moneyAvailable\":826070432.25,\"moneyMax\":3097764120.9375,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":89,\"serversOnNetwork\":[\"23.6.9.3\",\"95.1.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"47.3.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.3.3.6\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727275-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[15,80],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-377610.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[6,9],[1,6,6],[6,1,4,4],[4,7,2,1,4],[7,3,3,7,2,8],[8,2,4,3,4,3,2],[8,1,1,8,5,1,2,2],[9,1,3,3,5,4,6,2,8],[2,8,2,2,8,6,8,9,8,1],[2,1,8,4,3,7,2,7,2,2,8],[9,4,3,9,6,5,6,5,3,5,3,7]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1038,\"moneyAvailable\":710809323.75,\"moneyMax\":2665534964.0625,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":58,\"serversOnNetwork\":[\"86.5.3.5\",\"99.4.6.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"99.4.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.4.6.6\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-938229-Netburners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((((()a))(()))())aa\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":894,\"moneyAvailable\":568235152.5,\"moneyMax\":2130881821.875,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":38,\"serversOnNetwork\":[\"47.3.3.6\",\"69.6.6.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.9.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.9.9.6\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"56.9.9.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"56.9.9.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"56.9.9.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 15.403 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $198,375.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 15.983 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $311,925.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 19.799 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $308,625.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 14.083 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $197,925.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 10.634 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,150.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 11.000 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,425.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 11.366 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $295,575.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 15.379 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $297,750.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.251 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $221,550.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.121 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $147,375.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.467 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $631,875.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 12.477 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $709,725.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.505 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $468,225.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.304 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $291,750.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.435 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $180,675.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.204 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $692,925.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.974 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $466,650.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.382 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $309,675.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.805 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $259,650.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.884 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $180,225.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.251 seconds (t=75)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":220.809999999996,\"onlineMoneyMade\":6391050,\"onlineExpGained\":5801.599800000002,\"threads\":75,\"dataMap\":{\"26.3.9.9\":[6391050,1500,0,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790200.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":871,\"moneyAvailable\":482387256,\"moneyMax\":1808952210,\"hackDifficulty\":89,\"baseDifficulty\":89,\"minDifficulty\":30,\"serverGrowth\":76,\"serversOnNetwork\":[\"60.5.9.4\",\"48.5.6.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"63.1.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.1.8.6\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"63.1.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.1.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.1.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"63.1.8.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.091999999999985. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 40.268 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.787999999999991. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 36.541 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.201999999999992. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 29.152 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.63999999999999. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 41.834 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.963999999999987. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 31.329 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.877999999999988. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 36.799 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.27199999999999. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 40.782 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.763999999999987. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 42.188 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 17.924. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 65.505 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.018000000000093. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 65.774 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 27.8020000000002. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 93.731 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 26.246000000000276. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 89.285 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 31.514000000000358. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 104.338 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 27.560000000000443. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 93.040 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 27.60200000000049. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 93.160 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 26.388000000000563. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 89.691 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 21.18000000000067. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 74.809 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.994000000000728. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 68.562 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.402000000000737. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 32.581 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.653999999999996. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 36.159 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.747999999999996. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 45.000 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":11181.610000007413,\"onlineMoneyMade\":0,\"onlineExpGained\":17544.037795199907,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,4536]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":840,\"moneyAvailable\":537308418,\"moneyMax\":2014906567.5,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":64,\"serversOnNetwork\":[\"69.6.6.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"33.5.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.5.1.6\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-140289-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[91,19,82,110,67,84,171,159,173,124,104,153,38,172,35,150,104,13,13,183,10],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-901574.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":888,\"moneyAvailable\":693063091.5,\"moneyMax\":2598986593.125,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":90,\"serversOnNetwork\":[\"96.8.3.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"32.4.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.4.7.4\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.4.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"32.4.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.4.7.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"32.4.7.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 102.698 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 28.06600000000054. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 94.485 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 22.30400000000063. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 78.021 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 17.034000000000706. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 62.962 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 10.280000000000731. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 43.662 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 6.221999999999998. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 32.067 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":479.20999999998133,\"onlineMoneyMade\":0,\"onlineExpGained\":278.47679039999997,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":866,\"moneyAvailable\":828633900,\"moneyMax\":3107377125,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":85,\"serversOnNetwork\":[\"86.5.3.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"69.6.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.6.6.7\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"69.6.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"69.6.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"69.6.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"69.6.6.7\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 93.160 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.488000000000564. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 87.119 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 24.182000000000663. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 83.387 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 16.518000000000733. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 61.487 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 8.652000000000738. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 39.010 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 6.917999999999994. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 34.055 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5.261999999999995. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 29.323 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 7.523999999999995. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 35.787 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":437.2099999999837,\"onlineMoneyMade\":0,\"onlineExpGained\":243.6671916,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,63]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-194901.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"99410517399\",-84],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-375940.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[36,155,153,107,141],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":817,\"moneyAvailable\":673890637.5,\"moneyMax\":2527089890.625,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":66,\"serversOnNetwork\":[\"99.4.6.6\",\"63.1.8.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"60.5.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.5.9.4\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.5.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.5.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.5.9.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"60.5.9.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 20.158 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $96,480.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.621 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,546.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 20.055 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $123,012.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 17.121 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,324.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 16.891 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,310.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.560 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $41,994.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.819 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,954.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.734 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $67,068.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.990 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $50,544.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.448 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $33,732.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.814 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $22,572.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.180 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,132.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.193 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,570.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.195 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $58,572.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.882 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $38,952.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.228 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $25,848.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.895 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,870.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.930 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $127,278.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.408 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,488.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.408 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $49,356.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.912 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $38,790.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.098 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $127,440.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.195 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,654.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.514 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $56,124.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.175 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $47,268.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.254 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":9849.010000002567,\"onlineMoneyMade\":81654948,\"onlineExpGained\":55416.88128959922,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[81654948,14238,0,0]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-714687-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"dir\":0,\"requiredHackingSkill\":821,\"moneyAvailable\":442741434.75,\"moneyMax\":1660280380.3125,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":87,\"serversOnNetwork\":[\"37.4.2.3\",\"56.9.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"91.6.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.6.8.2\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":903,\"moneyAvailable\":655119954,\"moneyMax\":2456699827.5,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":78,\"serversOnNetwork\":[\"96.7.0.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.8.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.8.9.0\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":870,\"moneyAvailable\":583072612.5,\"moneyMax\":2186522296.875,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":71,\"serversOnNetwork\":[\"36.7.8.2\",\"86.5.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.4.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.4.3.5\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-758046.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[51,142,67,122,32,90,78,168,55,16,8,57,179,20,188,19,176,132,193,174,168,82,93,96,151,35,130,184,63,64,96,145,136,82,146,81,43,183,120],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":880,\"moneyAvailable\":771695397,\"moneyMax\":2893857738.75,\"hackDifficulty\":82,\"baseDifficulty\":82,\"minDifficulty\":27,\"serverGrowth\":65,\"serversOnNetwork\":[\"1.1.7.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.8.3.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.8.3.1\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"96.8.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.8.3.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"96.8.3.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 19.712 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $221,149.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.437 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $166,093.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.662 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $258,038.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 22.991 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $219,114.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.786 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $150,960.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.456 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,241.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.036 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $145,521.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.852 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $141,155.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 14.162 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,394.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.766 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $58,386.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.131 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $39,109.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.497 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,941.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 14.867 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,179.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.512 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $102,194.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.174 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,006.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.520 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $316,757.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.739 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $318,570.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.290 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $189,810.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $117,697.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.701 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,241.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.887 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $303,141.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.249 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $202,057.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.302 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $133,792.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.964 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $112,406.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.043 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $345,062.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.404 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":43510.20999995661,\"onlineMoneyMade\":779426793,\"onlineExpGained\":535145.3671518181,\"threads\":37,\"dataMap\":{\"26.3.9.9\":[779426793,137344,0,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495208.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(((()()())\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":873,\"moneyAvailable\":710209753.5,\"moneyMax\":2663286575.625,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":65,\"serversOnNetwork\":[\"23.8.3.9\",\"33.5.1.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"81.3.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.3.3.5\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-902905.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,7,0,0,10,6,0,10,7,0,0,4],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":784,\"moneyAvailable\":792323907,\"moneyMax\":2971214651.25,\"hackDifficulty\":56,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":65,\"serversOnNetwork\":[\"96.7.0.4\",\"7.8.0.7\",\"23.6.9.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"7.8.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.8.0.7\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-708103-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,1],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":804,\"moneyAvailable\":587076795.75,\"moneyMax\":2201537984.0625,\"hackDifficulty\":66,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":71,\"serversOnNetwork\":[\"81.3.3.5\",\"94.2.0.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.3.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.3.4.6\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"67.3.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.3.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.3.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"67.3.4.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 19.765 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $215,192.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.489 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $161,653.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.715 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $251,489.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 23.044 seconds (t=37)\",\"Script FAILED to hack harakiri-sushi. Gained 35.7765 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.891 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $138,454.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.613 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,100.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.872 seconds (t=37)\",\"Script FAILED to hack harakiri-sushi. Gained 35.7765 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.734 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $135,827.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.043 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $100,788.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.527 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $67,266.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.893 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,992.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.258 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $150,146.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.272 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,404.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.327 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $112,924.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.014 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,110.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.360 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $49,876.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.027 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $319,347.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.835 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $245,236.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.539 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $153,735.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.275 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,127.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.044 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $327,265.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.893 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $237,910.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.275 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,879.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.698 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,312.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.777 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,797.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2345.8100000000577,\"onlineMoneyMade\":46474035,\"onlineExpGained\":30123.840028199924,\"threads\":37,\"dataMap\":{\"26.3.9.9\":[46474035,7733,0,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":761,\"moneyAvailable\":576130480.5,\"moneyMax\":2160489301.875,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":72,\"serversOnNetwork\":[\"30.4.6.0\",\"37.4.2.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"86.5.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.5.3.5\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":869,\"moneyAvailable\":1163789126.25,\"moneyMax\":4364209223.4375,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":59,\"serversOnNetwork\":[\"24.8.9.0\",\"47.3.3.6\",\"32.4.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.4.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.4.2.8\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"24.4.2.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"24.4.2.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"24.4.2.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"24.4.2.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 92.177 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.664000000000467. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 87.622 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.586000000000503. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 90.256 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 20.970000000000585. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 74.209 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 22.006000000000668. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 77.169 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 18.76800000000073. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 67.917 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 11.629999999999997. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 47.520 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":599.2099999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":278.47679039999997,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917232.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[117,162,74,151,91,78,194,104,136,19,28,146,153,77,113,200,62]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":769,\"moneyAvailable\":1165963416.75,\"moneyMax\":4372362812.8125,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":83,\"serversOnNetwork\":[\"35.1.0.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"37.4.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.4.2.3\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":847,\"moneyAvailable\":871302097.5,\"moneyMax\":3267382865.625,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":69,\"serversOnNetwork\":[\"67.3.4.6\",\"60.5.9.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.7.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.7.0.4\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-797274.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,5,-10,2,-9,10,7,-6,0,6,-2,-10,-4,-5,7,5,2,-2,1,6,-10,-5,5,-8,0,-5,6,1,1,-5,-1,-4,-6],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759145.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":815,\"moneyAvailable\":1035668415,\"moneyMax\":3883756556.25,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":77,\"serversOnNetwork\":[\"30.4.6.0\",\"91.6.8.2\",\"81.3.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"30.4.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.4.6.0\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"30.4.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"30.4.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"30.4.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"30.4.6.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 36.296 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 7.365999999999985. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 35.336 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 8.679999999999993. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 39.090 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 7.671999999999989. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 36.210 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5.023999999999989. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.643 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 8.097999999999988. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 37.427 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5.487999999999985. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 29.969 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 9.211999999999987. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 40.611 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 11.983999999999986. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 48.531 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 16.196. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 60.567 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 21.510000000000087. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 75.752 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 24.2600000000002. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 83.610 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 30.710000000000274. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 102.041 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 26.18400000000037. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 89.108 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 32.61000000000044. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 107.470 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 23.696000000000495. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 81.998 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 27.73800000000056. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 93.548 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 18.93000000000067. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 68.380 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 20.344000000000726. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 72.420 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 10.002000000000736. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 42.868 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 8.187999999999995. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 37.684 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":43840.40999995181,\"onlineMoneyMade\":0,\"onlineExpGained\":138402.96482879738,\"threads\":36,\"dataMap\":{\"26.3.9.9\":[0,0,0,35784]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-242190-NiteSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"187205189215\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":785,\"moneyAvailable\":777819568.5,\"moneyMax\":2916823381.875,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":74,\"serversOnNetwork\":[\"23.8.3.9\",\"67.3.4.6\",\"96.7.0.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"35.1.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.1.0.1\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.1.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"35.1.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"35.1.0.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 23.297 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $498,300.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 16.629 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $344,100.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 15.299 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $222,900.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 15.772 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $347,925.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 19.588 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $340,200.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 15.158 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $235,425.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 10.344 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,050.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 10.710 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $105,000.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 11.076 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $343,200.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 15.732 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $355,500.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.251 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $265,200.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.831 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $176,325.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.177 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $116,850.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.844 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $584,250.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 9.200 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $576,675.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.357 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $360,150.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.357 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $223,500.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.861 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $175,350.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 9.047 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $576,600.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.251 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $383,475.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 7.462 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $254,025.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 8.124 seconds (t=75)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $213,675.00 and 290.0800 exp (t=75)\",\"Attempting to hack harakiri-sushi in 9.203 seconds (t=75)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":263.0099999999936,\"onlineMoneyMade\":6855675,\"onlineExpGained\":6381.759780000002,\"threads\":75,\"dataMap\":{\"26.3.9.9\":[6855675,1650,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":668,\"moneyAvailable\":581687175,\"moneyMax\":2181326906.25,\"hackDifficulty\":61,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":57,\"serversOnNetwork\":[\"37.2.1.7\",\"24.4.2.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"36.7.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.7.8.2\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"36.7.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"36.7.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"36.7.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"36.7.8.2\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 9.715999999999989. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 42.051 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 9.471999999999989. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 41.353 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 8.57599999999999. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 38.793 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 7.62199999999999. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 36.067 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 10.183999999999985. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 43.388 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 18.554. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 67.305 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 19.728000000000087. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 70.660 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 25.8560000000002. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 88.170 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 27.110000000000273. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 91.754 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 29.264000000000358. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 97.909 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 30.81000000000044. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 102.326 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 25.388000000000492. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 86.833 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 29.53800000000056. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 98.692 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 17.166000000000672. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 63.339 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 22.144000000000727. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 77.563 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 8.553999999999997. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 38.730 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5.937999999999995. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 31.255 seconds (t=36)\",\"Server security level on harakiri-sushi weakened to 5.3479999999999945. Gained 139.2384 hacking exp (t=36)\",\"Executing weaken() on server harakiri-sushi in 29.569 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":17909.8100000229,\"onlineMoneyMade\":0,\"onlineExpGained\":56670.0268464001,\"threads\":36,\"dataMap\":{\"26.3.9.9\":[0,0,0,14652]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":516,\"moneyAvailable\":469847118,\"moneyMax\":1761926692.5,\"hackDifficulty\":41,\"baseDifficulty\":41,\"minDifficulty\":14,\"serverGrowth\":47,\"serversOnNetwork\":[\"37.2.1.7\",\"24.8.9.0\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"1.1.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.1.7.1\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"1.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"1.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"1.1.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"1.1.7.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 108.756 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 32.85600000000049. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 108.173 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 23.42000000000057. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 81.210 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.808000000000657. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 90.891 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 11.748000000000733. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 47.857 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 15.510000000000737. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 58.607 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":557.2099999999898,\"onlineMoneyMade\":0,\"onlineExpGained\":243.6671916,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,63]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-493841.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[160,35,186,57,153,74,45,110,128,122,50,13,23,81,194,84,106,145,74,199,101,133,181,198,74,182,90,174],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":501,\"moneyAvailable\":554105328.75,\"moneyMax\":2077894982.8125,\"hackDifficulty\":50,\"baseDifficulty\":50,\"minDifficulty\":17,\"serverGrowth\":51,\"serversOnNetwork\":[\"37.2.1.7\",\"76.4.3.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"12.9.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.9.5.8\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"12.9.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"12.9.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"12.9.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"12.9.5.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 19.582 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $236,467.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.307 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $175,232.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.558 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $267,621.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 24.147 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $228,586.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.708 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,620.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.378 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $102,157.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.850 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,210.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.667 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,137.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 13.950 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $107,226.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.423 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $71,558.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.788 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $47,841.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.154 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,287.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.810 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $158,989.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.248 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $118,511.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.935 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,810.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.281 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $52,318.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.948 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $262,811.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.982 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $257,520.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.461 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $161,468.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,863.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.965 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $332,815.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.743 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $258,038.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $171,273.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.567 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $143,338.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.645 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,199.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.678 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":389.20999999998645,\"onlineMoneyMade\":4848961,\"onlineExpGained\":4006.971595199997,\"threads\":37,\"dataMap\":{\"26.3.9.9\":[4848961,1036,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-896413.cct\",\"type\":\"Total Ways to Sum\",\"data\":78,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":418,\"moneyAvailable\":250536851.25,\"moneyMax\":939513192.1875,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":45,\"serversOnNetwork\":[\"38.8.8.1\",\"23.8.3.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"32.3.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.3.9.5\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"32.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.3.9.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"32.3.9.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 23.962 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":28.609999999999932,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":73,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671847.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[6,5],[1,4,8],[5,5,1,8],[3,2,9,1,2],[2,7,3,1,9,4],[2,1,5,3,5,6,6],[5,3,7,7,2,3,6,9],[5,7,1,1,9,9,4,4,5],[3,8,2,4,2,2,9,8,9,7],[3,8,4,7,4,6,7,1,7,8,3]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783362.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")()a()(()a\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":374,\"moneyAvailable\":176888982.75,\"moneyMax\":663333685.3125,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":36,\"serversOnNetwork\":[\"48.4.7.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"42.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.2.3.3\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"42.2.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.2.3.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"42.2.3.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 35.959 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.698430%. Gained 282.3445 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 23.870 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.571423%. Gained 282.3445 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.595 seconds (t=73)\",\"Available money on harakiri-sushi grown by 4.542740%. Gained 282.3445 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.320 seconds (t=73)\",\"Available money on harakiri-sushi grown by 3.164273%. Gained 282.3445 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.277 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":142.81000000000043,\"onlineMoneyMade\":0,\"onlineExpGained\":1129.3780943999998,\"threads\":73,\"dataMap\":{\"26.3.9.9\":[0,0,292,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-266464.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12,40,11,3,15],[48,30,43,32,24],[2,3,11,49,42],[40,13,34,45,29],[49,19,33,17,4]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592514.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":469151349,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":761,\"moneyAvailable\":749548786.5,\"moneyMax\":2810807949.375,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":76,\"serversOnNetwork\":[\"92.0.4.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"37.2.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.2.1.7\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"37.2.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.2.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.2.1.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"37.2.1.7\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 110.716 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 27.110000000000444. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 91.754 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 30.30200000000049. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 100.875 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 23.450000000000575. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 81.295 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 23.732000000000664. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 82.101 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 16.968000000000732. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 62.773 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 7.302000000000738. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 35.153 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 7.463999999999996. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 35.616 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 7.737999999999995. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 36.399 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":641.2100000000089,\"onlineMoneyMade\":0,\"onlineExpGained\":278.47679039999997,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564276.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,10],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":450,\"moneyAvailable\":152398868.25,\"moneyMax\":571495755.9375,\"hackDifficulty\":58,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":45,\"serversOnNetwork\":[\"92.0.4.4\",\"35.1.0.1\",\"36.7.8.2\",\"1.1.7.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"45.1.5.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.1.5.3\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-492789.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,-5,0,1,-1,0,7,10],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-868086.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,2,6,7,10,0],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":558,\"moneyAvailable\":323229926.25,\"moneyMax\":1212112223.4375,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":61,\"serversOnNetwork\":[\"48.4.7.7\",\"6.0.6.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.0.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.0.8.9\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"1.0.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"1.0.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"1.0.8.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 19.169 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $232,471.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 20.132 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $203,796.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.595 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $153,106.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.821 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $249,750.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.345 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $201,354.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.943 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $134,495.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.666 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,695.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.925 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $148,037.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.787 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $131,720.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.096 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,693.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.818 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $56,573.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.184 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $37,888.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.550 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,093.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 14.920 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,374.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.618 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,423.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.285 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,529.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.631 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $301,143.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.201 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $308,358.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.342 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $183,631.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.249 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $113,923.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.754 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $89,318.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.940 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $293,299.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.302 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $195,508.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.355 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,500.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.017 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,854.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.095 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2189.8100000001996,\"onlineMoneyMade\":43734074,\"onlineExpGained\":28621.225679999934,\"threads\":37,\"dataMap\":{\"26.3.9.9\":[43734074,7363,0,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":445,\"moneyAvailable\":410851131,\"moneyMax\":1540691741.25,\"hackDifficulty\":66,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":43,\"serversOnNetwork\":[\"92.0.4.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"92.0.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.0.4.4\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.0.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"92.0.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.0.4.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"92.0.4.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.795999999999983. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 30.849 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.099999999999984. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 37.433 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.967999999999993. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 37.056 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.141999999999987. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.981 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.063999999999991. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 40.188 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.977999999999987. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 34.227 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.577999999999987. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 35.941 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 15.189999999999989. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 57.693 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.850000000000017. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 56.721 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.828000000000088. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 68.088 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 28.0880000000002. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 94.548 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 24.96800000000028. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 85.633 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 32.41400000000036. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 106.910 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 26.30000000000045. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 89.439 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 31.20200000000049. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 103.447 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 22.100000000000577. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 77.438 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 25.90800000000066. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 88.319 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.454000000000734. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 55.589 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.178000000000736. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 49.086 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":6855.009999995699,\"onlineMoneyMade\":0,\"onlineExpGained\":10373.260442399971,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,2682]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":324,\"moneyAvailable\":122197143.75,\"moneyMax\":458239289.0625,\"hackDifficulty\":41,\"baseDifficulty\":41,\"minDifficulty\":14,\"serverGrowth\":52,\"serversOnNetwork\":[\"21.0.1.7\",\"42.2.3.3\",\"37.2.1.7\",\"1.0.8.9\",\"38.8.8.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"72.3.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.3.3.3\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-371789.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[1,63,146,5,97,7,10,195,46,89,28,127,134,142,88,193,74],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":377,\"moneyAvailable\":175610519.25,\"moneyMax\":658539447.1875,\"hackDifficulty\":58,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":53,\"serversOnNetwork\":[\"27.2.8.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"56.2.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.2.2.1\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"56.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"56.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"56.2.2.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"56.2.2.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 49.297 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.113999999999999. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 37.407 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":112.81000000000107,\"onlineMoneyMade\":0,\"onlineExpGained\":208.85759279999996,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,54]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":415,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"hackDifficulty\":66,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":60,\"serversOnNetwork\":[\"34.2.2.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"48.4.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.4.7.7\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-479819.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,4,-8,10,-8,3,9,-4,2,-1,-4,2,-3,-7,-1,-5,9,-10,4,-2,3,7,-1,-3,2,7],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":274,\"moneyAvailable\":53276256,\"moneyMax\":199785960,\"hackDifficulty\":45,\"baseDifficulty\":45,\"minDifficulty\":15,\"serverGrowth\":42,\"serversOnNetwork\":[\"27.2.8.1\",\"32.3.9.5\",\"45.1.5.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"23.6.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.6.7.3\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.6.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.6.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"23.6.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"23.6.7.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 63.659 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 20.63800000000014. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 73.260 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 23.648000000000227. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 81.861 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.5520000000003. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 87.302 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.140000000000374. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 88.982 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.85000000000045. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 88.153 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 32.10200000000049. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 106.018 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 21.68600000000058. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 76.255 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.53200000000066. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 87.245 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 15.354000000000735. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 58.161 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 11.802000000000737. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 48.011 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":923.6100000000731,\"onlineMoneyMade\":0,\"onlineExpGained\":452.5247844,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,117]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-164149.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(a)a))()()(\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416352.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[8,9],[5,7,3],[7,5,5,2],[1,7,9,8,8],[8,4,9,1,9,4],[3,2,3,5,2,4,2],[1,1,1,4,5,6,6,5],[7,8,4,5,1,7,2,2,6],[4,6,3,3,9,9,2,7,3,2]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"60.8.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.8.8.8\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.8.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.8.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.8.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"60.8.8.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 80.518 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.814000000000277. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 88.050 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 31.06400000000036. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 103.052 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 28.40600000000044. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 95.457 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 27.188000000000493. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 91.977 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.938000000000564. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 88.405 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 23.282000000000664. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 80.815 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 17.41800000000073. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 64.059 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5.052000000000737. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.723 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 12.455999999999996. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 49.880 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":803.4100000000458,\"onlineMoneyMade\":0,\"onlineExpGained\":348.095988,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":6468750,\"moneyMax\":6468750,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\",\"51.9.4.3\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"66.7.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.7.1.6\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.7.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.7.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"66.7.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"66.7.1.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 66.774 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 27.6560000000002. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 93.314 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 24.572000000000283. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 84.501 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 33.314000000000355. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 109.482 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.492000000000452. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 87.130 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 32.55200000000049. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 107.304 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 21.384000000000583. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 75.392 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.08200000000066. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 85.959 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 15.804000000000734. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 59.447 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 9.102000000000738. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 40.296 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 6.467999999999994. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 32.770 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5.711999999999995. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 30.609 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":881.4100000000635,\"onlineMoneyMade\":0,\"onlineExpGained\":417.7151856,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,108]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965686.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,19],[24,33],[9,13],[16,22],[1,6],[14,17],[8,16],[19,23],[10,14],[13,21],[23,26],[19,23],[19,27],[24,29],[5,9],[2,10],[15,23],[6,12],[9,13],[1,5]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":7031250,\"moneyMax\":7031250,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"51.0.6.6\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"51.0.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"51.0.6.6\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"51.0.6.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"51.0.6.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"51.0.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"51.0.6.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 93.280 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 21.88000000000061. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 76.809 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 16.11600000000069. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 60.339 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.006000000000734. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 42.879 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 15.738000000000737. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 59.258 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":395.2099999999861,\"onlineMoneyMade\":0,\"onlineExpGained\":417.7151856,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,108]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-829448.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[74,144,54,18,128,111,136,88,169,66,31,131,68,113,194,51,88,185],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":21093750,\"moneyMax\":21093750,\"hackDifficulty\":8,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"66.7.1.6\",\"34.2.2.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"76.2.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.2.3.0\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.2.3.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.2.3.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"76.2.3.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"76.2.3.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 91.754 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 29.40200000000036. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 98.303 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 28.56000000000044. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 95.897 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 30.75200000000049. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 102.161 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 23.000000000000576. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 80.009 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 24.632000000000662. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 84.673 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 16.068000000000733. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 60.201 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 9.552000000000737. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 41.582 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 6.455999999999994. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 32.735 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 7.0739999999999945. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 34.501 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":725.410000000028,\"onlineMoneyMade\":0,\"onlineExpGained\":348.095988,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":7734375,\"moneyMax\":7734375,\"hackDifficulty\":7,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"52.6.4.9\",\"20.6.6.1\",\"21.0.1.7\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"34.2.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.2.2.2\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.2.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"34.2.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.2.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"34.2.2.2\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 98.034 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 22.456000000000667. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 78.455 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 17.86800000000073. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 65.345 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.502000000000737. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 30.009 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.729999999999997. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 44.948 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":353.2099999999885,\"onlineMoneyMade\":0,\"onlineExpGained\":417.7151856,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,108]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-968380.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,1,0],[1,0,0,0],[0,0,1,0],[0,0,1,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":14062500,\"moneyMax\":14062500,\"hackDifficulty\":8,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"51.0.6.6\",\"56.2.2.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"27.2.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.2.8.1\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.2.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"27.2.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.2.8.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"27.2.8.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 19.425 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $194,287.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.668 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $259,222.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 23.190 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $240,241.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.995 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $183,631.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.728 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $120,176.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.558 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,556.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.138 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $166,167.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 17.301 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $119,880.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.237 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,957.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.603 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $53,428.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.968 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $145,669.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 14.999 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $167,018.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.324 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $135,198.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.724 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $89,873.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.070 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $59,570.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.737 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $297,628.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.093 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $294,039.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.249 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $202,094.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.304 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $125,689.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.595 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,420.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.781 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $322,640.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.384 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $208,828.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.249 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $138,232.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.911 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $116,069.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.990 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $332,112.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.879 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":473.2099999999817,\"onlineMoneyMade\":5960330,\"onlineExpGained\":4579.396108799996,\"threads\":37,\"dataMap\":{\"26.3.9.9\":[5960330,1184,0,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":126562500,\"moneyMax\":126562500,\"hackDifficulty\":12.636,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"14.2.9.7\",\"72.3.3.3\",\"48.4.7.7\",\"92.4.5.5\",\"93.0.3.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"36.2.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.2.5.8\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"36.2.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"36.2.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"36.2.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"36.2.5.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 86.799 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.34800000000033. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 89.576 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.504000000000403. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 90.022 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 29.61400000000048. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 98.909 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 27.052000000000522. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 91.588 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 22.318000000000605. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 78.061 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 18.142000000000685. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 66.128 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 11.106000000000734. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 46.023 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 15.060000000000738. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 57.321 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":767.4100000000376,\"onlineMoneyMade\":0,\"onlineExpGained\":348.095988,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":8437500,\"moneyMax\":8437500,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"26.3.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.3.9.9\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"26.3.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"26.3.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"26.3.9.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"26.3.9.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 78.312 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 25.186000000000256. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 86.256 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.172000000000345. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 89.073 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 30.570000000000405. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 101.641 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 29.69400000000049. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 99.137 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 27.70800000000053. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 93.463 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 22.016000000000627. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 77.198 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 16.554000000000702. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 61.590 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 9.768000000000733. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 42.199 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 12.005999999999997. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 48.594 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":839.410000000054,\"onlineMoneyMade\":0,\"onlineExpGained\":382.9055868,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,99]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-525532-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0],[0,0,0],[0,0,1],[0,0,0],[0,0,0],[1,1,0],[1,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-636267-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(()((()()((\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"hackDifficulty\":7.3679999999999986,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\",\"14.2.9.7\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"20.6.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.6.6.1\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.6.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"20.6.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.6.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"20.6.6.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 19.608 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $111,924.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.332 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,962.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.584 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $126,954.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 24.173 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,090.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 16.733 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,484.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.403 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $48,276.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.876 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,834.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.692 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,150.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.976 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $49,770.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.474 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $33,228.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.840 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $22,230.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.206 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,088.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.219 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,826.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.274 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $55,800.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.961 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $37,116.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.307 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $24,642.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.974 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $123,822.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.008 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $121,212.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.487 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,996.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.222 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $47,016.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.991 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $161,586.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.840 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $121,554.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.169 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,622.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.592 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $67,518.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.671 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $46,674.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.418 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":7814.409999995372,\"onlineMoneyMade\":61159338,\"onlineExpGained\":42137.01934739974,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[61159338,10800,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":67500000,\"moneyMax\":67500000,\"hackDifficulty\":8.94,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"76.2.3.0\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"14.2.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.2.9.7\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.2.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"14.2.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.2.9.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"14.2.9.7\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 80.221 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 21.890000000000718. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 76.838 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.752000000000738. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 36.439 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.709999999999995. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 33.461 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.987999999999996. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 42.828 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":269.0099999999933,\"onlineMoneyMade\":0,\"onlineExpGained\":278.47679039999997,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738344.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,1,0],[0,0,1,0,0],[0,0,0,0,0],[0,1,1,0,1],[0,0,0,0,0],[0,0,1,0,1],[1,0,0,0,0],[0,0,1,1,0],[0,0,0,1,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":14044978,\"moneyMax\":28125000,\"hackDifficulty\":6.276,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"26.3.9.9\",\"27.2.8.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"21.0.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.0.1.7\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.0.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"21.0.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.0.1.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"21.0.1.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 19.504 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $118,116.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.228 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,994.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.801 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $116,658.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 23.323 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $112,752.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 16.655 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,778.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.325 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $50,400.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.798 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,966.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 19.614 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,860.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.183 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $52,956.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.370 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $35,334.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.736 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $23,634.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.101 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,598.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.758 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,848.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.169 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $59,508.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.857 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $39,564.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.202 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $26,244.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.870 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $131,238.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.225 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,312.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.382 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,766.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.382 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $50,130.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.887 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $39,384.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.073 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,492.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.169 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,004.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.488 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $57,006.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.150 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $48,006.00 and 69.6192 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.228 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5070.80999999758,\"onlineMoneyMade\":44280360,\"onlineExpGained\":30005.874165600067,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[44280360,7704,0,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":182,\"moneyAvailable\":190451787.1875,\"moneyMax\":190451787.1875,\"hackDifficulty\":12,\"baseDifficulty\":35,\"minDifficulty\":12,\"serverGrowth\":36,\"serversOnNetwork\":[\"76.2.3.0\",\"92.0.4.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"92.4.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.4.5.5\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":260,\"moneyAvailable\":43016332.5,\"moneyMax\":161311246.875,\"hackDifficulty\":44,\"baseDifficulty\":44,\"minDifficulty\":15,\"serverGrowth\":28,\"serversOnNetwork\":[\"27.2.8.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"52.6.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.6.4.9\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"52.6.4.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"52.6.4.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"52.6.4.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"52.6.4.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 80.632 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 16.792000000000687. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 62.270 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.198000000000732. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 49.143 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.878000000000737. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 56.801 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":311.2099999999909,\"onlineMoneyMade\":0,\"onlineExpGained\":348.095988,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":28089072,\"moneyMax\":56250000,\"hackDifficulty\":10,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"76.2.3.0\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"6.0.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.0.6.3\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"6.0.6.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.0.6.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.0.6.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"6.0.6.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 90.862 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.9180000000004. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 91.205 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 30.06400000000048. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 100.195 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 26.602000000000523. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 90.302 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 22.768000000000605. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 79.347 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 17.692000000000686. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 64.842 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 11.556000000000733. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 47.308 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 15.778000000000738. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 59.373 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":683.2100000000185,\"onlineMoneyMade\":0,\"onlineExpGained\":313.2863892,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,81]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":522,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"hackDifficulty\":55,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":32,\"serversOnNetwork\":[\"45.1.5.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"13.7.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.7.8.8\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"13.7.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.7.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.7.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"13.7.8.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 20.080 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $209,420.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.542 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,324.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.768 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $252,118.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 20.257 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $195,730.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.996 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $130,647.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.719 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,327.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.978 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,041.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.839 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $127,724.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.149 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,066.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.871 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $54,871.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.237 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $36,741.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.603 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $125,356.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 14.973 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $139,712.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.671 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,389.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.338 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $61,494.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.684 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $296,555.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.290 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $329,078.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.237 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $195,545.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.357 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $121,619.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.648 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,275.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.834 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $313,316.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $215,858.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,820.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.858 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $119,880.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.937 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $342,842.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.827 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2231.8100000001614,\"onlineMoneyMade\":44108958,\"onlineExpGained\":29336.75632199993,\"threads\":37,\"dataMap\":{\"26.3.9.9\":[44108958,7548,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1084,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"hackDifficulty\":58,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":57,\"serversOnNetwork\":[\"48.5.6.1\",\"25.6.6.4\",\"73.7.4.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"23.8.3.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.8.3.9\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":725,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":49,\"serversOnNetwork\":[\"12.9.5.8\",\"96.8.3.1\",\"30.4.6.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.6.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.6.9.3\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.6.9.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"23.6.9.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"23.6.9.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 33.234 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.108408%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 35.305 seconds (t=146)\",\"Available money on harakiri-sushi grown by 15.305758%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 31.131 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.692437%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 34.811 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.008226%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.348 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.007616%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.018 seconds (t=146)\",\"Available money on harakiri-sushi grown by 25.880955%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 33.119 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.010093%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 30.907 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.508905%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.690 seconds (t=146)\",\"Available money on harakiri-sushi grown by 20.602846%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.792 seconds (t=146)\",\"Available money on harakiri-sushi grown by 14.648968%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 47.059 seconds (t=146)\",\"Available money on harakiri-sushi grown by 10.809817%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 58.466 seconds (t=146)\",\"Available money on harakiri-sushi grown by 9.590382%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 63.994 seconds (t=146)\",\"Available money on harakiri-sushi grown by 8.779141%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 68.516 seconds (t=146)\",\"Available money on harakiri-sushi grown by 8.409724%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 70.870 seconds (t=146)\",\"Available money on harakiri-sushi grown by 7.266069%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 79.671 seconds (t=146)\",\"Available money on harakiri-sushi grown by 6.384249%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 88.587 seconds (t=146)\",\"Available money on harakiri-sushi grown by 6.725949%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 84.847 seconds (t=146)\",\"Available money on harakiri-sushi grown by 7.634190%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 76.535 seconds (t=146)\",\"Available money on harakiri-sushi grown by 9.685772%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 63.505 seconds (t=146)\",\"Available money on harakiri-sushi grown by 12.518941%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 52.527 seconds (t=146)\",\"Available money on harakiri-sushi grown by 9.809820%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 62.897 seconds (t=146)\",\"Available money on harakiri-sushi grown by 13.420621%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 49.999 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.007366%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 28.104 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.012495%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 27.930 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.010182%. Gained 564.6890 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 27.496 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":15016.810000013606,\"onlineMoneyMade\":0,\"onlineExpGained\":210064.32555839862,\"threads\":146,\"dataMap\":{\"26.3.9.9\":[0,0,54312,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":539,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"81.3.3.5\",\"56.8.4.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"38.8.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.8.8.1\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"38.8.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.8.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.8.8.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"38.8.8.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 20.027 seconds (t=37)\",\"Script FAILED to hack harakiri-sushi. Gained 35.7765 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.489 seconds (t=37)\",\"Script FAILED to hack harakiri-sushi. Gained 35.7765 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.715 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $249,676.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 22.133 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $210,049.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 16.865 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,559.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.535 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,837.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.793 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,105.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 19.708 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $139,934.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.929 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,538.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 10.687 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $61,124.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.053 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $40,922.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 11.418 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $137,307.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 15.432 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $149,184.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.565 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,938.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.227 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $65,860.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.572 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $307,248.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 12.792 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $303,881.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $238,724.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $148,777.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.328 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,093.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.097 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $353,202.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.867 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $245,902.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.222 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,133.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.645 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $136,641.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.724 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,831.00 and 143.1061 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.197 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":431.20999999998406,\"onlineMoneyMade\":4430343,\"onlineExpGained\":3863.865466799997,\"threads\":37,\"dataMap\":{\"26.3.9.9\":[4430343,962,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":350,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"92.0.4.4\",\"12.9.5.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"93.0.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.0.3.6\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.0.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"93.0.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.0.3.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"93.0.3.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 62.699 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.106000000000734. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 40.308 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 16.23200000000073. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 60.670 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.3679999999999986. Gained 69.6192 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 35.279 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":226.80999999999565,\"onlineMoneyMade\":0,\"onlineExpGained\":348.095988,\"threads\":18,\"dataMap\":{\"26.3.9.9\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":209,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"27.2.8.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"48.5.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.5.6.1\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"48.5.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"48.5.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"48.5.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"48.5.6.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 88.496 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 23.246000000000496. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 80.712 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 27.28800000000056. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 92.262 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 20.730000000000672. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 73.523 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 19.894000000000727. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 71.134 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 10.353999999999997. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 43.874 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\",\"Server security level on harakiri-sushi weakened to 5. Gained 34.8096 hacking exp (t=9)\",\"Executing weaken() on server harakiri-sushi in 28.575 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":515.2099999999803,\"onlineMoneyMade\":0,\"onlineExpGained\":278.47679039999997,\"threads\":9,\"dataMap\":{\"26.3.9.9\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":511,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"56.9.9.6\",\"13.7.8.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"51.9.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"51.9.4.3\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"51.9.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"51.9.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"51.9.4.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"51.9.4.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 22.860 seconds (t=4)\",\"Available money on harakiri-sushi grown by 0.657229%. Gained 15.4709 hacking exp (t=4)\",\"Executing grow() on server harakiri-sushi in 29.658 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":34.80999999999996,\"onlineMoneyMade\":0,\"onlineExpGained\":15.470932799999998,\"threads\":4,\"dataMap\":{\"26.3.9.9\":[0,0,4,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":54,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"60.8.8.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"70.3.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.3.7.7\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155029.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"939174181\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"52.5.1.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.4.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.4.7.5\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-352991-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((())(aa)\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"2.4.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.4.7.8\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-465891.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,5,0,6,5,0,3,2],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.6.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.6.1.1\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"94.6.1.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"94.6.1.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"94.6.1.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"94.6.1.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"94.6.1.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"19.9.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.9.7.4\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"19.9.7.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"19.9.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"19.9.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"19.9.7.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"19.9.7.4\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"65.1.3.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.1.3.1\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"65.1.3.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"65.1.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"65.1.3.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"65.1.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"65.1.3.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"75.9.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"75.9.5.8\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"75.9.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"75.9.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"75.9.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"75.9.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"75.9.5.8\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.6.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.6.6.9\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"9.6.6.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"9.6.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"9.6.6.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"9.6.6.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"9.6.6.9\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"99.4.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.4.4.7\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"99.4.4.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"99.4.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"99.4.4.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"99.4.4.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"99.4.4.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.7.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.7.2.1\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"21.7.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"21.7.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"21.7.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"21.7.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"21.7.2.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"19.6.1.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.6.1.4\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"19.6.1.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"19.6.1.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"19.6.1.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"19.6.1.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"19.6.1.4\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"11.7.2.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.7.2.6\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"11.7.2.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"11.7.2.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"11.7.2.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"11.7.2.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"11.7.2.6\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"99.9.5.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.9.5.7\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"99.9.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"99.9.5.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"99.9.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"99.9.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"99.9.5.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"98.2.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.2.4.6\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"98.2.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"98.2.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"98.2.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"98.2.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"98.2.4.6\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.8.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.8.0.3\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"50.8.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"50.8.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"50.8.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"50.8.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"50.8.0.3\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"28.4.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.4.5.0\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"28.4.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"28.4.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"28.4.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"28.4.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"28.4.5.0\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"3.2.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.2.2.3\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"3.2.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"3.2.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"3.2.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"3.2.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"3.2.2.3\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"90.7.5.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.7.5.7\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"90.7.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"90.7.5.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"90.7.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"90.7.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"90.7.5.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"89.9.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.9.9.2\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"89.9.9.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"89.9.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"89.9.9.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"89.9.9.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"89.9.9.2\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.2.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.2.9.9\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"67.2.9.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"67.2.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.2.9.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"67.2.9.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"67.2.9.9\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.7.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.7.6.3\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"59.7.6.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"59.7.6.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"59.7.6.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"59.7.6.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"59.7.6.3\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"73.0.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.0.7.5\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"73.0.7.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"73.0.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"73.0.7.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"73.0.7.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"73.0.7.5\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"11.2.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.2.2.3\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"11.2.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"11.2.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"11.2.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"11.2.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"11.2.2.3\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.6.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.6.3.4\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"23.6.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"23.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"23.6.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"23.6.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"23.6.3.4\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"90.0.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.0.4.4\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":159.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"90.0.4.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"90.0.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"90.0.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"90.0.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"90.0.4.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"phantasy\"],\"server\":\"90.0.4.4\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server phantasy in 78.152 seconds (t=39)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":52.810000000000215,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":39,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.9.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.9.0.1\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":217.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.9.0.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"76.9.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.9.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"76.9.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"76.9.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"silver-helix\"],\"server\":\"76.9.0.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server silver-helix in 149.689 seconds (t=53)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":148.8100000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":53,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"3.9.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.9.4.5\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8192,\"ramUsed\":106.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"3.9.4.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"3.9.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"3.9.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"3.9.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"3.9.4.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"max-hardware\"],\"server\":\"3.9.4.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server max-hardware in 50.155 seconds (t=26)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":16.809999999999974,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":26,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"98.1.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.1.6.6\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8192,\"ramUsed\":4059,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"98.1.6.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"98.1.6.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"98.1.6.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"98.1.6.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"98.1.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"iron-gym\"],\"server\":\"98.1.6.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server iron-gym in 68.580 seconds (t=990)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":52.810000000000215,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":990,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":3,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":41,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":50167.290419035795,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":48,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":40761.1068405245,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":21,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":40739.378406405966,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":44,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":40803.98662186141,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":41,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":40767.91135850027,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":41,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":22893.99221313758,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":27,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1481.221270466651,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":45,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":37634.44093052209,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":60,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1504.4189504666494,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"85.6.2.8\",\"BitRunners Server\":\"23.6.9.3\",\"The Black Hand Server\":\"38.8.8.1\",\"NiteSec Server\":\"93.0.3.6\",\"The Dark Army Server\":\"48.5.6.1\",\"CyberSec Server\":\"51.9.4.3\",\"Daedalus Server\":\"70.3.7.7\",\"w0r1d_d43m0n\":\"9.4.7.5\",\"Darkweb Server\":\"2.4.7.8\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":21155.852222257516,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":19.715031596940054,\"cap\":130048076,\"totalShares\":122600000,\"maxShares\":24500000,\"posTxtEl\":0}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":27574.091345625446,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":18.35957225383554,\"cap\":188163764,\"totalShares\":81600000,\"maxShares\":16300000,\"posTxtEl\":0}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":13005.678009847814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":12.605398462617083,\"cap\":166085911,\"totalShares\":107900000,\"maxShares\":21600000,\"posTxtEl\":0}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":20015.73612349775,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":14.7345772860521,\"cap\":321557185,\"totalShares\":74800000,\"maxShares\":15000000,\"posTxtEl\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":39074.86426529278,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.443241582764456,\"cap\":362868400,\"totalShares\":53900000,\"maxShares\":10800000,\"posTxtEl\":0}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":61602.67651752419,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":false,\"otlkMag\":17.92308256038145,\"cap\":358909117,\"totalShares\":34700000,\"maxShares\":6900000,\"posTxtEl\":0}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":21766.241222651453,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":9.590090115034842,\"cap\":233972143,\"totalShares\":78200000,\"maxShares\":15600000,\"posTxtEl\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":31289.84143351893,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":17.809629704988097,\"cap\":419970112,\"totalShares\":58200000,\"maxShares\":11600000,\"posTxtEl\":0}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":22357.503206659458,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.9928165195693,\"cap\":40708756,\"totalShares\":55200000,\"maxShares\":11000000,\"posTxtEl\":0}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8814.396122506392,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.957729277369655,\"cap\":73450003,\"totalShares\":95500000,\"maxShares\":19100000,\"posTxtEl\":0}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15364.406991571474,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":9.070249891032455,\"cap\":157199475,\"totalShares\":65500000,\"maxShares\":13100000,\"posTxtEl\":0}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":14795.198666276065,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":7.800332788887459,\"cap\":136369338,\"totalShares\":75500000,\"maxShares\":15100000,\"posTxtEl\":0}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":17509.936575766624,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":7.768284124728803,\"cap\":333036707,\"totalShares\":52200000,\"maxShares\":10400000,\"posTxtEl\":0}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":26525.405807322546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":10.139273599589126,\"cap\":494074549,\"totalShares\":38900000,\"maxShares\":7800000,\"posTxtEl\":0}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":8296.55285403063,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.761666470841045,\"cap\":93836946,\"totalShares\":79500000,\"maxShares\":15900000,\"posTxtEl\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13811.773597325966,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":4.476916123336819,\"cap\":130673558,\"totalShares\":46500000,\"maxShares\":9300000,\"posTxtEl\":0}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":28726.272163062873,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":8.754828823378213,\"cap\":102501289,\"totalShares\":25500000,\"maxShares\":5100000,\"posTxtEl\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":27162.159814823717,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":10.365394045085612,\"cap\":168294132,\"totalShares\":27000000,\"maxShares\":5400000,\"posTxtEl\":0}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":29482.692912717994,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":5.293055489098339,\"cap\":466983957,\"totalShares\":22700000,\"maxShares\":4500000,\"posTxtEl\":0}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4417.000631005836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.59,\"b\":true,\"otlkMag\":1.4113166113468314,\"cap\":85390601,\"totalShares\":106600000,\"maxShares\":21300000,\"posTxtEl\":0}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5326.627643355435,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":5.774447769231354,\"cap\":79456340,\"totalShares\":59000000,\"maxShares\":11800000,\"posTxtEl\":0}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4932.355014467733,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":1.0581389843571418,\"cap\":112735910,\"totalShares\":39400000,\"maxShares\":7900000,\"posTxtEl\":0}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":8304.397522438778,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.94,\"b\":true,\"otlkMag\":9.152611096339575,\"cap\":147177206,\"totalShares\":29600000,\"maxShares\":5900000,\"posTxtEl\":0}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":8529.91209799825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.56,\"b\":false,\"otlkMag\":3.498670781206482,\"cap\":55782770,\"totalShares\":27300000,\"maxShares\":5500000,\"posTxtEl\":0}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1606.169846872457,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":false,\"otlkMag\":3.4385835070734525,\"cap\":46496796,\"totalShares\":98600000,\"maxShares\":19700000,\"posTxtEl\":0}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2055.958160992246,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.13,\"b\":true,\"otlkMag\":0.7661798590205019,\"cap\":8049672,\"totalShares\":27600000,\"maxShares\":5500000,\"posTxtEl\":0}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6371.654662090467,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.93,\"b\":true,\"otlkMag\":0.4468758675003481,\"cap\":158784052,\"totalShares\":8500000,\"maxShares\":1700000,\"posTxtEl\":0}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3179.9805065633936,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":0.9608774112953747,\"cap\":22879316,\"totalShares\":13500000,\"maxShares\":2700000,\"posTxtEl\":0}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1407.1290195284157,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.77,\"b\":false,\"otlkMag\":0.8778001858033859,\"cap\":36964444,\"totalShares\":18800000,\"maxShares\":3800000,\"posTxtEl\":0}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":712.9553711936968,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.98,\"b\":true,\"otlkMag\":1.2664190002785736,\"cap\":7061892,\"totalShares\":80200000,\"maxShares\":16000000,\"posTxtEl\":0}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1371.3171241607488,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":false,\"otlkMag\":13.935118348135678,\"cap\":16460623,\"totalShares\":111200000,\"maxShares\":22200000,\"posTxtEl\":0}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":29801.78523827395,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":8.618577760759482,\"cap\":211179894,\"totalShares\":12800000,\"maxShares\":2600000,\"posTxtEl\":0}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18420.214222744708,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":11.011332359297526,\"cap\":321633707,\"totalShares\":27400000,\"maxShares\":5500000,\"posTxtEl\":0}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":17,\"lastUpdate\":1549875991739}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.43.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}