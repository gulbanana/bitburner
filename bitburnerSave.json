{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":403,\"hp\":11,\"max_hp\":11,\"strength\":61,\"defense\":14,\"dexterity\":14,\"agility\":5,\"charisma\":3,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":27360016.98166634,\"strength_exp\":2217.920000000042,\"defense_exp\":231.99999999999943,\"dexterity_exp\":231.99999999999943,\"agility_exp\":63.799999999999905,\"charisma_exp\":34.37080000000009,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":\"19253639.478495121168\",\"total_money\":\"266178889110089545.41\",\"lifetime_money\":\"266178889110089545.41\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Aevum\",\"location\":\"Bachman & Associates\",\"jobs\":{\"Bachman & Associates\":\"Software Engineering Intern\"},\"companyName\":\"Bachman & Associates\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"28.5.2.4\",\"37.0.3.8\",\"75.1.3.0\",\"80.1.9.1\",\"21.9.4.0\",\"17.9.8.4\",\"9.8.1.9\",\"92.4.1.0\",\"73.7.4.0\",\"52.4.6.1\",\"50.8.5.1\",\"25.6.1.6\",\"4.0.3.2\",\"23.8.7.4\",\"42.9.9.6\",\"90.6.6.4\",\"26.5.3.0\",\"66.1.5.4\",\"77.8.4.2\",\"22.9.9.0\",\"36.7.3.5\",\"63.0.9.6\",\"31.1.4.3\",\"17.3.6.2\",\"36.5.8.8\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":24716887.346047387,\"onlineTimeSeconds\":97193.99999920816,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":24657690.312681783,\"onlineTimeSeconds\":89019.39999932598,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":24602777.545206342,\"onlineTimeSeconds\":89019.39999932598,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":24560226.44495278,\"onlineTimeSeconds\":88989.39999932642,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":24503202.486226052,\"onlineTimeSeconds\":88939.39999932714,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":24751936.269338954,\"onlineTimeSeconds\":87939.19999934017,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":24571478.836163137,\"onlineTimeSeconds\":86488.99999936127,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":24196053.858100966,\"onlineTimeSeconds\":85558.99999937479,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":23998294.69250773,\"onlineTimeSeconds\":83088.79999940789,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":23776706.528871235,\"onlineTimeSeconds\":78838.39999947288,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":14,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":23560042.19820912,\"onlineTimeSeconds\":72527.79999958281,\"moneyGainRatePerSecond\":513.3603937709452}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":23082282.646478005,\"onlineTimeSeconds\":58977.599999777645,\"moneyGainRatePerSecond\":486.34142567773745}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":22822613.09994144,\"onlineTimeSeconds\":54219.79999982802,\"moneyGainRatePerSecond\":486.34142567773745}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":22623876.89871136,\"onlineTimeSeconds\":52839.799999840965,\"moneyGainRatePerSecond\":486.34142567773745}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":21514856.295095503,\"onlineTimeSeconds\":48879.59999988153,\"moneyGainRatePerSecond\":486.34142567773745}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":112952841.34076594,\"onlineTimeSeconds\":45759.399999899586,\"moneyGainRatePerSecond\":8385.19699444375}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":16627374.628325874,\"onlineTimeSeconds\":36579.200000010016,\"moneyGainRatePerSecond\":486.34142567773745}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":11964518.980331266,\"onlineTimeSeconds\":25808.80000005087,\"moneyGainRatePerSecond\":486.34142567773745}}],\"totalHacknetNodeProduction\":16950.20987999057,\"factions\":[\"Netburners\",\"CyberSec\",\"NiteSec\",\"Sector-12\",\"The Black Hand\",\"Aevum\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"workType\":\"Working for Company\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0.0754,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0.03016,\"workRepGainRate\":0.36727384615384623,\"workMoneyGainRate\":9.9528,\"workMoneyLossRate\":0,\"workHackExpGained\":11.687000000000015,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":4.674800000000006,\"workRepGained\":56.92744615384596,\"workMoneyGained\":1542.6840000000032,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":31000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1549973821785,\"totalPlaytime\":1104099400,\"playtimeSinceLastAug\":97197800,\"playtimeSinceLastBitnode\":97197800,\"scriptProdSinceLastAug\":2536910977,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":102.35,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let costs = [];\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(ns.hacknet.getLevelUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getRamUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getCoreUpgradeCost(i, 1));\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let nodeCostCap = maxProduction * 60 * 60 * 24;\\r\\n    function getCappedNodeCost() {\\r\\n        let uncappedCost = ns.hacknet.getPurchaseNodeCost();\\r\\n        if (uncappedCost > nodeCostCap) {\\r\\n            log.debug(`capping node cost at ${format.money(nodeCostCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n    let buyNodeCost = getCappedNodeCost();\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedNodeCost();\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getF(nodeIdx, 1);\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\nimport * as format from 'lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number';\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n    let processes = [];\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n            let ps = ns.ps(existing);\\r\\n            if (ps.length > 0) {\\r\\n                processes.push(existing);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? ns.args[0] : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    for (let power = 0; power < 25; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (!dryRun && processes.length > 0) {\\r\\n        log.info('scripts running on existing servers, exit');\\r\\n        ns.exit();\\r\\n    } else if (ram > minRam || existingServers.length < limit) {\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js');\\r\\n        let reqRam = Infinity;\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        while (serverRam < reqRam) {\\r\\n            reqRam = scriptRam * threads;\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${reqRam}GB of ${serverRam}GB`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.script\",\"code\":\"info = getCharacterInformation();\\ntprint('multipliers: ' + Object.getOwnPropertyNames(info.mult));\",\"ramUsage\":1.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    ns.scp(['lib-log.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new servers.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of servers.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        let bots = ns.getPurchasedServers();\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of servers.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    let targets = [];\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        ns.spawn('dh-control.js', 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":9.45,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            lastTime = time;\\r\\n            assets = 0;\\r\\n            for (let stock of stocks) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }    \\r\\n            lastAssets = assets;\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, assets)}, ${format.money(assetChange/timeChange)}/sec`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(4000);\\r\\n        tick();\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = servers.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {servers.Server} current\\r\\n     * @returns {servers.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} target\\r\\n     * @returns {servers.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], servers.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = path + ' -> ' + p.name;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { TICK_LENGTH } from './lib-life.js';\\r\\nimport { VirtualLife as Life } from './lib-life-virtual.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n    let life = new Life(ns, log);\\r\\n\\r\\n    while (true) {\\r\\n        await life.tick();\\r\\n        await ns.sleep(TICK_LENGTH * 1000);\\r\\n    }\\r\\n}\",\"ramUsage\":39.3,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nlet HACKNET_BUYS_MAX =      10000000000;\\r\\nlet PURCHASED_SERVERS_MIN = 22528000000;\\r\\nlet STOCK_MARKET_MIN =      50000000000;\\r\\nexport let TICK_LENGTH =    20; // seconds\\r\\n\\r\\nexport class Life {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n    }\\r\\n\\r\\n    async tick() {\\r\\n        let cash = this.getCash();\\r\\n        let skill = this.ns.getHackingLevel();\\r\\n\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (cash < HACKNET_BUYS_MAX) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else if (cash >= HACKNET_BUYS_MAX) {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (cash < PURCHASED_SERVERS_MIN) {\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            } else if (skill / this.lastEval > 1.1) {\\r\\n                if (await this.dhStop() && await this.dhStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            // precondition: actually buy the servers\\r\\n            if (this.ns.getPurchasedServers().length == 0) {\\r\\n                await this.runOnce('buy-servers.js');\\r\\n            }\\r\\n\\r\\n            // precondition: shut down DH (also gives time for the server-buy to go through)\\r\\n            if (this.dhRunning()) {\\r\\n                await this.dhStop();\\r\\n            }\\r\\n\\r\\n            if (!this.msRunning()) {\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            } else if (skill / this.lastEval > 1.1) {\\r\\n                if (await this.msStop() && await this.msStart()) {\\r\\n                    this.lastEval = skill;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill\\r\\n        this.ensureRunning('farm-worker.js', true);\\r\\n    }\\r\\n\\r\\n    /***************************/\\r\\n    /* general script controls */\\r\\n    /***************************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {boolean} [maxThreads=false]\\r\\n     */\\r\\n    async ensureRunning(script, maxThreads) {\\r\\n        let threads = 1;\\r\\n        if (maxThreads) {\\r\\n            threads = this.getMaxThreads(script);\\r\\n            if (threads <= 0) return;\\r\\n        }\\r\\n\\r\\n        if (!this.ns.scriptRunning(script, 'home')) {\\r\\n            let threads = 1;\\r\\n            if (maxThreads) {\\r\\n                threads = this.getMaxThreads(script);\\r\\n            }\\r\\n    \\r\\n            await this.ns.exec(script, 'home', threads);\\r\\n            this.log.info(`started ${script} (${threads} threads)`);\\r\\n        } else {\\r\\n            let top = this.ns.ps('home');\\r\\n            let p = top.find(s => s.filename == script);\\r\\n            if (p.threads != threads) {\\r\\n                await this.ensureKilled(script);\\r\\n                await this.ensureRunning(script, maxThreads);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - 32; // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.info('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.info('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        return this.ns.ps('bot0').length > 0;\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.info('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.info('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n}\",\"ramUsage\":7.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-virtual.js\",\"code\":\"/// <reference path=\\\"Singularity.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Program, Gym, programs, gyms  } from './lib-servers.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Life, TICK_LENGTH } from './lib-life.js';\\r\\n\\r\\nlet WORK_OVERRIDE_TICKS = 12;\\r\\nlet DARKWEB_MIN = 200000;\\r\\nlet WORKOUT_MIN = 5000000;\\r\\nlet STAT_GOAL_BASE = 50;\\r\\n\\r\\nexport class VirtualLife extends Life {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n    }\\r\\n\\r\\n    // singularity-only life automation functions\\r\\n    async tick() {\\r\\n        let cash = this.getCash();\\r\\n        \\r\\n        // purchase: darkweb router\\r\\n        if (cash >= DARKWEB_MIN) {\\r\\n            if (!this.ns.getCharacterInformation().tor) {\\r\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\r\\n                this.ns.purchaseTor();\\r\\n                cash = this.getCash();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // purchase: darkweb programs (requires router, but it's cheaper than all of them)\\r\\n        for (var program of programs()) {\\r\\n            if (!this.hasProgram(program) && cash >= program.price) {\\r\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\r\\n                this.ns.purchaseProgram(program.name);\\r\\n                cash = this.getCash();\\r\\n                this.lastEval = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // purchase: home computer upgrades - persists through aug reset, makes early farming better\\r\\n        while (cash >= this.ns.getUpgradeHomeRamCost()) {\\r\\n            this.log.info(`purchasing home RAM upgrade`);\\r\\n            this.ns.upgradeHomeRam();\\r\\n            cash = this.getCash();\\r\\n        }\\r\\n\\r\\n        await super.tick();\\r\\n\\r\\n        for (let invite of this.ns.checkFactionInvitations()) {\\r\\n            if (!Faction.cities().includes(invite)) {\\r\\n                this.log.info(`join faction ${invite}`);\\r\\n                this.ns.joinFaction(invite);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // determine whether to issue fullscreen \\\"work\\\" actions\\r\\n        if (this.ns.isBusy()) {\\r\\n            if (this.lastWork && !this.countup) {\\r\\n                this.log.debug('reevaluate current work');\\r\\n                if (this.lastWork.isRep) {\\r\\n                    this.ns.stopAction();\\r\\n                }\\r\\n\\r\\n                let workItem = this.selectWork(cash);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;              \\r\\n            } else {\\r\\n                this.log.debug('work overridden by player, leave it alone indefinitely');\\r\\n                this.lastWork = null;\\r\\n            }\\r\\n        } else {\\r\\n            if (!this.lastWork && !this.countup) {\\r\\n                this.log.debug('begin new work');\\r\\n                let workItem = this.selectWork(cash);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;          \\r\\n            } else {    \\r\\n                if (!this.lastWork) {\\r\\n                    this.countup = 0;\\r\\n                    this.log.debug(`overriden work cancelled by player, leave it alone for ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\r\\n                } else {\\r\\n                    this.countup = this.countup || 0;\\r\\n                    this.log.debug(`automated work cancelled by player, leave it alone for ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\r\\n                }\\r\\n                \\r\\n                this.countup = this.countup + 1;\\r\\n                if (this.countup > WORK_OVERRIDE_TICKS) {\\r\\n                    this.log.debug(`resume new work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_LENGTH)}`);\\r\\n                    this.countup = 0;\\r\\n                    this.lastWork = null;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns {WorkItem}\\r\\n     * @param {number} cash\\r\\n     */\\r\\n    selectWork(cash) {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let stats = this.ns.getStats();\\r\\n        let skill = stats.hacking;\\r\\n\\r\\n        // create programs      \\r\\n        for (let program of programs()) {\\r\\n            if (!this.hasProgram(program) && program.req <= skill)  {\\r\\n                return new WorkItem(() => this.ns.createProgram(program.name), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // improve stats\\r\\n        if (cash >= WORKOUT_MIN) {\\r\\n            let statGoals = {};\\r\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility']) {\\r\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat] * info.mult[stat + 'Exp'];\\r\\n                if (stats[stat] < statGoals[stat]) {\\r\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\r\\n                    return new WorkItem(() => {\\r\\n                        let gym = this.getBestGym();\\r\\n                        this.ensureCity(info, gym.city);\\r\\n                        this.ns.gymWorkout(gym.name, stat);\\r\\n                    }, true);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // work for factions\\r\\n        let factions = this.getFactions(info);\\r\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\r\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\r\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem(() => this.ns.workForFaction(factions[0].name, 'hacking'), true);\\r\\n        }\\r\\n\\r\\n        return new WorkItem(null, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {Program} program\\r\\n     */\\r\\n    hasProgram(program) {\\r\\n        return this.ns.fileExists(program.name, 'home');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @returns Faction[]\\r\\n     * @param {ICharacterInfo} [info]\\r\\n     */\\r\\n    getFactions(info) {\\r\\n        let augInfo = this.ns.getOwnedAugmentations(true);\\r\\n        return info.factions.map(f => \\r\\n        {\\r\\n            let rep = this.ns.getFactionRep(f);\\r\\n            let fav = this.ns.getFactionFavor(f);\\r\\n            let fvg = this.ns.getFactionFavorGain(f);\\r\\n            let augs = this.ns.getAugmentationsFromFaction(f).map(a => {\\r\\n                let [aRep, aPrc] = this.ns.getAugmentationCost(a);\\r\\n                let has = augInfo.includes(a);\\r\\n                return new Augmentation(a, aRep, aPrc, has);\\r\\n            })\\r\\n            return new Faction(f, rep, fav, fvg, augs);\\r\\n        });\\r\\n    }\\r\\n\\r\\n    getBestGym() {\\r\\n        let gs = gyms();\\r\\n        gs.sort((a, b) => b.price - a.price);\\r\\n        return gs[0];\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @param {ICharacterInfo} info\\r\\n     * @param {string} name\\r\\n     */\\r\\n    ensureCity(info, name) {\\r\\n        if (info.city != name) {\\r\\n            if (this.ns.travelToCity(name)) {\\r\\n                this.log.info('travelled to ' + name);\\r\\n            } else {\\r\\n                this.log.error(`travel to ${name} failed`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {Augmentation[]} augs\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, augs) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.augmentations = augs;\\r\\n    }\\r\\n\\r\\n    maxAugRep() {\\r\\n        return this.augmentations\\r\\n            .filter(a => !a.owned)\\r\\n            .map(a => a.requiredReputation).reduce((a, b) => Math.max(a, b));\\r\\n    }\\r\\n\\r\\n    static cities() {\\r\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Augmentation {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} prc\\r\\n     */\\r\\n    constructor(name, rep, prc, has) {\\r\\n        this.name = name;\\r\\n        this.requiredReputation = rep;\\r\\n        this.price = prc;\\r\\n        this.owned = has;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass WorkItem {\\r\\n    /**\\r\\n     * @param {() => void | null} doWork\\r\\n     * @param {boolean} isRep\\r\\n     */\\r\\n    constructor(doWork, isRep) {\\r\\n        this.doWork = doWork;\\r\\n        this.isRep = isRep;\\r\\n    }\\r\\n}\",\"ramUsage\":39.3,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"buy-nodes.js\",\"args\":[\"debug\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let costs = [];\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(ns.hacknet.getLevelUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getRamUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getCoreUpgradeCost(i, 1));\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let nodeCostCap = maxProduction * 60 * 60 * 24;\\r\\n    function getCappedNodeCost() {\\r\\n        let uncappedCost = ns.hacknet.getPurchaseNodeCost();\\r\\n        if (uncappedCost > nodeCostCap) {\\r\\n            log.debug(`capping node cost at ${format.money(nodeCostCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n    let buyNodeCost = getCappedNodeCost();\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedNodeCost();\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getF(nodeIdx, 1);\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":\"\"}},\"server\":\"44.1.3.8\",\"logs\":[\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\"],\"logUpd\":true,\"offlineRunningTime\":2767.24,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":14312.210000017016,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"44.1.3.8\":0,\"63.4.9.6\":[0,0,0,0],\"93.8.1.9\":[0,0,0,0],\"53.2.8.5\":[0,0,0,0],\"13.6.2.4\":[0,0,0,0],\"43.5.5.9\":[0,0,0,0],\"21.0.3.5\":[0,0,0,0],\"10.6.0.5\":[0,0,0,0],\"13.9.1.4\":[0,0,0,0],\"87.9.3.0\":[0,0,0,0],\"19.7.4.5\":[0,0,0,0],\"41.0.3.1\":[0,0,0,0],\"89.1.2.0\":[0,0,0,0],\"5.0.3.5\":[0,0,0,0],\"25.8.2.2\":[0,0,0,0],\"24.7.8.4\":[0,0,0,0],\"33.1.2.8\":[0,0,0,0],\"40.7.6.0\":[0,0,0,0],\"24.1.8.7\":[0,0,0,0],\"85.6.7.5\":[0,0,0,0],\"33.9.1.1\":[0,0,0,0],\"10.6.5.2\":[0,0,0,0],\"65.2.3.1\":[0,0,0,0],\"9.7.1.9\":[0,0,0,0],\"90.7.3.9\":[0,0,0,0],\"87.0.5.1\":[0,0,0,0],\"1.4.5.8\":[0,0,0,0],\"0.4.3.9\":[0,0,0,0],\"94.9.2.2\":[0,0,0,0],\"58.3.9.1\":[0,0,0,0],\"77.1.1.1\":[0,0,0,0],\"33.6.1.4\":[0,0,0,0],\"64.6.4.4\":[0,0,0,0],\"37.9.6.7\":[0,0,0,0],\"85.0.3.2\":[0,0,0,0],\"2.4.8.2\":[0,0,0,0],\"79.4.6.8\":[0,0,0,0],\"56.5.0.3\":[0,0,0,0],\"52.6.7.0\":[0,0,0,0],\"61.2.9.5\":[0,0,0,0],\"87.3.1.3\":[0,0,0,0],\"3.3.0.0\":[0,0,0,0],\"61.2.0.4\":[0,0,0,0],\"58.8.7.5\":[0,0,0,0],\"47.8.5.9\":[0,0,0,0],\"68.7.8.0\":[0,0,0,0],\"61.5.1.1\":[0,0,0,0],\"67.7.6.9\":[0,0,0,0],\"13.6.4.9\":[0,0,0,0],\"8.6.3.4\":[0,0,0,0],\"21.7.1.3\":[0,0,0,0],\"63.5.9.6\":[0,0,0,0],\"32.2.0.5\":[0,0,0,0],\"93.8.0.5\":[0,0,0,0],\"92.9.2.1\":[0,0,0,0],\"32.2.0.8\":[0,0,0,0],\"96.9.4.8\":[0,0,0,0],\"94.6.7.5\":[0,0,0,0],\"10.9.9.5\":[0,0,0,0],\"10.3.2.6\":[0,0,0,0],\"23.6.8.2\":[0,0,0,0],\"21.6.4.3\":[0,0,0,0],\"82.8.1.6\":[0,0,0,0],\"99.6.2.3\":[0,0,0,0],\"68.9.7.5\":[0,0,0,0],\"81.9.8.5\":[0,0,0,0],\"0.4.7.7\":[0,0,0,0],\"7.3.1.8\":[0,0,0,0],\"79.3.6.2\":[0,0,0,0],\"47.4.5.1\":[0,0,0,0],\"94.9.0.0\":[0,0,0,0]}},\"ramUsage\":7.5}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\",\"Server security level on foodnstuff weakened to 3. Gained 67.3920 hacking exp (t=26)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=26)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4143.609999998423,\"onlineMoneyMade\":0,\"onlineExpGained\":14421.88799999997,\"threads\":26,\"dataMap\":{\"61.5.1.1\":[0,0,0,5564]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"nectar-net\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] status: money $289168 / goal $3867187; increasing\",\"[INF] assigning nectar-net grow -> weaken x9\",\"[INF] status: security level 34 / goal 13; increasing\",\"[INF] status: money $334730 / goal $3867187; increasing\",\"[INF] assigning global-pharm grow -> weaken x9\",\"[INF] status: security level 34 / goal 13; \",\"[INF] status: money $349572 / goal $3867187; increasing\",\"[INF] assigning rothman-uni grow -> weaken x9\",\"[INF] status: security level 35 / goal 13; \",\"[INF] status: money $402584 / goal $3867187; increasing\",\"[INF] assigning unitalife grow -> weaken x9\",\"[INF] status: security level 35 / goal 13; increasing\",\"[INF] status: money $418501 / goal $3867187; increasing\",\"[INF] assigning netlink grow -> weaken x9\",\"[INF] status: security level 35 / goal 13; increasing\",\"[INF] status: money $498666 / goal $3867187; increasing\",\"[INF] assigning summit-uni grow -> weaken x9\",\"[INF] status: security level 34 / goal 13; \",\"[INF] status: money $498666 / goal $3867187; \",\"[INF] assigning . grow -> weaken x9\",\"[INF] status: security level 34 / goal 13; \",\"[INF] status: money $594536 / goal $3867187; \",\"[INF] assigning aevum-police grow -> weaken x9\",\"[INF] status: security level 32 / goal 13; \",\"[INF] status: money $594536 / goal $3867187; \",\"[INF] assigning max-hardware grow -> weaken x18\",\"[INF] status: security level 31 / goal 13; decreasing\",\"[INF] status: money $709048 / goal $3867187; \",\"[INF] status: security level 30 / goal 13; decreasing\",\"[INF] status: money $709048 / goal $3867187; \",\"[INF] status: security level 30 / goal 13; decreasing\",\"[INF] status: money $857989 / goal $3867187; \",\"[INF] status: security level 27 / goal 13; decreasing\",\"[INF] status: money $857989 / goal $3867187; \",\"[INF] status: security level 27 / goal 13; decreasing\",\"[INF] status: money $1059657 / goal $3867187; \",\"[INF] status: security level 23 / goal 13; decreasing\",\"[INF] status: money $1059657 / goal $3867187; \",\"[INF] status: security level 22 / goal 13; decreasing\",\"[INF] status: money $1344154 / goal $3867187; \",\"[INF] status: security level 20 / goal 13; decreasing\",\"[INF] status: money $1456693 / goal $3867187; increasing\",\"[INF] status: security level 20 / goal 13; decreasing\",\"[INF] status: money $1769865 / goal $3867187; increasing\",\"[INF] status: security level 16 / goal 13; decreasing\",\"[INF] status: money $2243001 / goal $3867187; increasing\",\"[INF] status: security level 14 / goal 13; decreasing\",\"[INF] status: money $2589833 / goal $3867187; increasing\",\"[INF] status: security level 12 / goal 13; decreasing\",\"[INF] status: money $3497322 / goal $3867187; increasing\",\"[INF] assigning CSEC weaken -> grow x4\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":888.6100000000652,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"init.js\",\"args\":[\"debug\"],\"server\":\"44.1.3.8\",\"ramUsage\":39.3,\"logs\":[\"[DBG] begin new work\",\"[DBG] strength 18 < goal 67.27999999999999\",\"[INF] travelled to Sector-12\",\"[DBG] reevaluate current work\",\"[DBG] strength 22 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 27 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 31 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 34 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 37 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 40 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 43 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 45 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 48 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 50 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 52 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 54 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 56 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 57 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 59 < goal 67.27999999999999\",\"[DBG] reevaluate current work\",\"[DBG] strength 61 < goal 67.27999999999999\",\"[DBG] automated work cancelled by player, leave it alone for 4m 0s\",\"[DBG] automated work cancelled by player, leave it alone for 3m 40s\",\"[DBG] automated work cancelled by player, leave it alone for 3m 20s\",\"[DBG] automated work cancelled by player, leave it alone for 3m 0s\",\"[DBG] work overridden by player, leave it alone indefinitely\",\"[DBG] work overridden by player, leave it alone indefinitely\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":444.8099999999833,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"FTPCrack.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"61.5.1.1\",\"67.7.6.9\",\"13.6.4.9\",\"93.8.0.5\",\"92.9.2.1\",\"10.3.2.6\",\"94.9.0.0\",\"28.5.2.4\",\"37.0.3.8\",\"75.1.3.0\",\"80.1.9.1\",\"21.9.4.0\",\"17.9.8.4\",\"9.8.1.9\",\"92.4.1.0\",\"73.7.4.0\",\"52.4.6.1\",\"50.8.5.1\",\"25.6.1.6\",\"4.0.3.2\",\"23.8.7.4\",\"42.9.9.6\",\"90.6.6.4\",\"26.5.3.0\",\"66.1.5.4\",\"77.8.4.2\",\"22.9.9.0\",\"36.7.3.5\",\"63.0.9.6\",\"31.1.4.3\",\"17.3.6.2\",\"36.5.8.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.4.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.4.9.6\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1095,\"moneyAvailable\":30852971643,\"moneyMax\":115698643661.25,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"13.6.2.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"93.8.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.8.1.9\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1105,\"moneyAvailable\":41254838831.25,\"moneyMax\":154705645617.1875,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"43.5.5.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.2.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.2.8.5\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138430.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":676398144,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1126,\"moneyAvailable\":14265639979.5,\"moneyMax\":53496149923.125,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":71,\"serversOnNetwork\":[\"10.6.0.5\",\"79.3.6.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"13.6.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.6.2.4\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204754.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":522632569,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":912,\"moneyAvailable\":16445854440,\"moneyMax\":61671954150,\"hackDifficulty\":94,\"baseDifficulty\":94,\"minDifficulty\":31,\"serverGrowth\":81,\"serversOnNetwork\":[\"87.9.3.0\",\"63.4.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.5.5.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.5.5.9\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-850228.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[153,33,83,97,2,33,101,137,107,189,195,45,134,69,155,35,62,2,85,10,108,138,22,65,197,41,145,14,100],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52405.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,3,-2,-6,7,6,-8,-1,10,1,-2,5,4,7,0,0,2,-10,-6,-5,3,10,2,-9,1,1,0,-4],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1194,\"moneyAvailable\":15863722161.75,\"moneyMax\":59488958106.5625,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":88,\"serversOnNetwork\":[\"87.9.3.0\",\"93.8.1.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.0.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.0.3.5\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1007,\"moneyAvailable\":17204267076.75,\"moneyMax\":64516001537.8125,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":74,\"serversOnNetwork\":[\"13.9.1.4\",\"41.0.3.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"10.6.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.6.0.5\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1094,\"moneyAvailable\":14075019897.75,\"moneyMax\":52781324616.5625,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":95,\"serversOnNetwork\":[\"19.7.4.5\",\"53.2.8.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"13.9.1.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.9.1.4\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1077,\"moneyAvailable\":14222237673.75,\"moneyMax\":53333391276.5625,\"hackDifficulty\":66,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":89,\"serversOnNetwork\":[\"19.7.4.5\",\"21.0.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.9.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.9.3.0\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1280,\"moneyAvailable\":19077804361.5,\"moneyMax\":71541766355.625,\"hackDifficulty\":96,\"baseDifficulty\":96,\"minDifficulty\":32,\"serverGrowth\":92,\"serversOnNetwork\":[\"24.7.8.4\",\"13.6.2.4\",\"43.5.5.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"19.7.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.7.4.5\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1120,\"moneyAvailable\":1148018849.25,\"moneyMax\":4305070684.6875,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":93,\"serversOnNetwork\":[\"1.4.5.8\",\"10.6.0.5\",\"13.9.1.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"41.0.3.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.0.3.1\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1488,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"21.0.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"89.1.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.1.2.0\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-366892-Netburners.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,3,8,5,8,0,7,3,4,9,0,4,7,5,10,9],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-448244.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,31],[1,7],[19,24],[17,22],[4,6],[19,21],[5,13],[19,28],[13,17],[24,31],[17,20],[20,24],[10,20],[9,17],[9,14],[13,19],[1,9]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1010,\"moneyAvailable\":895047836.25,\"moneyMax\":3356429385.9375,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":70,\"serversOnNetwork\":[\"1.4.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.0.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.0.3.5\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":903,\"moneyAvailable\":672160538.25,\"moneyMax\":2520602018.4375,\"hackDifficulty\":91,\"baseDifficulty\":91,\"minDifficulty\":30,\"serverGrowth\":68,\"serversOnNetwork\":[\"64.6.4.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.8.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.8.2.2\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":932,\"moneyAvailable\":491093587.5,\"moneyMax\":1841600953.125,\"hackDifficulty\":89,\"baseDifficulty\":89,\"minDifficulty\":30,\"serverGrowth\":66,\"serversOnNetwork\":[\"0.4.3.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.7.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.7.8.4\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":805,\"moneyAvailable\":551359377,\"moneyMax\":2067597663.75,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":73,\"serversOnNetwork\":[\"99.6.2.3\",\"87.9.3.0\",\"0.4.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.1.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.1.2.8\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-649146.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,5,5,5,0,0,1,0,2],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":803,\"moneyAvailable\":539827359.75,\"moneyMax\":2024352599.0625,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":70,\"serversOnNetwork\":[\"85.6.7.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"40.7.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.7.6.0\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-96388.cct\",\"type\":\"Total Ways to Sum\",\"data\":71,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":892,\"moneyAvailable\":681893261.25,\"moneyMax\":2557099729.6875,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":88,\"serversOnNetwork\":[\"64.6.4.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.1.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.1.8.7\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"24.1.8.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"24.1.8.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"24.1.8.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=36)\",\"Available money on nectar-net grown by 1.121286%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 58.997 seconds (t=36)\",\"Available money on nectar-net grown by 1.029672%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 62.733 seconds (t=36)\",\"Available money on nectar-net grown by 0.953177%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 66.414 seconds (t=36)\",\"Available money on nectar-net grown by 0.924281%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 67.888 seconds (t=36)\",\"Available money on nectar-net grown by 0.893032%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 69.623 seconds (t=36)\",\"Available money on nectar-net grown by 0.902750%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 68.944 seconds (t=36)\",\"Available money on nectar-net grown by 0.939609%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 66.761 seconds (t=36)\",\"Available money on nectar-net grown by 0.957332%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 65.753 seconds (t=36)\",\"Available money on nectar-net grown by 1.050490%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 61.247 seconds (t=36)\",\"Available money on nectar-net grown by 1.204441%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 55.370 seconds (t=36)\",\"Available money on nectar-net grown by 1.295867%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 52.545 seconds (t=36)\",\"Available money on nectar-net grown by 1.540550%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 46.662 seconds (t=36)\",\"Available money on nectar-net grown by 1.672402%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 44.205 seconds (t=36)\",\"Available money on nectar-net grown by 2.043344%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 39.007 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":2007.936,\"threads\":36,\"dataMap\":{\"21.7.1.3\":[0,0,504,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":860,\"moneyAvailable\":882128170.5,\"moneyMax\":3307980639.375,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":82,\"serversOnNetwork\":[\"94.9.2.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"85.6.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.6.7.5\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671746.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,23],[21,24],[23,26],[15,17],[24,31],[8,18],[5,13],[21,30],[9,10],[1,5],[2,8],[11,13],[24,29],[13,21],[16,18]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":866,\"moneyAvailable\":657363473.25,\"moneyMax\":2465113024.6875,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":72,\"serversOnNetwork\":[\"77.1.1.1\",\"33.1.2.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.9.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.9.1.1\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759507.cct\",\"type\":\"Total Ways to Sum\",\"data\":17,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":834,\"moneyAvailable\":391937777.25,\"moneyMax\":1469766664.6875,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":76,\"serversOnNetwork\":[\"87.0.5.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"10.6.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.6.5.2\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":927,\"moneyAvailable\":652966764,\"moneyMax\":2448625365,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":80,\"serversOnNetwork\":[\"33.6.1.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"65.2.3.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.2.3.1\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500293.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":769688970,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":855,\"moneyAvailable\":625018976.25,\"moneyMax\":2343821160.9375,\"hackDifficulty\":63,\"baseDifficulty\":63,\"minDifficulty\":21,\"serverGrowth\":79,\"serversOnNetwork\":[\"79.4.6.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.7.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.7.1.9\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-118692.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,1,4,-7,0,7,5,5,8,4,-8,5,-9,-9,-5,-9,-10,-7,-10],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":917,\"moneyAvailable\":809740437.75,\"moneyMax\":3036526641.5625,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":59,\"serversOnNetwork\":[\"2.4.8.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"90.7.3.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.7.3.9\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":948,\"moneyAvailable\":702469623.75,\"moneyMax\":2634261089.0625,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":64,\"serversOnNetwork\":[\"82.8.1.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.0.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.0.5.1\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-931560.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":821,\"moneyAvailable\":806622178.5,\"moneyMax\":3024833169.375,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":68,\"serversOnNetwork\":[\"33.6.1.4\",\"33.9.1.1\",\"1.4.5.8\",\"99.6.2.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.4.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.4.5.8\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":833,\"moneyAvailable\":531111869.25,\"moneyMax\":1991669509.6875,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":72,\"serversOnNetwork\":[\"87.0.5.1\",\"19.7.4.5\",\"89.1.2.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"0.4.3.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.4.3.9\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":787,\"moneyAvailable\":569439492,\"moneyMax\":2135398095,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":74,\"serversOnNetwork\":[\"94.9.2.2\",\"25.8.2.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.9.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.9.2.2\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":813,\"moneyAvailable\":1022774994.75,\"moneyMax\":3835406230.3125,\"hackDifficulty\":82,\"baseDifficulty\":82,\"minDifficulty\":27,\"serverGrowth\":61,\"serversOnNetwork\":[\"58.3.9.1\",\"24.1.8.7\",\"0.4.3.9\",\"33.6.1.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"58.3.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.3.9.1\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"58.3.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.3.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.3.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"58.3.9.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 86.953 seconds (t=9)\",\"Server security level on nectar-net weakened to 35.24600000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 86.104 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.820000000000356. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 83.390 seconds (t=9)\",\"Server security level on nectar-net weakened to 32.754000000000346. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 81.362 seconds (t=9)\",\"Server security level on nectar-net weakened to 29.76000000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 75.664 seconds (t=9)\",\"Server security level on nectar-net weakened to 25.446000000000353. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 67.455 seconds (t=9)\",\"Server security level on nectar-net weakened to 21.50800000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 59.960 seconds (t=9)\",\"Server security level on nectar-net weakened to 18.586000000000368. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 54.400 seconds (t=9)\",\"Server security level on nectar-net weakened to 15.15200000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 47.865 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":626.4100000000055,\"onlineMoneyMade\":0,\"onlineExpGained\":286.848,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":819,\"moneyAvailable\":1311715368,\"moneyMax\":4918932630,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":80,\"serversOnNetwork\":[\"2.4.8.2\",\"94.9.2.2\",\"64.6.4.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"77.1.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.1.1.1\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":795,\"moneyAvailable\":923535518.25,\"moneyMax\":3463258193.4375,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":77,\"serversOnNetwork\":[\"33.6.1.4\",\"85.6.7.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.6.1.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.6.1.4\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":819,\"moneyAvailable\":987904290.75,\"moneyMax\":3704641090.3125,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":70,\"serversOnNetwork\":[\"94.9.2.2\",\"10.6.5.2\",\"87.0.5.1\",\"77.1.1.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"64.6.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.6.4.4\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"64.6.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"64.6.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"64.6.4.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"64.6.4.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 86.960 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.27000000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 84.247 seconds (t=9)\",\"Server security level on nectar-net weakened to 31.872000000000337. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 79.683 seconds (t=9)\",\"Server security level on nectar-net weakened to 29.79000000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 75.721 seconds (t=9)\",\"Server security level on nectar-net weakened to 26.79600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 70.024 seconds (t=9)\",\"Server security level on nectar-net weakened to 22.494000000000362. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 61.837 seconds (t=9)\",\"Server security level on nectar-net weakened to 18.620000000000363. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 54.464 seconds (t=9)\",\"Server security level on nectar-net weakened to 15.47800000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 48.485 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":554.2099999999891,\"onlineMoneyMade\":0,\"onlineExpGained\":250.992,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,63]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":805,\"moneyAvailable\":775565522.25,\"moneyMax\":2908370708.4375,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":78,\"serversOnNetwork\":[\"58.3.9.1\",\"5.0.3.5\",\"40.7.6.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"37.9.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.9.6.7\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"37.9.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.9.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"37.9.6.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=73)\",\"Available money on nectar-net grown by 2.362590%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 57.876 seconds (t=73)\",\"Available money on nectar-net grown by 2.163197%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 61.600 seconds (t=73)\",\"Available money on nectar-net grown by 1.996642%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 65.287 seconds (t=73)\",\"Available money on nectar-net grown by 1.931120%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 66.834 seconds (t=73)\",\"Available money on nectar-net grown by 1.862361%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 68.618 seconds (t=73)\",\"Available money on nectar-net grown by 1.859040%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 68.618 seconds (t=73)\",\"Available money on nectar-net grown by 1.935597%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 66.454 seconds (t=73)\",\"Available money on nectar-net grown by 1.973106%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 65.434 seconds (t=73)\",\"Available money on nectar-net grown by 2.168166%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 60.927 seconds (t=73)\",\"Available money on nectar-net grown by 2.350274%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 57.410 seconds (t=73)\",\"Available money on nectar-net grown by 2.685544%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 52.225 seconds (t=73)\",\"Available money on nectar-net grown by 3.280043%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 45.657 seconds (t=73)\",\"Available money on nectar-net grown by 3.403196%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 44.570 seconds (t=73)\",\"Available money on nectar-net grown by 4.288338%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 38.694 seconds (t=73)\",\"Available money on nectar-net grown by 4.903902%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 35.856 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":4362.48,\"threads\":73,\"dataMap\":{\"21.7.1.3\":[0,0,1095,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":706,\"moneyAvailable\":591298634.25,\"moneyMax\":2217369878.4375,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":58,\"serversOnNetwork\":[\"68.9.7.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"85.0.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.0.3.2\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.0.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"85.0.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.0.3.2\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"85.0.3.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.548394%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 59.721 seconds (t=18)\",\"Available money on nectar-net grown by 0.504304%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 63.470 seconds (t=18)\",\"Available money on nectar-net grown by 0.467606%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.139 seconds (t=18)\",\"Available money on nectar-net grown by 0.453691%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.612 seconds (t=18)\",\"Available money on nectar-net grown by 0.452699%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.624 seconds (t=18)\",\"Available money on nectar-net grown by 0.444727%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 69.498 seconds (t=18)\",\"Available money on nectar-net grown by 0.463649%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.212 seconds (t=18)\",\"Available money on nectar-net grown by 0.472279%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 66.204 seconds (t=18)\",\"Available money on nectar-net grown by 0.517566%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 61.697 seconds (t=18)\",\"Available money on nectar-net grown by 0.592150%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 55.815 seconds (t=18)\",\"Available money on nectar-net grown by 0.636086%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 52.995 seconds (t=18)\",\"Available money on nectar-net grown by 0.753882%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 47.107 seconds (t=18)\",\"Available money on nectar-net grown by 0.950322%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 40.545 seconds (t=18)\",\"Available money on nectar-net grown by 0.993041%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 39.458 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1003.968,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,252,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":504,\"moneyAvailable\":427831054.5,\"moneyMax\":1604366454.375,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":59,\"serversOnNetwork\":[\"87.3.1.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"2.4.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.4.8.2\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"2.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"2.4.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"2.4.8.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=73)\",\"Available money on nectar-net grown by 2.314577%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 58.717 seconds (t=73)\",\"Available money on nectar-net grown by 2.122620%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 62.453 seconds (t=73)\",\"Available money on nectar-net grown by 1.962269%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 66.128 seconds (t=73)\",\"Available money on nectar-net grown by 1.901676%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 67.608 seconds (t=73)\",\"Available money on nectar-net grown by 1.834556%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 69.398 seconds (t=73)\",\"Available money on nectar-net grown by 1.854991%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 68.719 seconds (t=73)\",\"Available money on nectar-net grown by 1.905822%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 67.227 seconds (t=73)\",\"Available money on nectar-net grown by 1.968481%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 65.534 seconds (t=73)\",\"Available money on nectar-net grown by 2.163267%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 61.028 seconds (t=73)\",\"Available money on nectar-net grown by 2.401863%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 56.521 seconds (t=73)\",\"Available money on nectar-net grown by 2.677810%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 52.319 seconds (t=73)\",\"Available money on nectar-net grown by 3.195529%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 46.437 seconds (t=73)\",\"Available money on nectar-net grown by 3.475065%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 43.980 seconds (t=73)\",\"Available money on nectar-net grown by 4.143962%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 39.473 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":4071.6479999999997,\"threads\":73,\"dataMap\":{\"21.7.1.3\":[0,0,1022,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":538,\"moneyAvailable\":549324369.75,\"moneyMax\":2059966386.5625,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":58,\"serversOnNetwork\":[\"52.6.7.0\",\"9.7.1.9\",\"58.3.9.1\",\"82.8.1.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"79.4.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.4.6.8\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.4.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.4.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.4.6.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"79.4.6.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 84.346 seconds (t=9)\",\"Server security level on nectar-net weakened to 30.920000000000346. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 77.872 seconds (t=9)\",\"Server security level on nectar-net weakened to 27.41800000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 71.207 seconds (t=9)\",\"Server security level on nectar-net weakened to 24.36000000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 65.388 seconds (t=9)\",\"Server security level on nectar-net weakened to 20.63000000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 58.290 seconds (t=9)\",\"Server security level on nectar-net weakened to 16.23000000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 49.916 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":410.40999999998525,\"onlineMoneyMade\":0,\"onlineExpGained\":179.28,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,45]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1460.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,1,1,0,0,10,10,0,4,4,6,8,2],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-490986.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,10,7,9,0,2],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":440,\"moneyAvailable\":162441645.75,\"moneyMax\":609156171.5625,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":38,\"serversOnNetwork\":[\"61.2.9.5\",\"65.2.3.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"56.5.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.5.0.3\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"56.5.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"56.5.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"56.5.0.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"56.5.0.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 84.384 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.84200000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 85.335 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.32200000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 84.346 seconds (t=9)\",\"Server security level on nectar-net weakened to 31.370000000000346. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 78.728 seconds (t=9)\",\"Server security level on nectar-net weakened to 27.060000000000354. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 70.526 seconds (t=9)\",\"Server security level on nectar-net weakened to 23.93000000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 64.570 seconds (t=9)\",\"Server security level on nectar-net weakened to 20.49200000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 58.027 seconds (t=9)\",\"Server security level on nectar-net weakened to 16.76600000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 50.936 seconds (t=9)\",\"Server security level on nectar-net weakened to 12.892000000000374. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 43.564 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":590.4099999999974,\"onlineMoneyMade\":0,\"onlineExpGained\":286.848,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":394,\"moneyAvailable\":140846354.25,\"moneyMax\":528173828.4375,\"hackDifficulty\":47,\"baseDifficulty\":47,\"minDifficulty\":16,\"serverGrowth\":40,\"serversOnNetwork\":[\"10.9.9.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"52.6.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.6.7.0\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-566523.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[107,53,184,88,189,101,41,117,150,69,11,147,87,31,8,199,144,129,124,18,117,146,105,43,43,189,92,46,65,168,21,15,4,34,36],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":729,\"moneyAvailable\":779507803.5,\"moneyMax\":2923154263.125,\"hackDifficulty\":68,\"baseDifficulty\":68,\"minDifficulty\":23,\"serverGrowth\":85,\"serversOnNetwork\":[\"58.8.7.5\",\"2.4.8.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.2.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.2.9.5\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.2.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.2.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.2.9.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"61.2.9.5\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 85.103 seconds (t=9)\",\"Server security level on nectar-net weakened to 32.32200000000034. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 80.540 seconds (t=9)\",\"Server security level on nectar-net weakened to 29.19600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 74.591 seconds (t=9)\",\"Server security level on nectar-net weakened to 26.830000000000354. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 70.088 seconds (t=9)\",\"Server security level on nectar-net weakened to 23.59400000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 63.930 seconds (t=9)\",\"Server security level on nectar-net weakened to 19.080000000000364. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 55.340 seconds (t=9)\",\"Server security level on nectar-net weakened to 15.330000000000371. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 48.204 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":482.20999999998116,\"onlineMoneyMade\":0,\"onlineExpGained\":215.136,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,54]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":436,\"moneyAvailable\":251018611.5,\"moneyMax\":941319793.125,\"hackDifficulty\":53,\"baseDifficulty\":53,\"minDifficulty\":18,\"serverGrowth\":54,\"serversOnNetwork\":[\"47.8.5.9\",\"79.4.6.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"87.3.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.3.1.3\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":617,\"moneyAvailable\":427349973.75,\"moneyMax\":1602562401.5625,\"hackDifficulty\":61,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":62,\"serversOnNetwork\":[\"47.8.5.9\",\"85.0.3.2\",\"23.6.8.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"3.3.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.3.0.0\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"3.3.0.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"3.3.0.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"3.3.0.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=36)\",\"Available money on nectar-net grown by 1.106967%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 59.545 seconds (t=36)\",\"Available money on nectar-net grown by 1.017207%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 63.299 seconds (t=36)\",\"Available money on nectar-net grown by 0.942488%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 66.974 seconds (t=36)\",\"Available money on nectar-net grown by 0.914334%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 68.442 seconds (t=36)\",\"Available money on nectar-net grown by 0.912317%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 68.460 seconds (t=36)\",\"Available money on nectar-net grown by 0.896129%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 69.328 seconds (t=36)\",\"Available money on nectar-net grown by 0.933442%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 67.096 seconds (t=36)\",\"Available money on nectar-net grown by 0.951046%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 66.088 seconds (t=36)\",\"Available money on nectar-net grown by 1.042790%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 61.582 seconds (t=36)\",\"Available money on nectar-net grown by 1.194513%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 55.705 seconds (t=36)\",\"Available money on nectar-net grown by 1.283964%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 52.886 seconds (t=36)\",\"Available money on nectar-net grown by 1.524055%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 46.991 seconds (t=36)\",\"Available money on nectar-net grown by 1.826125%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 41.799 seconds (t=36)\",\"Available money on nectar-net grown by 2.014430%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 39.342 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":2007.936,\"threads\":36,\"dataMap\":{\"21.7.1.3\":[0,0,504,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-636280.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"17015916758\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-856786.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1405017041\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":427,\"moneyAvailable\":336044194.5,\"moneyMax\":1260165729.375,\"hackDifficulty\":61,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":38,\"serversOnNetwork\":[\"58.8.7.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"61.2.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.2.0.4\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.2.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.2.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.2.0.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"61.2.0.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.587171%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.859 seconds (t=18)\",\"Available money on nectar-net grown by 0.537180%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 60.589 seconds (t=18)\",\"Available money on nectar-net grown by 0.495484%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 64.276 seconds (t=18)\",\"Available money on nectar-net grown by 0.479177%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.823 seconds (t=18)\",\"Available money on nectar-net grown by 0.456085%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.287 seconds (t=18)\",\"Available money on nectar-net grown by 0.461178%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.608 seconds (t=18)\",\"Available money on nectar-net grown by 0.461465%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.492 seconds (t=18)\",\"Available money on nectar-net grown by 0.489655%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 64.423 seconds (t=18)\",\"Available money on nectar-net grown by 0.538332%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 59.928 seconds (t=18)\",\"Available money on nectar-net grown by 0.574402%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 57.091 seconds (t=18)\",\"Available money on nectar-net grown by 0.668014%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 51.214 seconds (t=18)\",\"Available money on nectar-net grown by 0.731549%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 48.078 seconds (t=18)\",\"Available money on nectar-net grown by 0.828032%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 44.257 seconds (t=18)\",\"Available money on nectar-net grown by 1.026470%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 38.672 seconds (t=18)\",\"Available money on nectar-net grown by 1.193108%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 35.427 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1075.68,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,270,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":294,\"moneyAvailable\":148301415,\"moneyMax\":556130306.25,\"hackDifficulty\":42,\"baseDifficulty\":42,\"minDifficulty\":14,\"serverGrowth\":46,\"serversOnNetwork\":[\"32.2.0.8\",\"68.9.7.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"58.8.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.8.7.5\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":314,\"moneyAvailable\":168659344.5,\"moneyMax\":632472541.875,\"hackDifficulty\":56,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":47,\"serversOnNetwork\":[\"32.2.0.5\",\"52.6.7.0\",\"3.3.0.0\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"47.8.5.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.8.5.9\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.8.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"47.8.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.8.5.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"47.8.5.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 83.535 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.708000000000354. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 83.177 seconds (t=9)\",\"Server security level on nectar-net weakened to 31.820000000000345. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 79.584 seconds (t=9)\",\"Server security level on nectar-net weakened to 27.510000000000353. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 71.382 seconds (t=9)\",\"Server security level on nectar-net weakened to 23.196000000000357. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 63.173 seconds (t=9)\",\"Server security level on nectar-net weakened to 19.694000000000365. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 56.508 seconds (t=9)\",\"Server security level on nectar-net weakened to 16.55600000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 50.537 seconds (t=9)\",\"Server security level on nectar-net weakened to 14.252000000000372. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 46.152 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":518.409999999981,\"onlineMoneyMade\":0,\"onlineExpGained\":250.992,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,63]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":386,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":57,\"serversOnNetwork\":[\"94.6.7.5\",\"61.2.9.5\",\"87.3.1.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"68.7.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.7.8.0\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":274,\"moneyAvailable\":59230292.25,\"moneyMax\":222113595.9375,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":38,\"serversOnNetwork\":[\"32.2.0.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.5.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.5.1.1\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.1.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.1.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.5.1.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"61.5.1.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 69.780 seconds (t=9)\",\"Server security level on nectar-net weakened to 29.19800000000033. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 74.595 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.274000000000335. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 84.254 seconds (t=9)\",\"Server security level on nectar-net weakened to 35.242000000000345. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 86.097 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.34600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 84.391 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.95800000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 83.653 seconds (t=9)\",\"Server security level on nectar-net weakened to 32.136000000000344. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 80.186 seconds (t=9)\",\"Server security level on nectar-net weakened to 28.410000000000352. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 73.095 seconds (t=9)\",\"Server security level on nectar-net weakened to 24.546000000000355. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 65.742 seconds (t=9)\",\"Server security level on nectar-net weakened to 20.594000000000364. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 58.221 seconds (t=9)\",\"Server security level on nectar-net weakened to 17.30800000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 51.968 seconds (t=9)\",\"Server security level on nectar-net weakened to 13.802000000000373. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 45.296 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":842.4100000000547,\"onlineMoneyMade\":0,\"onlineExpGained\":394.416,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,99]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":1500000,\"moneyMax\":5625000,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.7.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.7.6.9\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.7.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.7.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"67.7.6.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"67.7.6.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 80.532 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.37400000000033. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 82.542 seconds (t=9)\",\"Server security level on nectar-net weakened to 35.430000000000355. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 86.454 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.920000000000364. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 85.484 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.22200000000034. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 82.252 seconds (t=9)\",\"Server security level on nectar-net weakened to 29.64600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 75.447 seconds (t=9)\",\"Server security level on nectar-net weakened to 26.676000000000354. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 69.795 seconds (t=9)\",\"Server security level on nectar-net weakened to 23.14400000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 63.074 seconds (t=9)\",\"Server security level on nectar-net weakened to 19.730000000000363. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 56.577 seconds (t=9)\",\"Server security level on nectar-net weakened to 14.752000000000372. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 47.104 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":734.4100000000301,\"onlineMoneyMade\":0,\"onlineExpGained\":322.704,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,81]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":2770166.424271556,\"moneyMax\":6468750,\"hackDifficulty\":6.129999999999947,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\",\"7.3.1.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"13.6.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.6.4.9\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.6.4.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.6.4.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"13.6.4.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"13.6.4.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 75.451 seconds (t=9)\",\"Server security level on nectar-net weakened to 31.668000000000323. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 79.295 seconds (t=9)\",\"Server security level on nectar-net weakened to 32.72400000000032. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 81.305 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.82000000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 85.293 seconds (t=9)\",\"Server security level on nectar-net weakened to 35.37000000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 86.340 seconds (t=9)\",\"Server security level on nectar-net weakened to 32.77200000000034. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 81.396 seconds (t=9)\",\"Server security level on nectar-net weakened to 30.09600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 76.304 seconds (t=9)\",\"Server security level on nectar-net weakened to 26.226000000000354. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 68.939 seconds (t=9)\",\"Server security level on nectar-net weakened to 24.04400000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 64.786 seconds (t=9)\",\"Server security level on nectar-net weakened to 18.630000000000365. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 54.484 seconds (t=9)\",\"Server security level on nectar-net weakened to 15.78000000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 49.060 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":806.4100000000465,\"onlineMoneyMade\":0,\"onlineExpGained\":358.56,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":2136169.686268609,\"moneyMax\":7031250,\"hackDifficulty\":7.174000000000001,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"96.9.4.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"8.6.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"8.6.3.4\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"8.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"8.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"8.6.3.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"8.6.3.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.585500%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.975 seconds (t=18)\",\"Available money on nectar-net grown by 0.535781%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 60.705 seconds (t=18)\",\"Available money on nectar-net grown by 0.494355%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 64.392 seconds (t=18)\",\"Available money on nectar-net grown by 0.478121%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.939 seconds (t=18)\",\"Available money on nectar-net grown by 0.455129%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.402 seconds (t=18)\",\"Available money on nectar-net grown by 0.460148%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.717 seconds (t=18)\",\"Available money on nectar-net grown by 0.460486%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.608 seconds (t=18)\",\"Available money on nectar-net grown by 0.488494%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 64.538 seconds (t=18)\",\"Available money on nectar-net grown by 0.536928%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 60.038 seconds (t=18)\",\"Available money on nectar-net grown by 0.572805%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 57.200 seconds (t=18)\",\"Available money on nectar-net grown by 0.665855%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 51.330 seconds (t=18)\",\"Available money on nectar-net grown by 0.729096%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 48.188 seconds (t=18)\",\"Available money on nectar-net grown by 0.844871%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 43.681 seconds (t=18)\",\"Available money on nectar-net grown by 1.066826%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 37.792 seconds (t=18)\",\"Available money on nectar-net grown by 1.199689%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 35.311 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1075.68,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,270,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-644319.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[36,32,40,31,34],[35,23,31,48,40],[35,18,47,45,40],[30,16,19,21,32],[41,28,3,26,5],[38,8,34,2,12],[39,38,10,3,36],[33,2,9,48,7],[7,14,18,36,38]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"93.8.0.5\",\"32.2.0.5\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"21.7.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.7.1.3\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.7.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.7.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"21.7.1.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"21.7.1.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 83.398 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.480000000000345. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 84.646 seconds (t=9)\",\"Server security level on nectar-net weakened to 35.82000000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 87.196 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.87200000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 83.489 seconds (t=9)\",\"Server security level on nectar-net weakened to 30.470000000000347. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 77.015 seconds (t=9)\",\"Server security level on nectar-net weakened to 27.260000000000353. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 70.907 seconds (t=9)\",\"Server security level on nectar-net weakened to 23.91000000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 64.531 seconds (t=9)\",\"Server security level on nectar-net weakened to 20.180000000000362. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 57.433 seconds (t=9)\",\"Server security level on nectar-net weakened to 16.60800000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 50.636 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":662.4100000000137,\"onlineMoneyMade\":0,\"onlineExpGained\":286.848,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,72]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-307978.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,22],[20,22],[5,12],[1,11],[25,32],[21,22]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":4239052.980128811,\"moneyMax\":7734375,\"hackDifficulty\":13.624000000000372,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"93.8.0.5\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.5.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.5.9.6\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.5.9.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.5.9.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"63.5.9.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"63.5.9.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.589739%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.683 seconds (t=18)\",\"Available money on nectar-net grown by 0.539256%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 60.419 seconds (t=18)\",\"Available money on nectar-net grown by 0.497310%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 64.106 seconds (t=18)\",\"Available money on nectar-net grown by 0.480237%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.714 seconds (t=18)\",\"Available money on nectar-net grown by 0.457098%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.177 seconds (t=18)\",\"Available money on nectar-net grown by 0.462160%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.492 seconds (t=18)\",\"Available money on nectar-net grown by 0.462447%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.382 seconds (t=18)\",\"Available money on nectar-net grown by 0.490761%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 64.307 seconds (t=18)\",\"Available money on nectar-net grown by 0.539742%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 59.813 seconds (t=18)\",\"Available money on nectar-net grown by 0.575924%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.975 seconds (t=18)\",\"Available money on nectar-net grown by 0.670073%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 51.098 seconds (t=18)\",\"Available money on nectar-net grown by 0.718910%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 48.653 seconds (t=18)\",\"Available money on nectar-net grown by 0.831197%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 44.147 seconds (t=18)\",\"Available money on nectar-net grown by 0.947243%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 40.618 seconds (t=18)\",\"Available money on nectar-net grown by 1.221171%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 34.961 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1075.68,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,270,0]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":313967.75233859854,\"moneyMax\":14062500,\"hackDifficulty\":26.176000000000364,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"96.9.4.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"32.2.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.2.0.5\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.2.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"32.2.0.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"32.2.0.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=36)\",\"Available money on nectar-net grown by 1.142457%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 58.211 seconds (t=36)\",\"Available money on nectar-net grown by 1.047761%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 61.941 seconds (t=36)\",\"Available money on nectar-net grown by 0.968536%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 65.622 seconds (t=36)\",\"Available money on nectar-net grown by 0.937369%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 67.163 seconds (t=36)\",\"Available money on nectar-net grown by 0.904399%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 68.953 seconds (t=36)\",\"Available money on nectar-net grown by 0.902814%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 68.953 seconds (t=36)\",\"Available money on nectar-net grown by 0.939407%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 66.782 seconds (t=36)\",\"Available money on nectar-net grown by 0.957204%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 65.775 seconds (t=36)\",\"Available money on nectar-net grown by 1.050428%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 61.262 seconds (t=36)\",\"Available money on nectar-net grown by 1.155734%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 57.060 seconds (t=36)\",\"Available money on nectar-net grown by 1.319683%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 51.875 seconds (t=36)\",\"Available money on nectar-net grown by 1.574637%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 45.986 seconds (t=36)\",\"Available money on nectar-net grown by 1.632479%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 44.905 seconds (t=36)\",\"Available money on nectar-net grown by 2.042090%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 39.029 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":2007.936,\"threads\":36,\"dataMap\":{\"21.7.1.3\":[0,0,504,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"8.6.3.4\",\"58.8.7.5\",\"68.7.8.0\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"93.8.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.8.0.5\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.8.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.8.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"93.8.0.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"93.8.0.5\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 85.111 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.79200000000034. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 85.240 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.796000000000355. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 85.248 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.50800000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 82.797 seconds (t=9)\",\"Server security level on nectar-net weakened to 32.58600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 81.042 seconds (t=9)\",\"Server security level on nectar-net weakened to 27.960000000000353. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 72.239 seconds (t=9)\",\"Server security level on nectar-net weakened to 24.996000000000354. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 66.598 seconds (t=9)\",\"Server security level on nectar-net weakened to 20.144000000000364. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 57.365 seconds (t=9)\",\"Server security level on nectar-net weakened to 17.75800000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 52.824 seconds (t=9)\",\"Server security level on nectar-net weakened to 13.352000000000373. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 44.439 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":698.4100000000219,\"onlineMoneyMade\":0,\"onlineExpGained\":322.704,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,81]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-172593.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,1,1,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732534.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[5,14],[18,26],[16,23],[17,20],[16,24],[17,27],[6,16],[15,25],[25,29],[17,18],[18,24],[23,30]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"8.6.3.4\",\"21.7.1.3\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.9.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.9.2.1\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.9.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.9.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"92.9.2.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"92.9.2.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 77.145 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.82400000000033. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 83.398 seconds (t=9)\",\"Server security level on nectar-net weakened to 34.34200000000034. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 84.384 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.89600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 83.535 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.354000000000354. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 82.504 seconds (t=9)\",\"Server security level on nectar-net weakened to 31.686000000000345. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 79.329 seconds (t=9)\",\"Server security level on nectar-net weakened to 28.86000000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 73.951 seconds (t=9)\",\"Server security level on nectar-net weakened to 24.096000000000355. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 64.885 seconds (t=9)\",\"Server security level on nectar-net weakened to 20.75200000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 58.522 seconds (t=9)\",\"Server security level on nectar-net weakened to 18.208000000000368. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 53.680 seconds (t=9)\",\"Server security level on nectar-net weakened to 12.902000000000374. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 43.583 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":770.4100000000383,\"onlineMoneyMade\":0,\"onlineExpGained\":358.56,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-576113-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":948215828,\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":766521.192271425,\"moneyMax\":11250000,\"hackDifficulty\":28.454000000000292,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"32.2.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.2.0.8\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.2.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"32.2.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.2.0.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"32.2.0.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.597315%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.171 seconds (t=18)\",\"Available money on nectar-net grown by 0.545655%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 59.901 seconds (t=18)\",\"Available money on nectar-net grown by 0.501977%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 63.655 seconds (t=18)\",\"Available money on nectar-net grown by 0.484586%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.275 seconds (t=18)\",\"Available money on nectar-net grown by 0.460981%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.732 seconds (t=18)\",\"Available money on nectar-net grown by 0.466183%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.053 seconds (t=18)\",\"Available money on nectar-net grown by 0.466474%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 66.938 seconds (t=18)\",\"Available money on nectar-net grown by 0.495360%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 63.856 seconds (t=18)\",\"Available money on nectar-net grown by 0.517569%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 61.728 seconds (t=18)\",\"Available money on nectar-net grown by 0.579077%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.750 seconds (t=18)\",\"Available money on nectar-net grown by 0.674345%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 50.873 seconds (t=18)\",\"Available money on nectar-net grown by 0.694901%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 49.804 seconds (t=18)\",\"Available money on nectar-net grown by 0.834564%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 44.037 seconds (t=18)\",\"Available money on nectar-net grown by 0.926326%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 41.194 seconds (t=18)\",\"Available money on nectar-net grown by 1.186239%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 35.536 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1075.68,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,270,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"96.9.4.8\",\"61.2.0.4\",\"81.9.8.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"96.9.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.9.4.8\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.9.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.9.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"96.9.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"96.9.4.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 81.229 seconds (t=18)\",\"Server security level on nectar-net weakened to 30.21000000000035. Gained 71.7120 hacking exp (t=18)\",\"Executing weaken() on server nectar-net in 76.521 seconds (t=18)\",\"Server security level on nectar-net weakened to 25.896000000000353. Gained 71.7120 hacking exp (t=18)\",\"Executing weaken() on server nectar-net in 68.311 seconds (t=18)\",\"Server security level on nectar-net weakened to 21.814000000000362. Gained 71.7120 hacking exp (t=18)\",\"Executing weaken() on server nectar-net in 60.543 seconds (t=18)\",\"Server security level on nectar-net weakened to 18.596000000000366. Gained 71.7120 hacking exp (t=18)\",\"Executing weaken() on server nectar-net in 54.419 seconds (t=18)\",\"Server security level on nectar-net weakened to 15.01800000000037. Gained 71.7120 hacking exp (t=18)\",\"Executing weaken() on server nectar-net in 47.610 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":374.4099999999873,\"onlineMoneyMade\":0,\"onlineExpGained\":358.56,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,0,90]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-781221-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[16,17],[20,23],[23,31],[4,9],[17,27],[12,13],[3,8],[24,29]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":18002666.92416452,\"moneyMax\":28125000,\"hackDifficulty\":24.320000000000032,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"13.6.4.9\",\"63.5.9.6\",\"32.2.0.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"94.6.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.6.7.5\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"94.6.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"94.6.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"94.6.7.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"94.6.7.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.571188%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 57.992 seconds (t=18)\",\"Available money on nectar-net grown by 0.523846%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 61.716 seconds (t=18)\",\"Available money on nectar-net grown by 0.484180%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.397 seconds (t=18)\",\"Available money on nectar-net grown by 0.468601%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 66.944 seconds (t=18)\",\"Available money on nectar-net grown by 0.452121%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.728 seconds (t=18)\",\"Available money on nectar-net grown by 0.451329%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.728 seconds (t=18)\",\"Available money on nectar-net grown by 0.469619%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 66.563 seconds (t=18)\",\"Available money on nectar-net grown by 0.478572%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.549 seconds (t=18)\",\"Available money on nectar-net grown by 0.525108%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 61.037 seconds (t=18)\",\"Available money on nectar-net grown by 0.577738%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.835 seconds (t=18)\",\"Available money on nectar-net grown by 0.647565%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 52.341 seconds (t=18)\",\"Available money on nectar-net grown by 0.787082%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 45.767 seconds (t=18)\",\"Available money on nectar-net grown by 0.815986%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 44.680 seconds (t=18)\",\"Available money on nectar-net grown by 1.020653%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 38.803 seconds (t=18)\",\"Available money on nectar-net grown by 1.161394%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 35.966 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1075.68,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,270,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":197,\"moneyAvailable\":49418548.5,\"moneyMax\":185319556.875,\"hackDifficulty\":34,\"baseDifficulty\":34,\"minDifficulty\":11,\"serverGrowth\":40,\"serversOnNetwork\":[\"7.3.1.8\",\"47.8.5.9\",\"10.9.9.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"10.9.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.9.9.5\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-821792.cct\",\"type\":\"Total Ways to Sum\",\"data\":70,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":248,\"moneyAvailable\":43379359.5,\"moneyMax\":162672598.125,\"hackDifficulty\":40,\"baseDifficulty\":40,\"minDifficulty\":13,\"serverGrowth\":33,\"serversOnNetwork\":[\"94.6.7.5\",\"56.5.0.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"10.3.2.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.3.2.6\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.3.2.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.3.2.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"10.3.2.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"10.3.2.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.591348%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.567 seconds (t=18)\",\"Available money on nectar-net grown by 0.540673%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 60.303 seconds (t=18)\",\"Available money on nectar-net grown by 0.498515%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 63.990 seconds (t=18)\",\"Available money on nectar-net grown by 0.481303%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.604 seconds (t=18)\",\"Available money on nectar-net grown by 0.458062%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.061 seconds (t=18)\",\"Available money on nectar-net grown by 0.463146%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.382 seconds (t=18)\",\"Available money on nectar-net grown by 0.463488%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 67.273 seconds (t=18)\",\"Available money on nectar-net grown by 0.491933%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 64.197 seconds (t=18)\",\"Available money on nectar-net grown by 0.541086%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 59.697 seconds (t=18)\",\"Available money on nectar-net grown by 0.577539%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 56.865 seconds (t=18)\",\"Available money on nectar-net grown by 0.672260%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 50.989 seconds (t=18)\",\"Available money on nectar-net grown by 0.721295%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 48.544 seconds (t=18)\",\"Available money on nectar-net grown by 0.837779%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 43.922 seconds (t=18)\",\"Available money on nectar-net grown by 0.930289%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 41.078 seconds (t=18)\",\"Available money on nectar-net grown by 1.206715%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 35.201 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1075.68,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,270,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"23.6.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.6.8.2\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.6.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"23.6.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"23.6.8.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=146)\",\"Available money on nectar-net grown by 4.523471%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 60.610 seconds (t=146)\",\"Available money on nectar-net grown by 4.154714%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 64.365 seconds (t=146)\",\"Available money on nectar-net grown by 3.848018%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 68.034 seconds (t=146)\",\"Available money on nectar-net grown by 3.731919%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 69.501 seconds (t=146)\",\"Available money on nectar-net grown by 3.723644%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 69.514 seconds (t=146)\",\"Available money on nectar-net grown by 3.657173%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 70.387 seconds (t=146)\",\"Available money on nectar-net grown by 3.814562%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 68.101 seconds (t=146)\",\"Available money on nectar-net grown by 4.110483%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 64.353 seconds (t=146)\",\"Available money on nectar-net grown by 4.265193%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 62.587 seconds (t=146)\",\"Available money on nectar-net grown by 4.891738%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 56.704 seconds (t=146)\",\"Available money on nectar-net grown by 5.464631%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 52.514 seconds (t=146)\",\"Available money on nectar-net grown by 6.399171%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 47.317 seconds (t=146)\",\"Available money on nectar-net grown by 7.935878%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 41.434 seconds (t=146)\",\"Available money on nectar-net grown by 8.821590%. Gained 581.6640 hacking exp (t=146)\",\"Executing grow() on server nectar-net in 38.977 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":8143.295999999999,\"threads\":146,\"dataMap\":{\"21.7.1.3\":[0,0,2044,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":520,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"hackDifficulty\":51,\"baseDifficulty\":51,\"minDifficulty\":17,\"serverGrowth\":44,\"serversOnNetwork\":[\"87.3.1.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"21.6.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.6.4.3\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1094,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"hackDifficulty\":62,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":54,\"serversOnNetwork\":[\"0.4.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.8.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.8.1.6\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":793,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"hackDifficulty\":43,\"baseDifficulty\":43,\"minDifficulty\":14,\"serverGrowth\":56,\"serversOnNetwork\":[\"2.4.8.2\",\"90.7.3.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"99.6.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.6.2.3\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"99.6.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"99.6.2.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"99.6.2.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=18)\",\"Available money on nectar-net grown by 0.556210%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 59.106 seconds (t=18)\",\"Available money on nectar-net grown by 0.511097%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 62.848 seconds (t=18)\",\"Available money on nectar-net grown by 0.473327%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 66.524 seconds (t=18)\",\"Available money on nectar-net grown by 0.459074%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 68.003 seconds (t=18)\",\"Available money on nectar-net grown by 0.443653%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 69.739 seconds (t=18)\",\"Available money on nectar-net grown by 0.448450%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 69.054 seconds (t=18)\",\"Available money on nectar-net grown by 0.466692%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 66.877 seconds (t=18)\",\"Available money on nectar-net grown by 0.475436%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 65.863 seconds (t=18)\",\"Available money on nectar-net grown by 0.521359%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 61.363 seconds (t=18)\",\"Available money on nectar-net grown by 0.597119%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 55.480 seconds (t=18)\",\"Available money on nectar-net grown by 0.641928%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 52.660 seconds (t=18)\",\"Available money on nectar-net grown by 0.761806%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 46.772 seconds (t=18)\",\"Available money on nectar-net grown by 0.846283%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 43.629 seconds (t=18)\",\"Available money on nectar-net grown by 1.007091%. Gained 71.7120 hacking exp (t=18)\",\"Executing grow() on server nectar-net in 39.123 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":1003.968,\"threads\":18,\"dataMap\":{\"21.7.1.3\":[0,0,252,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573517.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,28],[17,20],[5,15],[8,16],[14,24],[4,10],[23,31],[23,33],[2,8],[14,20],[8,10],[20,26],[7,16],[1,3],[19,20],[1,4],[19,23],[4,10],[4,9]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":506,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"87.0.5.1\",\"24.7.8.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"68.9.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.9.7.5\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.9.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"68.9.7.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"68.9.7.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=73)\",\"Available money on nectar-net grown by 2.388985%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 57.426 seconds (t=73)\",\"Available money on nectar-net grown by 2.185002%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 61.149 seconds (t=73)\",\"Available money on nectar-net grown by 2.015195%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 64.837 seconds (t=73)\",\"Available money on nectar-net grown by 1.948695%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 66.390 seconds (t=73)\",\"Available money on nectar-net grown by 1.878696%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 68.168 seconds (t=73)\",\"Available money on nectar-net grown by 1.875312%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 68.168 seconds (t=73)\",\"Available money on nectar-net grown by 1.926957%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 66.688 seconds (t=73)\",\"Available money on nectar-net grown by 1.991190%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 64.983 seconds (t=73)\",\"Available money on nectar-net grown by 2.190016%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 60.483 seconds (t=73)\",\"Available money on nectar-net grown by 2.337238%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 57.651 seconds (t=73)\",\"Available money on nectar-net grown by 2.719131%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 51.774 seconds (t=73)\",\"Available money on nectar-net grown by 3.110789%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 47.262 seconds (t=73)\",\"Available money on nectar-net grown by 3.457299%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 44.126 seconds (t=73)\",\"Available money on nectar-net grown by 4.375792%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 38.243 seconds (t=73)\",\"Available money on nectar-net grown by 5.017005%. Gained 290.8320 hacking exp (t=73)\",\"Executing grow() on server nectar-net in 35.405 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":4362.48,\"threads\":73,\"dataMap\":{\"21.7.1.3\":[0,0,1095,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-650962.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[194,83,69,175,119,138,105,144,138,73,122,175,7,104,136,130,74,118,63,84,11,114,4,188,34,32,179,54,142,14,154,105,65,192,79,18,87,8,149,64,53],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":343,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"61.2.0.4\",\"37.9.6.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"81.9.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.9.8.5\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"81.9.8.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"81.9.8.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 55.824 seconds (t=36)\",\"Available money on nectar-net grown by 1.194717%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 56.396 seconds (t=36)\",\"Available money on nectar-net grown by 1.091384%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 60.126 seconds (t=36)\",\"Available money on nectar-net grown by 1.004142%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 63.875 seconds (t=36)\",\"Available money on nectar-net grown by 0.969232%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 65.494 seconds (t=36)\",\"Available money on nectar-net grown by 0.922124%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 67.952 seconds (t=36)\",\"Available money on nectar-net grown by 0.932423%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 67.273 seconds (t=36)\",\"Available money on nectar-net grown by 0.933116%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 67.157 seconds (t=36)\",\"Available money on nectar-net grown by 0.990908%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 64.082 seconds (t=36)\",\"Available money on nectar-net grown by 1.090545%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 59.587 seconds (t=36)\",\"Available money on nectar-net grown by 1.167748%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 56.640 seconds (t=36)\",\"Available money on nectar-net grown by 1.361949%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 50.763 seconds (t=36)\",\"Available money on nectar-net grown by 1.403885%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 49.695 seconds (t=36)\",\"Available money on nectar-net grown by 1.696064%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 43.812 seconds (t=36)\",\"Available money on nectar-net grown by 1.885438%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 40.968 seconds (t=36)\",\"Available money on nectar-net grown by 2.455403%. Gained 143.4240 hacking exp (t=36)\",\"Executing grow() on server nectar-net in 35.086 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":884.4100000000642,\"onlineMoneyMade\":0,\"onlineExpGained\":2151.36,\"threads\":36,\"dataMap\":{\"21.7.1.3\":[0,0,540,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":214,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"32.2.0.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"0.4.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.4.7.7\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"0.4.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"0.4.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"0.4.7.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"nectar-net\"],\"server\":\"0.4.7.7\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server nectar-net in 84.091 seconds (t=9)\",\"Server security level on nectar-net weakened to 33.03600000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 81.898 seconds (t=9)\",\"Server security level on nectar-net weakened to 29.31000000000035. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 74.808 seconds (t=9)\",\"Server security level on nectar-net weakened to 23.646000000000356. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 64.029 seconds (t=9)\",\"Server security level on nectar-net weakened to 21.20200000000036. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 59.378 seconds (t=9)\",\"Server security level on nectar-net weakened to 17.00600000000037. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 51.393 seconds (t=9)\",\"Server security level on nectar-net weakened to 14.702000000000371. Gained 35.8560 hacking exp (t=9)\",\"Executing weaken() on server nectar-net in 47.008 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":446.2099999999832,\"onlineMoneyMade\":0,\"onlineExpGained\":215.136,\"threads\":9,\"dataMap\":{\"21.7.1.3\":[0,0,0,54]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655897-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[8,15],[19,24],[20,27],[17,26],[19,20],[9,12],[5,14],[9,18],[11,17],[9,13],[15,25],[8,11],[11,20],[1,6],[19,28],[4,7],[24,33],[8,11]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-464694.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))a((((a(aaa)a)))()a\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":538,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"24.7.8.4\",\"21.6.4.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"7.3.1.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.3.1.8\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.3.1.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.3.1.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"7.3.1.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"nectar-net\"],\"server\":\"7.3.1.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server nectar-net in 35.086 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":14.209999999999983,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":4,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":56,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"67.7.6.9\",\"94.6.7.5\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"79.3.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.3.6.2\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"53.2.8.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"47.4.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.4.5.1\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.9.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.9.0.0\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"28.5.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.5.2.4\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"28.5.2.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"28.5.2.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.116,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700908479999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"37.0.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.0.3.8\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.0.3.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"37.0.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"75.1.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"75.1.3.0\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"75.1.3.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"75.1.3.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"80.1.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.1.9.1\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.1.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"80.1.9.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.9.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.9.4.0\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"21.9.4.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"21.9.4.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"17.9.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.9.8.4\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.9.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"17.9.8.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.8.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.8.1.9\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.8.1.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"9.8.1.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.4.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.4.1.0\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.4.1.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"92.4.1.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"73.7.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.7.4.0\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"73.7.4.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"73.7.4.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.4.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.4.6.1\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"52.4.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"52.4.6.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.8.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.8.5.1\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.8.5.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"50.8.5.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.6.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.6.1.6\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.6.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"25.6.1.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.0.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.0.3.2\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.0.3.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"4.0.3.2\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.8.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.8.7.4\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.8.7.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"23.8.7.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"42.9.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.9.9.6\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.9.9.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"42.9.9.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.117,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700918559999995,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"90.6.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.6.6.4\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.6.6.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"90.6.6.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.5.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.5.3.0\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"26.5.3.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"26.5.3.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"66.1.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.1.5.4\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.1.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"66.1.5.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"77.8.4.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.8.4.2\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.8.4.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"77.8.4.2\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"22.9.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.9.9.0\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.9.9.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"22.9.9.0\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"36.7.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.7.3.5\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"36.7.3.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"36.7.3.5\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.0.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.0.9.6\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.0.9.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"63.0.9.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"31.1.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.1.4.3\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"31.1.4.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"31.1.4.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1180000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700928639999994,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"17.3.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.3.6.2\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.3.6.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"17.3.6.2\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1190000000006,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700938719999993,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"36.5.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.5.8.8\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"36.5.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"36.5.8.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\",\"Server security level on foodnstuff weakened to 3. Gained 10.3680 hacking exp (t=4)\",\"Executing weaken() on server foodnstuff in 19.316 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":2748.1190000000006,\"offlineMoneyMade\":0,\"offlineExpGained\":27.700938719999993,\"onlineRunningTime\":12413.010000010107,\"onlineMoneyMade\":0,\"onlineExpGained\":6573.312000000078,\"threads\":4,\"dataMap\":{\"61.5.1.1\":[0,0,0,2536]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":3956.4726769230692,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":7660.8419589745145,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":3960.7147076923,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":13335.99512307682,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":15505.034410256243,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":868.1324000000005,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":38937.92761025714,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"41.0.3.1\",\"BitRunners Server\":\"99.6.2.3\",\"The Black Hand Server\":\"68.9.7.5\",\"NiteSec Server\":\"81.9.8.5\",\"The Dark Army Server\":\"0.4.7.7\",\"CyberSec Server\":\"7.3.1.8\",\"Daedalus Server\":\"79.3.6.2\",\"w0r1d_d43m0n\":\"47.4.5.1\",\"Darkweb Server\":\"94.9.0.0\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":21155.852222257516,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":19.715031596940054,\"cap\":130048076,\"totalShares\":122600000,\"maxShares\":24500000,\"posTxtEl\":0}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":27574.091345625446,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":18.35957225383554,\"cap\":188163764,\"totalShares\":81600000,\"maxShares\":16300000,\"posTxtEl\":0}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":13005.678009847814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":12.605398462617083,\"cap\":166085911,\"totalShares\":107900000,\"maxShares\":21600000,\"posTxtEl\":0}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":20015.73612349775,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":14.7345772860521,\"cap\":321557185,\"totalShares\":74800000,\"maxShares\":15000000,\"posTxtEl\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":39074.86426529278,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.443241582764456,\"cap\":362868400,\"totalShares\":53900000,\"maxShares\":10800000,\"posTxtEl\":0}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":61602.67651752419,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":false,\"otlkMag\":17.92308256038145,\"cap\":358909117,\"totalShares\":34700000,\"maxShares\":6900000,\"posTxtEl\":0}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":21766.241222651453,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":9.590090115034842,\"cap\":233972143,\"totalShares\":78200000,\"maxShares\":15600000,\"posTxtEl\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":31289.84143351893,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":17.809629704988097,\"cap\":419970112,\"totalShares\":58200000,\"maxShares\":11600000,\"posTxtEl\":0}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":22357.503206659458,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.9928165195693,\"cap\":40708756,\"totalShares\":55200000,\"maxShares\":11000000,\"posTxtEl\":0}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8814.396122506392,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.957729277369655,\"cap\":73450003,\"totalShares\":95500000,\"maxShares\":19100000,\"posTxtEl\":0}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15364.406991571474,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":9.070249891032455,\"cap\":157199475,\"totalShares\":65500000,\"maxShares\":13100000,\"posTxtEl\":0}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":14795.198666276065,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":7.800332788887459,\"cap\":136369338,\"totalShares\":75500000,\"maxShares\":15100000,\"posTxtEl\":0}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":17509.936575766624,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":7.768284124728803,\"cap\":333036707,\"totalShares\":52200000,\"maxShares\":10400000,\"posTxtEl\":0}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":26525.405807322546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":10.139273599589126,\"cap\":494074549,\"totalShares\":38900000,\"maxShares\":7800000,\"posTxtEl\":0}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":8296.55285403063,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.761666470841045,\"cap\":93836946,\"totalShares\":79500000,\"maxShares\":15900000,\"posTxtEl\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13811.773597325966,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":4.476916123336819,\"cap\":130673558,\"totalShares\":46500000,\"maxShares\":9300000,\"posTxtEl\":0}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":28726.272163062873,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":8.754828823378213,\"cap\":102501289,\"totalShares\":25500000,\"maxShares\":5100000,\"posTxtEl\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":27162.159814823717,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":10.365394045085612,\"cap\":168294132,\"totalShares\":27000000,\"maxShares\":5400000,\"posTxtEl\":0}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":29482.692912717994,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":5.293055489098339,\"cap\":466983957,\"totalShares\":22700000,\"maxShares\":4500000,\"posTxtEl\":0}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4417.000631005836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.59,\"b\":true,\"otlkMag\":1.4113166113468314,\"cap\":85390601,\"totalShares\":106600000,\"maxShares\":21300000,\"posTxtEl\":0}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5326.627643355435,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":5.774447769231354,\"cap\":79456340,\"totalShares\":59000000,\"maxShares\":11800000,\"posTxtEl\":0}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4932.355014467733,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":1.0581389843571418,\"cap\":112735910,\"totalShares\":39400000,\"maxShares\":7900000,\"posTxtEl\":0}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":8304.397522438778,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.94,\"b\":true,\"otlkMag\":9.152611096339575,\"cap\":147177206,\"totalShares\":29600000,\"maxShares\":5900000,\"posTxtEl\":0}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":8529.91209799825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.56,\"b\":false,\"otlkMag\":3.498670781206482,\"cap\":55782770,\"totalShares\":27300000,\"maxShares\":5500000,\"posTxtEl\":0}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1606.169846872457,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":false,\"otlkMag\":3.4385835070734525,\"cap\":46496796,\"totalShares\":98600000,\"maxShares\":19700000,\"posTxtEl\":0}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2055.958160992246,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.13,\"b\":true,\"otlkMag\":0.7661798590205019,\"cap\":8049672,\"totalShares\":27600000,\"maxShares\":5500000,\"posTxtEl\":0}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6371.654662090467,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.93,\"b\":true,\"otlkMag\":0.4468758675003481,\"cap\":158784052,\"totalShares\":8500000,\"maxShares\":1700000,\"posTxtEl\":0}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3179.9805065633936,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":0.9608774112953747,\"cap\":22879316,\"totalShares\":13500000,\"maxShares\":2700000,\"posTxtEl\":0}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1407.1290195284157,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.77,\"b\":false,\"otlkMag\":0.8778001858033859,\"cap\":36964444,\"totalShares\":18800000,\"maxShares\":3800000,\"posTxtEl\":0}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":712.9553711936968,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.98,\"b\":true,\"otlkMag\":1.2664190002785736,\"cap\":7061892,\"totalShares\":80200000,\"maxShares\":16000000,\"posTxtEl\":0}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1371.3171241607488,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":false,\"otlkMag\":13.935118348135678,\"cap\":16460623,\"totalShares\":111200000,\"maxShares\":22200000,\"posTxtEl\":0}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":29801.78523827395,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":8.618577760759482,\"cap\":211179894,\"totalShares\":12800000,\"maxShares\":2600000,\"posTxtEl\":0}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18420.214222744708,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":11.011332359297526,\"cap\":321633707,\"totalShares\":27400000,\"maxShares\":5500000,\"posTxtEl\":0}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":17,\"lastUpdate\":1549875991739}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.43.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}