{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":609,\"hp\":29,\"max_hp\":29,\"strength\":207,\"defense\":198,\"dexterity\":165,\"agility\":165,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.435066479,\"hacking_speed_mult\":1.3324779233844153,\"hacking_money_mult\":1.3608133999999998,\"hacking_grow_mult\":1.183316,\"hacking_exp\":78519603.95753798,\"strength_exp\":39553.875507101206,\"defense_exp\":32453.80437633843,\"dexterity_exp\":26466.82417430508,\"agility_exp\":26466.82417430508,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.5976399419823502,\"strength_mult\":1.4909781599999998,\"defense_mult\":1.4909781599999998,\"dexterity_mult\":1.30460589,\"agility_mult\":1.30460589,\"charisma_mult\":1.6400759760000003,\"hacking_exp_mult\":1.9363830356640002,\"strength_exp_mult\":1.646584214,\"defense_exp_mult\":1.646584214,\"dexterity_exp_mult\":1.646584214,\"agility_exp_mult\":1.646584214,\"charisma_exp_mult\":1.646584214,\"company_rep_mult\":1.9759010568,\"faction_rep_mult\":1.4968947400000001,\"money\":\"5102080305.1965514252\",\"total_money\":\"266178986936004060.88\",\"lifetime_money\":\"266178986936004060.88\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Aevum\",\"location\":\"Aevum Slums\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"93.0.0.2\",\"79.5.3.0\",\"52.1.0.3\",\"73.2.4.1\",\"36.9.1.6\",\"95.2.4.4\",\"56.2.3.6\",\"69.2.0.7\",\"95.1.4.8\",\"77.5.7.2\",\"92.3.0.2\",\"67.2.1.0\",\"76.6.4.3\",\"74.3.9.8\",\"33.8.9.5\",\"5.6.1.9\",\"36.1.5.7\",\"79.3.1.3\",\"82.1.2.5\",\"10.3.5.6\",\"72.2.9.8\",\"27.8.1.0\",\"49.4.3.0\",\"46.4.5.1\",\"54.2.1.6\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":104478666.06188218,\"onlineTimeSeconds\":91132.39999923644,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":104343672.24324717,\"onlineTimeSeconds\":91132.39999923644,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":104204575.98911555,\"onlineTimeSeconds\":91132.39999923644,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":103943649.41682409,\"onlineTimeSeconds\":91132.39999923644,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":103836465.79330255,\"onlineTimeSeconds\":89932.19999925191,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":103524694.56314002,\"onlineTimeSeconds\":89872.19999925279,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":103363423.79704742,\"onlineTimeSeconds\":89542.19999925759,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":103208241.4546356,\"onlineTimeSeconds\":89272.19999926152,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":103045062.0271663,\"onlineTimeSeconds\":88737.1999992693,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":102887152.2860997,\"onlineTimeSeconds\":88197.19999927716,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":102604632.09268063,\"onlineTimeSeconds\":86637.19999929986,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":102256307.67962992,\"onlineTimeSeconds\":83786.99999934134,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":101756633.81250335,\"onlineTimeSeconds\":80023.7999993961,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":101001035.31458464,\"onlineTimeSeconds\":76873.59999944193,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":99999329.29597758,\"onlineTimeSeconds\":74443.5999994773,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":98092878.54282919,\"onlineTimeSeconds\":72493.39999950568,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":95863879.53491956,\"onlineTimeSeconds\":70483.39999953493,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":88426575.32864974,\"onlineTimeSeconds\":63688.999999634296,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":82433020.77817827,\"onlineTimeSeconds\":58678.59999970708,\"moneyGainRatePerSecond\":1459.795520558989}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":65548384.682210445,\"onlineTimeSeconds\":45716.799999895724,\"moneyGainRatePerSecond\":1459.795520558989}}],\"totalHacknetNodeProduction\":29195.91041117979,\"factions\":[\"CyberSec\",\"Netburners\",\"NiteSec\",\"The Black Hand\",\"Sector-12\",\"Tian Di Hui\",\"Slum Snakes\",\"Tetrads\",\"BitRunners\",\"Aevum\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":13,\"karma\":-39,\"crime_money_mult\":1.183316,\"crime_success_mult\":1.183316,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":500,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3016476000000001,\"hacknet_node_money_mult\":2.984433887875,\"hacknet_node_purchase_cost_mult\":0.6298122599999999,\"hacknet_node_ram_cost_mult\":0.8232839999999999,\"hacknet_node_core_cost_mult\":0.8232839999999999,\"hacknet_node_level_cost_mult\":0.6997914,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1550391602109,\"totalPlaytime\":1521878800,\"playtimeSinceLastAug\":91143600,\"playtimeSinceLastBitnode\":514977200,\"scriptProdSinceLastAug\":38779771050,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":4096,\"ramUsed\":55.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport { programs } from './lib-world.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let loop = !ns.args.includes('noloop');\\n    let debug = ns.args.includes('debug');\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\n\\n    do {\\n        await run(ns, log);\\n        await ns.sleep(30000);\\n    } while (loop)\\n}\\n\\n/**\\n * @param {IGame} ns\\n * @param {Logger} log\\n */\\nasync function run(ns, log) {\\n    let purchased = true;\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\n    for (let program of programs()) {\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\n            cash = cash - program.price;\\n        }\\n    }\\n\\n    log.debug('loading costs');\\n    let numNodes = ns.hacknet.numNodes();\\n    let maxProduction = 0;\\n    for (let i = 0; i < numNodes; i++) {\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\n    }\\n\\n    let costCap = (maxProduction * 60 * 60 * 24) || Infinity;\\n    /**\\n     * @param {string} name\\n     * @param {number} uncappedCost\\n     */\\n    function getCappedCost(name, uncappedCost) {\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\n            return Infinity;\\n        } else {\\n            return uncappedCost;\\n        }\\n    }\\n\\n    let costs = [];\\n    for (let i = 0; i < numNodes; i++) {\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\n    }\\n\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\n\\n    log.debug('begin purchase run');\\n    while (purchased) {\\n        purchased = false;\\n\\n        let minCost = Math.min.apply(null, costs);\\n        let minIdx = costs.indexOf(minCost);\\n        \\n        if (buyNodeCost < minCost) {\\n            if (buyNodeCost <= cash) {\\n                let newIdx = numNodes;\\n                \\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\n                ns.hacknet.purchaseNode();\\n                cash = cash - buyNodeCost;\\n                log.info(`remaining budget: ${format.money(cash)}`);\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\n                \\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\n                \\n                numNodes = numNodes + 1;\\n                purchased = true;\\n            }\\n        } else if (minCost <= cash) {\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\n            let itemIdx = minIdx - (nodeIdx * 3);\\n            \\n            let cost = minCost;\\n            let count = 1;\\n            \\n            let getF;\\n            let buyF;\\n            let n;\\n            if (itemIdx == 0) {\\n                n = 'level'\\n                getF = ns.hacknet.getLevelUpgradeCost;\\n                buyF = ns.hacknet.upgradeLevel;\\n            } else if (itemIdx == 1) {\\n                n = 'ram';\\n                getF = ns.hacknet.getRamUpgradeCost;\\n                buyF = ns.hacknet.upgradeRam;\\n            } else if (itemIdx == 2) {\\n                n = 'core';\\n                getF = ns.hacknet.getCoreUpgradeCost;\\n                buyF = ns.hacknet.upgradeCore;\\n            }\\n\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\n                count = count + 1;\\n                cost = cost + getF(nodeIdx, count);\\n            }\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\n            buyF(nodeIdx, count);\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\n            \\n            if (count == 1) {\\n                cash = cash - cost;               \\n            } else {\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\n            }\\n            log.info(`remaining budget: ${format.money(cash)}`);\\n            \\n            purchased = true;\\n        }\\n    }\\n\\n    log.debug('purchase run complete');\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\n    let specify = typeof ns.args[0] === 'number';\\n    let debug = ns.args.includes('debug');\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\n\\n    let existingServers = ns.getPurchasedServers();\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\n\\n    let minRam = 0;\\n    let maxRam = 0;\\n\\n    if (existingServers.length > 0) {\\n        for (var existing of existingServers) {\\n            let ram = ns.getServerRam(existing);\\n            if (ram[0] > maxRam) maxRam = ram[0];\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\n        }\\n    }\\n\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\n\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let limit = specify ? ns.args[0] : ns.getPurchasedServerLimit();\\n\\n    let p = 0;\\n    for (let power = 0; power < 25; power++) {\\n        let actual = limit;\\n        for (var existing of existingServers) {\\n            let existingRam = ns.getServerRam(existing);\\n            if (existingRam[0] >= Math.pow(2, power)) {\\n                actual = Math.max(actual -1, 0);\\n            }\\n        }\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\n        if (cost * actual < cash) p = power;\\n    }\\n\\n    let actual = limit;\\n    for (var existing of existingServers) {\\n        let existingRam = ns.getServerRam(existing);\\n        if (existingRam[0] >= Math.pow(2, p)) {\\n            actual = Math.max(actual -1, 0);\\n        }\\n    }\\n\\n    let ram = Math.pow(2, p);\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\n\\n    if (ram > minRam || existingServers.length < limit) {\\n        let processes = [];\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\n                let ps = ns.ps(existingServers[i]);\\n                if (ps.length > 0) {\\n                    processes.push(existingServers[i]);\\n                }\\n            }\\n        }\\n\\n        if (processes.length > 0) {\\n            if (dryRun) {\\n                log.info('scripts running on existing servers, continuing dry run');    \\n            } else {\\n                log.info('scripts running on existing servers, exit');\\n                ns.exit();\\n            }\\n        }\\n\\n        log.info('deleting existing servers...');\\n        let sold = [];\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\n                log.debug(`delete ${existingServers[i]}`);\\n                sold.push(existingServers[i]);\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\n            } else {\\n                log.debug(`keep ${existingServers[i]}`);\\n            }\\n        }\\n\\n        log.info('buying new servers...');\\n        for (let i = 0; i < limit; i++) {\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\n                log.debug(`buy bot${i}`);\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\n            }\\n        }\\n    } else {\\n        log.info('nothing to do, exit');\\n    }\\n}\",\"ramUsage\":9.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.script\",\"code\":\"import * as servers from 'lib-servers.js';\\n\\ntprint(servers.map(ns));\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as world from './lib-world.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let log = new Logger(ns, {});\\n    let host = ns.args[0]\\n\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\n\\n    if (ns.args.length > 1) {\\n        let target = ns.args[1];\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\n        worker.enrol(ns);\\n        await ns.exec('ms-control.js', host, 1, target);\\n    }\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of servers.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        let bots = ns.getPurchasedServers();\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of servers.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    let targets = [];\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        ns.spawn('dh-control.js', 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":9.45,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            lastTime = time;\\r\\n            assets = 0;\\r\\n            for (let stock of stocks) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }    \\r\\n            lastAssets = assets;\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, assets)}, ${format.money(assetChange/timeChange)}/sec`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(4000);\\r\\n        tick();\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = path + ' -> ' + p.name;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport { TICK_LENGTH } from './lib-life-L0.js'; // 7.80GB total\\n//import { LifeL1 as Life } from './lib-life-L1.js'; // 14.80GB total\\n//import { LifeL2 as Life } from './lib-life-L2.js'; // 28.30GB total\\nimport { LifeL3 as Life } from './lib-life-L3.js'; // 43.30GB total\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let debug = ns.args.includes('debug');\\n    let log = new Logger(ns, { showDebug: debug });\\n    let life = new Life(ns, log);\\n\\n    while (true) {\\n        await life.tick();\\n        await ns.sleep(TICK_LENGTH * 1000);\\n    }\\n}\",\"ramUsage\":47.8,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    console.log(ns);\\n    \\n    let access = false;\\n    try\\n    {\\n        let symbols = ns.getStockSymbols();\\n    }\\n    catch (error) { }\\n    \\n    ns.getStockVolatility('');\\n}\",\"ramUsage\":6.1,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let log = new Logger(ns, {});\\n\\n    let facsByRep = FactionWithAugs.getAllWithAugs(ns)\\n        .sort((a, b) => b.reputation - a.reputation);\\n\\n    let facsByName = {};\\n    for (let f of facsByRep) {\\n        facsByName[f.name] = f;\\n    }\\n\\n    let augsByPrice = facsByRep\\n        .map(f => f.augmentations)\\n        .reduce((a, b) => a.concat(b), [])\\n        .filter(a => !a.owned)\\n        .sort((a, b) => b.price - a.price);\\n\\n    ns.tprint('----- LOCKED -----');\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\n    for (let aug of groupAugs(locked)) {\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\n    }\\n\\n    ns.tprint('----- UNLOCKED -----');\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\n    for (let aug of groupAugs(unlocked)) {\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\n    }\\n}\\n\\n/** @param {Augmentation[]} augs */\\nfunction groupAugs(augs) {\\n    /** @type {{name: string, factions: string[], price: number}[]} */\\n    let augsWithFacs = [];\\n    for (let a of augs) {\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\n            augsWithFacs[a.name] = {\\n                factions: [],\\n                name: a.name,\\n                price: a.price\\n            };\\n            augsWithFacs.push(augsWithFacs[a.name]);\\n        } \\n\\n        augsWithFacs[a.name].factions.push(a.faction);\\n    }\\n    return augsWithFacs;\\n}\",\"ramUsage\":43.3,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport let TICK_LENGTH =  20; // seconds\\r\\nlet STOCK_MARKET_MIN =         10000000;\\r\\nlet HACKNET_BUYS_MAX =      10000000000;\\r\\nlet PURCHASED_SERVERS_MIN = 22528000000;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / TICK_LENGTH;\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickJoinFactions();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        let hasBots = this.ns.getPurchasedServers().length > 0;\\r\\n\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.cash < HACKNET_BUYS_MAX) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else if (this.cash >= HACKNET_BUYS_MAX) {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (!this.beganDH || (this.cash < PURCHASED_SERVERS_MIN && !this.beganMS)) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                if (await this.dhStop() && await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) {\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n            }\\r\\n\\r\\n            // precondition: actually buy the servers\\r\\n            if (!hasBots) {\\r\\n                await this.runOnce('buy-servers.js');\\r\\n            }\\r\\n\\r\\n            // precondition: shut down DH (also gives time for the server-buy to go through)\\r\\n            if (this.dhRunning()) {\\r\\n                await this.dhStop();\\r\\n            }\\r\\n\\r\\n            if (!this.msRunning()) {\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                if (await this.msStop() && await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill, unless farming it via bots\\r\\n        if (!hasBots) {\\r\\n            this.ensureRunning('farm-worker.js', true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {boolean} [maxThreads=false]\\r\\n     */\\r\\n    async ensureRunning(script, maxThreads) {\\r\\n        let threads = 1;\\r\\n        if (maxThreads) {\\r\\n            threads = this.getMaxThreads(script);\\r\\n            if (threads <= 0) return;\\r\\n        }\\r\\n\\r\\n        if (!this.ns.scriptRunning(script, 'home')) {\\r\\n            let threads = 1;\\r\\n            if (maxThreads) {\\r\\n                threads = this.getMaxThreads(script);\\r\\n            }\\r\\n    \\r\\n            await this.ns.exec(script, 'home', threads);\\r\\n            this.log.info(`started ${script} (${threads} threads)`);\\r\\n        } else {\\r\\n            let top = this.ns.ps('home');\\r\\n            let p = top.find(s => s.filename == script);\\r\\n            if (p.threads != threads) {\\r\\n                await this.ensureKilled(script);\\r\\n                await this.ensureRunning(script, maxThreads);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - 32; // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        return this.ns.ps('bot0').length > 0;\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n}\",\"ramUsage\":12.3,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\nimport { TICK_LENGTH, LifeL0 } from './lib-life-L0.js';\\n\\nlet WORK_OVERRIDE_TICKS = 10;\\nlet STAT_GOAL_BASE =     100;\\nlet DARKWEB_MIN =     200000;\\nlet TRAIN_MIN =      5000000;\\n\\nexport class LifeL1 extends LifeL0 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n    }\\n\\n    tickDarkwebPurchases() {\\n        // buy darkweb router\\n        if (this.cash >= DARKWEB_MIN) {\\n            if (!this.ns.getCharacterInformation().tor) {\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\n                this.ns.purchaseTor();\\n                this.cash = this.getCash();\\n            }\\n        }\\n\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\n        for (var program of programs()) {\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\n                this.ns.purchaseProgram(program.name);\\n                this.cash = this.getCash();\\n                this.resetHackEval();\\n            }\\n        }\\n    }\\n\\n    /** @param {Program} program */\\n    hasProgram(program) {\\n        return this.ns.fileExists(program.name, 'home');\\n    }\\n\\n    // fullscreen \\\"work\\\" actions\\n    tickPerformWork() {\\n        if (this.ns.isBusy() || (this.lastWork && this.lastWork.name == 'nothing')) {\\n            if (this.lastWork && !this.countup) {\\n                if (this.lastWork.isRep) {\\n                    this.ns.stopAction();\\n                }\\n\\n                let workItem = this.selectWork();\\n                \\n                if (this.lastWork.name == workItem.name) {\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\n                    if (this.lastWork.isRep) {\\n                        if (workItem.doWork != null) {\\n                            workItem.doWork();\\n                        } \\n                    }\\n                } else {\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\n                    if (workItem.doWork != null) {\\n                        workItem.doWork();\\n                    } \\n                }\\n\\n                this.lastWork = workItem;              \\n            } else {\\n                this.log.info('automated work overridden by player, pause indefinitely');\\n                this.lastWork = null;\\n            }\\n        } else {\\n            if (!this.lastWork && !this.countup) {\\n                let workItem = this.selectWork();\\n                this.log.info(`start work ${workItem.name}`);\\n                if (workItem.doWork != null) {\\n                    workItem.doWork();\\n                } \\n\\n                this.lastWork = workItem;          \\n            } else {    \\n                if (!this.lastWork) {\\n                    /** @type {number | undefined} */\\n                    this.countup = 0;\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    this.lastWork = new WorkItem('override', null, false);\\n                } else {\\n                    this.countup = this.countup || 0;\\n                    if (this.countup == 0) {\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    } else {\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    }\\n                }\\n                \\n                this.countup = this.countup + 1;\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_LENGTH)}`);\\n                    this.countup = 0;\\n                    this.lastWork = null;\\n                }\\n            }\\n        }\\n    }\\n\\n    selectWork() {\\n        for (let jobF of [this.workWriteCode, this.workTrainCombatStats, this.workForFactions, this.workTrainCharisma]) {\\n            let job = jobF.bind(this)();\\n            if (job != null) return job;\\n        }\\n\\n        return new WorkItem('nothing', null, false);\\n    }\\n\\n    /** @returns {WorkItem | null} */\\n    workWriteCode() {\\n        return null;\\n    }\\n\\n    workTrainCombatStats() {\\n        let info = this.ns.getCharacterInformation();\\n        let stats = this.ns.getStats();\\n        \\n        if (this.cash >= TRAIN_MIN) {\\n            let statGoals = {};\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility']) {\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\n                if (stats[stat] < statGoals[stat]) {\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\n                    return new WorkItem('train-' + stat, () => {\\n                        let gym = this.getBestGym();\\n                        this.ensureCity(info, gym.city);\\n                        this.ns.gymWorkout(gym.name, stat);\\n                    }, true);\\n                }\\n            }\\n        }\\n\\n        return null;\\n    }\\n\\n    /** @returns {WorkItem | null} */\\n    workForFactions() {\\n        return null;\\n    }\\n\\n    workTrainCharisma() {\\n        let info = this.ns.getCharacterInformation();\\n\\n        if (this.cash >= TRAIN_MIN) {\\n            return new WorkItem('university', () => {\\n                let uni = this.getBestUniversity();\\n                this.ensureCity(info, uni.city);\\n                this.ns.universityCourse(uni.name, 'Leadership');\\n            }, true);\\n        }\\n\\n        return null;\\n    }\\n\\n    getBestGym() {\\n        let gs = gyms();\\n        gs.sort((a, b) => b.price - a.price);\\n        return gs[0];\\n    }\\n\\n    getBestUniversity() {\\n        let us = universities();\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\n        return us[0];\\n    }\\n   \\n    /**\\n     * @param {ICharacterInfo} info\\n     * @param {string} name\\n     */\\n    ensureCity(info, name) {\\n        if (info.city != name) {\\n            if (this.ns.travelToCity(name)) {\\n                this.log.info('travelled to ' + name);\\n            } else {\\n                this.log.error(`travel to ${name} failed`);\\n            }\\n        }\\n    }\\n}\\n\\nexport class WorkItem {\\n    /**\\n     * @param {string} name\\n     * @param {() => void | null} doWork\\n     * @param {boolean} isRep\\n     */\\n    constructor(name, doWork, isRep) {\\n        this.name = name;\\n        this.doWork = doWork;\\n        this.isRep = isRep;\\n    }\\n}\",\"ramUsage\":19.3,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport { Logger } from './lib-log.js';\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\n\\nexport class LifeL2 extends LifeL1 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n    }\\n\\n    // persists through aug reset, makes early farming better\\n    tickUpgradeHomeSystem() {\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\n            this.log.info(`purchasing home RAM upgrade`);\\n            this.ns.upgradeHomeRam();\\n            this.cash = this.getCash();\\n        }\\n    }\\n\\n    tickJoinFactions() {\\n        for (let invite of this.ns.checkFactionInvitations()) {\\n            if (!Faction.cities().includes(invite)) {\\n                this.log.info(`join faction ${invite}`);\\n                this.ns.joinFaction(invite);\\n            }\\n        }\\n    }\\n\\n    workForFactions() {\\n        let factions = Faction.getAll(this.ns);\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\n        factions = factions.filter(f => f.favor + f.favorGain < 150);\\n        this.log.debug(`factions with favour < 150: ${factions.map(f => f.name)}`);\\n\\n        if (factions.length > 0) {\\n            factions.sort((a, b) => a.reputation - b.reputation);\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\n        }\\n\\n        return null;\\n    }\\n}\\n\\nexport class Faction {\\n    /**\\n     * @param {string} name\\n     * @param {number} rep\\n     * @param {number} fav\\n     * @param {number} fvg\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\n     */\\n    constructor(name, rep, fav, fvg, job) {\\n        this.name = name;\\n        this.reputation = rep;\\n        this.favor = fav;\\n        this.favorGain = fvg;\\n        this.job = job;\\n    }\\n\\n    static cities() {\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\n    }\\n\\n    static gangs() {\\n        return ['Slum Snakes', 'Tetrads'];\\n    }\\n\\n    /**\\n     * @param {IGame} ns\\n     * @returns Faction[]\\n     */\\n    static getAll(ns) {\\n        let info = ns.getCharacterInformation();\\n        return info.factions.map(f => \\n        {\\n            let rep = ns.getFactionRep(f);\\n            let fav = ns.getFactionFavor(f);\\n            let fvg = ns.getFactionFavorGain(f);\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\n        });\\n    }\\n}\",\"ramUsage\":32.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { programs } from './lib-world.js';\\nimport { WorkItem } from './lib-life-L1.js';\\nimport { LifeL2, Faction } from './lib-life-L2.js';\\n\\nexport class LifeL3 extends LifeL2 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n        /** @type {{[key: string]: boolean}} */\\n        this.hadProgram = {};\\n        /** @type {string} */\\n        this.savingForAug = '';\\n    }\\n\\n    workWriteCode() {\\n        for (let program of programs()) {\\n            if (this.hasProgram(program)) {\\n                if (!this.hadProgram[program.name]) {\\n                    this.hadProgram[program.name] = true;\\n                    this.resetHackEval();\\n                }    \\n            }\\n            else if (program.req <= this.skill)  {\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\n            }\\n        }\\n\\n        return null;\\n    }  \\n\\n    // L3 override which takes augs into account\\n    workForFactions() {\\n        let factions = FactionWithAugs.getAllWithAugs(this.ns);\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\n\\n        if (factions.length > 0) {\\n            factions.sort((a, b) => a.reputation - b.reputation);\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\n        }\\n\\n        // if all factions are maxed out, buy some of their augs\\n        this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\n\\n        let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\n        this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\n\\n        // augs we don't already have\\n        let availableAugs = FactionWithAugs.getAllWithAugs(this.ns)\\n            .map(f => f.augmentations)\\n            .reduce((a, b) => a.concat(b), [])\\n            .filter(a => !a.owned);\\n\\n        // most expensive augs first, because the price doubles each time\\n        let affordableAugs = availableAugs\\n            .filter(a => a.price <= maxAugCost)\\n            .sort((a, b) => b.price - a.price);\\n\\n        if (affordableAugs.length > 0) {\\n            this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\n            if (affordableAugs[0].price > this.cash) {\\n                if (this.savingForAug != affordableAugs[0].name) {\\n                    this.savingForAug = affordableAugs[0].name;\\n                    this.log.info(`saving for aug ${affordableAugs[0]}`);\\n                }\\n            }\\n\\n            for (let a of affordableAugs) {\\n                if (a.price <= this.cash) {\\n                    if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\n                        this.log.info(`bought aug ${a}`);\\n                        this.cash = this.getCash();\\n                        this.savingForAug = '';\\n                    } else {\\n                        this.log.info(`failed to buy aug ${a}`);\\n                    }\\n                }\\n            }\\n        } \\n\\n        return null;\\n    }\\n}\\n\\nexport class FactionWithAugs extends Faction {\\n    /**\\n     * @param {string} name\\n     * @param {number} rep\\n     * @param {number} fav\\n     * @param {number} fvg\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\n     * @param {Augmentation[]} augs\\n     */\\n    constructor(name, rep, fav, fvg, job, augs) {\\n        super(name, rep, fav, fvg, job)\\n        this.augmentations = augs;\\n    }\\n\\n    maxAugRep() {\\n        return this.augmentations\\n            .filter(a => !a.owned)\\n            .map(a => a.requiredReputation)\\n            .reduce((a, b) => Math.max(a, b), 0);\\n    }\\n\\n\\n    /**\\n     * @param {IGame} ns\\n     * @returns FactionWithAugs[]\\n     */\\n    static getAllWithAugs(ns) {\\n        let info = ns.getCharacterInformation();\\n        let augInfo = ns.getOwnedAugmentations(true);\\n        return info.factions.map(f => \\n        {\\n            let rep = ns.getFactionRep(f);\\n            let fav = ns.getFactionFavor(f);\\n            let fvg = ns.getFactionFavorGain(f);\\n            let augs = ns.getAugmentationsFromFaction(f).map(a => {\\n                let [aRep, aPrc] = ns.getAugmentationCost(a);\\n                let has = augInfo.includes(a);\\n                return new Augmentation(a, f, aRep, aPrc, has);\\n            })\\n            return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\n        });\\n    }\\n}\\n\\nexport class Augmentation {\\n    /**\\n     * @param {string} name\\n     * @param {string} fac\\n     * @param {number} rep\\n     * @param {number} prc\\n     * @param {boolean} has\\n     */\\n    constructor(name, fac, rep, prc, has) {\\n        this.name = name;\\n        this.faction = fac;\\n        this.requiredReputation = rep;\\n        this.price = prc;\\n        this.owned = has;\\n    }\\n\\n    toString() {\\n        if (this.owned) {\\n            return `${this.name} (OWNED)`\\n        } else {\\n            return `${this.name} (${format.money(this.price)})`\\n        }\\n    }\\n}\",\"ramUsage\":47.8,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"buy-nodes.js\",\"args\":[\"debug\"],\"server\":\"44.1.3.8\",\"ramUsage\":7.5,\"logs\":[\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\",\"[DBG] loading costs\",\"[DBG] capping node cost at $126,126,332\",\"[DBG] begin purchase run\",\"[DBG] purchase run complete\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":69785.00999954509,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"init.js\",\"args\":[\"debug\"],\"server\":\"44.1.3.8\",\"ramUsage\":47.8,\"logs\":[\"[DBG] stopping distributed-hack architecture\",\"[DBG] joined factions: CyberSec,Netburners,NiteSec,The Black Hand,Sector-12,Tian Di Hui,Slum Snakes,Tetrads,BitRunners,Aevum\",\"[DBG] factions with aug reqs not met: NiteSec,The Black Hand,Tetrads,BitRunners\",\"[DBG] factions sorted by rep: Tetrads,BitRunners,The Black Hand,NiteSec\",\"[INF] start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[DBG] stopping mega-server architecture\",\"[DBG] starting mega-server architecture\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[DBG] starting mega-server architecture\",\"[DBG] automated work cancelled by player, pause 3m 0s\",\"[DBG] automated work cancelled by player, pause 2m 40s\"],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":72.6100000000005,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"HTTPWorm.exe-63.95%-INC\",\"SQLInject.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"73.4.8.1\",\"3.8.5.1\",\"6.0.4.7\",\"95.3.6.1\",\"94.2.9.9\",\"31.6.1.0\",\"29.6.3.6\",\"93.0.0.2\",\"79.5.3.0\",\"52.1.0.3\",\"73.2.4.1\",\"36.9.1.6\",\"95.2.4.4\",\"56.2.3.6\",\"69.2.0.7\",\"95.1.4.8\",\"77.5.7.2\",\"92.3.0.2\",\"67.2.1.0\",\"76.6.4.3\",\"74.3.9.8\",\"33.8.9.5\",\"5.6.1.9\",\"36.1.5.7\",\"79.3.1.3\",\"82.1.2.5\",\"10.3.5.6\",\"72.2.9.8\",\"27.8.1.0\",\"49.4.3.0\",\"46.4.5.1\",\"54.2.1.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"2.3.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.3.0.4\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1082,\"moneyAvailable\":42950383824,\"moneyMax\":161063939340,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"72.9.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"58.0.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.0.2.9\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346973.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":718023429,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1290,\"moneyAvailable\":43508917476,\"moneyMax\":163158440535,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"65.7.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.9.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.9.5.5\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1029,\"moneyAvailable\":15402192263.25,\"moneyMax\":57758220987.1875,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":66,\"serversOnNetwork\":[\"41.6.5.8\",\"2.3.0.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"65.7.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.7.3.5\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"65.7.3.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"65.7.3.5\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":937,\"moneyAvailable\":9811345184.25,\"moneyMax\":36792544440.9375,\"hackDifficulty\":91,\"baseDifficulty\":91,\"minDifficulty\":30,\"serverGrowth\":62,\"serversOnNetwork\":[\"17.1.2.2\",\"58.0.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"55.7.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.7.8.7\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1185,\"moneyAvailable\":15405854556,\"moneyMax\":57771954585,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":82,\"serversOnNetwork\":[\"41.6.5.8\",\"85.7.7.9\",\"69.5.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"44.3.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.3.2.0\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":955,\"moneyAvailable\":18529495246.5,\"moneyMax\":69485607174.375,\"hackDifficulty\":53,\"baseDifficulty\":53,\"minDifficulty\":18,\"serverGrowth\":47,\"serversOnNetwork\":[\"41.6.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"41.6.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.6.5.8\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"41.6.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"41.6.5.8\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-579208-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"31641853\",0],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-484170.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1071,\"moneyAvailable\":10872605154,\"moneyMax\":40772269327.5,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":95,\"serversOnNetwork\":[\"28.7.5.9\",\"72.9.5.5\",\"55.7.8.7\",\"44.3.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"96.7.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.7.2.2\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1213,\"moneyAvailable\":12818767752.75,\"moneyMax\":48070379072.8125,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":92,\"serversOnNetwork\":[\"10.6.4.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"98.6.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.6.4.3\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1203,\"moneyAvailable\":19413410367.75,\"moneyMax\":72800288879.0625,\"hackDifficulty\":96,\"baseDifficulty\":96,\"minDifficulty\":32,\"serverGrowth\":98,\"serversOnNetwork\":[\"28.7.5.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.4.3.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.4.3.9\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.4.3.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.4.3.9\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-314404-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[106,105,36,11,119,34,138,145,83,83,151,168,105,184,66,163,191,22,108,73,157,62,61,11,134,132,33,153,194,127,140,162,49,69,123,167,151,13,163,118,44,140,119,163,114,106],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"dir\":0,\"requiredHackingSkill\":1176,\"moneyAvailable\":1231866351.75,\"moneyMax\":4619498819.0625,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":83,\"serversOnNetwork\":[\"95.3.5.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"85.7.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.7.7.9\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1322,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"55.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"10.6.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.6.4.4\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":914,\"moneyAvailable\":872010273,\"moneyMax\":3270038523.75,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":80,\"serversOnNetwork\":[\"22.5.4.3\",\"96.7.2.2\",\"17.1.2.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.7.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.7.6.9\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1013,\"moneyAvailable\":681909947.25,\"moneyMax\":2557162302.1875,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":50,\"serversOnNetwork\":[\"93.3.4.2\",\"18.6.9.7\",\"70.3.6.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"18.6.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.6.9.7\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-686625-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[118,103,128,31,27,89,102,173],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":887,\"moneyAvailable\":645694077,\"moneyMax\":2421352788.75,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":59,\"serversOnNetwork\":[\"20.7.6.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"28.7.5.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.7.5.9\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"28.7.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"28.7.5.9\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-454923.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[100,198,30,197,192,100,115,132,100,84,169,66,169],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":885,\"moneyAvailable\":428141772,\"moneyMax\":1605531645,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":74,\"serversOnNetwork\":[\"22.5.4.3\",\"41.6.5.8\",\"98.6.4.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"90.0.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.0.4.7\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"90.0.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.0.4.7\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":897,\"moneyAvailable\":534368820.75,\"moneyMax\":2003883077.8125,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":68,\"serversOnNetwork\":[\"86.9.9.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"80.0.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.0.8.8\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-435014.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[10,-6,4,-3,10,3,-7,-9,-4,9,-8,-7,9,1,-4,-5,-3,6,5,-10,10,-6],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813416.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,7,2,7,7],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":867,\"moneyAvailable\":722905176.75,\"moneyMax\":2710894412.8125,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":87,\"serversOnNetwork\":[\"62.4.5.2\",\"44.4.4.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"57.5.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.5.4.1\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"57.5.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"57.5.4.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":897,\"moneyAvailable\":839968169.25,\"moneyMax\":3149880634.6875,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":88,\"serversOnNetwork\":[\"93.3.4.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"86.9.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.9.9.9\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"86.9.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"86.9.9.9\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537118-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,10,3,0,1,0,0,3],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":852,\"moneyAvailable\":609622563,\"moneyMax\":2286084611.25,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":66,\"serversOnNetwork\":[\"44.4.4.2\",\"90.0.4.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"22.5.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.5.4.3\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"22.5.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.5.4.3\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173832.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,2,2],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":801,\"moneyAvailable\":407541186,\"moneyMax\":1528279447.5,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":87,\"serversOnNetwork\":[\"44.4.4.2\",\"10.6.4.4\",\"28.7.5.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"44.4.4.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.4.4.2\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966504-Netburners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[154,42,25,82,8,200,129,200,54,66,163,158,28,182,84,185,126,188,66,79,105,153,87],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":899,\"moneyAvailable\":604473268.5,\"moneyMax\":2266774756.875,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":70,\"serversOnNetwork\":[\"80.0.8.8\",\"86.9.9.9\",\"22.5.4.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"54.0.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.0.6.3\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-332262.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"17512224360\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":828,\"moneyAvailable\":567301593.75,\"moneyMax\":2127380976.5625,\"hackDifficulty\":59,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":90,\"serversOnNetwork\":[\"10.3.1.4\",\"93.3.4.2\",\"62.4.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.3.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.3.1.1\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":881,\"moneyAvailable\":785705340.75,\"moneyMax\":2946395027.8125,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":65,\"serversOnNetwork\":[\"85.1.6.7\",\"12.9.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"93.3.4.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.3.4.2\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"93.3.4.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.4.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.4.2\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":927,\"moneyAvailable\":679436307,\"moneyMax\":2547886151.25,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":65,\"serversOnNetwork\":[\"54.0.6.3\",\"20.7.6.9\",\"57.5.4.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"6.5.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.5.8.4\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862017.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,0,8,7,6,8,0,0,9,6,1,4,2,6,1,2,1,0],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":778,\"moneyAvailable\":679189637.25,\"moneyMax\":2546961139.6875,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":71,\"serversOnNetwork\":[\"67.5.3.9\",\"95.3.5.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"31.2.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.2.8.5\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-465270.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"914353184\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899580-Netburners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"647412345\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":834,\"moneyAvailable\":732369989.25,\"moneyMax\":2746387459.6875,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":75,\"serversOnNetwork\":[\"70.3.6.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"6.6.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.6.0.5\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"6.6.0.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.6.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.6.0.5\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":750,\"moneyAvailable\":664725021.75,\"moneyMax\":2492718831.5625,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":76,\"serversOnNetwork\":[\"62.4.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"12.9.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.9.5.2\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998558-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[3,3],[8,3,8],[6,8,3,1],[7,3,3,2,7],[3,2,5,9,8,9]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-744045.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[2,8],[4,4,3],[8,6,9,2],[1,9,3,2,9],[9,4,2,3,2,7],[7,5,9,5,7,4,7]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":817,\"moneyAvailable\":1129922064.75,\"moneyMax\":4237207742.8125,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":67,\"serversOnNetwork\":[\"12.3.1.1\",\"67.5.3.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"16.4.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.4.3.6\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.4.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.4.3.6\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":783,\"moneyAvailable\":1265378521.5,\"moneyMax\":4745169455.625,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":86,\"serversOnNetwork\":[\"10.3.1.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"70.3.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.3.6.0\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":797,\"moneyAvailable\":934802697,\"moneyMax\":3505510113.75,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":84,\"serversOnNetwork\":[\"20.7.6.9\",\"31.2.8.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.5.3.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.5.3.9\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-122249.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"50335876403\",-95],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":820,\"moneyAvailable\":1016955801.75,\"moneyMax\":3813584256.5625,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":80,\"serversOnNetwork\":[\"12.9.5.2\",\"6.5.8.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"62.4.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.4.5.2\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.4.5.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.4.5.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.4.5.2\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":791,\"moneyAvailable\":758251710.75,\"moneyMax\":2843443915.3125,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":76,\"serversOnNetwork\":[\"54.0.6.3\",\"80.0.8.8\",\"6.6.0.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"34.6.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.6.0.1\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"34.6.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.6.0.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-147880-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[21,13,36,126,80,112,74,26,29,167,2,38,157,101],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":712,\"moneyAvailable\":583280087.25,\"moneyMax\":2187300327.1875,\"hackDifficulty\":66,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":64,\"serversOnNetwork\":[\"98.6.5.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"57.0.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.0.6.4\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"57.0.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"57.0.6.4\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":508,\"moneyAvailable\":1813379729.0625,\"moneyMax\":1813379729.0625,\"hackDifficulty\":21.972,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":50,\"serversOnNetwork\":[\"49.6.1.6\",\"62.8.1.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"10.3.1.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.3.1.4\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"10.3.1.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.3.1.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.3.1.4\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-331868.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[5,7]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":535,\"moneyAvailable\":1359131875.3125,\"moneyMax\":1812123115.3125,\"hackDifficulty\":19,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":60,\"serversOnNetwork\":[\"49.6.1.6\",\"54.0.6.3\",\"16.4.3.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"85.1.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.1.6.7\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"85.1.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.1.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.1.6.7\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592426.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[168,94,32,30,62,163,35,51,200,11,171,51,152,61,134,27,11,118,196,88,44,53,172,56,21,56,119,72,43,197,79,90,34,90,70,182,1,125,141,16,9,147,16,157,53],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":401,\"moneyAvailable\":569338275.9375,\"moneyMax\":569338275.9375,\"hackDifficulty\":28.468,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":42,\"serversOnNetwork\":[\"49.6.1.6\",\"12.3.1.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"98.6.5.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.6.5.9\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"98.6.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"98.6.5.9\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-164290-BitRunners.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":999197880,\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"dir\":0,\"requiredHackingSkill\":410,\"moneyAvailable\":282916832.25,\"moneyMax\":565982696.25,\"hackDifficulty\":20.236,\"baseDifficulty\":52,\"minDifficulty\":17,\"serverGrowth\":38,\"serversOnNetwork\":[\"83.7.2.6\",\"34.6.0.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"76.0.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.0.9.2\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"76.0.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.0.9.2\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-875895.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-873778.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"76395893\",95],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":731,\"moneyAvailable\":639659085.75,\"moneyMax\":2398721571.5625,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":83,\"serversOnNetwork\":[\"79.6.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"69.5.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.5.8.8\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"69.5.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"69.5.8.8\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":454,\"moneyAvailable\":949114845,\"moneyMax\":949114845,\"hackDifficulty\":20.996,\"baseDifficulty\":53,\"minDifficulty\":18,\"serverGrowth\":47,\"serversOnNetwork\":[\"34.4.9.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"49.6.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.6.1.6\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":637,\"moneyAvailable\":432238515.75,\"moneyMax\":1620894434.0625,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":70,\"serversOnNetwork\":[\"83.7.2.6\",\"57.0.6.4\",\"10.3.1.4\",\"85.1.6.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.7.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.7.9.2\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"43.7.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.7.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.7.9.2\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":425,\"moneyAvailable\":1243025682.1875,\"moneyMax\":1243025682.1875,\"hackDifficulty\":26.912,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":46,\"serversOnNetwork\":[\"90.9.2.1\",\"82.0.3.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"34.4.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.4.9.4\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"34.4.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.4.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.4.9.4\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":281,\"moneyAvailable\":497300627.8125,\"moneyMax\":497300627.8125,\"hackDifficulty\":20.924000000000007,\"baseDifficulty\":42,\"minDifficulty\":14,\"serverGrowth\":47,\"serversOnNetwork\":[\"32.3.7.8\",\"69.5.8.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"19.7.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.7.0.1\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":374,\"moneyAvailable\":345732178.9375,\"moneyMax\":691834440.9375,\"hackDifficulty\":23.882,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":64,\"serversOnNetwork\":[\"29.6.2.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"90.9.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.9.2.1\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"90.9.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.9.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.9.2.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805754.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(a())((()a))(aa\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-251221.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[59,48,38,59,59,160,86,147,45,183,150,9,138,69,65,164,122,112,35,46,68,6,124,180,178,98,166,188,10,96,169,36,172,81,44,102],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":380,\"moneyAvailable\":773437500,\"moneyMax\":773437500,\"hackDifficulty\":24.044,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":54,\"serversOnNetwork\":[\"32.3.7.8\",\"43.7.9.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"83.7.2.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.7.2.6\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":272,\"moneyAvailable\":228232102.5,\"moneyMax\":228232102.5,\"hackDifficulty\":23.528,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":65,\"serversOnNetwork\":[\"32.3.7.8\",\"98.6.5.9\",\"49.6.1.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"73.4.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.4.8.1\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"73.4.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"73.4.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"73.4.8.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-633135.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"115295491061\",-73],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"3.8.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.8.5.1\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"3.8.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"3.8.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"3.8.5.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":6468750,\"moneyMax\":6468750,\"hackDifficulty\":10.628,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"6.0.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.0.4.7\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.0.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.0.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"6.0.4.7\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-270111.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"707432090\",-21],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":7031250,\"moneyMax\":7031250,\"hackDifficulty\":9.308,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"32.1.9.7\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"67.2.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.2.7.7\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.2.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"67.2.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.2.7.7\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":21093750,\"moneyMax\":21093750,\"hackDifficulty\":9.68,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"95.3.6.1\",\"49.0.0.1\",\"32.3.7.8\",\"29.6.2.4\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"5.6.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.6.6.7\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.6.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"5.6.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.6.6.7\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":7734375,\"moneyMax\":7734375,\"hackDifficulty\":10.668000000000001,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"31.6.1.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"49.0.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.0.0.1\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.0.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"49.0.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.0.0.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":7020720,\"moneyMax\":14062500,\"hackDifficulty\":9.044,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"67.2.7.7\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"14.9.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.9.3.5\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"14.9.3.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.9.3.5\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":63241517,\"moneyMax\":126562500,\"hackDifficulty\":11.298,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"32.1.9.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"95.3.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.3.6.1\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"95.3.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"95.3.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"95.3.6.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-375288.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,11],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-114844-TianDiHui.cct\",\"type\":\"Total Ways to Sum\",\"data\":10,\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":8437500,\"moneyMax\":8437500,\"hackDifficulty\":9.336,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"67.2.7.7\",\"9.7.6.3\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"94.2.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.2.9.9\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"94.2.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"94.2.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"94.2.9.9\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"hackDifficulty\":7.672,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"32.3.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.3.7.8\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"32.3.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.3.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.3.7.8\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":33698295,\"moneyMax\":67500000,\"hackDifficulty\":8.134,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"67.2.7.7\",\"34.4.9.4\",\"90.9.2.1\",\"83.7.2.6\",\"38.1.8.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"9.7.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.7.6.3\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.7.6.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.7.6.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.7.6.3\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":14044488,\"moneyMax\":28125000,\"hackDifficulty\":6.068,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"95.3.6.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"29.6.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"29.6.2.4\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"29.6.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"29.6.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"29.6.2.4\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":188,\"moneyAvailable\":89892073.75,\"moneyMax\":179983473.75,\"hackDifficulty\":9,\"baseDifficulty\":26,\"minDifficulty\":9,\"serverGrowth\":31,\"serversOnNetwork\":[\"67.2.7.7\",\"19.7.0.1\",\"79.6.9.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"38.1.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.1.8.4\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":268,\"moneyAvailable\":80974689.1875,\"moneyMax\":162046932.1875,\"hackDifficulty\":14.806000000000001,\"baseDifficulty\":39,\"minDifficulty\":13,\"serverGrowth\":31,\"serversOnNetwork\":[\"32.3.7.8\",\"58.7.1.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"31.6.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.6.1.0\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"31.6.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"31.6.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"31.6.1.0\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":28077464,\"moneyMax\":56250000,\"hackDifficulty\":11.172,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"5.6.6.7\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"82.0.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.0.3.5\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"82.0.3.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"82.0.3.5\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":490,\"moneyAvailable\":351543600,\"moneyMax\":703125000,\"hackDifficulty\":21.328,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":37,\"serversOnNetwork\":[\"43.7.9.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"60.7.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.7.2.4\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.7.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.7.2.4\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-844401.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[120,160,164,46,23,185,14,199,12,143,15,162,172]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1054,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":55,\"serversOnNetwork\":[\"17.1.2.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"62.8.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.8.1.7\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":761,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"hackDifficulty\":46,\"baseDifficulty\":46,\"minDifficulty\":15,\"serverGrowth\":50,\"serversOnNetwork\":[\"57.0.6.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"95.3.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.3.5.6\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":512,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"95.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"95.3.5.6\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":522,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"6.5.8.4\",\"25.4.3.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"58.7.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.7.1.1\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"58.7.1.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.7.1.1\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":347,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"38.1.8.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"79.6.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.6.9.6\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.6.9.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.6.9.6\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":212,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"29.6.2.4\",\"76.0.9.2\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"17.1.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.1.2.2\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"17.1.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.1.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.1.2.2\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-521702.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-1,10,-2,1,-5,8,7,0],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":548,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"10.6.4.4\",\"65.7.3.5\",\"60.7.2.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"32.1.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.1.9.7\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.1.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.1.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"32.1.9.7\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":57,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"6.0.4.7\",\"14.9.3.5\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"69.5.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.5.5.2\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-507163.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,4,-2,-2,-3,-8,-1,-9,0,2,-3,-5,-6,-6,-4,5,-7,-7,-4,8,3],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"55.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.1.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.1.1.6\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794249.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,33],[2,5],[21,28],[6,14],[8,18],[16,24]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"29.6.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"29.6.3.6\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-453909-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"312305229\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"93.0.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.0.0.2\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1053.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"93.0.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"93.0.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"93.0.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"93.0.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"93.0.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"93.0.0.2\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"alpha-ent\",1],\"server\":\"93.0.0.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server alpha-ent in 472.154 seconds (t=257)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":29.809999999999928,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":257,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.5.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.5.3.0\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":246,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.5.3.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"79.5.3.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.5.3.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.5.3.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"79.5.3.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.5.3.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"rho-construction\",1],\"server\":\"79.5.3.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server rho-construction in 646.950 seconds (t=60)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":60,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.1.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.1.0.3\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":323.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.1.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"52.1.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.1.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.1.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"52.1.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.1.0.3\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"catalyst\",1],\"server\":\"52.1.0.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server catalyst in 662.656 seconds (t=79)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":79,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"73.2.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.2.4.1\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2332.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"73.2.4.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"73.2.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"73.2.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"73.2.4.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"73.2.4.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"73.2.4.1\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"omega-net\",1],\"server\":\"73.2.4.1\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server omega-net in 86.186 seconds (t=569)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":569,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"36.9.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.9.1.6\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":246,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"36.9.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"36.9.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"36.9.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"36.9.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"36.9.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"36.9.1.6\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"summit-uni\",1],\"server\":\"36.9.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server summit-uni in 554.160 seconds (t=60)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":60,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"95.2.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.2.4.4\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":569.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"95.2.4.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"95.2.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"95.2.4.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"95.2.4.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"95.2.4.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"95.2.4.4\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"the-hub\",1],\"server\":\"95.2.4.4\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server the-hub in 346.181 seconds (t=139)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":139,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.2.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.2.3.6\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":250.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"56.2.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"56.2.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"56.2.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"56.2.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"56.2.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"56.2.3.6\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"netlink\",1],\"server\":\"56.2.3.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server netlink in 531.642 seconds (t=61)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":61,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"69.2.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.2.0.7\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":237.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"69.2.0.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"69.2.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"69.2.0.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"69.2.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"69.2.0.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"69.2.0.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"comptek\",1],\"server\":\"69.2.0.7\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server comptek in 519.977 seconds (t=58)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":58,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"95.1.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.1.4.8\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":106.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"95.1.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"95.1.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"95.1.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"95.1.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"95.1.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"95.1.4.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"silver-helix\",1],\"server\":\"95.1.4.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server silver-helix in 107.886 seconds (t=26)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":26,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"77.5.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.5.7.2\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":94.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"77.5.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"77.5.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"77.5.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"77.5.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"77.5.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"77.5.7.2\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"phantasy\",1],\"server\":\"77.5.7.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server phantasy in 57.704 seconds (t=23)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":23,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.3.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.3.0.2\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":266.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"92.3.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"92.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"92.3.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"92.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"92.3.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"92.3.0.2\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"rothman-uni\",1],\"server\":\"92.3.0.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server rothman-uni in 483.813 seconds (t=65)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":65,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.2.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.2.1.0\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":438.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"67.2.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"67.2.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"67.2.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"67.2.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"67.2.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"67.2.1.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"millenium-fitness\",1],\"server\":\"67.2.1.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server millenium-fitness in 606.462 seconds (t=107)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":107,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.6.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.6.4.3\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":369,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.6.4.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.6.4.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"76.6.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.6.4.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.6.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"76.6.4.3\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"aevum-police\",1],\"server\":\"76.6.4.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server aevum-police in 661.407 seconds (t=90)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":90,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"74.3.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.3.9.8\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":98.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"74.3.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"74.3.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"74.3.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"74.3.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"74.3.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"74.3.9.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"iron-gym\",1],\"server\":\"74.3.9.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server iron-gym in 75.003 seconds (t=24)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":24,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.8.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.8.9.5\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":90.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.8.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.8.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"33.8.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.8.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.8.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"33.8.9.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"max-hardware\",1],\"server\":\"33.8.9.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server max-hardware in 39.030 seconds (t=22)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":22,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.6.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.6.1.9\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":151.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"5.6.1.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"5.6.1.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"5.6.1.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"5.6.1.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"5.6.1.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"5.6.1.9\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"crush-fitness\",1],\"server\":\"5.6.1.9\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server crush-fitness in 237.330 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":37,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"36.1.5.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.1.5.7\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":209.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"36.1.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"36.1.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"36.1.5.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"36.1.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"36.1.5.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"36.1.5.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"johnson-ortho\",1],\"server\":\"36.1.5.7\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server johnson-ortho in 375.788 seconds (t=51)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":51,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.3.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.3.1.3\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":633,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.3.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.3.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"79.3.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.3.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.3.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"79.3.1.3\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"sigma-cosmetics\"],\"server\":\"79.3.1.3\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot17/sigma-cosmetics: weaken by 7.628\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":7.810000000000005,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"sigma-cosmetics\",1],\"server\":\"79.3.1.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server sigma-cosmetics in 14.414 seconds (t=153)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.810000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":153,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.1.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.1.2.5\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":362.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"82.1.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"82.1.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"82.1.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"82.1.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"82.1.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"82.1.2.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"joesguns\"],\"server\":\"82.1.2.5\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot18/joesguns: weaken by 4.308\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":6.010000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"joesguns\",1],\"server\":\"82.1.2.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server joesguns in 16.688 seconds (t=87)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.810000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":87,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"10.3.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.3.5.6\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1174.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"10.3.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"10.3.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"10.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"10.3.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"10.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"10.3.5.6\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"foodnstuff\",1],\"server\":\"10.3.5.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server foodnstuff in 12.369 seconds (t=285)\",\"Server security level on foodnstuff weakened to 3. Gained 1,004.2430 hacking exp (t=285)\",\"Running script: ms-control.js on bot19 with 1 threads and args: [\\\"foodnstuff\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":1004.2429981970879,\"threads\":285,\"dataMap\":{\"73.4.8.1\":[0,0,0,285]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"foodnstuff\"],\"server\":\"10.3.5.6\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":5.410000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.2.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.2.9.8\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":139.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.2.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.2.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"72.2.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.2.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.2.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"72.2.9.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zer0\",1],\"server\":\"72.2.9.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zer0 in 52.727 seconds (t=34)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":34,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"27.8.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.8.1.0\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":3449.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"27.8.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"27.8.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"27.8.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"27.8.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"27.8.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"27.8.1.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"hong-fang-tea\",1],\"server\":\"27.8.1.0\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server hong-fang-tea in 17.277 seconds (t=840)\",\"Available money on hong-fang-tea grown by 100.255282%. Gained 3,935.8111 hacking exp (t=840)\",\"Running script: ms-control.js on bot21 with 1 threads and args: [\\\"hong-fang-tea\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":3935.811149923968,\"threads\":840,\"dataMap\":{\"95.3.6.1\":[0,0,840,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"hong-fang-tea\"],\"server\":\"27.8.1.0\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":0.6100000000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"49.4.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.4.3.0\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":221.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"49.4.3.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"49.4.3.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"49.4.3.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"49.4.3.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"49.4.3.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"49.4.3.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"harakiri-sushi\",1],\"server\":\"49.4.3.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server harakiri-sushi in 28.862 seconds (t=54)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":54,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"46.4.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.4.5.1\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":86.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.4.5.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.4.5.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"46.4.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.4.5.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.4.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"46.4.5.1\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"neo-net\",1],\"server\":\"46.4.5.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server neo-net in 37.137 seconds (t=21)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":21,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"54.2.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.2.1.6\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":303.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"54.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"54.2.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"54.2.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"54.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"54.2.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"54.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"54.2.1.6\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"nectar-net\",1],\"server\":\"54.2.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server nectar-net in 23.537 seconds (t=74)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23.80999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":74,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":3,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":36105.26348430643,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":73,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":36160.68412366489,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":72,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":36167.99894929441,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":57,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":137.71431608000006,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":70,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":19404.964563512593,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":68,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":36122.41331983191,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":58,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":22716.611876122075,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":28,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1374.2732297642665,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":69,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":523.9131590000019,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":60,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1338.1027258499032,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"85.7.7.9\",\"BitRunners Server\":\"95.3.5.6\",\"The Black Hand Server\":\"58.7.1.1\",\"NiteSec Server\":\"79.6.9.6\",\"The Dark Army Server\":\"17.1.2.2\",\"CyberSec Server\":\"32.1.9.7\",\"Daedalus Server\":\"69.5.5.2\",\"w0r1d_d43m0n\":\"94.1.1.6\",\"Darkweb Server\":\"29.6.3.6\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":78586.19066041846,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":18.49064249418267,\"cap\":108914620,\"totalShares\":124300000,\"maxShares\":24900000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":827745.0366949897,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":true,\"otlkMag\":22.546454463079797,\"cap\":243446562,\"totalShares\":94000000,\"maxShares\":18800000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":359601.17052726034,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":11.268458253296998,\"cap\":102836306,\"totalShares\":117500000,\"maxShares\":23500000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":65695.79099950017,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":13.471840026062349,\"cap\":350126188,\"totalShares\":85400000,\"maxShares\":17100000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":418701.3016100253,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":16.42924813223715,\"cap\":831407395,\"totalShares\":42000000,\"maxShares\":8400000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":1442767.7488992414,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":12.141615599158158,\"cap\":1467947950,\"totalShares\":31600000,\"maxShares\":6300000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":56934.97855547624,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":7.584557075545873,\"cap\":155884312,\"totalShares\":107700000,\"maxShares\":21500000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":65013592.29667692,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":22.702445384791442,\"cap\":82992895,\"totalShares\":66100000,\"maxShares\":13200000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":272153.96343837655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":5.314776543187866,\"cap\":385257165,\"totalShares\":48400000,\"maxShares\":9700000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11328.83356558585,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":4.234286312783231,\"cap\":144698022,\"totalShares\":78600000,\"maxShares\":15700000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":73863.01990989324,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":5.935953038523635,\"cap\":344796459,\"totalShares\":49700000,\"maxShares\":9900000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":328583.98274229624,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":16.006485131549656,\"cap\":253544598,\"totalShares\":78000000,\"maxShares\":15600000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":41516.74238836573,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":5.456496898115544,\"cap\":156387793,\"totalShares\":39600000,\"maxShares\":7900000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":49606.27710773921,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":9.704933896974755,\"cap\":227800118,\"totalShares\":42500000,\"maxShares\":8500000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":51055.93028745822,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.464173476063972,\"cap\":160444821,\"totalShares\":43200000,\"maxShares\":8600000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":21253.222368469633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":4.354356471806677,\"cap\":72163297,\"totalShares\":48700000,\"maxShares\":9700000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":930736.4000673929,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":17.026092643504395,\"cap\":280015834,\"totalShares\":34200000,\"maxShares\":6800000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":87877.49932314313,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":7.106075586829994,\"cap\":396054764,\"totalShares\":43500000,\"maxShares\":8700000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":24593.192102898014,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":2.875170708999777,\"cap\":269408253,\"totalShares\":33900000,\"maxShares\":6800000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":31887.48536970399,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.41,\"b\":false,\"otlkMag\":0.5124272880466613,\"cap\":89991141,\"totalShares\":82900000,\"maxShares\":16600000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":134363.0456949671,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.17,\"b\":true,\"otlkMag\":6.737739824339525,\"cap\":49890221,\"totalShares\":45300000,\"maxShares\":9100000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5500.441195312122,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":0.8809172828410456,\"cap\":124938074,\"totalShares\":35300000,\"maxShares\":7100000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":48278297.98970873,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.96,\"b\":false,\"otlkMag\":18.63573909552299,\"cap\":53827449,\"totalShares\":46200000,\"maxShares\":9200000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5327.298424906206,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":true,\"otlkMag\":0.8006531749887411,\"cap\":57816419,\"totalShares\":58000000,\"maxShares\":11600000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":7500.342138650342,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.88,\"b\":true,\"otlkMag\":2.2729550265262826,\"cap\":17523461,\"totalShares\":79800000,\"maxShares\":16000000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":4633.536854368524,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.08,\"b\":true,\"otlkMag\":0.8085529248926668,\"cap\":18262495,\"totalShares\":39300000,\"maxShares\":7900000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":8551.847847764378,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":false,\"otlkMag\":0.564262976978929,\"cap\":10705745,\"totalShares\":14200000,\"maxShares\":2800000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2410.617803919684,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":0.5551059898228263,\"cap\":8421381,\"totalShares\":13100000,\"maxShares\":2600000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":11821.52946994929,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.71,\"b\":true,\"otlkMag\":0.32902378912820796,\"cap\":5833641,\"totalShares\":9500000,\"maxShares\":1900000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":7737.491422914043,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.7,\"b\":false,\"otlkMag\":4.116716025552317,\"cap\":28289291,\"totalShares\":36500000,\"maxShares\":7300000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":7293.69867932801,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":true,\"otlkMag\":1.6155042566606188,\"cap\":3461373,\"totalShares\":132800000,\"maxShares\":26600000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":243307.24892427883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":11.39023534126261,\"cap\":50291481,\"totalShares\":19600000,\"maxShares\":3900000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":61111.00359289358,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":15.553982938322113,\"cap\":35479317,\"totalShares\":26900000,\"maxShares\":5400000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":18,\"lastUpdate\":1550391598509}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.43.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}