{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":367,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":2,\"dexterity\":7,\"agility\":7,\"charisma\":114,\"intelligence\":0,\"hacking_chance_mult\":1.0201,\"hacking_speed_mult\":1.06121003,\"hacking_money_mult\":1.0201,\"hacking_grow_mult\":1.0201,\"hacking_exp\":14263456.443183664,\"strength_exp\":17.670427224999983,\"defense_exp\":17.670427224999983,\"dexterity_exp\":118.66032722500032,\"agility_exp\":118.66032722500032,\"charisma_exp\":16525.504728727938,\"intelligence_exp\":0,\"hacking_mult\":1.12466025,\"strength_mult\":1.0201,\"defense_mult\":1.0201,\"dexterity_mult\":1.071105,\"agility_mult\":1.071105,\"charisma_mult\":1.0201,\"hacking_exp_mult\":1.1221100000000002,\"strength_exp_mult\":1.1221100000000002,\"defense_exp_mult\":1.1221100000000002,\"dexterity_exp_mult\":1.1221100000000002,\"agility_exp_mult\":1.1221100000000002,\"charisma_exp_mult\":1.1221100000000002,\"company_rep_mult\":1.0201,\"faction_rep_mult\":1.0201,\"money\":\"5549315250.572607169\",\"total_money\":\"314424575084.37516527\",\"lifetime_money\":\"314424575084.37516527\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"companyName\":\"Alpha Enterprises\",\"companyPosition\":\"Business Intern\",\"currentServer\":\"3.0.4.9\",\"purchasedServers\":[\"83.3.1.6\",\"22.1.5.0\",\"10.1.4.5\",\"52.9.8.9\",\"92.3.9.5\",\"52.6.7.1\",\"57.9.4.6\",\"57.2.0.7\",\"12.5.2.8\",\"11.9.2.4\",\"56.0.3.6\",\"29.5.5.1\",\"14.0.3.8\",\"57.8.2.9\",\"86.4.9.6\",\"33.1.6.1\",\"99.6.5.5\",\"63.5.7.7\",\"69.4.8.9\",\"53.9.3.8\",\"43.4.7.0\",\"82.3.0.8\",\"39.0.6.5\",\"50.4.2.5\",\"36.1.9.4\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":1391215968.5122645,\"onlineTimeSeconds\":88072.59999928034,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":1408338134.2347474,\"onlineTimeSeconds\":87136.39999929396,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":1406481662.124002,\"onlineTimeSeconds\":86464.19999930375,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":1405592114.939655,\"onlineTimeSeconds\":85876.1999993123,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":1388552900.3116739,\"onlineTimeSeconds\":85203.99999932208,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":1384213219.3458898,\"onlineTimeSeconds\":84699.79999932942,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":1404467743.300031,\"onlineTimeSeconds\":84615.79999933064,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":1385817494.7297661,\"onlineTimeSeconds\":84531.79999933187,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":1387042008.7526352,\"onlineTimeSeconds\":84447.79999933309,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":1402405040.6622376,\"onlineTimeSeconds\":84279.79999933553,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":1399186377.709128,\"onlineTimeSeconds\":83859.79999934165,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":1378644651.96887,\"onlineTimeSeconds\":83103.59999935265,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":1376635048.4881678,\"onlineTimeSeconds\":81759.39999937221,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":1373552592.6658573,\"onlineTimeSeconds\":80918.99999938444,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":1370025607.5707116,\"onlineTimeSeconds\":80078.99999939666,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":1367218315.5224147,\"onlineTimeSeconds\":79742.79999940156,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":1361872261.8065038,\"onlineTimeSeconds\":79322.79999940767,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":1347391943.2574155,\"onlineTimeSeconds\":78230.59999942356,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":1329997621.2431448,\"onlineTimeSeconds\":77054.39999944068,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":1291240251.4485803,\"onlineTimeSeconds\":74617.39999947613,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-20\",\"totalMoneyGenerated\":1251171546.611881,\"onlineTimeSeconds\":72180.9999995112,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-21\",\"totalMoneyGenerated\":1240961822.2080927,\"onlineTimeSeconds\":71592.79999951976,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-22\",\"totalMoneyGenerated\":1229155010.4921536,\"onlineTimeSeconds\":70920.79999952955,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-23\",\"totalMoneyGenerated\":1206030876.8394194,\"onlineTimeSeconds\":69576.39999954912,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-24\",\"totalMoneyGenerated\":1174425530.9822571,\"onlineTimeSeconds\":67811.5999995748,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-25\",\"totalMoneyGenerated\":1085869396.8109782,\"onlineTimeSeconds\":62685.79999964939,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-26\",\"totalMoneyGenerated\":1001840026.2126372,\"onlineTimeSeconds\":57812.9999997203,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-27\",\"totalMoneyGenerated\":4870784.733679653,\"onlineTimeSeconds\":340.7999999999892,\"moneyGainRatePerSecond\":17357.853989999872}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-28\",\"totalMoneyGenerated\":4558223.5586633645,\"onlineTimeSeconds\":280.59999999999263,\"moneyGainRatePerSecond\":17357.853989999872}}],\"totalHacknetNodeProduction\":503377.765709996,\"factions\":[\"CyberSec\",\"NiteSec\",\"Netburners\",\"Tian Di Hui\",\"Sector-12\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"name\":\"Hacknet Node Core Direct-Neural Interface\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"NeuroFlux Governor\",\"level\":3}],\"augmentations\":[{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"Hacknet Node CPU Architecture Neural-Upload\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Hacknet Node Kernel Direct-Neural Interface\",\"level\":1},{\"name\":\"NeuroFlux Governor\",\"level\":2},{\"name\":\"Wired Reflexes\",\"level\":1}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-0.5,\"crime_money_mult\":1.0201,\"crime_success_mult\":1.0201,\"isWorking\":false,\"workType\":\"Working for Company\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"rob a store\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.0201,\"hacknet_node_money_mult\":1.7743364375000004,\"hacknet_node_purchase_cost_mult\":0.7497765,\"hacknet_node_ram_cost_mult\":0.9801,\"hacknet_node_core_cost_mult\":0.9801,\"hacknet_node_level_cost_mult\":0.833085,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1549178639046,\"totalPlaytime\":308921000,\"playtimeSinceLastAug\":88093800,\"playtimeSinceLastBitnode\":308921000,\"scriptProdSinceLastAug\":230517230382.833,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":2,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = ns.args.includes('loop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: true, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    log.info('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let costs = [];\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(ns.hacknet.getLevelUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getRamUpgradeCost(i, 1));\\r\\n        costs.push(ns.hacknet.getCoreUpgradeCost(i, 1));\\r\\n    }\\r\\n    let buyNodeCost = ns.hacknet.getPurchaseNodeCost();  \\r\\n\\r\\n    log.info('begin purchase loop');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.debug(`buy node[${newIdx}] - \\\\$${buyNodeCost}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                buyNodeCost = ns.hacknet.getPurchaseNodeCost();\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                cash = cash - minCost;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            if (itemIdx == 0) {\\r\\n                while (cost * 3 < cash) {\\r\\n                    count = count + 1;\\r\\n                    cost = ns.hacknet.getLevelUpgradeCost(nodeIdx, count);\\r\\n                }\\r\\n\\r\\n                log.debug(`buy level[${nodeIdx}] x${count} - \\\\$${cost}`);\\r\\n                ns.hacknet.upgradeLevel(nodeIdx, count);\\r\\n                costs[minIdx] = ns.hacknet.getLevelUpgradeCost(nodeIdx, 1);\\r\\n            } else if (itemIdx == 1) {\\r\\n                while (cost * 3 < cash) {\\r\\n                    count = count + 1;\\r\\n                    cost = ns.hacknet.getRamUpgradeCost(nodeIdx, count);\\r\\n                }\\r\\n\\r\\n                log.debug(`buy ram[${nodeIdx}] x${count} - \\\\$${cost}`);\\r\\n                ns.hacknet.upgradeRam(nodeIdx, count);\\r\\n                costs[minIdx] = ns.hacknet.getRamUpgradeCost(nodeIdx, 1);\\r\\n            } else if (itemIdx == 2) {\\r\\n                while (cost * 3 < cash) {\\r\\n                    count = count + 1;\\r\\n                    cost = ns.hacknet.getCoreUpgradeCost(nodeIdx, count);\\r\\n                }\\r\\n\\r\\n                log.debug(`buy core[${nodeIdx}] x${count} - \\\\$${cost}`);\\r\\n                ns.hacknet.upgradeCore(nodeIdx, count);\\r\\n                costs[minIdx] = ns.hacknet.getCoreUpgradeCost(nodeIdx, 1);\\r\\n            }\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.debug(`remaining budget: \\\\$${cash}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('purchase loop complete');\\r\\n\\r\\n    if (loop) {\\r\\n        await ns.sleep(60000);\\r\\n        ns.spawn('buy-nodes.js', 1, 'loop');\\r\\n    }\\r\\n}\",\"ramUsage\":7.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && !this.name.startsWith('bot') && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        if (!ns.hasRootAccess(this.name)) {\\r\\n            for (var hack of hacks(ns)) {\\r\\n                hack(this.name);\\r\\n            }\\r\\n            ns.nuke(this.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    let hacks = [];\\r\\n    if (ns.fileExists('BruteSSH.exe', 'home')) hacks.push(ns.brutessh);\\r\\n    if (ns.fileExists('FTPCrack.exe', 'home')) hacks.push(ns.ftpcrack);\\r\\n    if (ns.fileExists('relaySMTP.exe', 'home')) hacks.push(ns.relaysmtp);\\r\\n    if (ns.fileExists('HTTPWorm.exe', 'home')) hacks.push(ns.httpworm);\\r\\n    if (ns.fileExists('SQLInject.exe', 'home')) hacks.push(ns.sqlinject);\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            for (let next of ns.scan(host)) {\\r\\n                if (!scanned.includes(next)) {\\r\\n                    hosts.push(next);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n            scanned.push(host);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        servers.push(new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host)));\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns)).concat([new Server('home', 1536, 0, 'weaken')]);\\r\\n}\\r\\n\\r\\nexport function botsIfAny(ns) {\\r\\n    let bs = bots(ns);\\r\\n    if (bs.length > 0) {\\r\\n        return bs;\\r\\n    } else {\\r\\n        return map(ns).concat([new Server('home', 1536, 0, 'weaken')]);\\r\\n    }\\r\\n}\",\"ramUsage\":4.95,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report-workers.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\nimport * as servers from 'lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.all(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report-targets.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\nimport * as servers from 'lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            log.info('----- SERVER: ' + worker.name + ' -----');\\r\\n        \\r\\n            let hackLevel = ns.getServerRequiredHackingLevel(worker.name)\\r\\n            let hackChance = ns.hackChance(worker.name);        \\r\\n            let hackRate = ns.hackAnalyzePercent(worker.name);\\r\\n            log.info(`Requires Hacking ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}%`);\\r\\n            \\r\\n            var moneyAvailable = ns.getServerMoneyAvailable(worker.name);\\r\\n            var maxMoney = ns.getServerMaxMoney(worker.name);\\r\\n            var growthRate = ns.getServerGrowth(worker.name);\\r\\n            log.info(`Money: \\\\$${Math.floor(moneyAvailable)}/\\\\$${maxMoney} (${Math.ceil(moneyAvailable / maxMoney * 100)}%); growth param ${growthRate}`);\\r\\n        \\r\\n            var sec = ns.getServerSecurityLevel(worker.name);\\r\\n            var secBase = ns.getServerBaseSecurityLevel(worker.name);\\r\\n            log.info('Security level: ' + sec + ' (' + secBase + ' base)');\\r\\n\\r\\n            log.info('');\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.45,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\nimport * as servers from 'lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.botsIfAny(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            if (!ns.hasRootAccess(worker.name)) {\\r\\n                log.debug('enrolling ' + worker.name);\\r\\n                worker.enrol(ns);                \\r\\n                log.debug('...got root');\\r\\n            } \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\nimport * as servers from 'lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.botsIfAny(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.3,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\nimport * as format from 'lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    let existingRam = 0;\\r\\n    let processes = [];\\r\\n    for (var existing of existingServers) {\\r\\n        existingRam += ns.getServerRam(existing)[0];\\r\\n        let ps = ns.ps(existing);\\r\\n        if (ps.length > 0) {\\r\\n            processes.push(existing);\\r\\n        }\\r\\n    }\\r\\n    existingRam /= existingServers.length;\\r\\n    log.info(`${existingServers.length} existing servers, average ${format.ram(existingRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    for (let power = 0; power < 25; power++) {\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * limit < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * limit;\\r\\n    log.info(`can buy ${limit} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (processes.length > 0) {\\r\\n        log.info('scripts running on existing servers, exit');\\r\\n        ns.exit();\\r\\n    } else if (!dryRun && ram > existingRam) {\\r\\n        log.info('deleting existing servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            ns.deleteServer('bot' + i);\\r\\n        }\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            ns.purchaseServer('bot'+i, ram);\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { disable: false });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.script\",\"code\":\"deleteServer('bot0');\\npurchaseServer('bot0', 131072);\",\"ramUsage\":6.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\nimport * as servers from 'lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    ns.scp(['lib-log.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new servers.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.85,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\nimport * as servers from 'lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// @ts-check\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from 'lib-log.js';\\r\\nimport * as servers from 'lib-servers.js';\\r\\nimport * as format from 'lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart')\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of servers.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (hackAmount > 0 && cycleTime < Infinity) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        let bots = ns.getPurchasedServers();\\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.55,\"server\":\"44.1.3.8\",\"module\":{}}}],\"runningScripts\":[],\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"ServerProfiler.exe-1.09%-INC\",\"BruteSSH.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"35.3.0.0\",\"59.4.6.6\",\"47.0.5.5\",\"68.6.8.1\",\"20.5.3.2\",\"96.6.2.4\",\"42.3.0.0\",\"83.3.1.6\",\"22.1.5.0\",\"10.1.4.5\",\"52.9.8.9\",\"92.3.9.5\",\"52.6.7.1\",\"57.9.4.6\",\"57.2.0.7\",\"12.5.2.8\",\"11.9.2.4\",\"56.0.3.6\",\"29.5.5.1\",\"14.0.3.8\",\"57.8.2.9\",\"86.4.9.6\",\"33.1.6.1\",\"99.6.5.5\",\"63.5.7.7\",\"69.4.8.9\",\"53.9.3.8\",\"43.4.7.0\",\"82.3.0.8\",\"39.0.6.5\",\"50.4.2.5\",\"36.1.9.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"55.0.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.0.2.4\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700471.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"3571250156\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1272,\"moneyAvailable\":60518197161,\"moneyMax\":1512954929025,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"63.9.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"64.1.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.1.5.1\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1233,\"moneyAvailable\":43385321093,\"moneyMax\":1084633027325,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"52.6.6.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.8.8.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.8.8.3\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":950,\"moneyAvailable\":29090009706,\"moneyMax\":727250242650,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":70,\"serversOnNetwork\":[\"69.7.0.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.0.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.0.4.0\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.0.4.0\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974801.cct\",\"type\":\"Total Ways to Sum\",\"data\":67,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1177,\"moneyAvailable\":34277823204,\"moneyMax\":856945580100,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":55,\"serversOnNetwork\":[\"25.2.6.0\",\"10.0.4.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"51.8.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"51.8.6.3\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-369763-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[8,-1,-6,10,-10,-7,4,-9,8,-6,5],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"dir\":0,\"requiredHackingSkill\":1291,\"moneyAvailable\":31503136915,\"moneyMax\":787578422875,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":90,\"serversOnNetwork\":[\"69.7.0.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.9.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.9.9.6\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259198-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[13,121,10,158,127,124,120,194,7,138,25,140,82,69,58,179,190,159,1,39,44,152,190,122,35,173,51,47,61],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":979,\"moneyAvailable\":22124156343,\"moneyMax\":553103908575,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":63,\"serversOnNetwork\":[\"25.2.6.0\",\"55.0.2.4\",\"95.7.4.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.2.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.2.6.0\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.2.6.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.2.6.0\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1052,\"moneyAvailable\":18492853327,\"moneyMax\":462321333175,\"hackDifficulty\":97,\"baseDifficulty\":97,\"minDifficulty\":32,\"serverGrowth\":98,\"serversOnNetwork\":[\"69.2.7.8\",\"4.0.4.0\",\"63.9.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"69.7.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.7.0.6\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":1,\"fn\":\"contract-758711-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":50,\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":1237,\"moneyAvailable\":16634317748,\"moneyMax\":415857943700,\"hackDifficulty\":67,\"baseDifficulty\":67,\"minDifficulty\":22,\"serverGrowth\":91,\"serversOnNetwork\":[\"9.3.8.8\",\"63.8.8.3\",\"51.8.6.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"0.5.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.5.8.9\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1035,\"moneyAvailable\":26314298242,\"moneyMax\":657857456050,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":93,\"serversOnNetwork\":[\"69.2.7.8\",\"52.6.6.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.8.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.8.8.5\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2048,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.8.8.5\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592308-NoodleBar.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[179,153,3,118,72,166,49,106,100,94,130,90,121,13,39,165,167,165],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-54597.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,10],[8,14],[9,16],[20,28],[16,20],[8,18],[22,26],[13,16],[25,29],[24,26],[22,32],[6,16],[14,15],[24,28],[12,17],[23,29],[5,13],[23,29],[8,14]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":957,\"moneyAvailable\":1641612879,\"moneyMax\":41040321975,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":99,\"serversOnNetwork\":[\"80.1.6.0\",\"93.3.4.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"10.0.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.0.4.8\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1541,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"4.0.4.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"29.7.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"29.7.7.2\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":942,\"moneyAvailable\":1048940019,\"moneyMax\":26223500475,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":69,\"serversOnNetwork\":[\"80.0.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"19.0.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.0.8.6\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-333062-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[32,144,135,38,172,5,103,32,116,100,98,184,118,166,12,196,115,101,95,167,104,106,142,79,3,73,34,37,36,133,37,11,100,52,176,84,126,45],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-201083.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[178,170,150,128,123,126],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":865,\"moneyAvailable\":935117216,\"moneyMax\":23377930400,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":54,\"serversOnNetwork\":[\"58.3.2.7\",\"13.7.6.9\",\"68.3.6.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"30.8.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.8.1.7\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":892,\"moneyAvailable\":743524425,\"moneyMax\":18588110625,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":48,\"serversOnNetwork\":[\"72.3.0.8\",\"39.3.6.1\",\"80.1.6.0\",\"62.3.6.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.3.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.3.8.8\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.3.8.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.3.8.8\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":812,\"moneyAvailable\":607344402,\"moneyMax\":15183610050,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":72,\"serversOnNetwork\":[\"62.3.6.5\",\"69.7.0.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"69.2.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.2.7.8\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"69.2.7.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"69.2.7.8\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":875,\"moneyAvailable\":715431876,\"moneyMax\":17885796900,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":78,\"serversOnNetwork\":[\"39.3.6.1\",\"25.2.6.0\",\"0.5.8.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"65.1.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.1.0.0\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":877,\"moneyAvailable\":941429741,\"moneyMax\":23535743525,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":91,\"serversOnNetwork\":[\"58.3.2.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"38.4.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.4.8.4\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.4.8.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"38.4.8.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.4.8.4\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917685-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":39,\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"dir\":0,\"requiredHackingSkill\":824,\"moneyAvailable\":1149197195,\"moneyMax\":28729929875,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":89,\"serversOnNetwork\":[\"5.5.3.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"39.3.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"39.3.6.1\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"39.3.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"39.3.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"39.3.6.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561799-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10,47,48,48,35,25,36],[15,48,37,50,46,37,42],[27,27,2,19,17,14,36],[28,21,41,19,8,30,7],[45,25,46,25,13,31,10]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"dir\":0,\"requiredHackingSkill\":840,\"moneyAvailable\":777339964,\"moneyMax\":19433499100,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":77,\"serversOnNetwork\":[\"30.8.1.7\",\"69.2.7.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"80.0.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.0.7.7\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.0.7.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"80.0.7.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":808,\"moneyAvailable\":538321327,\"moneyMax\":13458033175,\"hackDifficulty\":67,\"baseDifficulty\":67,\"minDifficulty\":22,\"serverGrowth\":73,\"serversOnNetwork\":[\"68.3.6.7\",\"29.7.7.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"13.7.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.7.6.9\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":943,\"moneyAvailable\":881229517,\"moneyMax\":22030737925,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":70,\"serversOnNetwork\":[\"19.0.8.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"48.7.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.7.0.5\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-223454-Sector-12.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":703741921,\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":848,\"moneyAvailable\":830604591,\"moneyMax\":20765114775,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":82,\"serversOnNetwork\":[\"96.4.4.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"40.0.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.0.2.5\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-682075.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,11],[23,25],[5,7],[16,17],[14,18],[20,29],[4,11],[20,30],[20,25],[7,15],[8,11],[14,19],[11,19],[5,12]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":876,\"moneyAvailable\":1073971037,\"moneyMax\":26849275925,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":62,\"serversOnNetwork\":[\"91.5.0.7\",\"58.3.2.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.5.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.5.5.0\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"53.5.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"53.5.5.0\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-30059.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":737727044,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592742.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[40,157,48,60],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-938602.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1561948795\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":917,\"moneyAvailable\":952255899,\"moneyMax\":23806397475,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":61,\"serversOnNetwork\":[\"16.7.4.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"34.2.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.2.0.2\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":784,\"moneyAvailable\":1006208179,\"moneyMax\":25155204475,\"hackDifficulty\":59,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":75,\"serversOnNetwork\":[\"72.3.0.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"80.1.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.1.6.0\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":820,\"moneyAvailable\":787337847,\"moneyMax\":19683446175,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":70,\"serversOnNetwork\":[\"30.8.1.7\",\"87.8.8.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.3.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.3.0.8\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"72.3.0.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"72.3.0.8\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":751,\"moneyAvailable\":813469457,\"moneyMax\":20336736425,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":71,\"serversOnNetwork\":[\"58.3.2.7\",\"30.8.1.7\",\"34.2.0.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"58.3.2.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.3.2.7\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":813,\"moneyAvailable\":1351979066,\"moneyMax\":33799476650,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":67,\"serversOnNetwork\":[\"40.0.2.5\",\"19.0.8.6\",\"65.1.0.0\",\"72.3.0.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"16.7.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.7.4.9\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.7.4.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.7.4.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.7.4.9\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-206466-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[101,99,58,135,127,32,46,144,40,32,123,78,119,70,43,56,164,125,11,36,71,147,180,111,21,186,125,45,88,151,117,200,124,102,2,113,101,126,7,95,46,53,173,44],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"dir\":0,\"requiredHackingSkill\":806,\"moneyAvailable\":1684875765,\"moneyMax\":42121894125,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":83,\"serversOnNetwork\":[\"8.4.8.6\",\"53.5.5.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"68.3.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.3.6.7\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":830,\"moneyAvailable\":1108975012,\"moneyMax\":27724375300,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":67,\"serversOnNetwork\":[\"19.0.8.6\",\"80.0.7.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"91.2.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.2.2.0\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":806,\"moneyAvailable\":1438769547,\"moneyMax\":35969238675,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":74,\"serversOnNetwork\":[\"5.5.3.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.5.3.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.5.3.9\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.5.3.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"5.5.3.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.5.3.9\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802989.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,47,11,39,35],[39,50,13,10,16],[34,4,33,20,32]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-18051.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[25,181,116,113,114,12,45,92,88,168,160,138,83,104,112,48,96,134,167,171,156,9,25,54,50,46,156,179,115,82,169,11,25,165,120,53,47,199,63,71,21,173,26,121,147,21,49,118,79],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":818,\"moneyAvailable\":1020600097,\"moneyMax\":25515002425,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":78,\"serversOnNetwork\":[\"35.5.9.0\",\"38.4.8.4\",\"91.2.2.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"0.9.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.9.8.5\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"0.9.8.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"0.9.8.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"0.9.8.5\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":689,\"moneyAvailable\":775806686,\"moneyMax\":19395167150,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":65,\"serversOnNetwork\":[\"65.6.0.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"16.8.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.8.3.6\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.8.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.8.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.8.3.6\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":492,\"moneyAvailable\":631911633,\"moneyMax\":15797790825,\"hackDifficulty\":52,\"baseDifficulty\":52,\"minDifficulty\":17,\"serverGrowth\":60,\"serversOnNetwork\":[\"0.5.7.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"96.4.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.4.4.6\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.4.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.4.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"96.4.4.6\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":580,\"moneyAvailable\":621266284,\"moneyMax\":15531657100,\"hackDifficulty\":55,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":50,\"serversOnNetwork\":[\"73.2.6.7\",\"48.7.0.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"91.5.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.5.0.7\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.5.0.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.5.0.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"91.5.0.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111358.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,26],[12,20]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":409,\"moneyAvailable\":245125783,\"moneyMax\":6128144575,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":36,\"serversOnNetwork\":[\"73.2.6.7\",\"40.0.2.5\",\"35.5.9.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"73.2.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.2.6.7\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"73.2.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"73.2.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"73.2.6.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-164853.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":742859859,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":401,\"moneyAvailable\":210903320,\"moneyMax\":5272583000,\"hackDifficulty\":48,\"baseDifficulty\":48,\"minDifficulty\":16,\"serverGrowth\":40,\"serversOnNetwork\":[\"34.9.3.5\",\"96.4.4.6\",\"91.5.0.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"0.5.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.5.7.2\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"0.5.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"0.5.7.2\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-32270-NoodleBar.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,2,31,35,46,28],[50,26,48,32,31,19],[7,50,15,30,15,12]],\"reward\":{\"type\":2,\"name\":\"Noodle Bar\"}}}],\"dir\":0,\"requiredHackingSkill\":734,\"moneyAvailable\":973543547,\"moneyMax\":24338588675,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":77,\"serversOnNetwork\":[\"60.0.8.8\",\"16.8.3.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"65.6.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.6.0.1\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"65.6.0.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"65.6.0.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"65.6.0.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":472,\"moneyAvailable\":266422614,\"moneyMax\":6660565350,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":60,\"serversOnNetwork\":[\"61.6.7.2\",\"0.9.8.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"80.3.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.3.7.1\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-503120-AlphaEnterprises.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1958781126\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-203651-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[44],[40],[49],[47],[17],[13],[42],[26],[16]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"dir\":0,\"requiredHackingSkill\":575,\"moneyAvailable\":558947508,\"moneyMax\":13973687700,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":62,\"serversOnNetwork\":[\"77.6.4.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"60.9.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.9.2.2\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.9.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.9.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.9.2.2\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":426,\"moneyAvailable\":461775665,\"moneyMax\":11544391625,\"hackDifficulty\":66,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":50,\"serversOnNetwork\":[\"60.0.8.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"61.6.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.6.7.2\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.6.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.6.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.6.7.2\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-776764.cct\",\"type\":\"Total Ways to Sum\",\"data\":43,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":311,\"moneyAvailable\":2399451511,\"moneyMax\":4800628975,\"hackDifficulty\":13.722,\"baseDifficulty\":36,\"minDifficulty\":12,\"serverGrowth\":46,\"serversOnNetwork\":[\"68.0.5.7\",\"65.6.0.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"14.2.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.2.7.0\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":389,\"moneyAvailable\":245748611,\"moneyMax\":6143715275,\"hackDifficulty\":61,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":48,\"serversOnNetwork\":[\"68.0.5.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"34.9.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.9.3.5\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"34.9.3.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.9.3.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.9.3.5\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":425,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":68,\"serversOnNetwork\":[\"68.0.5.7\",\"73.2.6.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"77.6.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.6.4.7\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703577.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[43,1,3],[25,36,44],[16,46,14],[47,50,16],[37,25,34],[3,41,43],[32,34,35],[10,46,40],[20,8,8],[17,12,45]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":274,\"moneyAvailable\":985638205,\"moneyMax\":1971623125,\"hackDifficulty\":12,\"baseDifficulty\":35,\"minDifficulty\":12,\"serverGrowth\":58,\"serversOnNetwork\":[\"97.9.3.2\",\"80.3.7.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"35.3.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.3.0.0\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.3.0.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.3.0.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"35.3.0.0\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":24850310,\"moneyMax\":50000000,\"hackDifficulty\":3.2439999999999998,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.4.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.4.6.6\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.4.6.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.4.6.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"59.4.6.6\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-430082.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,34],[23,28],[6,10],[22,26],[20,28],[19,22],[4,8],[23,32],[19,22],[18,22]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-669288.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":856942294,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":28658591,\"moneyMax\":57500000,\"hackDifficulty\":3.246,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\",\"22.1.9.4\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"47.0.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.0.5.5\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.0.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.0.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"47.0.5.5\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"96.7.9.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"22.1.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.1.9.4\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.1.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"22.1.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.1.9.4\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995326-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[43,15,24,24,35,22,43,30,1],[43,1,4,17,22,22,18,43,38],[6,10,40,20,24,23,31,15,8],[43,26,7,1,12,8,11,44,18],[16,18,49,22,2,38,25,9,9],[48,49,36,22,15,31,30,27,26],[49,29,48,14,6,25,28,2,2],[19,13,48,33,13,18,12,13,29],[33,40,45,50,36,38,7,2,11]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":93257362,\"moneyMax\":187500000,\"hackDifficulty\":8,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"59.4.6.6\",\"68.0.5.7\",\"97.9.3.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"42.2.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.2.9.7\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.2.9.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.2.9.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"42.2.9.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":34219406,\"moneyMax\":68750000,\"hackDifficulty\":7.268,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"96.6.2.4\",\"51.5.4.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"68.0.5.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.0.5.7\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.0.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"68.0.5.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.0.5.7\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"22.1.9.4\",\"61.6.7.2\",\"14.2.7.0\",\"34.9.3.5\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"51.5.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"51.5.4.0\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"51.5.4.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"51.5.4.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"51.5.4.0\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108178-TianDiHui.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":293861726,\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"hackDifficulty\":13.036,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"42.2.9.7\",\"60.0.8.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"68.6.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.6.8.1\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.6.8.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.6.8.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"68.6.8.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"hackDifficulty\":8.916,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"32.8.7.1\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.5.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.5.3.2\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.5.3.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.5.3.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"20.5.3.2\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":49837680,\"moneyMax\":100000000,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"97.9.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.9.3.2\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"97.9.3.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"97.9.3.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"97.9.3.2\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":298641396,\"moneyMax\":600000000,\"hackDifficulty\":7,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"22.1.9.4\",\"77.6.4.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"96.7.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.7.9.8\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.7.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.7.9.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"96.7.9.8\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-224010.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":650408005,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965978-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[77,126,23,8,51,181,124,55,117,192,158,170,186,154,94,111,1,149,146,138,8,9,120,197,49],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":124836350,\"moneyMax\":250000000,\"hackDifficulty\":5.316,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"47.0.5.5\",\"16.5.0.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"16.5.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.5.0.8\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.5.0.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.5.0.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.5.0.8\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":200,\"moneyAvailable\":829958750,\"moneyMax\":1663947150,\"hackDifficulty\":8.56,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":37,\"serversOnNetwork\":[\"96.7.9.8\",\"94.4.8.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"94.4.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.4.8.9\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":236,\"moneyAvailable\":630392989,\"moneyMax\":1263093400,\"hackDifficulty\":14,\"baseDifficulty\":43,\"minDifficulty\":14,\"serverGrowth\":32,\"serversOnNetwork\":[\"16.5.0.8\",\"3.0.4.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":4}},\"96.6.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.6.2.4\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.6.2.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"96.6.2.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.6.2.4\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"hackDifficulty\":14.54,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"42.2.9.7\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"8.4.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"8.4.8.6\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"8.4.8.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"8.4.8.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"8.4.8.6\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700501-NiteSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"811937153\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":493,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":27,\"serversOnNetwork\":[\"3.0.4.9\",\"16.7.4.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"52.6.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.6.6.1\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"52.6.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"52.6.6.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1023,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":53,\"serversOnNetwork\":[\"0.5.8.9\",\"64.1.5.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"35.5.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.5.9.0\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":684,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"hackDifficulty\":43,\"baseDifficulty\":43,\"minDifficulty\":14,\"serverGrowth\":60,\"serversOnNetwork\":[\"91.5.0.7\",\"5.5.3.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"62.3.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.3.6.5\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.3.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.3.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.3.6.5\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-10398-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,6,5,8,9,0,6,8,7,6,10,4,8,3,5,5,5,3,0,0,2],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-670384.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"157337148\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410674-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,10,4,0,0,0,1,0,0,0,0,6,0,9,0,7,4,8,0,8,5],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-216302-TianDiHui.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,18],[35,17],[1,40],[25,42]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"dir\":0,\"requiredHackingSkill\":542,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"30.8.1.7\",\"9.3.8.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"3.0.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.0.4.9\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"3.0.4.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"3.0.4.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"3.0.4.9\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":365,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"94.4.8.9\",\"8.4.8.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"60.0.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.0.8.8\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.0.8.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.0.8.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.0.8.8\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":204,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"51.5.4.0\",\"0.5.7.2\",\"60.9.2.2\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"93.3.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.3.4.9\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.4.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"93.3.4.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.4.9\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":523,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"87.8.8.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"32.8.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.8.7.1\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.8.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"32.8.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.8.7.1\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":53,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"68.6.8.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"95.7.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.7.4.9\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848508.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,2,8,0,6,0,0,0,4,9,8,7,3,3,0,10,0,4,3,0,0],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"63.9.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.7.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.7.7.7\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117286-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[19,164,81,124,1,36,198,123,50,22,28,182,181,134],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"42.3.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.3.0.0\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.3.0.0\",\"module\":\"\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"83.3.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.3.1.6\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":108.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"83.3.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"83.3.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"83.3.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"83.3.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"83.3.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"the-hub\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"83.3.1.6\",\"module\":{}}},\"server\":\"83.3.1.6\",\"logs\":[\"Executing weaken() on server the-hub in 504.779 seconds (t=35)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":244.60999999999464,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":35,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"22.1.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.1.5.0\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":37.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"22.1.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"22.1.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"22.1.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"22.1.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"22.1.5.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"omega-net\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"22.1.5.0\",\"module\":{}}},\"server\":\"22.1.5.0\",\"logs\":[\"Executing weaken() on server omega-net in 216.033 seconds (t=12)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":154.40999999999977,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":12,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"10.1.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.1.4.5\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":1457,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"10.1.4.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"10.1.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"10.1.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"10.1.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"10.1.4.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"johnson-ortho\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"10.1.4.5\",\"module\":{}}},\"server\":\"10.1.4.5\",\"logs\":[\"Executing grow() on server johnson-ortho in 315.282 seconds (t=470)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":34.409999999999954,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":470,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.9.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.9.8.9\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":21.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.9.8.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"52.9.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"52.9.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"52.9.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"52.9.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"max-hardware\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"52.9.8.9\",\"module\":{}}},\"server\":\"52.9.8.9\",\"logs\":[\"Executing weaken() on server max-hardware in 70.649 seconds (t=7)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":28.409999999999933,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":7,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.3.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.3.9.5\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2170,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"92.3.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"92.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"92.3.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"92.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"92.3.9.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"rho-construction\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"92.3.9.5\",\"module\":{}}},\"server\":\"92.3.9.5\",\"logs\":[\"Executing weaken() on server rho-construction in 2,934.395 seconds (t=700)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":700,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.6.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.6.7.1\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":3084.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.6.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"52.6.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"52.6.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"52.6.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"52.6.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"crush-fitness\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"52.6.7.1\",\"module\":{}}},\"server\":\"52.6.7.1\",\"logs\":[\"Executing grow() on server crush-fitness in 316.728 seconds (t=995)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":28.409999999999933,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":995,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"57.9.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.9.4.6\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":1736,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.9.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"57.9.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.9.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.9.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"57.9.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"phantasy\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.9.4.6\",\"module\":{}}},\"server\":\"57.9.4.6\",\"logs\":[\"Executing grow() on server phantasy in 81.351 seconds (t=560)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":10.409999999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":560,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"57.2.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.2.0.7\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2728,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.2.0.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"57.2.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.2.0.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.2.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"57.2.0.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"catalyst\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.2.0.7\",\"module\":{}}},\"server\":\"57.2.0.7\",\"logs\":[\"Executing weaken() on server catalyst in 3,222.554 seconds (t=880)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":880,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.5.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.5.2.8\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2728,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"12.5.2.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"12.5.2.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"12.5.2.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"12.5.2.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"12.5.2.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"catalyst\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"12.5.2.8\",\"module\":{}}},\"server\":\"12.5.2.8\",\"logs\":[\"Executing weaken() on server catalyst in 3,214.789 seconds (t=880)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1325.6100000001645,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":880,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"11.9.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.9.2.4\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":15.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"11.9.2.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"11.9.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"11.9.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"11.9.2.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"11.9.2.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"sigma-cosmetics\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"11.9.2.4\",\"module\":{}}},\"server\":\"11.9.2.4\",\"logs\":[\"Executing weaken() on server sigma-cosmetics in 24.431 seconds (t=5)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":22.409999999999954,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":5,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.0.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.0.3.6\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":189.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"56.0.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"56.0.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"56.0.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"56.0.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"56.0.3.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"silver-helix\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"56.0.3.6\",\"module\":{}}},\"server\":\"56.0.3.6\",\"logs\":[\"Executing weaken() on server silver-helix in 243.534 seconds (t=61)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":226.60999999999567,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":61,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"29.5.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"29.5.5.1\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":1515.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"29.5.5.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"29.5.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"29.5.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"29.5.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"29.5.5.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"29.5.5.1\",\"module\":{}}},\"server\":\"29.5.5.1\",\"logs\":[\"Executing grow() on server harakiri-sushi in 36.156 seconds (t=489)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":22.409999999999954,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":489,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"14.0.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.0.3.8\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":1984,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"14.0.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"14.0.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"14.0.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"14.0.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"14.0.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"rothman-uni\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"14.0.3.8\",\"module\":{}}},\"server\":\"14.0.3.8\",\"logs\":[\"Executing weaken() on server rothman-uni in 2,213.315 seconds (t=640)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":640,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"57.8.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.8.2.9\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":1519,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.8.2.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"57.8.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.8.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.8.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"57.8.2.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"zer0\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"57.8.2.9\",\"module\":{}}},\"server\":\"57.8.2.9\",\"logs\":[\"Executing grow() on server zer0 in 72.312 seconds (t=490)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":10.409999999999997,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":490,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.4.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.4.9.6\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2046,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.4.9.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"86.4.9.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"86.4.9.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"86.4.9.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"86.4.9.6\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"summit-uni\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"86.4.9.6\",\"module\":{}}},\"server\":\"86.4.9.6\",\"logs\":[\"Executing weaken() on server summit-uni in 2,654.886 seconds (t=660)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":660,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.1.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.1.6.1\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2542,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.1.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"33.1.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"33.1.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"33.1.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"33.1.6.1\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"comptek\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"33.1.6.1\",\"module\":{}}},\"server\":\"33.1.6.1\",\"logs\":[\"Executing weaken() on server comptek in 2,716.721 seconds (t=820)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1325.6100000001645,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":820,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"99.6.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.6.5.5\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":393.05,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"99.6.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"99.6.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"99.6.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"99.6.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"99.6.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"joesguns\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"99.6.5.5\",\"module\":{}}},\"server\":\"99.6.5.5\",\"logs\":[\"[INF] bot16/joesguns: hack $31250000\",\"[INF] bot16/joesguns: requires 127 threads for 7 seconds\",\"[INF] bot16/joesguns: using 387.34999999999997GB of 65530.3GB\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":7.610000000000005,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"joesguns\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"99.6.5.5\",\"module\":{}}},\"server\":\"99.6.5.5\",\"logs\":[\"Attempting to hack joesguns in 7.062 seconds (t=127)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.410000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":127,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.5.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.5.7.7\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2294,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"63.5.7.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"63.5.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"63.5.7.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"63.5.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"63.5.7.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"alpha-ent\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"63.5.7.7\",\"module\":{}}},\"server\":\"63.5.7.7\",\"logs\":[\"Executing weaken() on server alpha-ent in 3,653.199 seconds (t=740)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":740,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"69.4.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.4.8.9\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":282.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"69.4.8.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"69.4.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"69.4.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"69.4.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"69.4.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"iron-gym\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"69.4.8.9\",\"module\":{}}},\"server\":\"69.4.8.9\",\"logs\":[\"Executing weaken() on server iron-gym in 186.882 seconds (t=91)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":94.4100000000008,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":91,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.9.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.9.3.8\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2232,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.9.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"53.9.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"53.9.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"53.9.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"53.9.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"millenium-fitness\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"53.9.3.8\",\"module\":{}}},\"server\":\"53.9.3.8\",\"logs\":[\"Executing weaken() on server millenium-fitness in 3,052.527 seconds (t=720)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":720,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.4.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.4.7.0\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2914,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"43.4.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"43.4.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"43.4.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"43.4.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"43.4.7.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"netlink\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"43.4.7.0\",\"module\":{}}},\"server\":\"43.4.7.0\",\"logs\":[\"Executing weaken() on server netlink in 3,408.514 seconds (t=940)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":940,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.3.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.3.0.8\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2914,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"82.3.0.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"82.3.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"82.3.0.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"82.3.0.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"82.3.0.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"aevum-police\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"82.3.0.8\",\"module\":{}}},\"server\":\"82.3.0.8\",\"logs\":[\"Executing weaken() on server aevum-police in 3,281.051 seconds (t=940)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1776.010000000267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":940,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"39.0.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"39.0.6.5\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":244.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"39.0.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"39.0.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"39.0.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"39.0.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"39.0.6.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"hong-fang-tea\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"39.0.6.5\",\"module\":{}}},\"server\":\"39.0.6.5\",\"logs\":[\"Executing weaken() on server hong-fang-tea in 52.820 seconds (t=79)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":22.409999999999954,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":79,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.4.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.4.2.5\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":18.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"50.4.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"50.4.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"50.4.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"50.4.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"50.4.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"nectar-net\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"50.4.2.5\",\"module\":{}}},\"server\":\"50.4.2.5\",\"logs\":[\"Executing weaken() on server nectar-net in 39.022 seconds (t=6)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":34.409999999999954,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":6,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"36.1.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.1.9.4\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":2914,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"36.1.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"// @ts-check\\r\\nimport { Logger } from 'lib-log.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getWeakenTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-weaken.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-weaken.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getGrowTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-grow.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);\\r\\n        \\r\\n        await ns.exec('ms-worker-grow.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        let goal = current / 2;\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${Math.floor(ns.getHackTime(target))} seconds`);\\r\\n\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-hack.js')\\r\\n        log.info(`${ns.getHostname()}/${target}: using ${scriptRam * threads}GB of ${serverRam}GB`);     \\r\\n        \\r\\n        await ns.exec('ms-worker-hack.js', ns.getHostname(), threads, target);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"36.1.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.grow(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"36.1.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"36.1.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.hack(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.05,\"server\":\"36.1.9.4\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"syscore\"],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    await ns.weaken(target);\\r\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\r\\n}\",\"ramUsage\":3.1,\"server\":\"36.1.9.4\",\"module\":{}}},\"server\":\"36.1.9.4\",\"logs\":[\"Executing weaken() on server syscore in 4,592.393 seconds (t=940)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1319.6100000001632,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":940,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"55.0.2.4\":[0,0,0,0],\"64.1.5.1\":[0,0,0,0],\"63.8.8.3\":[0,0,0,0],\"4.0.4.0\":[0,0,0,0],\"51.8.6.3\":[0,0,0,0],\"63.9.9.6\":[0,0,0,0],\"25.2.6.0\":[0,0,0,0],\"69.7.0.6\":[0,0,0,0],\"0.5.8.9\":[0,0,0,0],\"87.8.8.5\":[0,0,0,0],\"10.0.4.8\":[0,0,0,0],\"29.7.7.2\":[0,0,0,0],\"19.0.8.6\":[0,0,0,0],\"30.8.1.7\":[0,0,0,0],\"9.3.8.8\":[0,0,0,0],\"69.2.7.8\":[0,0,0,0],\"65.1.0.0\":[0,0,0,0],\"38.4.8.4\":[0,0,0,0],\"39.3.6.1\":[0,0,0,0],\"80.0.7.7\":[0,0,0,0],\"13.7.6.9\":[0,0,0,0],\"48.7.0.5\":[0,0,0,0],\"40.0.2.5\":[0,0,0,0],\"53.5.5.0\":[0,0,0,0],\"34.2.0.2\":[0,0,0,0],\"80.1.6.0\":[0,0,0,0],\"72.3.0.8\":[0,0,0,0],\"58.3.2.7\":[0,0,0,0],\"16.7.4.9\":[0,0,0,0],\"68.3.6.7\":[0,0,0,0],\"91.2.2.0\":[0,0,0,0],\"5.5.3.9\":[0,0,0,0],\"0.9.8.5\":[0,0,0,0],\"16.8.3.6\":[0,0,0,0],\"96.4.4.6\":[0,0,0,0],\"91.5.0.7\":[0,0,0,0],\"73.2.6.7\":[0,0,0,0],\"0.5.7.2\":[0,0,0,0],\"65.6.0.1\":[0,0,0,0],\"80.3.7.1\":[0,0,0,0],\"60.9.2.2\":[0,0,0,0],\"61.6.7.2\":[0,0,0,0],\"14.2.7.0\":[0,0,0,0],\"34.9.3.5\":[0,0,0,0],\"77.6.4.7\":[0,0,0,0],\"35.3.0.0\":[0,0,0,0],\"59.4.6.6\":[0,0,0,0],\"47.0.5.5\":[0,0,0,0],\"22.1.9.4\":[0,0,0,0],\"42.2.9.7\":[0,0,0,0],\"68.0.5.7\":[0,0,0,0],\"51.5.4.0\":[0,0,0,0],\"68.6.8.1\":[0,0,0,0],\"20.5.3.2\":[0,0,0,0],\"97.9.3.2\":[0,0,0,0],\"96.7.9.8\":[0,0,0,0],\"16.5.0.8\":[0,0,0,0],\"94.4.8.9\":[0,0,0,0],\"96.6.2.4\":[0,0,0,0],\"8.4.8.6\":[0,0,0,0],\"52.6.6.1\":[0,0,0,0],\"35.5.9.0\":[0,0,0,0],\"62.3.6.5\":[0,0,0,0],\"3.0.4.9\":[0,0,0,0],\"60.0.8.8\":[0,0,0,0],\"93.3.4.9\":[0,0,0,0],\"32.8.7.1\":[0,0,0,0],\"95.7.4.9\":[0,0,0,0],\"12.7.7.7\":[0,0,0,0],\"42.3.0.0\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":4028.822131350879,\"favor\":54,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":0,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1.0201,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":68873.68659102713,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":4,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":12996.365932495493,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":13,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":14450.72973340037,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":6627.901838194136,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":17,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":2231.0087201871384,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"10.0.4.8\",\"BitRunners Server\":\"62.3.6.5\",\"The Black Hand Server\":\"3.0.4.9\",\"NiteSec Server\":\"60.0.8.8\",\"The Dark Army Server\":\"93.3.4.9\",\"CyberSec Server\":\"32.8.7.1\",\"Daedalus Server\":\"95.7.4.9\",\"w0r1d_d43m0n\":\"12.7.7.7\",\"Darkweb Server\":\"42.3.0.0\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.42.0\"","AllGangsSave":"","CorporationResearchTreesSave":""}}