{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":3545,\"hp\":47,\"max_hp\":47,\"strength\":309,\"defense\":376,\"dexterity\":312,\"agility\":190,\"charisma\":989,\"intelligence\":0,\"hacking_chance_mult\":2.448011125199547,\"hacking_speed_mult\":2.5088585843881934,\"hacking_money_mult\":7.056160460439947,\"hacking_grow_mult\":4.286994643381715,\"hacking_exp\":57077657858.80204,\"strength_exp\":8452.66665243685,\"defense_exp\":8390.193136897773,\"dexterity_exp\":8327.719621358696,\"agility_exp\":8746.292175470513,\"charisma_exp\":74873.8836384955,\"intelligence_exp\":0,\"hacking_mult\":5.98405452950576,\"strength_mult\":3.3914194149782513,\"defense_mult\":4.128684505190915,\"dexterity_mult\":3.4360433546490183,\"agility_mult\":2.057757428823223,\"charisma_mult\":6.208548128106637,\"hacking_exp_mult\":8.338774270887129,\"strength_exp_mult\":3.1236757769536525,\"defense_exp_mult\":3.1236757769536525,\"dexterity_exp_mult\":3.1236757769536525,\"agility_exp_mult\":3.1236757769536525,\"charisma_exp_mult\":6.247351553907305,\"company_rep_mult\":5.399496700162743,\"faction_rep_mult\":3.718661639230539,\"money\":\"418150224675506.33269\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Aevum\",\"location\":\"NetLink Technologies\",\"jobs\":{\"Fulcrum Technologies\":\"Lead Software Developer\",\"Bachman & Associates\":\"Senior Software Engineer\",\"ECorp\":\"Senior Software Engineer\",\"MegaCorp\":\"Senior Software Engineer\",\"KuaiGong International\":\"Senior Software Engineer\"},\"companyName\":\"KuaiGong International\",\"currentServer\":\"18.6.0.6\",\"purchasedServers\":[\"52.0.0.9\",\"79.2.7.0\",\"18.6.4.5\",\"88.2.2.5\",\"72.9.3.1\",\"7.2.5.0\",\"91.0.4.3\",\"58.1.7.1\",\"61.3.0.4\",\"69.3.1.7\",\"46.3.0.6\",\"96.5.8.3\",\"2.9.8.5\",\"54.6.3.4\",\"53.4.5.4\",\"30.7.7.2\",\"62.4.1.6\",\"94.7.2.2\",\"1.5.6.7\",\"26.6.9.1\",\"57.3.6.5\",\"86.2.9.4\",\"56.3.0.2\",\"8.3.9.5\",\"32.2.2.1\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":1804597306.958969,\"onlineTimeSeconds\":37976.0000000329,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":1804596832.457744,\"onlineTimeSeconds\":37976.0000000329,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":1804584161.5001087,\"onlineTimeSeconds\":37976.0000000329,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":1804602337.5594175,\"onlineTimeSeconds\":37976.0000000329,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":1804545997.8556414,\"onlineTimeSeconds\":37916.00000003268,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":1804414101.1484692,\"onlineTimeSeconds\":37706.00000003192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":1804409956.5794616,\"onlineTimeSeconds\":37706.00000003192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":1804403739.7259502,\"onlineTimeSeconds\":37706.00000003192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":1800497962.3542767,\"onlineTimeSeconds\":37706.00000003192,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":1800090687.3528936,\"onlineTimeSeconds\":37616.00000003159,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":1798852290.584481,\"onlineTimeSeconds\":37376.00000003072,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":1798549536.0029063,\"onlineTimeSeconds\":37196.000000030064,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":1798549536.0029063,\"onlineTimeSeconds\":37196.000000030064,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":1798480459.8527818,\"onlineTimeSeconds\":37196.000000030064,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":1798480459.8527818,\"onlineTimeSeconds\":37196.000000030064,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":1798342307.552533,\"onlineTimeSeconds\":37196.000000030064,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":1798342307.552533,\"onlineTimeSeconds\":37196.000000030064,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":1798342307.552533,\"onlineTimeSeconds\":37196.000000030064,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":1797098936.8502936,\"onlineTimeSeconds\":37166.000000029955,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":1796960784.5500448,\"onlineTimeSeconds\":37166.000000029955,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-20\",\"totalMoneyGenerated\":1787654845.6052837,\"onlineTimeSeconds\":37016.00000002941,\"moneyGainRatePerSecond\":48353.30508653118}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-21\",\"totalMoneyGenerated\":1776790548.7137158,\"onlineTimeSeconds\":36746.00000002843,\"moneyGainRatePerSecond\":48353.30508653118}}],\"factions\":[\"Netburners\",\"BitRunners\",\"NiteSec\",\"CyberSec\",\"The Black Hand\",\"Daedalus\",\"Tian Di Hui\",\"Bachman & Associates\",\"ECorp\",\"MegaCorp\",\"Fulcrum Secret Technologies\"],\"factionInvitations\":[\"Sector-12\",\"Aevum\",\"Chongqing\",\"New Tokyo\",\"Volhaven\",\"Ishima\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"}],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":46,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":2.1557458778148058,\"crime_success_mult\":2.4497112247895516,\"isWorking\":true,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"Fulcrum Secret Technologies\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":1.2508161406330693,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":32.043993396144884,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":98.81447511001232,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":2531.4754782954456,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":15800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.5868950533777664,\"hacknet_node_money_mult\":4.942721095477253,\"hacknet_node_purchase_cost_mult\":0.36617945918155914,\"hacknet_node_ram_cost_mult\":0.4786659597144565,\"hacknet_node_core_cost_mult\":0.4786659597144565,\"hacknet_node_level_cost_mult\":0.406866065757288,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1552627898636,\"totalPlaytime\":3758168200,\"playtimeSinceLastAug\":37983800,\"playtimeSinceLastBitnode\":322322000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":370400965576617.5,\"hacknetnode\":39583187405.164566,\"infiltration\":0,\"stock\":64876449084243.625,\"total\":435317054758239.75,\"work\":56891906.86296897}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":805308645041699.8,\"hacknetnode\":226107121613.91397,\"infiltration\":0,\"stock\":662042465798995.8,\"total\":1467577459056633,\"work\":240771703.31591654}},\"scriptProdSinceLastAug\":435277414048103.5,\"total_money\":\"275820126137160696.69\",\"lifetime_money\":\"275820126137160696.69\",\"totalHacknetNodeProduction\":0,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":2097152,\"ramUsed\":2097018.65,\"cpuCores\":5,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let costCap = (maxProduction * 60 * 60 * 1) || Infinity;\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} uncappedCost\\r\\n     */\\r\\n    function getCappedCost(name, uncappedCost) {\\r\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\r\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let costs = [];\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\r\\n    }\\r\\n\\r\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        /** @type {number} */\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        /** @type {number} */\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = cost + getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nconst LARGEST_USEFUL_SERVER = 16384;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number' || !Number.isNaN(parseInt(ns.args[0]));\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? parseInt(ns.args[0]) : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    let maxPurchaseRam = Math.min(ns.getPurchasedServerMaxRam(), LARGEST_USEFUL_SERVER);\\r\\n    for (let power = 0; Math.pow(2, power) <= maxPurchaseRam; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (ram > minRam || existingServers.length < limit) {\\r\\n        let processes = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                let ps = ns.ps(existingServers[i]);\\r\\n                if (ps.length > 0) {\\r\\n                    processes.push(existingServers[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processes.length > 0) {\\r\\n            if (dryRun) {\\r\\n                log.info('scripts running on existing servers, continuing dry run');    \\r\\n            } else {\\r\\n                log.info('scripts running on existing servers, exit');\\r\\n                ns.exit();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.2,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: false });\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    log.info(`copy scripts to ${host}`);\\r\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n\\r\\n        log.info(`execute attack on ${target}`);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    function getFreeRam() {\\r\\n        let ram = ns.getServerRam(ns.getHostname())\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of world.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    let top = ns.ps(ns.getHostname()).filter(p => p.filename == 'dh-control.js');\\r\\n    if (top.length > 0) {\\r\\n        let excludedTarget = top[0].args[0];\\r\\n        log.info(`${excludedTarget.padEnd(20)} ignored - DH victim`);\\r\\n        targets.splice(targets.findIndex(t => t.name == excludedTarget), 1);\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----')\\r\\n\\r\\n        let req = ns.getScriptRam('ms-setup.js');\\r\\n        if (getFreeRam() < req) {\\r\\n            log.error('insufficient ram to run ms-setup.js');\\r\\n        }\\r\\n\\r\\n        let bots = ns.getPurchasedServers()\\r\\n            .filter(b => ns.ps(b).length == 0) //ignore busy\\r\\n            .filter(b => ns.getServerRam(b)[0] >= 16384) // ignore too small\\r\\n            .sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of world.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            log.info(`run ms-setup.js ${bots[i]} ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n\\r\\n            while (getFreeRam() < req) {\\r\\n                await ns.sleep(1 * 1000);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.85,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let worker of world.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----');\\r\\n        log.info(`run dh-control.js ${targets[0].name}`)\\r\\n        await ns.exec('dh-control.js', ns.getHostname(), 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":8.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args.length == 0 ? 'foodnstuff' : ns.args[0];\\r\\n\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n    for (let stock of market.getAll(ns)) {\\r\\n        lastAssets = lastAssets + stock.position.shares * stock.price;\\r\\n    }\\r\\n\\r\\n    let assetWindow = new SlidingWindow(6);\\r\\n    let timeWindow = new SlidingWindow(6);\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            assets = 0;\\r\\n            for (let stock of market.getAll(ns)) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            assetWindow.reset();\\r\\n            timeWindow.reset();\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n\\r\\n            assetWindow.push(assetChange);\\r\\n            timeWindow.push(timeChange);\\r\\n\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, lastAssets + assetWindow.average())}, ${format.money(assetWindow.average()/timeWindow.average())}/sec`);\\r\\n        }\\r\\n\\r\\n        lastAssets = assets;\\r\\n        lastTime = time;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(5000);\\r\\n        tick();\\r\\n    }\\r\\n} \\r\\n\\r\\nclass SlidingWindow {\\r\\n    /** @param {number} size */\\r\\n    constructor(size) {\\r\\n        this.size = size;\\r\\n        /** @type {number[]} */\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    /** @param {number} value */\\r\\n    push(value) {\\r\\n        if (this.values.length < this.size) {\\r\\n            this.values.push(value);\\r\\n        } else {\\r\\n            for (let i = 0; i < this.size-1; i++) {\\r\\n                this.values[i] = this.values[i+1];\\r\\n            }\\r\\n            this.values[this.size-1] = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    average() {\\r\\n        let sum = this.values.reduce((a, b) => a + b, 0);\\r\\n        return sum / this.values.length;\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = `${path}; connect ${p.name}`;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\n//import { LifeL0 as Life } from './lib-life-L0.js';\\r\\n//import { LifeL1 as Life } from './lib-life-L1.js';\\r\\n//import { LifeL2 as Life } from './lib-life-L2.js';\\r\\nimport { LifeL3 as Life } from './lib-life-L3.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n    let life = new Life(ns, log);\\r\\n\\r\\n    while (true) {\\r\\n        let nextTick = await life.tick();\\r\\n        await ns.sleep(nextTick);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    //console.log(ns.getBitNodeMultipliers())\\n    console.log(ns.getCharacterInformation())\\n    console.log(ns.getOwnedAugmentations())\\n}\",\"ramUsage\":8.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n\\r\\n    let facsByRep = FactionWithAugs.getAll(ns)\\r\\n        .sort((a, b) => b.reputation - a.reputation);\\r\\n\\r\\n    /** @type {{[key: string]: FactionWithAugs}} */\\r\\n    let facsByName = {};\\r\\n    for (let f of facsByRep) {\\r\\n        facsByName[f.name] = f;\\r\\n    }\\r\\n\\r\\n    let augsByPrice = facsByRep\\r\\n        .map(f => f.augmentations)\\r\\n        .reduce((a, b) => a.concat(b), [])\\r\\n        .filter(a => !a.owned)\\r\\n        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n    ns.tprint('----- LOCKED -----');\\r\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\r\\n    for (let aug of groupAugs(locked)) {\\r\\n        let facs = aug.factions.map(name => {\\r\\n            let f = facsByName[name];\\r\\n            if (f.favor + f.favorGain >= FAVOUR_MAX) {\\r\\n                if (f.favor >= FAVOUR_MAX) {\\r\\n                    return `${name} (donate)`;\\r\\n                } else {\\r\\n                    return `${name} (reset)`;\\r\\n                }\\r\\n            } else {\\r\\n                let diff = Math.floor(aug.requiredReputation - f.reputation);\\r\\n                return `${name} (+${diff})`;\\r\\n            }\\r\\n        });\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${facs}]`)\\r\\n    }\\r\\n\\r\\n    ns.tprint('----- UNLOCKED -----');\\r\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\r\\n    for (let aug of groupAugs(unlocked)) {\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${aug.factions}]`)\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {Augmentation[]} augs */\\r\\nfunction groupAugs(augs) {\\r\\n    /** @type {{name: string, factions: string[], price: number, requiredReputation: number}[]} */\\r\\n    let augsWithFacs = [];\\r\\n    for (let a of augs) {\\r\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\r\\n            augsWithFacs[a.name] = {\\r\\n                factions: [],\\r\\n                name: a.name,\\r\\n                price: a.price,\\r\\n                requiredReputation: a.requiredReputation\\r\\n            };\\r\\n            augsWithFacs.push(augsWithFacs[a.name]);\\r\\n        } \\r\\n\\r\\n        augsWithFacs[a.name].factions.push(a.faction);\\r\\n    }\\r\\n    return augsWithFacs;\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { enrol } from './lib-world.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport const TICK_SECONDS =             20;\\r\\nconst STOCK_MARKET_MIN =         100000000;\\r\\nconst HACKNET_BUYS_MAX =       10000000000;\\r\\nconst PURCHASED_SERVER_PRICE = 22528000000;\\r\\nconst PURCHASED_SERVER_RAM =         16384;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.lastBots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n        this.beganFarm = false;\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n        log.debug('market access: ' + this.marketAccess);\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickAcceptInvites() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / (this.nextTickLength / 1000);\\r\\n        this.nextTickLength = TICK_SECONDS * 1000;\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickAcceptInvites();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n        return this.nextTickLength;\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.shouldBuyNodes()) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // once able to buy good enough servers for MS, switch to buying those\\r\\n        let bots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        let botCost = this.ns.getPurchasedServerCost(PURCHASED_SERVER_RAM);\\r\\n        let botLimit = this.ns.getPurchasedServerLimit();\\r\\n        if (this.cash >= botCost && bots < botLimit) {\\r\\n            this.log.info(`${bots} ${format.ram(PURCHASED_SERVER_RAM)} servers owned; ordering a new one for ${format.money(botCost)}`);\\r\\n            await this.ns.exec('buy-servers.js', this.ns.getHostname(), 1, [bots+1])\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (bots == 0) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                await this.dhStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) { // based on an msRunning check, but only once at init startup\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.skill / this.lastEval > 1.1 || bots > this.lastBots) {\\r\\n                if (this.skill / this.lastEval > 1.1) {\\r\\n                    this.log.debug(`skill ${this.skill} / lastEval ${this.lastEval} > 1.1`);\\r\\n                    await this.msStop();\\r\\n                    await this.ns.sleep(10 * 1000);    \\r\\n                }\\r\\n                \\r\\n                if (bots > this.lastBots) {\\r\\n                    this.log.debug(`bots ${bots} > lastBots ${this.lastBots}`);\\r\\n                }\\r\\n\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill\\r\\n        if (this.shouldFarm()) {\\r\\n            let target = 'foodnstuff';\\r\\n\\r\\n            if (this.ns.scriptRunning('dh-control.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'dh-control.js');\\r\\n                target = p.args[0];\\r\\n            } else if (this.ns.scriptRunning('farm-worker.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'farm-worker.js');\\r\\n                target = p.args[0];\\r\\n            }\\r\\n            \\r\\n            if (!this.beganFarm) {\\r\\n                enrol(this.ns, target);\\r\\n                this.beganFarm = true;\\r\\n            }\\r\\n            \\r\\n            this.ensureRunningWithArg('farm-worker.js', target, true);\\r\\n        } else if (this.beganFarm) {\\r\\n            this.ensureKilled('farm-worker.js');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureRunning(script) {\\r\\n        if (!this.ns.scriptRunning(script, this.ns.getHostname())) {    \\r\\n            await this.ns.exec(script, this.ns.getHostname(), 1);\\r\\n            this.log.info(`run ${script} -t ${1}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {string} arg\\r\\n     * @param {boolean} [maxThreads]\\r\\n     */\\r\\n    async ensureRunningWithArg(script, arg, maxThreads) {\\r\\n        if (!this.ns.isRunning(script, this.ns.getHostname(), arg)) {   \\r\\n            // not running with right arg\\r\\n            if (this.ns.scriptRunning(script, this.ns.getHostname())) { \\r\\n                // running with wrong arg\\r\\n                await this.ensureKilled(script);\\r\\n            } else {\\r\\n                // not running at all\\r\\n                let threads = 1;\\r\\n                if (maxThreads) {\\r\\n                    threads = this.getMaxThreads(script);\\r\\n                    if (threads <= 0) return;\\r\\n                }\\r\\n        \\r\\n                await this.ns.exec(script, this.ns.getHostname(), threads, arg);\\r\\n                this.log.info(`run ${script} -t ${threads} ${arg}`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - this.spareRamNeeded(); // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        let servers = this.ns.getPurchasedServers();\\r\\n        if (servers.length == 0) return false;\\r\\n        let server1 = 'bot0'; // servers[0]; - wrong because it changes\\r\\n        let top = this.ns.ps(server1);\\r\\n        if (top.length == 0) return false;\\r\\n        return top[0].filename.startsWith('ms');\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n    \\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.cash <= HACKNET_BUYS_MAX;\\r\\n    }\\r\\n\\r\\n    shouldFarm() {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return 128;\\r\\n    }\\r\\n}\",\"ramUsage\":13.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\r\\nimport { TICK_SECONDS, LifeL0 } from './lib-life-L0.js';\\r\\n\\r\\nconst WORK_OVERRIDE_TICKS =  9;\\r\\nconst STAT_GOAL_BASE =      90;\\r\\nconst DARKWEB_MIN =     200000;\\r\\nconst TRAIN_MIN =      5000000;\\r\\n\\r\\nexport class LifeL1 extends LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        /** @type {WorkItem} */\\r\\n        this.lastWork = null;\\r\\n    }\\r\\n\\r\\n    tickDarkwebPurchases() {\\r\\n        // buy darkweb router\\r\\n        if (this.cash >= DARKWEB_MIN) {\\r\\n            if (!this.ns.getCharacterInformation().tor) {\\r\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\r\\n                this.ns.purchaseTor();\\r\\n                this.cash = this.getCash();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\r\\n        for (var program of programs()) {\\r\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\r\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\r\\n                this.ns.purchaseProgram(program.name);\\r\\n                this.cash = this.getCash();\\r\\n                this.resetHackEval();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {Program} program */\\r\\n    hasProgram(program) {\\r\\n        return this.ns.fileExists(program.name, 'home');\\r\\n    }\\r\\n\\r\\n    // fullscreen \\\"work\\\" actions\\r\\n    tickPerformWork() {\\r\\n        // continue automation if:\\r\\n        // - we're still doing something, or\\r\\n        // - we deliberately didn't do anything, or\\r\\n        // - we did something which may have finished early\\r\\n        if (this.ns.isBusy() || (this.lastWork && (this.lastWork.name == 'nothing' || this.lastWork.name.startsWith('crime')))) {\\r\\n            // has work been selected, and not overridden (countup>0)?\\r\\n            if (this.lastWork && !this.countup) {\\r\\n                if (this.lastWork.isRep) {\\r\\n                    this.ns.stopAction();\\r\\n                }\\r\\n\\r\\n                let workItem = this.selectWork();\\r\\n                \\r\\n                // is work actually still ongoing?\\r\\n                if (this.ns.isBusy() && this.lastWork.name == workItem.name) {\\r\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\r\\n                    if (this.lastWork.isRep) {\\r\\n                        if (workItem.doWork != null) {\\r\\n                            workItem.doWork();\\r\\n                        } \\r\\n                    }\\r\\n                } else {\\r\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\r\\n                    if (workItem.doWork != null) {\\r\\n                        workItem.doWork();\\r\\n                    } \\r\\n                }\\r\\n\\r\\n                this.lastWork = workItem;              \\r\\n            } else {\\r\\n                this.log.info('automated work overridden by player, pause indefinitely');\\r\\n                this.lastWork = null;\\r\\n            }\\r\\n        } else {\\r\\n            if (!this.lastWork && !this.countup) {\\r\\n                let workItem = this.selectWork();\\r\\n                this.log.info(`start work ${workItem.name}`);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;          \\r\\n            } else {    \\r\\n                if (!this.lastWork) {\\r\\n                    /** @type {number | undefined} */\\r\\n                    this.countup = 0;\\r\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    this.lastWork = new WorkItem('override', null, false);\\r\\n                } else {\\r\\n                    this.countup = this.countup || 0;\\r\\n                    if (this.countup == 0) {\\r\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    } else {\\r\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                this.countup = this.countup + 1;\\r\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\r\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_SECONDS)}`);\\r\\n                    this.countup = 0;\\r\\n                    this.lastWork = null;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    selectWork() {\\r\\n        for (let jobF of [this.workWriteCode, this.workTrainStats, this.workCommitCrimes, this.workJoinCities, this.workForFactions, this.workForCompanies, this.workJoinCompanies]) {\\r\\n            let job = jobF.bind(this)();\\r\\n            if (job != null) return job;\\r\\n        }\\r\\n\\r\\n        return new WorkItem('nothing', null, false);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workWriteCode() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workTrainStats() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        this.guessCharismaMult(info.mult);\\r\\n\\r\\n        let stats = this.ns.getStats();\\r\\n        \\r\\n        if (this.cash >= TRAIN_MIN) {\\r\\n            let statGoals = {};\\r\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility', 'charisma']) {\\r\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\r\\n                \\r\\n                if (stats[stat] < statGoals[stat]) {\\r\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\r\\n                    return new WorkItem('train-' + stat, () => {\\r\\n                        if (stat == 'charisma') {\\r\\n                            let uni = this.getBestUniversity();\\r\\n                            this.ensureCity(info, uni.city);\\r\\n                            this.ns.universityCourse(uni.name, 'Leadership');            \\r\\n                        } else {\\r\\n                            let gym = this.getBestGym();\\r\\n                            this.ensureCity(info, gym.city);\\r\\n                            this.ns.gymWorkout(gym.name, stat);\\r\\n                        }\\r\\n                    }, false);\\r\\n                }\\r\\n            }\\r\\n            this.log.debug(`stat goals reached - ${JSON.stringify(statGoals)}`);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        mult.charisma = Math.min(mult.agility, mult.defense, mult.dexterity, mult.agility);\\r\\n        mult.charismaExp = Math.min(mult.agilityExp, mult.defenseExp, mult.dexterityExp, mult.agilityExp);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForFactions() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCities() {        \\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n    \\r\\n    getBestGym() {\\r\\n        let gs = gyms();\\r\\n        gs.sort((a, b) => b.price - a.price);\\r\\n        return gs[0];\\r\\n    }\\r\\n\\r\\n    getBestUniversity() {\\r\\n        let us = universities();\\r\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\r\\n        return us[0];\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @param {ICharacterInfo} info\\r\\n     * @param {string} name\\r\\n     */\\r\\n    ensureCity(info, name) {\\r\\n        if (info.city != name) {\\r\\n            if (this.ns.travelToCity(name)) {\\r\\n                this.log.info('travelled to ' + name);\\r\\n            } else {\\r\\n                this.log.error(`travel to ${name} failed`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.ns.getCharacterInformation().bitnode != 4;\\r\\n    }\\r\\n\\r\\n    shouldCommitCrimes() {\\r\\n        return this.cash >= TRAIN_MIN && this.ns.getCharacterInformation().bitnode == 2;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return this.ns.getCharacterInformation().bitnode == 4 ? 64 : 128;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class WorkItem {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {() => void | null} doWork\\r\\n     * @param {boolean} isRep\\r\\n     */\\r\\n    constructor(name, doWork, isRep) {\\r\\n        this.name = name;\\r\\n        this.doWork = doWork;\\r\\n        this.isRep = isRep;\\r\\n    }\\r\\n}\",\"ramUsage\":25.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\r\\n\\r\\nconst COMPANY_REP_MAX = 200000;  // level required for most factions\\r\\nexport const FAVOUR_MAX = 150;   // level required for donations\\r\\nconst CITY_MONEY_REQ = 50200000; // volhaven 50m + travel 200k\\r\\n\\r\\nexport class LifeL2 extends LifeL1 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n    }\\r\\n\\r\\n    // persists through aug reset, makes early farming better\\r\\n    tickUpgradeHomeSystem() {\\r\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\r\\n            this.log.info(`purchasing home RAM upgrade`);\\r\\n            this.ns.upgradeHomeRam();\\r\\n            this.cash = this.getCash();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    tickAcceptInvites() {\\r\\n        for (let invite of this.ns.checkFactionInvitations()) {\\r\\n            if (this.shouldAcceptInvite(invite)) {\\r\\n                this.log.info(`join faction ${invite}`);\\r\\n                this.ns.joinFaction(invite);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCities() {\\r\\n        if (this.cash < CITY_MONEY_REQ) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let joins = info.factions;\\r\\n        let invites = this.ns.checkFactionInvitations();\\r\\n\\r\\n        /** @type {{[key: string]: string[]}} */\\r\\n        let preclusions = {\\r\\n            'Sector-12': ['Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'], \\r\\n            'Aevum':     ['Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'], \\r\\n            'Chongqing': ['Sector-12', 'Aevum', 'Volhaven'], \\r\\n            'New Tokyo': ['Sector-12', 'Aevum', 'Volhaven'], \\r\\n            'Ishima':    ['Sector-12', 'Aevum', 'Volhaven'], \\r\\n            'Volhaven':  ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima']\\r\\n        };\\r\\n\\r\\n        for (let city of Faction.cities()) {\\r\\n            if (info.city != city &&\\r\\n                !joins.includes(city) && \\r\\n                !invites.includes(city) && \\r\\n                !preclusions[city].map(joins.includes.bind(joins)).reduce((a, b) => a || b, false)) {\\r\\n                    this.log.info(`Travelling to ${city} for a faction invite.`);\\r\\n                    this.ns.travelToCity(city);\\r\\n                    return null;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let joinedCities = Faction.getCurrent(this.ns).filter(f => Faction.cities().includes(f.name));\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        // when we've run out of work to do, take another job\\r\\n        let companies = Company.getAll(this.ns).filter(c => !c.employed);\\r\\n        if (companies.length > 0) {\\r\\n            if (this.ns.applyToCompany(companies[0].name, 'software')) {\\r\\n                this.log.info(`now employed by ${companies[0]}`);\\r\\n            } else {\\r\\n                this.log.error(`rejected by ${companies[0]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n\\r\\n        let companies = Company.getCurrent(this.ns);\\r\\n        this.log.debug(`current companies: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => !info.factions.includes(c.faction));\\r\\n        this.log.debug(`companies without faction membership: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => c.reputation < COMPANY_REP_MAX);\\r\\n        this.log.debug(`companies with reputation < ${COMPANY_REP_MAX}: ${companies}`);\\r\\n\\r\\n        if (companies.length > 0) {\\r\\n            companies.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`companies sorted by rep: ${companies}`);\\r\\n\\r\\n            let c = companies[0].name;\\r\\n            return new WorkItem('company-' + c, () => {\\r\\n                if (this.lastWork && this.lastWork.name == 'company-' + c) {\\r\\n                    this.log.debug(`already working for ${c}`);\\r\\n                    if (this.ns.applyToCompany(c, 'software')) {\\r\\n                        this.log.info(`promoted by ${c}`);\\r\\n                    }\\r\\n                    this.ns.workForCompany();\\r\\n                } else {\\r\\n                    this.log.debug(`not currently working for ${c}`);\\r\\n                    this.ns.applyToCompany(c, 'software');\\r\\n                    if (!this.ns.workForCompany()) {\\r\\n                        this.log.error(`rejected by ${c}`);\\r\\n                    }\\r\\n                }\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workForFactions() {\\r\\n        let factions = Faction.getCurrent(this.ns);\\r\\n        this.log.debug(`current factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => {\\r\\n                this.ns.workForFaction(factions[0].name, factions[0].job)\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.job = job;\\r\\n    }\\r\\n\\r\\n    static cities() {\\r\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\r\\n    }\\r\\n\\r\\n    static gangs() {\\r\\n        return ['Slum Snakes', 'Tetrads'];\\r\\n    }\\r\\n\\r\\n    static companies() {\\r\\n        return Object.getOwnPropertyNames(companyFactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Faction[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => \\r\\n        {\\r\\n            let rep = ns.getFactionRep(f);\\r\\n            let fav = ns.getFactionFavor(f);\\r\\n            let fvg = ns.getFactionFavorGain(f);\\r\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @type {{[key: string]: string}} */\\r\\nlet companyFactions = {\\r\\n    'Bachman & Associates': 'Bachman & Associates',\\r\\n    'ECorp': 'ECorp',\\r\\n    'MegaCorp': 'MegaCorp',\\r\\n    'KuaiGong International': 'KuaiGong International',\\r\\n    'Four Sigma': 'Four Sigma',\\r\\n    'NWO': 'NWO',\\r\\n    'Blade Industries': 'Blade Industries',\\r\\n    'OmniTek Incorporated': 'OmniTek Incorporated',\\r\\n    'Clarke Incorporated': 'Clarke Incorporated',\\r\\n    'Fulcrum Technologies': 'Fulcrum Secret Technologies',\\r\\n}\\r\\n\\r\\nclass Company {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {string} faction\\r\\n     * @param {boolean} employed\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, faction, employed) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.faction = faction;\\r\\n        this.employed = employed;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let i = 0; i < info.jobs.length; i++) {\\r\\n            let c = info.jobs[i];\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], true));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let c of Faction.companies()) {\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], info.jobs.includes(c)));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n}\",\"ramUsage\":64.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport { WorkItem } from './lib-life-L1.js';\\r\\nimport { LifeL2, Faction, FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\nconst DONATE_AMOUNT = 1000000000000;\\r\\nconst TRAVEL_MIN =           200000;\\r\\n\\r\\nexport class LifeL3 extends LifeL2 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        \\r\\n        /** @type {{[key: string]: boolean}} */\\r\\n        this.hadProgram = {};\\r\\n        for (let program of programs())\\r\\n        {\\r\\n            this.hadProgram[program.name] = true;\\r\\n        }\\r\\n\\r\\n        /** @type {string} */\\r\\n        this.savingForAug = '';\\r\\n\\r\\n        /** @type {number} */\\r\\n        this.homicides = 0;\\r\\n        let factions = this.ns.getCharacterInformation().factions;\\r\\n        for (let gang of Gang.getAll()) {\\r\\n            if (factions.includes(gang.name)) {\\r\\n                this.homicides = Math.max(this.homicides, gang.requiredKarma);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.log.debug(`assumed starting homicides: ${this.homicides}`);\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction) || !FactionWithAugs.get(this.ns, faction).hasAllAugs();\\r\\n    }\\r\\n\\r\\n    workWriteCode() {\\r\\n        for (let program of programs()) {\\r\\n            if (this.hasProgram(program)) {\\r\\n                if (!this.hadProgram[program.name]) {\\r\\n                    this.hadProgram[program.name] = true;\\r\\n                    this.resetHackEval();\\r\\n                }    \\r\\n            }\\r\\n            else if (program.req <= this.skill)  {\\r\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }  \\r\\n\\r\\n    // L3 override which takes augs into account\\r\\n    workForFactions() {\\r\\n        let factions = FactionWithAugs.getAll(this.ns);\\r\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\r\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\r\\n        let allReqsMet = factions.length == 0;\\r\\n\\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n        let reqsCouldBeMetAfterDonations = factions.length == 0 && !allReqsMet;\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\r\\n        }\\r\\n\\r\\n        if (reqsCouldBeMetAfterDonations && this.cash >= DONATE_AMOUNT) {\\r\\n            for (let f of FactionWithAugs.getAll(this.ns)) {\\r\\n                if (f.favor >= FAVOUR_MAX && f.maxAugRep() > f.reputation) {\\r\\n                    if (this.ns.donateToFaction(f.name, DONATE_AMOUNT)) {\\r\\n                        this.log.info(`donated ${format.money(DONATE_AMOUNT)} to faction ${f}`);\\r\\n                        this.cash = this.getCash();\\r\\n                        if (this.cash < DONATE_AMOUNT) {\\r\\n                            break;\\r\\n                        }\\r\\n                    } else {\\r\\n                        this.log.error(`failed to donate to faction ${f}`);\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            allReqsMet = FactionWithAugs.getAll(this.ns).filter(f => f.maxAugRep() > f.reputation).length == 0;\\r\\n        }\\r\\n\\r\\n        // if all factions are maxed out, buy some of their augs\\r\\n        if (allReqsMet) {\\r\\n            this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\r\\n\\r\\n            let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\r\\n            this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\r\\n\\r\\n            // augs we don't already have\\r\\n            let availableAugs = FactionWithAugs.getAll(this.ns)\\r\\n                .map(f => f.augmentations)\\r\\n                .reduce((a, b) => a.concat(b), [])\\r\\n                .filter(a => !a.owned);\\r\\n\\r\\n            // most expensive augs first, because the price doubles each time\\r\\n            let affordableAugs = availableAugs\\r\\n                .filter(a => a.price <= maxAugCost)\\r\\n                .sort((a, b) => b.price - a.price);\\r\\n\\r\\n            if (affordableAugs.length > 0) {\\r\\n                this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\r\\n                if (affordableAugs[0].price > this.cash) {\\r\\n                    if (this.savingForAug != affordableAugs[0].name) {\\r\\n                        this.savingForAug = affordableAugs[0].name;\\r\\n                        this.log.info(`saving for aug ${affordableAugs[0]}`);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                for (let a of affordableAugs) {\\r\\n                    if (a.price <= this.cash) {\\r\\n                        if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\r\\n                            this.log.info(`bought aug ${a}`);\\r\\n                            this.cash = this.getCash();\\r\\n                            this.savingForAug = '';\\r\\n                        } else {\\r\\n                            this.log.info(`failed to buy aug ${a}`);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        if (!this.shouldCommitCrimes()) {\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let stats = this.ns.getStats();\\r\\n\\r\\n        let gangs = Gang.getAll().filter(g => !info.factions.includes(g.name)).sort((a, b) => a.requiredKarma - b.requiredKarma);\\r\\n        this.log.debug(`unjoined gangs: ${gangs}`);\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredStats <= Math.min(stats.agility, stats.defense, stats.dexterity, stats.strength));\\r\\n            this.log.debug(`gangs with high enough combat stats: ${gangs}`);\\r\\n        }\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredKarma > this.homicides);\\r\\n            this.log.debug(`gangs needing lower karma: ${gangs}`);\\r\\n        }\\r\\n        \\r\\n        for (let gang of gangs) {\\r\\n            if (gang.requiredLocation == null || this.cash >= TRAVEL_MIN) {\\r\\n                return new WorkItem('crime-homicide', () => {\\r\\n                    if (gang.requiredLocation != null) {\\r\\n                        this.ensureCity(this.ns.getCharacterInformation(), gang.requiredLocation);\\r\\n                    }\\r\\n\\r\\n                    this.nextTickLength = this.ns.commitCrime('homicide') + 1000;\\r\\n                }, false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        // start with SF1-2\\r\\n        let stat = 1.24; \\r\\n        let statExp = 1.24;\\r\\n\\r\\n        let augs = this.ns.getOwnedAugmentations();        \\r\\n        if (augs.includes(\\\"NeuroFlux Governor\\\")) {\\r\\n            let level = augs.length / 2; // XXX \\r\\n            for (let i = 0; i < level; i++) {\\r\\n                stat = stat * 1.01;\\r\\n                statExp = statExp * 1.01;\\r\\n            }\\r\\n        }\\r\\n        if (augs.includes(\\\"FocusWire\\\")) { \\r\\n            statExp = statExp * 1.05;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer I\\\")) { \\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer II\\\")) { \\r\\n            statExp = statExp * 1.15;\\r\\n        }\\r\\n        if (augs.includes(\\\"Power Recirculation Core\\\")) { \\r\\n            stat = stat * 1.05;\\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Enhancement\\\")) { \\r\\n            stat = stat * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Processor Implant\\\")) { \\r\\n            stat = stat * 1.2;\\r\\n        }\\r\\n        if (augs.includes(\\\"Enhanced Social Interaction Implant\\\")) {\\r\\n            stat = stat * 1.6;\\r\\n            statExp = statExp * 1.6;\\r\\n        }\\r\\n        if (augs.includes(\\\"SmartJaw\\\")) {\\r\\n            stat = stat * 1.5;\\r\\n            statExp = statExp * 1.5;\\r\\n        }\\r\\n\\r\\n        mult.charisma = stat;\\r\\n        mult.charismaExp = statExp;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class FactionWithAugs extends Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     * @param {Augmentation[]} augs\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job, augs) {\\r\\n        super(name, rep, fav, fvg, job)\\r\\n        this.augmentations = augs;\\r\\n    }\\r\\n\\r\\n    maxAugRep() {\\r\\n        return this.augmentations\\r\\n            .filter(a => !a.owned)\\r\\n            .map(a => a.requiredReputation)\\r\\n            .reduce((a, b) => Math.max(a, b), 0);\\r\\n    }\\r\\n\\r\\n    hasAllAugs() {\\r\\n        return this.augmentations\\r\\n        .map(a => a.owned)\\r\\n        .reduce((a, b) => a && b, true);\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns FactionWithAugs[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => FactionWithAugs.get(ns, f));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @param {string} f\\r\\n     * @returns FactionWithAugs\\r\\n     */\\r\\n    static get(ns, f) {\\r\\n        let rep = ns.getFactionRep(f);\\r\\n        let fav = ns.getFactionFavor(f);\\r\\n        let fvg = ns.getFactionFavorGain(f);\\r\\n        let augInfo = ns.getOwnedAugmentations(true);\\r\\n        let augs = ns.getAugmentationsFromFaction(f).map(a => {\\r\\n            let [aRep, aPrc] = ns.getAugmentationCost(a);\\r\\n            let has = augInfo.includes(a);\\r\\n            return new Augmentation(a, f, aRep, aPrc, has);\\r\\n        })\\r\\n        return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Augmentation {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} fac\\r\\n     * @param {number} rep\\r\\n     * @param {number} prc\\r\\n     * @param {boolean} has\\r\\n     */\\r\\n    constructor(name, fac, rep, prc, has) {\\r\\n        this.name = name;\\r\\n        this.faction = fac;\\r\\n        this.requiredReputation = rep;\\r\\n        this.price = prc;\\r\\n        this.owned = has;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        if (this.owned) {\\r\\n            return `${this.name} (OWNED)`\\r\\n        } else {\\r\\n            return `${this.name} (${format.money(this.price)})`\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Gang {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} requiredKarma\\r\\n     * @param {number} requiredStats\\r\\n     * @param {string|null} requiredLocation\\r\\n     */\\r\\n    constructor(name, requiredKarma, requiredStats, requiredLocation) {\\r\\n        this.name = name;\\r\\n        this.requiredKarma = requiredKarma;\\r\\n        this.requiredStats = requiredStats;\\r\\n        this.requiredLocation = requiredLocation;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static getAll() {\\r\\n        return [\\r\\n            new Gang('Slum Snakes', 9, 30, null),\\r\\n            new Gang('Tetrads', 18, 75, 'Chongqing'),\\r\\n            new Gang('Speakers for the Dead', 45, 300, null),\\r\\n            new Gang('The Dark Army', 45, 300, 'Chongqing'),\\r\\n            new Gang('The Syndicate', 90, 200, 'Sector-12'),\\r\\n            // no silhouette - special company reqs\\r\\n        ];\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L4.js\",\"code\":\"\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"fac-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let f = FactionWithAugs.get(ns, 'Bachman & Associates');\\r\\n    ns.tprint(`${f.name}: ${f.reputation}`);\\r\\n    for (var aug of f.augmentations) {\\r\\n        ns.tprint(aug);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"init.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":106.9,\"logs\":[\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] stop work company-KuaiGong International; start work company-KuaiGong International\",\"[INF] automated work cancelled by player, pause 3m 0s\",\"[INF] resume automated work, having waited 3m 0s\",\"[INF] start work faction-Fulcrum Secret Technologies\",\"Started carrying out hacking contracts for Fulcrum Secret Technologies\"],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":37975.6100000329,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"buy-nodes.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":7.5,\"logs\":[],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":37970.41000003288,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"hft.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":19.7,\"logs\":[\"[INF] assets: $30,484,658,273,600, +0.17%, $10,363,817/sec\",\"[INF] assets: $30,522,321,899,700, +0.17%, $10,896,678/sec\",\"[INF] assets: $30,782,832,457,600, +0.28%, $17,092,805/sec\",\"[INF] assets: $31,009,940,261,700, +0.39%, $24,610,644/sec\",\"[INF] assets: $31,027,896,378,900, +0.34%, $21,696,994/sec\",\"[INF] assets: $30,857,036,894,000, +0.21%, $13,264,334/sec\",\"[INF] assets: $30,868,912,055,400, +0.2%, $12,805,044/sec\",\"[INF] assets: $30,932,349,666,200, +0.22%, $13,663,948/sec\",\"[INF] assets: $31,075,013,793,200, +0.15%, $9,737,105/sec\",\"[INF] assets: $31,322,793,225,200, +0.16%, $10,425,999/sec\",\"[INF] assets: $31,467,030,799,800, +0.23%, $14,634,887/sec\",\"[INF] assets: $31,413,603,541,900, +0.29%, $18,549,130/sec\",\"[INF] assets: $31,595,063,390,800, +0.38%, $24,201,011/sec\",\"[INF] assets: $31,640,589,335,400, +0.37%, $23,604,054/sec\",\"[INF] assets: $31,815,448,104,200, +0.39%, $24,677,853/sec\",\"[INF] assets: $32,101,854,218,800, +0.4%, $25,965,237/sec\",\"[INF] assets: $32,094,822,491,200, +0.32%, $20,923,599/sec\",\"[INF] assets: $32,201,722,775,800, +0.4%, $26,266,263/sec\",\"[INF] assets: $32,247,500,250,600, +0.33%, $21,743,546/sec\",\"[INF] assets: $32,276,538,101,900, +0.32%, $21,194,053/sec\",\"[INF] assets: $32,354,203,929,400, +0.27%, $17,954,338/sec\",\"[INF] assets: $32,369,480,594,200, +0.13%, $8,918,798/sec\",\"[INF] assets: $32,348,943,074,400, +0.13%, $8,468,427/sec\",\"[INF] assets: $32,690,100,204,900, +0.25%, $16,274,365/sec\",\"[INF] assets: $32,741,506,282,100, +0.25%, $16,463,026/sec\",\"[INF] assets: $32,825,059,455,400, +0.27%, $18,279,779/sec\",\"[INF] assets: $32,776,448,825,300, +0.21%, $14,071,546/sec\",\"[INF] assets: $33,079,072,732,700, +0.36%, $23,646,765/sec\",\"[INF] assets: $33,146,300,179,200, +0.4%, $26,571,484/sec\",\"[INF] assets: $33,038,424,829,200, +0.17%, $11,608,112/sec\",\"[INF] assets: $32,997,512,150,100, +0.12%, $8,530,969/sec\",\"[INF] assets: $33,260,656,171,400, +0.22%, $14,515,535/sec\",\"[INF] assets: $33,396,771,083,900, +0.31%, $20,671,896/sec\",\"[INF] assets: $33,518,395,652,100, +0.21%, $14,640,193/sec\",\"[INF] assets: $33,288,015,127,700, +0.07%, $4,722,729/sec\",\"[INF] assets: $33,252,178,938,100, +0.1%, $7,123,237/sec\",\"[INF] assets: $33,211,704,970,500, +0.1%, $7,138,095/sec\",\"[INF] assets: $33,133,099,102,000, -0.06%, $-4,250,769/sec\",\"[INF] assets: $33,112,727,281,900, -0.14%, $-9,465,288/sec\",\"[INF] assets: $33,143,506,425,800, -0.18%, $-12,492,977/sec\",\"[INF] assets: $32,981,743,506,200, -0.15%, $-10,206,333/sec\",\"[INF] assets: $33,212,280,908,600, -0.02%, $-1,329,625/sec\",\"[INF] assets: $33,419,143,548,000, +0.1%, $6,912,775/sec\",\"[INF] assets: $33,347,754,251,700, +0.1%, $7,153,502/sec\",\"[INF] assets: $33,563,081,491,500, +0.22%, $15,008,305/sec\",\"[INF] BLD   : sell 19700000 ($467,147,222,900)\",\"[INF] CLRK  : sell 24900000 ($1,135,904,310,300)\",\"[INF] FSIG  : sell 7500000 ($8,734,722,480,000)\",\"[INF] GPH   : buy 9400000 ($271,036,319,400)\",\"[INF] SLRS  : buy 5600000 ($417,526,121,600)\",\"[INF] assets: $23,927,256,404,000, session capital gains: $48,765,817,541,312\"],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":37170.41000002997,\"onlineMoneyMade\":64876449084243.625,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"galactic-cyber\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $9405298992 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 23 / goal 39; increasing\",\"[INF] status: money $2773708877 / goal $10114813812; decreasing\",\"[INF] assigning joesguns hack -> grow x9\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $12400627802 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 23 / goal 39; \",\"[INF] status: money $7125816967 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 24 / goal 39; increasing\",\"[INF] status: money $2197305719 / goal $10114813812; decreasing\",\"[INF] assigning harakiri-sushi hack -> grow x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $11406869744 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 22 / goal 39; \",\"[INF] status: money $4277762241 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 23 / goal 39; increasing\",\"[INF] status: money $1771183897 / goal $10114813812; decreasing\",\"[INF] assigning sigma-cosmetics hack -> grow x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $10416634705 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $1094771333 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $14118431860 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $2773974325 / goal $10114813812; \",\"[INF] assigning foodnstuff hack -> grow x9\",\"[INF] status: security level 23 / goal 39; increasing\",\"[INF] status: money $2573803535 / goal $10114813812; decreasing\",\"[INF] assigning hong-fang-tea hack -> grow x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $9695832537 / goal $10114813812; \",\"[INF] assigning nectar-net hack -> grow x9\",\"[INF] status: security level 21 / goal 39; \",\"[INF] status: money $4380835955 / goal $10114813812; \",\"[INF] assigning global-pharm hack -> grow x9\",\"[INF] status: security level 24 / goal 39; increasing\",\"[INF] status: money $20229627625 / goal $10114813812; \",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 20 / goal 39; \",\"[INF] status: money $10612628398 / goal $10114813812; \",\"[INF] assigning joesguns grow -> hack x9\"],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[\"galactic-cyber\"],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server galactic-cyber in 128.980 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.311 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.311 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.284 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.284 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.257 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.230 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.230 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.203 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.176 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.176 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.149 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.122 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.122 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.095 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.095 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.068 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.041 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.041 seconds (t=1198214)\",\"Server security level on galactic-cyber weakened to 20. Gained 180,446,600.5136 hacking exp (t=1198214)\",\"Executing weaken() on server galactic-cyber in 97.014 seconds (t=1198214)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1908.210000000312,\"onlineMoneyMade\":0,\"onlineExpGained\":3428485409.759094,\"threads\":1198214,\"dataMap\":{\"23.6.4.5\":[0,0,0,22766066]}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"FTPCrack.exe-2.56%-INC\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"SQLInject.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"40.1.6.0\",\"91.2.5.0\",\"78.1.6.8\",\"50.5.8.2\",\"40.1.5.9\",\"59.6.0.7\",\"96.2.2.9\",\"52.0.0.9\",\"79.2.7.0\",\"18.6.4.5\",\"88.2.2.5\",\"72.9.3.1\",\"7.2.5.0\",\"91.0.4.3\",\"58.1.7.1\",\"61.3.0.4\",\"69.3.1.7\",\"46.3.0.6\",\"96.5.8.3\",\"2.9.8.5\",\"54.6.3.4\",\"53.4.5.4\",\"30.7.7.2\",\"62.4.1.6\",\"94.7.2.2\",\"1.5.6.7\",\"26.6.9.1\",\"57.3.6.5\",\"86.2.9.4\",\"56.3.0.2\",\"8.3.9.5\",\"32.2.2.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.1.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.1.2.5\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1136,\"moneyAvailable\":1566534887225,\"moneyMax\":1566534887225,\"hackDifficulty\":33.816,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"74.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"48.0.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.0.9.2\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1280,\"moneyAvailable\":1353461564725,\"moneyMax\":1353461564725,\"hackDifficulty\":34.65,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"74.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"14.8.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.8.0.2\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994377.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,18],[3,6],[1,10],[5,9],[15,19],[6,7],[12,22]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1027,\"moneyAvailable\":467752393375,\"moneyMax\":467752393375,\"hackDifficulty\":27,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":75,\"serversOnNetwork\":[\"23.5.0.9\",\"18.6.0.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"74.7.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.7.8.7\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.7.8.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"74.7.8.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 86.432 seconds (t=73)\",\"Available money on galactic-cyber grown by 48.319655%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 84.484 seconds (t=73)\",\"Available money on galactic-cyber grown by 49.688041%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 82.582 seconds (t=73)\",\"Available money on galactic-cyber grown by 51.959737%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 79.658 seconds (t=73)\",\"Available money on galactic-cyber grown by 27.454359%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 94.780 seconds (t=73)\",\"Available money on galactic-cyber grown by 33.762598%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 113.728 seconds (t=73)\",\"Available money on galactic-cyber grown by 47.049737%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 86.276 seconds (t=73)\",\"Available money on galactic-cyber grown by 49.504228%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 82.782 seconds (t=73)\",\"Available money on galactic-cyber grown by 18.999790%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 78.920 seconds (t=73)\",\"Available money on galactic-cyber grown by 39.040621%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 94.408 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 90.866 seconds (t=73)\",\"Available money on galactic-cyber grown by 31.648629%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 89.687 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 87.673 seconds (t=73)\",\"Available money on galactic-cyber grown by 46.608795%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 86.857 seconds (t=73)\",\"Available money on galactic-cyber grown by 45.367422%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 88.746 seconds (t=73)\",\"Available money on galactic-cyber grown by 33.877036%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 86.648 seconds (t=73)\",\"Available money on galactic-cyber grown by 46.690210%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 86.670 seconds (t=73)\",\"Available money on galactic-cyber grown by 48.205360%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 84.434 seconds (t=73)\",\"Available money on galactic-cyber grown by 52.200152%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 79.211 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.647106%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 97.092 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.525327%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 95.375 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.623886%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 97.126 seconds (t=73)\",\"Available money on galactic-cyber grown by 43.457069%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 91.825 seconds (t=73)\",\"Available money on galactic-cyber grown by 44.890908%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 89.390 seconds (t=73)\",\"Available money on galactic-cyber grown by 44.990154%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 89.229 seconds (t=73)\",\"Available money on galactic-cyber grown by 46.690212%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 86.549 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":5.748,\"offlineMoneyMade\":0,\"offlineExpGained\":2.1903082114861556,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":3671839.0986280525,\"threads\":73,\"dataMap\":{\"23.6.4.5\":[0,0,24382,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":974,\"moneyAvailable\":241534601590,\"moneyMax\":491288954550,\"hackDifficulty\":31.978,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":80,\"serversOnNetwork\":[\"19.6.6.7\",\"56.1.2.5\",\"48.0.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"2.5.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.5.0.4\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-939155-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[97,79,10,145,44,148,172,123,184,119,197,166,64,156,30,175,145,107,153],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}}],\"dir\":0,\"requiredHackingSkill\":1111,\"moneyAvailable\":628704562125,\"moneyMax\":628704562125,\"hackDifficulty\":34.03,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":75,\"serversOnNetwork\":[\"82.2.7.7\",\"34.3.3.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"17.7.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.7.9.2\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1103,\"moneyAvailable\":494604408075,\"moneyMax\":494604408075,\"hackDifficulty\":20.974,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":48,\"serversOnNetwork\":[\"82.2.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"32.3.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.3.5.2\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.3.5.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"32.3.5.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 96.042 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 95.903 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.729 seconds (t=73)\",\"Available money on galactic-cyber grown by 18.082513%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 91.525 seconds (t=73)\",\"Available money on galactic-cyber grown by 16.776947%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 109.810 seconds (t=73)\",\"Available money on galactic-cyber grown by 27.700891%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 82.490 seconds (t=73)\",\"Available money on galactic-cyber grown by 17.301635%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 102.422 seconds (t=73)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 78.374 seconds (t=73)\",\"Available money on galactic-cyber grown by 48.005290%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 84.860 seconds (t=73)\",\"Available money on galactic-cyber grown by 49.157543%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 83.244 seconds (t=73)\",\"Available money on galactic-cyber grown by 50.065595%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 81.990 seconds (t=73)\",\"Available money on galactic-cyber grown by 50.448861%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 81.490 seconds (t=73)\",\"Available money on galactic-cyber grown by 50.958897%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 80.814 seconds (t=73)\",\"Available money on galactic-cyber grown by 52.181092%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 79.278 seconds (t=73)\",\"Available money on galactic-cyber grown by 35.509518%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 95.094 seconds (t=73)\",\"Available money on galactic-cyber grown by 42.378787%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.849 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.292266%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 95.859 seconds (t=73)\",\"Available money on galactic-cyber grown by 40.002862%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 98.405 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.304261%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 95.809 seconds (t=73)\",\"Available money on galactic-cyber grown by 42.513842%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 93.525 seconds (t=73)\",\"Available money on galactic-cyber grown by 41.991090%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 94.485 seconds (t=73)\",\"Available money on galactic-cyber grown by 45.741230%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 88.071 seconds (t=73)\",\"Available money on galactic-cyber grown by 48.385216%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 84.110 seconds (t=73)\",\"Available money on galactic-cyber grown by 48.582930%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 83.834 seconds (t=73)\",\"Available money on galactic-cyber grown by 50.699614%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 80.987 seconds (t=73)\",\"Available money on galactic-cyber grown by 51.815283%. Gained 10,993.5302 hacking exp (t=73)\",\"Executing grow() on server galactic-cyber in 79.590 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":2.190689931285996,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":3682832.628863466,\"threads\":73,\"dataMap\":{\"23.6.4.5\":[0,0,24455,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-757387-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,5],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":915,\"moneyAvailable\":208892495089,\"moneyMax\":421567811975,\"hackDifficulty\":32.068,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":95,\"serversOnNetwork\":[\"80.4.9.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"19.6.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.6.6.7\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":913,\"moneyAvailable\":618878575725,\"moneyMax\":618878575725,\"hackDifficulty\":20.256,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":76,\"serversOnNetwork\":[\"58.2.8.4\",\"74.7.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"23.5.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.5.0.9\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1209,\"moneyAvailable\":297372219247,\"moneyMax\":595735906525,\"hackDifficulty\":32.076,\"baseDifficulty\":97,\"minDifficulty\":32,\"serverGrowth\":95,\"serversOnNetwork\":[\"25.8.2.5\",\"14.8.0.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"6.4.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.4.7.2\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1024,\"ramUsed\":1023.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.4.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"6.4.7.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 82.420 seconds (t=585)\",\"Available money on galactic-cyber grown by 93.133429%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 79.648 seconds (t=585)\",\"Available money on galactic-cyber grown by 210.249333%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 95.903 seconds (t=585)\",\"Available money on galactic-cyber grown by 61.623080%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 92.497 seconds (t=585)\",\"Available money on galactic-cyber grown by 185.403935%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 90.932 seconds (t=585)\",\"Available money on galactic-cyber grown by 178.228783%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 108.502 seconds (t=585)\",\"Available money on galactic-cyber grown by 265.032874%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 81.382 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,814.185696%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 98.105 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,966.517406%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 95.862 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,491.782247%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 92.946 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,000.314527%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 90.274 seconds (t=585)\",\"Available money on galactic-cyber grown by 675.370328%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 87.926 seconds (t=585)\",\"Available money on galactic-cyber grown by 545.481540%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 87.096 seconds (t=585)\",\"Available money on galactic-cyber grown by 229.443950%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 84.581 seconds (t=585)\",\"Available money on galactic-cyber grown by 971.062219%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 86.517 seconds (t=585)\",\"Available money on galactic-cyber grown by 986.856150%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 84.919 seconds (t=585)\",\"Available money on galactic-cyber grown by 898.474924%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 84.373 seconds (t=585)\",\"Available money on galactic-cyber grown by 434.042999%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 82.221 seconds (t=585)\",\"Available money on galactic-cyber grown by 239.277832%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 102.676 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,078.492997%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 106.148 seconds (t=585)\",\"Available money on galactic-cyber grown by 545.471077%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 83.404 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,192.374457%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 105.650 seconds (t=585)\",\"Available money on galactic-cyber grown by 1,447.154507%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 101.912 seconds (t=585)\",\"Available money on galactic-cyber grown by 70.498384%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 80.042 seconds (t=585)\",\"Available money on galactic-cyber grown by 317.225518%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 99.098 seconds (t=585)\",\"Available money on galactic-cyber grown by 102.724215%. Gained 88,098.8382 hacking exp (t=585)\",\"Executing grow() on server galactic-cyber in 94.552 seconds (t=585)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":17.555528901401473,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":29248814.2783829,\"threads\":585,\"dataMap\":{\"23.6.4.5\":[0,0,194220,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":964,\"moneyAvailable\":20721155117,\"moneyMax\":42184413725,\"hackDifficulty\":28.066,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":90,\"serversOnNetwork\":[\"89.7.4.0\",\"82.2.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"18.6.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.6.0.6\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1560,\"moneyAvailable\":988967,\"moneyMax\":25000000,\"hackDifficulty\":33.002,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"14.8.0.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"80.4.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.4.9.0\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1071,\"moneyAvailable\":1143698833,\"moneyMax\":28592470825,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":68,\"serversOnNetwork\":[\"19.3.5.5\",\"32.3.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"11.8.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.8.5.2\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":947,\"moneyAvailable\":947919585,\"moneyMax\":23697989625,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":68,\"serversOnNetwork\":[\"95.1.7.4\",\"92.9.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.9.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.9.6.5\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":875,\"moneyAvailable\":651052630,\"moneyMax\":16276315750,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":48,\"serversOnNetwork\":[\"35.7.6.6\",\"41.6.3.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.8.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.8.2.5\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.8.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"25.8.2.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 96.801 seconds (t=146)\",\"Available money on galactic-cyber grown by 17.866627%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 94.525 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 95.903 seconds (t=146)\",\"Available money on galactic-cyber grown by 17.969176%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.105 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.932 seconds (t=146)\",\"Available money on galactic-cyber grown by 16.823311%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 109.156 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 81.382 seconds (t=146)\",\"Available money on galactic-cyber grown by 95.040517%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 100.421 seconds (t=146)\",\"Available money on galactic-cyber grown by 26.636584%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=146)\",\"Available money on galactic-cyber grown by 38.836305%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 95.623 seconds (t=146)\",\"Available money on galactic-cyber grown by 18.087537%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 91.458 seconds (t=146)\",\"Available money on galactic-cyber grown by 18.173207%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.279 seconds (t=146)\",\"Available money on galactic-cyber grown by 27.061331%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 88.496 seconds (t=146)\",\"Available money on galactic-cyber grown by 18.319458%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=146)\",\"Available money on galactic-cyber grown by 39.792456%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.991 seconds (t=146)\",\"Available money on galactic-cyber grown by 110.990491%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.184 seconds (t=146)\",\"Available money on galactic-cyber grown by 77.751678%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.820 seconds (t=146)\",\"Available money on galactic-cyber grown by 114.319095%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 88.213 seconds (t=146)\",\"Available money on galactic-cyber grown by 125.073990%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 83.089 seconds (t=146)\",\"Available money on galactic-cyber grown by 84.133472%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 80.010 seconds (t=146)\",\"Available money on galactic-cyber grown by 97.739880%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 98.240 seconds (t=146)\",\"Available money on galactic-cyber grown by 16.977126%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 106.955 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=146)\",\"Available money on galactic-cyber grown by 105.181155%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.312 seconds (t=146)\",\"Available money on galactic-cyber grown by 104.905901%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.465 seconds (t=146)\",\"Available money on galactic-cyber grown by 109.200602%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.900 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":4.381379862571992,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":7321691.136785278,\"threads\":146,\"dataMap\":{\"23.6.4.5\":[0,0,48618,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":857,\"moneyAvailable\":644515252,\"moneyMax\":16112881300,\"hackDifficulty\":93,\"baseDifficulty\":93,\"minDifficulty\":31,\"serverGrowth\":74,\"serversOnNetwork\":[\"89.7.4.0\",\"23.5.0.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"58.2.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.2.8.4\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"58.2.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"58.2.8.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 87.795 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.998937%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.554 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.535562%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.637 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.422630%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.658 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.503008%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.850 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.210838%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 114.628 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.412280%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.708 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.357311%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.213 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.550818%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.213 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.042081%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.352 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.866 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.687 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.673 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.446235%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.479 seconds (t=36)\",\"Available money on galactic-cyber grown by 2.241903%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.823 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.648 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.464257%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.377 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.058184%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.125 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.584924%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.986 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.041061%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.868 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.426282%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.997 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 106.302 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.716874%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.249 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.744827%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.119 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.398330%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.508 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0803402400862447,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1805348.4994812785,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11988,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-706562-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[85,156,118,172,63,5,152,58,151,121,12],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":878,\"moneyAvailable\":793488119,\"moneyMax\":19837202975,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":74,\"serversOnNetwork\":[\"41.8.6.3\",\"19.6.6.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"9.0.2.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.0.2.7\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":872,\"moneyAvailable\":900128802,\"moneyMax\":22503220050,\"hackDifficulty\":89,\"baseDifficulty\":89,\"minDifficulty\":30,\"serverGrowth\":95,\"serversOnNetwork\":[\"7.1.5.6\",\"18.2.3.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"35.7.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.7.6.6\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.7.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"35.7.6.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 88.350 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.810731%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.247 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.372599%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.191 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.224777%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.297 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.367939%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.473 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.121564%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 115.267 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.252023%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.346 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.177685%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.836 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.333999%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.905 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.001859%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.898 seconds (t=36)\",\"Available money on galactic-cyber grown by 8.073275%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=36)\",\"Available money on galactic-cyber grown by 9.948580%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=36)\",\"Available money on galactic-cyber grown by 7.932296%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=36)\",\"Available money on galactic-cyber grown by 4.837246%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.466 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.463367%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.395 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.362341%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.815 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.019166%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.081 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.075173%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.040 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.837707%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.907 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.796704%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.266 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.130051%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.770 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.779181%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.294 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 99.098 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.552 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0803402400862447,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1794505.56555046,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11916,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":898,\"moneyAvailable\":27767537425,\"moneyMax\":27767537425,\"hackDifficulty\":28.488,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":90,\"serversOnNetwork\":[\"7.1.5.6\",\"56.9.6.5\",\"64.3.9.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"89.7.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.7.4.0\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.7.4.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"89.7.4.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 86.794 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.042864%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.931 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.297803%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.929 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.705970%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.950 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.887791%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.280 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.359625%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 114.005 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.820544%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.707 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.234119%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.367 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.754559%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.589 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.623 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.289110%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.720 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.361095%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.626 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.552383%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.911 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.383847%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.776 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.820 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.416057%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.025 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.725265%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.337 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.235123%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.212 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.108103%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.180 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.823707%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 107.301 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.022417%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.672 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.951138%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.363 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.204053%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.882 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5401701200431224,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":899963.5162579346,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5976,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":840,\"moneyAvailable\":857731493,\"moneyMax\":21443287325,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":62,\"serversOnNetwork\":[\"64.3.9.3\",\"6.4.7.2\",\"25.8.2.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"19.3.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.3.5.5\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"19.3.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"19.3.5.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 85.169 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.298820%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.944 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.578877%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.873 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.849 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.932 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 109.156 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.455812%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.728 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.784 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.466 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.610 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.102782%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.952 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.396535%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.217 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.851168%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.245 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.730712%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.251 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.568154%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.709 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.622038%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.131 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.649649%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.909 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.963203%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.276 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.749,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5401701200431224,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":894542.0492925254,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5940,0]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406234-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,27],[3,13],[17,27],[12,16],[9,19],[6,14],[18,26]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-333573.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,0,3,0,3,1,-10,-9,7,-8,0,0,1,-9,3,-4,9,0,8,2,9,6,-1,-3,5,4,6,8,9,10,-5,6,-3,-6,4,-3],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":814,\"moneyAvailable\":508048634,\"moneyMax\":12701215850,\"hackDifficulty\":68,\"baseDifficulty\":68,\"minDifficulty\":23,\"serverGrowth\":76,\"serversOnNetwork\":[\"92.9.7.4\",\"80.4.9.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"64.3.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.3.9.3\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":865,\"moneyAvailable\":867618812,\"moneyMax\":21690470300,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":71,\"serversOnNetwork\":[\"35.7.6.6\",\"89.7.4.0\",\"41.8.6.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.6.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.6.4.5\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":865,\"moneyAvailable\":8294321098.968533,\"moneyMax\":20229627625,\"hackDifficulty\":20.560000000000006,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":90,\"serversOnNetwork\":[\"10.4.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"49.6.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.6.3.3\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":895,\"moneyAvailable\":1056094118,\"moneyMax\":26402352950,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":55,\"serversOnNetwork\":[\"10.4.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.4.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.4.2.2\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.4.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"43.4.2.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 80.210 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.960310%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.217 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.352696%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.819 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.708058%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.638 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.043487%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 104.754 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.719049%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 124.410 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.462107%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.659 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.281610%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.374 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.186125%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.736 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.417159%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.982 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.574586%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.798 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.644761%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.299 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.740157%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.623 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.970689%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.017 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.104372%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.988 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.279432%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.328 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.052977%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.477 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.814885%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.840 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.060059%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.367 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.311759%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.952 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.200804%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.989 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.947991%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.431 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.470513%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.393 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.528667%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.986 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.939611%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.094 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.167627%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.242 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":0.540264242733494,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":902674.2497406392,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5994,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":922,\"moneyAvailable\":902885020,\"moneyMax\":22572125500,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":60,\"serversOnNetwork\":[\"44.8.6.8\",\"32.8.9.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"92.9.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.9.7.4\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":821,\"moneyAvailable\":23408310775,\"moneyMax\":23408310775,\"hackDifficulty\":22.5,\"baseDifficulty\":63,\"minDifficulty\":21,\"serverGrowth\":70,\"serversOnNetwork\":[\"11.8.5.2\",\"19.3.5.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"41.6.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.6.3.7\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":830,\"moneyAvailable\":24837357775,\"moneyMax\":24837357775,\"hackDifficulty\":22.436,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":73,\"serversOnNetwork\":[\"56.9.6.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"32.8.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.8.9.8\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"32.8.9.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"32.8.9.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 80.210 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.903 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.880223%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.337 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.258803%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.425 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.768201%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 110.911 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.566672%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.490 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.901578%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.157 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.631976%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.845 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.660547%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.159 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.257907%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.144 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.646083%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.868 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.796705%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.399 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.020082%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.708 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.847998%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.847 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.975378%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.542 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.339038%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.966 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.845262%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.099 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.316388%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.546 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.848664%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.073 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.409116%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.574 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.152852%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.680 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.754923%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.191 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.891941%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.153 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.972482%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.884 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.916639%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.854 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.821038%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.158 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1799927.0325158692,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11952,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-50652-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[92,17,63,5,33,121,122,165,39,75,155,50],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}}],\"dir\":0,\"requiredHackingSkill\":770,\"moneyAvailable\":740230323,\"moneyMax\":18505758075,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":75,\"serversOnNetwork\":[\"43.4.2.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"95.1.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.1.7.4\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":823,\"moneyAvailable\":18864488838,\"moneyMax\":38037895125,\"hackDifficulty\":28.062,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":60,\"serversOnNetwork\":[\"14.8.2.5\",\"11.8.5.2\",\"72.0.8.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"14.8.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.8.2.5\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.8.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.8.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"14.8.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"14.8.2.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 85.276 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":67.41000000000042,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":9,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":758,\"moneyAvailable\":43456455200,\"moneyMax\":43456455200,\"hackDifficulty\":27.727999999999998,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":89,\"serversOnNetwork\":[\"10.4.9.2\",\"95.1.7.4\",\"7.1.5.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"18.2.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.2.3.0\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-520650.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1052120551\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-740833.cct\",\"type\":\"Total Ways to Sum\",\"data\":90,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":782,\"moneyAvailable\":29334876725,\"moneyMax\":29334876725,\"hackDifficulty\":26.479999999999997,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":84,\"serversOnNetwork\":[\"9.0.2.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"72.0.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.0.8.5\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-502390-FulcrumTechnologies.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-4,10,0,7,2,9,-1,3,-2,1],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}}],\"dir\":0,\"requiredHackingSkill\":809,\"moneyAvailable\":16835385577,\"moneyMax\":33755142825,\"hackDifficulty\":30,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":72,\"serversOnNetwork\":[\"95.1.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"7.1.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.1.5.6\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.1.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.1.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"7.1.5.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"7.1.5.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 24.350 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,730,074,401.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.009 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,613,940,650.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.843 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $370,729,926.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.590 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,702,156,760.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.046 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,639,944,270.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.973 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $747,403,650.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.660 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $577,946,097.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 30.743 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,277,450,487.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.288 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $570,124,089.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.790 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $197,236,404.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.997 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,809,706,248.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.135 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,010,980,800.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.611 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $211,980,312.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.167 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,982,213,846.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 31.869 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,649,670,471.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.306 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $405,681,579.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.872 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $877,116,087.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.455 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,333,567,403.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.174 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $519,642,333.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.663 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $288,905,319.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.910 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,011,872,914.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 30.990 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,014,378,750.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.716 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $817,282,404.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.992 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,187,237,484.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.706 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,719,518,597.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.297 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":709.810000000024,\"onlineMoneyMade\":33266761281,\"onlineExpGained\":33884.16853380798,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[33266761281,225,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":809,\"moneyAvailable\":26664478025,\"moneyMax\":26664478025,\"hackDifficulty\":27.63,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":78,\"serversOnNetwork\":[\"14.8.2.5\",\"9.0.2.7\",\"35.7.6.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"16.2.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.2.1.9\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.2.1.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"16.2.1.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.308 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.865 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 103.115 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 122.616 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 101.784 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.058 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.463 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.980 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.161 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.823515%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.847 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.547144%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.991 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.218537%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.502 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.311 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.030225%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.530 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.824880%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.087 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.403707%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.536 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1799927.0325158692,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11952,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":657,\"moneyAvailable\":17984113850,\"moneyMax\":17984113850,\"hackDifficulty\":21.595999999999997,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":62,\"serversOnNetwork\":[\"79.6.9.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"28.5.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.5.0.2\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"28.5.0.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"28.5.0.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 98.249 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.321209%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.751 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.903 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.337 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.124794%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.010 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.680538%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 111.465 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.387908%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.114 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.695248%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.796 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.359865%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.500 seconds (t=36)\",\"Available money on galactic-cyber grown by 7.249541%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.207 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.130491%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.866 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.142687%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.688 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.361725%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.673 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.047579%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.234 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.492355%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.278 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.521139%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.495 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.561369%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.949 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.719368%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.782 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.989976%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 103.367 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.144939%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.229 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.838464%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.078 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.618474%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.099 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.121351%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.624 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.166963%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.678 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.233631%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.440 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.039666%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.654 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1799927.0325158692,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11952,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":523,\"moneyAvailable\":6630586350,\"moneyMax\":13504598950,\"hackDifficulty\":18.84,\"baseDifficulty\":53,\"minDifficulty\":18,\"serverGrowth\":55,\"serversOnNetwork\":[\"84.0.8.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"42.2.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.2.1.7\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"42.2.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"42.2.1.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"42.2.1.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 24.818 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,752,331,554.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.336 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $834,472,701.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.091 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $256,303,287.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 30.411 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,312,085,843.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.025 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,687,062,870.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.163 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $280,980,999.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.876 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,303,549,208.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.328 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $713,398,194.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.465 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $349,827,885.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.042 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,929,086,495.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 33.445 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $931,302,873.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.421 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $572,774,679.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.978 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $261,232,623.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.247 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,917,779,436.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.347 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $913,115,511.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.478 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $204,377,301.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.925 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,191,102,489.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.510 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,290,940,956.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.351 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $288,200,898.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.826 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $386,253,000.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.903 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,283,768,243.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.318 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $793,014,471.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.846 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $580,247,559.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.035 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,102,601,528.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.627 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,238,259,527.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.479 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":36706.61000002829,\"onlineMoneyMade\":1867888786950,\"onlineExpGained\":1499035.6159356562,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[1867888786950,9954,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541672-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[55],\"reward\":{\"type\":2,\"name\":\"Fulcrum Technologies\"}}}],\"dir\":0,\"requiredHackingSkill\":572,\"moneyAvailable\":7492969755,\"moneyMax\":15387016175,\"hackDifficulty\":20.052,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":53,\"serversOnNetwork\":[\"50.2.3.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"10.4.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.4.9.2\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.4.9.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"10.4.9.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 83.421 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.260275%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.211 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.906596%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.149 seconds (t=36)\",\"Available money on galactic-cyber grown by 8.124021%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.729 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.932 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 109.156 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.382 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.043669%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 101.784 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.466 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.610 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.163394%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.675 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.810357%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.925 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.843943%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.900 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.571034%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.906 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.451527%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.364 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.654 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.474285%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.241 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.534648%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.011 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.225003%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.432 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":1.080528485466988,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1799927.0325158692,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11952,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-884776.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":270523886,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":407,\"moneyAvailable\":267757900,\"moneyMax\":6693947500,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":40,\"serversOnNetwork\":[\"65.5.8.5\",\"23.6.4.5\",\"49.6.3.3\",\"14.8.2.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"84.0.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"84.0.8.8\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"84.0.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"84.0.8.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 82.420 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.210 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.903 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.337 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.023198%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.926 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.466127%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 112.466 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.035130%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.945 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.521230%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.266 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.623 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.458 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.279 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.496 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.991 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.776 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.820 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.454486%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.680 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.838 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.289672%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.782 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.163285%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.765 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.468739%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 106.302 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.447632%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.682 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.458776%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.566 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.764435%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.910 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.75,\"offlineMoneyMade\":0,\"offlineExpGained\":0.540264242733494,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":897252.78277523,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5958,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":384,\"moneyAvailable\":213991922,\"moneyMax\":5349798050,\"hackDifficulty\":50,\"baseDifficulty\":50,\"minDifficulty\":17,\"serverGrowth\":44,\"serversOnNetwork\":[\"25.7.9.9\",\"28.5.0.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"37.4.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.4.4.8\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.4.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"37.4.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"37.4.4.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 26.397 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,876,830,003.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.887 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $376,049,763.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.981 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,694,307,113.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.387 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,282,488,174.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.108 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $536,254,794.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.703 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $641,257,182.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.490 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,458,967,743.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.976 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $781,357,356.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.651 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $281,151,720.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.922 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,038,129,326.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.814 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,389,587,967.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.472 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $319,223,673.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.136 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $272,139,498.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.005 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,271,201,210.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.162 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $558,215,856.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.738 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $309,577,383.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.989 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,212,891,118.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.035 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $788,381,523.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.610 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $260,196,363.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.399 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $927,082,224.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.510 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,545,941,007.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.663 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $625,446,405.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.330 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $986,564,349.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.068 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,059,835,300.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.569 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,007,325,341.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.894 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":22281.210000023875,\"onlineMoneyMade\":1035345399660,\"onlineExpGained\":817286.1450354551,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[1035345399660,5427,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":771,\"moneyAvailable\":13550839548,\"moneyMax\":27217622075,\"hackDifficulty\":24.823999999999998,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":75,\"serversOnNetwork\":[\"17.5.4.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"27.6.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.6.6.6\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.6.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"27.6.6.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.308 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.865 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 103.115 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 122.616 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.784 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.058 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.463 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.980 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.161 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.494960%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.294 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.369509%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.438 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.136604%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.949 seconds (t=18)\",\"Available money on galactic-cyber grown by 3.173994%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.311 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.960310%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.978 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.276955%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.224 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.576076%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.521 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":897252.78277523,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5958,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":462,\"moneyAvailable\":226119735,\"moneyMax\":5652993375,\"hackDifficulty\":47,\"baseDifficulty\":47,\"minDifficulty\":16,\"serverGrowth\":41,\"serversOnNetwork\":[\"41.9.8.0\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"65.5.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.5.8.5\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":608,\"moneyAvailable\":524933186,\"moneyMax\":13123329650,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":70,\"serversOnNetwork\":[\"47.0.4.6\",\"10.4.9.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.6.9.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.6.9.8\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.6.9.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.6.9.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"79.6.9.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 24.796 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,074,278,618.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $984,383,496.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.069 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $301,533,264.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 30.396 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,492,051,292.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.913 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,993,770,531.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.142 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $331,573,068.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.862 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,484,087,327.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.220 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $844,253,784.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.444 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $412,696,647.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.025 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,935,966,653.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 33.241 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,314,922,383.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.378 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $667,063,494.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.762 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $348,903,522.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.177 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,719,318,428.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.303 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,168,050,987.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.349 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $287,910,855.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.903 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,396,336,707.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.294 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,651,421,907.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.217 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $406,213,614.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.795 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $326,648,322.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.380 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,238,311,870.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.282 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,206,992,844.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.695 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $970,017,057.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.970 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,404,347,049.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.684 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,238,606,368.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.275 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":22245.410000023745,\"onlineMoneyMade\":1054113980886,\"onlineExpGained\":814575.4115527504,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[1054113980886,5409,0,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":427,\"moneyAvailable\":5803934123,\"moneyMax\":12044148675,\"hackDifficulty\":23.016,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":52,\"serversOnNetwork\":[\"34.0.5.2\",\"16.2.1.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"34.0.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.0.5.2\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.0.5.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"34.0.5.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 84.061 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.090905%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.766 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.705106%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 79.788 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.337 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.776854%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.564 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.585692%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 112.104 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.231471%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.668 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.514391%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.350 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.241194%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.054 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 94.408 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.866 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.687 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.673 seconds (t=36)\",\"Available money on galactic-cyber grown by 6.767275%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.679 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.823 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.648 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.317008%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.945 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.887695%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.762 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.405808%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.555 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 106.148 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.404 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.477707%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 106.272 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.315035%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.855 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.386391%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.563 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.070924%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.984 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0807167308477315,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1805348.4994812785,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11988,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":279,\"moneyAvailable\":1834158229,\"moneyMax\":3829677975,\"hackDifficulty\":12.63,\"baseDifficulty\":37,\"minDifficulty\":12,\"serverGrowth\":48,\"serversOnNetwork\":[\"10.4.3.4\",\"79.6.9.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"9.7.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.7.9.3\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":316,\"moneyAvailable\":2912550143,\"moneyMax\":6077467775,\"hackDifficulty\":19.048,\"baseDifficulty\":57,\"minDifficulty\":19,\"serverGrowth\":46,\"serversOnNetwork\":[\"10.4.3.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"25.7.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.7.9.9\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.7.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.7.9.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.7.9.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"25.7.9.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 27.422 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $770,783,499.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.199 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,937,641,607.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 33.193 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,989,091,737.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.246 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,320,296,148.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.293 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $340,157,691.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.435 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,979,780,121.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.544 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,391,494,842.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.478 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $273,989,457.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.164 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,011,657,589.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.468 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,106,588,754.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.399 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $678,489,264.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.956 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $308,640,024.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.235 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,283,600,150.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.325 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,084,857,714.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.457 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $242,568,081.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.915 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,403,925,462.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.488 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,534,132,026.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.330 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $342,145,746.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.812 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $316,375,533.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.534 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,719,565,730.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.297 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $943,352,829.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.824 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $688,626,081.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.013 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,083,919,301.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.428 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,664,523,206.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.457 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":673.6100000000164,\"onlineMoneyMade\":32416202592,\"onlineExpGained\":32528.801792455655,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[32416202592,216,0,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":422,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":64,\"serversOnNetwork\":[\"37.6.0.5\",\"84.0.8.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"41.9.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.9.8.0\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":254,\"moneyAvailable\":73056790,\"moneyMax\":1826419750,\"hackDifficulty\":60,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":39,\"serversOnNetwork\":[\"10.4.3.4\",\"27.6.6.6\",\"50.2.3.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"40.1.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.1.6.0\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"40.1.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"40.1.6.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 24.253 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,687,658,616.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.915 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":31.409999999999922,\"onlineMoneyMade\":1687658616,\"onlineExpGained\":1355.3667413523194,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[1687658616,9,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"hackDifficulty\":10,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\",\"47.8.6.9\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"91.2.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.2.5.0\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"91.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"91.2.5.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"91.2.5.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 77.633 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.541549%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 90.986 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.546305%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 90.879 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.686167%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 88.230 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":319.40999999999053,\"onlineMoneyMade\":0,\"onlineExpGained\":4066.1002240569583,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,27,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":2635293.5359983444,\"moneyMax\":57500000,\"hackDifficulty\":10.455999999999996,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"78.1.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"78.1.6.8\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.1.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.1.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"78.1.6.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"78.1.6.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.139 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.302260%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 95.921 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.577464%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 90.305 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.795740%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 86.320 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.809464%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 86.067 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.964369%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 83.450 seconds (t=9)\",\"Script killed\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":529.6099999999836,\"onlineMoneyMade\":0,\"onlineExpGained\":6776.833706761598,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,45,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"57.2.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.2.7.1\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"57.2.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"57.2.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"57.2.7.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.655 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.865 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 103.115 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 122.616 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.784 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.960310%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.174 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.222080%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.459 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.482093%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.505 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.662178%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.175 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.703772%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.800233%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.192 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.383003%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.416 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.989736%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.110 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.138694%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.658 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.938090%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.599 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.689954%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.130 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.946529%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.488 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.182973%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.173 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.073466%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.225 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.782761%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.789 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.290688%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.728 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.334551%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.414 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.752341%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.368 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.949951%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.041 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":20414.410000017084,\"onlineMoneyMade\":0,\"onlineExpGained\":425585.1567846271,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,2826,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"40.1.5.9\",\"5.0.3.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"14.5.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.5.9.5\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.5.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"14.5.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"14.5.9.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"14.5.9.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 79.368 seconds (t=9)\",\"Available money on galactic-cyber grown by 5.312120%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 78.194 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":103.41000000000093,\"onlineMoneyMade\":0,\"onlineExpGained\":1355.3667413523194,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,9,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"50.5.8.2\",\"10.4.3.4\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"37.6.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.6.0.5\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.6.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"37.6.0.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"37.6.0.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.094840%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.278 seconds (t=18)\",\"Available money on galactic-cyber grown by 4.334912%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.514893%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.356 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.267432%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 102.053 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.924877%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 120.846 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.114 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.623 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.720 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.018502%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.513156%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.257 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.344313%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.744 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.776 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.403316%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.181 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.385537%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.302 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.674723%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.752 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.188114%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.573 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.064192%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.525 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.446101%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.906 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.463929%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.561 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.935667%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.507 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.956543%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.338 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.320229%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.483 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":902674.2497406392,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5994,0]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"47.8.6.9\",\"25.7.9.9\",\"17.5.4.7\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"5.0.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.0.3.2\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.0.3.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"5.0.3.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 94.413 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 93.917 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.331879%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 92.177 seconds (t=36)\",\"Available money on galactic-cyber grown by 7.989570%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.457 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.502408%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 87.361 seconds (t=36)\",\"Available money on galactic-cyber grown by 16.843310%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 104.392 seconds (t=36)\",\"Available money on galactic-cyber grown by 13.973273%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 123.979 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.341159%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.904 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.623 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.458 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.279 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.496 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.991 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.210099%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.776 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.820 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.098122%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.781 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.436168%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.781 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.348323%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.701 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.822413%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 98.931 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.884 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.752295%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.113 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.769364%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 86.113 seconds (t=36)\",\"Available money on galactic-cyber grown by 20.819026%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.929 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.624686%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 83.035 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0807167308477315,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1810769.9664466877,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,12024,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"57.2.7.1\",\"47.0.4.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"50.5.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.5.8.2\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"50.5.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"50.5.8.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 99.098 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 94.552 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":139.41000000000062,\"onlineMoneyMade\":0,\"onlineExpGained\":1355.3667413523194,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,9,0]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"14.5.9.5\",\"20.2.8.2\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"40.1.5.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.1.5.9\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"40.1.5.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.5.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"40.1.5.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 106.272 seconds (t=9)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.685324%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 88.269 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.697576%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 88.062 seconds (t=9)\",\"Available money on galactic-cyber grown by 4.846150%. Gained 1,355.3667 hacking exp (t=9)\",\"Executing grow() on server galactic-cyber in 85.429 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":427.6099999999844,\"onlineMoneyMade\":0,\"onlineExpGained\":5421.466965409278,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[0,0,36,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":30,\"moneyMax\":100000000,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\",\"57.2.7.1\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"80.8.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.8.2.0\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.8.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"80.8.2.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.308 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.470684%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.865 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.217892%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 102.622 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.890992%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 121.416 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.316909%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.476 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.203992%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.208932%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.066 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.433951%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.964 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.584880%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.602 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.281084%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.313 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.002963%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.329260%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.842 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.297640%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.108 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.594584%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.458 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.088540%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.349 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.968919%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.285 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.864379%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.644 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.186210%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.102 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.320918%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.833 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.329260%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.741 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.625591%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.091 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":897252.78277523,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5958,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"47.8.6.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"47.8.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.8.6.9\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"47.8.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"47.8.6.9\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"47.8.6.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.308 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.865 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.194632%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 102.899 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.874627%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 121.708 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.291767%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.768 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.466 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.820960%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.610 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.192690%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.107 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.490638%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.372 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.965107%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 85.332 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.850237%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.253 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.713671%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.696 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.079789%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.123 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.916682%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.708 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.098 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 94.552 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":897252.78277523,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5958,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"40.1.6.0\",\"37.6.0.5\",\"80.8.2.0\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"10.4.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.4.3.4\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"10.4.3.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"10.4.3.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.660555%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.308 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.482005%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.634 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.242587%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 102.345 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.908351%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 121.139 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.114 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.816376%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.969 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.720 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.466506%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.687 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.312591%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.036 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.410956%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.137 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.007701%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.427 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.344313%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.694 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.642507%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.028 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.141534%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.919 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.020662%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.871 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.925855%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.230 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.340128%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.666 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.797472%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.642 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.827952%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.405 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.148445%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 83.810 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.7509999999999994,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5403583654238657,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":905384.9832233439,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,6012,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736595.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-9,3,-4,-1,-9,-9,1,8,-10,7,4,-7,10,-4,1,-8,5,-8,10],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":196,\"moneyAvailable\":66719701,\"moneyMax\":1667992525,\"hackDifficulty\":31,\"baseDifficulty\":31,\"minDifficulty\":10,\"serverGrowth\":36,\"serversOnNetwork\":[\"14.5.9.5\",\"34.0.5.2\",\"9.7.9.3\",\"41.9.8.0\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"47.0.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.0.4.6\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":240,\"moneyAvailable\":47629759,\"moneyMax\":1190743975,\"hackDifficulty\":45,\"baseDifficulty\":45,\"minDifficulty\":15,\"serverGrowth\":31,\"serversOnNetwork\":[\"5.0.3.2\",\"65.5.8.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.6.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.6.0.7\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.6.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"59.6.0.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"59.6.0.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.308 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 89.865 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=18)\",\"Available money on galactic-cyber grown by 5.866836%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 103.115 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.857437%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 121.985 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 101.784 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.466 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.610 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.074255%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.228 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.364459%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.494 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.809455%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.606 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.690010%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.612 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.529730%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 81.001 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 77.633 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.352697%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.541 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.359415%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.464 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.659483%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 87.800 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5404524881142374,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":897252.78277523,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,5958,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"72.8.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.8.2.8\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"72.8.2.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"72.8.2.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 84.754 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.862175%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.528 seconds (t=36)\",\"Available money on galactic-cyber grown by 22.502274%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 80.427 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 77.849 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.932 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 109.156 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.382 seconds (t=36)\",\"Available money on galactic-cyber grown by 17.469034%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 100.975 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.623 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 91.458 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 90.279 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.496 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.991 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.776 seconds (t=36)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.820 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.459196%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.334 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.259547%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 84.403 seconds (t=36)\",\"Available money on galactic-cyber grown by 15.509599%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 81.101 seconds (t=36)\",\"Available money on galactic-cyber grown by 23.144939%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 78.229 seconds (t=36)\",\"Available money on galactic-cyber grown by 18.496455%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 95.652 seconds (t=36)\",\"Available money on galactic-cyber grown by 19.971326%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 89.223 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.009494%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.230 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.056065%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 85.061 seconds (t=36)\",\"Available money on galactic-cyber grown by 21.869037%. Gained 5,421.4670 hacking exp (t=36)\",\"Executing grow() on server galactic-cyber in 82.207 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":1.0809049762284748,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":1799927.0325158692,\"threads\":36,\"dataMap\":{\"23.6.4.5\":[0,0,11952,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":508,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"hackDifficulty\":51,\"baseDifficulty\":51,\"minDifficulty\":17,\"serverGrowth\":41,\"serversOnNetwork\":[\"50.2.3.7\",\"44.8.6.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"70.5.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.5.8.6\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.5.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"70.5.8.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.917 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.283564%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.468 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.417758%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.211 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.843727%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.499 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.136418%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 103.600 seconds (t=18)\",\"Available money on galactic-cyber grown by 6.788643%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 123.186 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.912134%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.519 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.870758%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 86.252 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.338652%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 82.590 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.609018%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.575 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.797996%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 79.245 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.871176%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.745 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.970689%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 78.039 seconds (t=18)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.141899%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.642 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.321751%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.952 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.090081%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 93.116 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.850061%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.479 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.124295%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 92.744 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.372036%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 90.400 seconds (t=18)\",\"Available money on galactic-cyber grown by 9.262940%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 91.405 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.003355%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 84.985 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.539310%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.910 seconds (t=18)\",\"Available money on galactic-cyber grown by 10.596079%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 80.487 seconds (t=18)\",\"Available money on galactic-cyber grown by 8.469645%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 99.444 seconds (t=18)\",\"Available money on galactic-cyber grown by 7.190785%. Gained 2,710.7335 hacking exp (t=18)\",\"Executing grow() on server galactic-cyber in 95.419 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":0.5404524881142374,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":908095.7167060485,\"threads\":18,\"dataMap\":{\"23.6.4.5\":[0,0,6030,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1036,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":57,\"serversOnNetwork\":[\"82.2.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"44.8.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.8.6.8\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":743,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":55,\"serversOnNetwork\":[\"72.8.2.8\",\"43.4.2.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"41.8.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.8.6.3\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"41.8.6.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"41.8.6.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=292)\",\"Available money on galactic-cyber grown by 341.296408%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 92.985 seconds (t=292)\",\"Available money on galactic-cyber grown by 358.821982%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 90.744 seconds (t=292)\",\"Available money on galactic-cyber grown by 372.848487%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 89.064 seconds (t=292)\",\"Available money on galactic-cyber grown by 343.897286%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=292)\",\"Available money on galactic-cyber grown by 285.224522%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 101.760 seconds (t=292)\",\"Available money on galactic-cyber grown by 209.114285%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 120.569 seconds (t=292)\",\"Available money on galactic-cyber grown by 3.726163%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 101.114 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 95.623 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 91.458 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 90.279 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 88.496 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 88.256 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 89.991 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 89.776 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 89.820 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 89.334 seconds (t=292)\",\"Available money on galactic-cyber grown by 123.821614%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 86.838 seconds (t=292)\",\"Available money on galactic-cyber grown by 51.806480%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 82.437 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 83.404 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 105.650 seconds (t=292)\",\"Available money on galactic-cyber grown by 17.290789%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 102.550 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 80.042 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 99.098 seconds (t=292)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 43,974.1209 hacking exp (t=292)\",\"Executing grow() on server galactic-cyber in 94.552 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":8.767340362742074,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":14423511.668862287,\"threads\":292,\"dataMap\":{\"23.6.4.5\":[0,0,95776,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":548,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"64.3.9.3\",\"58.2.8.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"50.2.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.2.3.7\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.2.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"galactic-cyber\"],\"server\":\"50.2.3.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server galactic-cyber in 93.119 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 93.308 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.883 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.865 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 86.084 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 103.115 seconds (t=146)\",\"Available money on galactic-cyber grown by 15.977232%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 122.616 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 101.784 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 97.854 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 96.231 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 92.312 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.872 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.256 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 88.848 seconds (t=146)\",\"Available money on galactic-cyber grown by 18.044320%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 92.058 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.383 seconds (t=146)\",\"Available money on galactic-cyber grown by 26.630857%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 92.463 seconds (t=146)\",\"Available money on galactic-cyber grown by 65.428085%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 94.980 seconds (t=146)\",\"Available money on galactic-cyber grown by 66.709484%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 92.161 seconds (t=146)\",\"Available money on galactic-cyber grown by 112.748425%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 89.017 seconds (t=146)\",\"Available money on galactic-cyber grown by 110.704175%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 90.146 seconds (t=146)\",\"Available money on galactic-cyber grown by 123.806721%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 83.588 seconds (t=146)\",\"Available money on galactic-cyber grown by 131.765039%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 80.219 seconds (t=146)\",\"Available money on galactic-cyber grown by 99.420953%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 97.018 seconds (t=146)\",\"Available money on galactic-cyber grown by 27.239702%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 100.341 seconds (t=146)\",\"Available money on galactic-cyber grown by 0.000000%. Gained 21,987.0605 hacking exp (t=146)\",\"Executing grow() on server galactic-cyber in 77.611 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":4.383670181371037,\"onlineRunningTime\":37166.21000002996,\"onlineMoneyMade\":0,\"onlineExpGained\":7233742.89490197,\"threads\":146,\"dataMap\":{\"23.6.4.5\":[0,0,48034,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-669912.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[43,11,19,28,24,17,4],[8,45,5,44,42,19,38],[20,40,4,34,35,28,13],[18,6,17,11,24,11,15],[3,47,8,45,34,19,38],[11,28,30,29,31,35,14],[11,9,46,41,30,10,48]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":351,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1.002,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"41.9.8.0\",\"42.2.1.7\",\"72.8.2.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"17.5.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.5.4.7\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.5.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"17.5.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.5.4.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"17.5.4.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 25.260 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,198,211,489.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.301 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $514,902,987.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.549 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,088,357,255.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.490 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,311,017,706.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.402 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $874,462,167.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.444 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $345,153,510.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.822 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,547,680,770.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.673 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,089,240,687.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.607 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $278,665,560.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.541 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,354,138,703.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.598 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,953,848,043.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.428 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $408,245,094.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.019 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $318,787,875.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.799 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $3,210,057,603.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.119 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $787,171,887.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.694 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $344,171,511.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.738 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,971,054,549.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.282 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $914,217,120.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.395 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $204,521,067.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.848 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $450,604,098.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.421 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,785,593,142.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.448 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $560,467,944.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.889 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $475,735,914.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.212 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,795,053,672.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.847 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,579,603,536.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.522 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":23439.81000002809,\"onlineMoneyMade\":1082852378469,\"onlineExpGained\":872856.1814309021,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[1082852378469,5796,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":204,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"37.6.0.5\",\"37.4.4.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"82.2.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.2.7.7\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"82.2.7.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"82.2.7.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"82.2.7.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 25.195 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,776,893,004.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 27.530 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $653,567,904.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.220 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,510,429,886.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 33.214 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,676,825,793.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.268 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,117,523,367.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.315 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $288,580,662.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.450 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,669,956,831.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.565 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,286,141,022.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.586 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $232,328,790.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.176 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,529,935,712.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.490 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,741,271,409.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.143 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $483,551,955.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.999 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $241,544,871.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.345 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,610,630,253.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.368 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $768,594,402.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.500 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $172,207,890.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.934 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,099,647,108.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 29.618 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,086,347,034.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.373 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $242,775,576.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 25.838 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $426,995,136.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.184 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $2,125,780,596.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.426 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $666,663,462.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.867 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $512,984,736.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 26.100 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,942,921,233.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 28.735 seconds (t=9)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,880,268,939.00 and 1,355.3667 exp (t=9)\",\"Attempting to hack galactic-cyber in 24.500 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":36664.61000002814,\"onlineMoneyMade\":1895846205924,\"onlineExpGained\":1496324.8824529517,\"threads\":9,\"dataMap\":{\"23.6.4.5\":[1895846205924,9936,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":541,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"6.4.7.2\",\"2.5.0.4\",\"17.7.9.2\",\"70.5.8.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"20.2.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.2.8.2\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.2.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.2.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"20.2.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"galactic-cyber\"],\"server\":\"20.2.8.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack galactic-cyber in 26.407 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $706,862,048.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 28.896 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $141,938,808.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 29.991 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,007,767,176.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.397 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $481,329,268.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 27.117 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $201,894,416.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 28.713 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $239,427,224.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.499 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $547,421,144.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 26.985 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $294,142,488.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 28.660 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $106,114,276.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 29.932 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $842,241,428.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.915 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $572,446,128.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 26.568 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $119,824,960.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 27.146 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $102,527,920.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 29.014 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $849,126,392.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.172 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $208,936,236.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.747 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $127,433,828.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 27.085 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,200,890,408.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.044 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $295,011,404.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.620 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $97,529,024.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 26.409 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $349,590,180.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 29.520 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $577,402,948.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.673 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $233,910,644.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 25.340 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $405,989,224.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 27.169 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $1,357,084,020.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 29.746 seconds (t=4)\",\"Script SUCCESSFULLY hacked galactic-cyber for $630,648,684.00 and 602.3852 exp (t=4)\",\"Attempting to hack galactic-cyber in 24.925 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":5.752,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":36751.810000028454,\"onlineMoneyMade\":824047919324,\"onlineExpGained\":668045.2071821025,\"threads\":4,\"dataMap\":{\"23.6.4.5\":[824047919324,4436,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":52,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"50.5.8.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"34.3.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.3.3.7\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"2.5.0.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"54.2.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.2.4.9\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.2.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.2.2.9\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.0.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.0.0.9\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":153.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.0.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.0.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"52.0.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.0.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.0.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"52.0.0.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"ecorp\",1],\"server\":\"52.0.0.9\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack ecorp in 53.517 seconds (t=38)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":43.41000000000008,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":38,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.2.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.2.7.0\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":106.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"79.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"79.2.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"4sigma\",1],\"server\":\"79.2.7.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server 4sigma in 103.631 seconds (t=26)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":7.410000000000005,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":26,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"18.6.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.6.4.5\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":135.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"18.6.4.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"18.6.4.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"18.6.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"18.6.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"18.6.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"18.6.4.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"megacorp\",1],\"server\":\"18.6.4.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server megacorp in 246.980 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":97.41000000000085,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.2.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.2.2.5\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":129.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"88.2.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"88.2.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"clarkinc\",1],\"server\":\"88.2.2.5\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack clarkinc in 32.339 seconds (t=32)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25.409999999999943,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":32,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.9.3.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.9.3.1\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":86.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.9.3.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.9.3.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"72.9.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.9.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.9.3.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"72.9.3.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"nwo\",1],\"server\":\"72.9.3.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server nwo in 210.699 seconds (t=21)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":73.41000000000051,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":21,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"7.2.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.2.5.0\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":133.65,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"7.2.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"7.2.5.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"7.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"7.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"7.2.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"7.2.5.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"b-and-a\",1],\"server\":\"7.2.5.0\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack b-and-a in 38.707 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25.409999999999943,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"91.0.4.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.0.4.3\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":906.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"91.0.4.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"91.0.4.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"91.0.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"91.0.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"91.0.4.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"91.0.4.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"blade\",1],\"server\":\"91.0.4.3\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server blade in 139.019 seconds (t=221)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":109.41000000000102,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":221,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"58.1.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.1.7.1\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":750.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"58.1.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"58.1.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"58.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"58.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"58.1.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"58.1.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"kuai-gong\",1],\"server\":\"58.1.7.1\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server kuai-gong in 172.872 seconds (t=183)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":61.41000000000034,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":183,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.3.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.3.0.4\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":758.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"61.3.0.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"61.3.0.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"61.3.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"61.3.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"61.3.0.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"61.3.0.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"omnitek\",1],\"server\":\"61.3.0.4\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server omnitek in 131.017 seconds (t=185)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":49.41000000000017,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":185,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"69.3.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.3.1.7\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":121.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"69.3.1.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"69.3.1.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"69.3.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"69.3.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"69.3.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"69.3.1.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"global-pharm\",1],\"server\":\"69.3.1.7\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack global-pharm in 29.406 seconds (t=30)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":13.409999999999986,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":30,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"46.3.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.3.0.6\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1049.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"46.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"46.3.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"deltaone\",1],\"server\":\"46.3.0.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server deltaone in 103.311 seconds (t=256)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":67.41000000000042,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":256,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.5.8.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.5.8.3\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":709.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"96.5.8.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"96.5.8.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"96.5.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args.length == 0 ? 'foodnstuff' : ns.args[0];\\r\\n\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"96.5.8.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"fulcrumtech\",1],\"server\":\"96.5.8.3\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server fulcrumtech in 120.876 seconds (t=173)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":55.41000000000025,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":173,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"2.9.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.9.8.5\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":738,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"2.9.8.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"2.9.8.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"2.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"2.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"2.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"2.9.8.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"zb-institute\",1],\"server\":\"2.9.8.5\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server zb-institute in 85.768 seconds (t=180)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":19.409999999999965,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":180,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"54.6.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.6.3.4\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":123,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"54.6.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"54.6.3.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"54.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"54.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"54.6.3.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"54.6.3.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"nova-med\",1],\"server\":\"54.6.3.4\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server nova-med in 115.903 seconds (t=30)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":109.41000000000102,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":30,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.4.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.4.5.4\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":124.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.4.5.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.4.5.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"53.4.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.4.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.4.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"53.4.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"applied-energetics\"],\"server\":\"53.4.5.4\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot14/applied-energetics: weaken by 1.436\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.410000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"applied-energetics\",1],\"server\":\"53.4.5.4\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server applied-energetics in 104.342 seconds (t=29)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1.41,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":29,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"30.7.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.7.7.2\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":131.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"30.7.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"30.7.7.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"30.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"30.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"30.7.7.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"30.7.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"lexo-corp\",1],\"server\":\"30.7.7.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server lexo-corp in 79.765 seconds (t=32)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":13.409999999999986,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":32,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"62.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.4.1.6\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":779,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"62.4.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"62.4.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"62.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"62.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"62.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"62.4.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"rho-construction\",1],\"server\":\"62.4.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server rho-construction in 44.586 seconds (t=190)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":31.409999999999922,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":190,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.7.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.7.2.2\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":123,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"94.7.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"94.7.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"94.7.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"94.7.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"94.7.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"94.7.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zb-def\",1],\"server\":\"94.7.2.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zb-def in 103.514 seconds (t=30)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":61.41000000000034,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":30,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.5.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.5.6.7\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":926.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"1.5.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"1.5.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"1.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"1.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"1.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"1.5.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"zeus-med\",1],\"server\":\"1.5.6.7\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server zeus-med in 108.522 seconds (t=226)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":55.41000000000025,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":226,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.6.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.6.9.1\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":135.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.6.9.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.6.9.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"26.6.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.6.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.6.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"26.6.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"unitalife\",1],\"server\":\"26.6.9.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server unitalife in 125.024 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":85.41000000000068,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"57.3.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.3.6.5\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":86.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.3.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.3.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"57.3.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"57.3.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"57.3.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"57.3.6.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"catalyst\",1],\"server\":\"57.3.6.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server catalyst in 55.591 seconds (t=21)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":31.409999999999922,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":21,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.2.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.2.9.4\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":869.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.2.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.2.9.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"86.2.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.2.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.2.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"86.2.9.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"alpha-ent\",1],\"server\":\"86.2.9.4\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server alpha-ent in 51.754 seconds (t=212)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":13.409999999999986,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":212,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.3.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.3.0.2\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":123,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"56.3.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"56.3.0.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"56.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"56.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"56.3.0.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"56.3.0.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"univ-energy\",1],\"server\":\"56.3.0.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server univ-energy in 142.967 seconds (t=30)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":139.41000000000062,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":30,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"8.3.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"8.3.9.5\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":94.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"8.3.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"8.3.9.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"8.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"8.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"8.3.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"8.3.9.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"the-hub\",1],\"server\":\"8.3.9.5\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack the-hub in 5.144 seconds (t=22)\",\"Script SUCCESSFULLY hacked the-hub for $1,995,519,746.00 and 2,102.3287 exp (t=22)\",\"Sleeping for 1000 milliseconds\",\"Running script: ms-control.js on bot23 with 1 threads and args: [\\\"the-hub\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":7.410000000000005,\"onlineMoneyMade\":1995519746,\"onlineExpGained\":2102.3286769506367,\"threads\":22,\"dataMap\":{\"34.0.5.2\":[1995519746,22,0,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"the-hub\"],\"server\":\"8.3.9.5\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1.21,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"32.2.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.2.2.1\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":981.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"32.2.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"32.2.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"32.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"32.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"32.2.2.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"32.2.2.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"comptek\"],\"server\":\"32.2.2.1\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot24/comptek: grow by factor of 2.0866482898522927\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.810000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"comptek\",1],\"server\":\"32.2.2.1\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server comptek in 27.581 seconds (t=238)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1.41,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":238,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":200892.61503819688,\"favor\":120,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":200985.78473824455,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":200494.09896097513,\"favor\":150,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":121931.83969390139,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":327824.52275185403,\"favor\":157,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":464454.0817409999,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":137,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":112058.02651049677,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":463323.15473524947,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":145,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":704.5066453216244,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":137,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":3.718661639230539,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":150,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":3719827.43345669,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":137,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1162.0755644901417,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":101,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":1165.7942261293722,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":55,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":77,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":14,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":77,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":55,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":24,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":24,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1165.7942261293722,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":53,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":983.4062682639134,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":48,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1165.7942261293722,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"18.6.0.6\",\"BitRunners Server\":\"41.8.6.3\",\"The Black Hand Server\":\"50.2.3.7\",\"NiteSec Server\":\"17.5.4.7\",\"The Dark Army Server\":\"82.2.7.7\",\"CyberSec Server\":\"20.2.8.2\",\"Daedalus Server\":\"34.3.3.7\",\"w0r1d_d43m0n\":\"54.2.4.9\",\"Darkweb Server\":\"96.2.2.9\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":73702.23050960794,\"playerShares\":22100000,\"playerAvgPx\":56377.71561670225,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":true,\"otlkMag\":20.506130141800554,\"cap\":480308101,\"totalShares\":110400000,\"maxShares\":22100000,\"posTxtEl\":0}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":341325.28623149166,\"playerShares\":15200000,\"playerAvgPx\":313310.9211163586,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":24.383172001745052,\"cap\":250889829,\"totalShares\":75800000,\"maxShares\":15200000,\"posTxtEl\":0}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":23769.36084321814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":17.866500752753918,\"cap\":54009245,\"totalShares\":98500000,\"maxShares\":19700000,\"posTxtEl\":0}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":45509.111736566156,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":19.202380187966366,\"cap\":114776625,\"totalShares\":124500000,\"maxShares\":24900000,\"posTxtEl\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":32720.807781101128,\"playerShares\":10800000,\"playerAvgPx\":31734.528787255833,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":11.286202132031967,\"cap\":628994763,\"totalShares\":53900000,\"maxShares\":10800000,\"posTxtEl\":0}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":1160628.1571238544,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":10.857876763369317,\"cap\":1032156968,\"totalShares\":37500000,\"maxShares\":7500000,\"posTxtEl\":0}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":60646.86690482299,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":6.801976535601448,\"cap\":496167246,\"totalShares\":73100000,\"maxShares\":14600000,\"posTxtEl\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":1262616.8352856007,\"playerShares\":11800000,\"playerAvgPx\":680456.9187084398,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":true,\"otlkMag\":19.841275770208288,\"cap\":298377992,\"totalShares\":59000000,\"maxShares\":11800000,\"posTxtEl\":0}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":42004.14525304939,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.8050699820809974,\"cap\":442555463,\"totalShares\":54300000,\"maxShares\":10900000,\"posTxtEl\":0}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":12574.887870408842,\"playerShares\":20500000,\"playerAvgPx\":10031.084581416524,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":11.617898320537785,\"cap\":65473502,\"totalShares\":102700000,\"maxShares\":20500000,\"posTxtEl\":0}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8287.076511507865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":7.405998428859392,\"cap\":93694841,\"totalShares\":67900000,\"maxShares\":13600000,\"posTxtEl\":0}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":44097.78251469928,\"playerShares\":20100000,\"playerAvgPx\":37611.65656566003,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":11.130878064034206,\"cap\":90951957,\"totalShares\":100600000,\"maxShares\":20100000,\"posTxtEl\":0}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":25887.14714489923,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":6.856809524889849,\"cap\":15026438,\"totalShares\":60400000,\"maxShares\":12100000,\"posTxtEl\":0}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":42358.51243473899,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":8.703933445605463,\"cap\":204346512,\"totalShares\":32600000,\"maxShares\":6500000,\"posTxtEl\":0}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17755.557541127848,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":4.920249601171905,\"cap\":251025745,\"totalShares\":40600000,\"maxShares\":8100000,\"posTxtEl\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":16650.45275727822,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":4.472860445692125,\"cap\":56262822,\"totalShares\":47200000,\"maxShares\":9400000,\"posTxtEl\":0}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":74737.68964192964,\"playerShares\":5600000,\"playerAvgPx\":74558.23615498083,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":10.59259699008318,\"cap\":417771491,\"totalShares\":28100000,\"maxShares\":5600000,\"posTxtEl\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":28781.2280739908,\"playerShares\":9400000,\"playerAvgPx\":28833.65107808955,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":10.164782067275716,\"cap\":184249425,\"totalShares\":47200000,\"maxShares\":9400000,\"posTxtEl\":0}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":61432.762360040426,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":5.955641809459422,\"cap\":376034465,\"totalShares\":25000000,\"maxShares\":5000000,\"posTxtEl\":0}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":14562.530407363256,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":true,\"otlkMag\":0.9551590219146457,\"cap\":133738311,\"totalShares\":53000000,\"maxShares\":10600000,\"posTxtEl\":0}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":10272.015610667453,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":true,\"otlkMag\":2.712609957577745,\"cap\":168959363,\"totalShares\":40800000,\"maxShares\":8200000,\"posTxtEl\":0}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":1799.4030247254143,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":0.7112716599857999,\"cap\":33887601,\"totalShares\":76300000,\"maxShares\":15300000,\"posTxtEl\":0}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":34769.50474291538,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":true,\"otlkMag\":9.032293762362837,\"cap\":94376976,\"totalShares\":50400000,\"maxShares\":10100000,\"posTxtEl\":0}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5375.532875018096,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":true,\"otlkMag\":2.893331213444615,\"cap\":8006683,\"totalShares\":50500000,\"maxShares\":10100000,\"posTxtEl\":0}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3267.174376565425,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":2.9689199099215964,\"cap\":63988516,\"totalShares\":71400000,\"maxShares\":14300000,\"posTxtEl\":0}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":8044.342473102915,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.15,\"b\":true,\"otlkMag\":3.2287516920588297,\"cap\":70698427,\"totalShares\":16100000,\"maxShares\":3200000,\"posTxtEl\":0}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2965.8535949864367,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":false,\"otlkMag\":0.3597965489963365,\"cap\":53349715,\"totalShares\":16300000,\"maxShares\":3300000,\"posTxtEl\":0}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3954.4527476808485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":1.3534725420688283,\"cap\":54532108,\"totalShares\":20500000,\"maxShares\":4100000,\"posTxtEl\":0}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":11220.303301106684,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.62,\"b\":false,\"otlkMag\":1.3484030453715923,\"cap\":35585260,\"totalShares\":10500000,\"maxShares\":2100000,\"posTxtEl\":0}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":19.758430714479935,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4,\"b\":false,\"otlkMag\":0.1158337938184268,\"cap\":4407913,\"totalShares\":165400000,\"maxShares\":33100000,\"posTxtEl\":0}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":38313.47850048895,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.37,\"b\":false,\"otlkMag\":17.17201741388496,\"cap\":10825494,\"totalShares\":88500000,\"maxShares\":17700000,\"posTxtEl\":0}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":24576.79448295845,\"playerShares\":3900000,\"playerAvgPx\":21166.782748335867,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":12.753694489891833,\"cap\":284864313,\"totalShares\":19300000,\"maxShares\":3900000,\"posTxtEl\":0}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":69362.92746123507,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":12.536609752978409,\"cap\":458712823,\"totalShares\":19700000,\"maxShares\":3900000,\"posTxtEl\":0}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":23989,\"lastUpdate\":1552627898448}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.44.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}