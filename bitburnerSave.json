{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":404,\"hp\":21,\"max_hp\":21,\"strength\":111,\"defense\":110,\"dexterity\":110,\"agility\":110,\"charisma\":106,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":27685254.723736193,\"strength_exp\":9782.744000006303,\"defense_exp\":9720.104000006311,\"dexterity_exp\":9720.104000006311,\"agility_exp\":9722.424000006311,\"charisma_exp\":8537.600000000435,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":\"12262035518.234310393\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Chongqing\",\"location\":\"World Stock Exchange\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"97.3.1.6\",\"40.6.5.8\",\"1.3.2.2\",\"66.7.9.2\",\"35.2.2.3\",\"65.7.3.6\",\"83.3.8.3\",\"12.8.8.2\",\"57.6.0.5\",\"70.5.6.7\",\"45.4.7.0\",\"85.5.7.8\",\"26.1.6.5\",\"86.4.8.6\",\"64.1.1.6\",\"12.5.7.8\",\"45.0.9.4\",\"86.8.9.0\",\"55.3.8.7\",\"28.2.5.7\",\"90.2.5.5\",\"43.7.3.0\",\"82.5.5.5\",\"79.6.0.1\",\"89.5.2.2\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":523315726.332758,\"onlineTimeSeconds\":90145.3999992581,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":533407709.2998175,\"onlineTimeSeconds\":88795.19999927774,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":531629928.4842343,\"onlineTimeSeconds\":88015.19999928909,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":521464906.6566416,\"onlineTimeSeconds\":87175.19999930132,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":520616431.8474975,\"onlineTimeSeconds\":86004.99999931834,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":519659435.33166367,\"onlineTimeSeconds\":84324.99999934279,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":517836773.49221,\"onlineTimeSeconds\":81804.99999937946,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":517507518.19316727,\"onlineTimeSeconds\":79494.79999941308,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":516284890.38324845,\"onlineTimeSeconds\":78114.79999943316,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":524454106.4914986,\"onlineTimeSeconds\":75474.59999947158,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":512575663.2673567,\"onlineTimeSeconds\":71004.39999953663,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":506606988.83737177,\"onlineTimeSeconds\":63534.19999964534,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":500320782.0893254,\"onlineTimeSeconds\":57023.999999740074,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":494563639.36613214,\"onlineTimeSeconds\":54383.99999977849,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":483717016.3874685,\"onlineTimeSeconds\":51443.799999821276,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":475184645.29485524,\"onlineTimeSeconds\":50123.799999840485,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":448841799.8593966,\"onlineTimeSeconds\":46853.59999988337,\"moneyGainRatePerSecond\":9726.828513554748}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":13,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":421449753.8551233,\"onlineTimeSeconds\":43553.5999999251,\"moneyGainRatePerSecond\":9726.828513554748}}],\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"Aevum\",\"Slum Snakes\",\"Tetrads\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":9,\"karma\":-27,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1551958087233,\"totalPlaytime\":3088358600,\"playtimeSinceLastAug\":90175200,\"playtimeSinceLastBitnode\":90175200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":469800,\"gang\":0,\"hacking\":189698048406.00043,\"hacknetnode\":9069437715.473362,\"infiltration\":0,\"stock\":25513497378.303104,\"total\":224273791857.4909,\"work\":-7661440}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":469800,\"gang\":0,\"hacking\":189698048406.00043,\"hacknetnode\":9069437715.473362,\"infiltration\":0,\"stock\":25513497378.303104,\"total\":224273791857.4909,\"work\":-7661440}},\"scriptProdSinceLastAug\":215206539797.30307,\"total_money\":\"275820126137160696.69\",\"lifetime_money\":\"275820126137160696.69\",\"totalHacknetNodeProduction\":0,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":8192,\"ramUsed\":961.4,\"cpuCores\":2,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let costCap = (maxProduction * 60 * 60 * 1) || Infinity;\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} uncappedCost\\r\\n     */\\r\\n    function getCappedCost(name, uncappedCost) {\\r\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\r\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let costs = [];\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\r\\n    }\\r\\n\\r\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        /** @type {number} */\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        /** @type {number} */\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = cost + getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nconst LARGEST_USEFUL_SERVER = 16384;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number' || !Number.isNaN(parseInt(ns.args[0]));\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? parseInt(ns.args[0]) : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    let maxPurchaseRam = Math.min(ns.getPurchasedServerMaxRam(), LARGEST_USEFUL_SERVER);\\r\\n    for (let power = 0; Math.pow(2, power) <= maxPurchaseRam; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (ram > minRam || existingServers.length < limit) {\\r\\n        let processes = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                let ps = ns.ps(existingServers[i]);\\r\\n                if (ps.length > 0) {\\r\\n                    processes.push(existingServers[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processes.length > 0) {\\r\\n            if (dryRun) {\\r\\n                log.info('scripts running on existing servers, continuing dry run');    \\r\\n            } else {\\r\\n                log.info('scripts running on existing servers, exit');\\r\\n                ns.exit();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.2,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: false });\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    log.info(`copy scripts to ${host}`);\\r\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n\\r\\n        log.info(`execute attack on ${target}`);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    function getFreeRam() {\\r\\n        let ram = ns.getServerRam(ns.getHostname())\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of world.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    let top = ns.ps(ns.getHostname()).filter(p => p.filename == 'dh-control.js');\\r\\n    if (top.length > 0) {\\r\\n        let excludedTarget = top[0].args[0];\\r\\n        log.info(`${excludedTarget.padEnd(20)} ignored - DH victim`);\\r\\n        targets.splice(targets.findIndex(t => t.name == excludedTarget), 1);\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----')\\r\\n\\r\\n        let req = ns.getScriptRam('ms-setup.js');\\r\\n        if (getFreeRam() < req) {\\r\\n            log.error('insufficient ram to run ms-setup.js');\\r\\n        }\\r\\n\\r\\n        let bots = ns.getPurchasedServers()\\r\\n            .filter(b => ns.ps(b).length == 0) //ignore busy\\r\\n            .filter(b => ns.getServerRam(b)[0] >= 16384) // ignore too small\\r\\n            .sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of world.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            log.info(`run ms-setup.js ${bots[i]} ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n\\r\\n            while (getFreeRam() < req) {\\r\\n                await ns.sleep(1 * 1000);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let worker of world.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----');\\r\\n        log.info(`run dh-control.js ${targets[0].name}`)\\r\\n        await ns.exec('dh-control.js', ns.getHostname(), 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":8.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args.length == 0 ? 'foodnstuff' : ns.args[0];\\r\\n\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n    for (let stock of market.getAll(ns)) {\\r\\n        lastAssets = lastAssets + stock.position.shares * stock.price;\\r\\n    }\\r\\n\\r\\n    let assetWindow = new SlidingWindow(6);\\r\\n    let timeWindow = new SlidingWindow(6);\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            assets = 0;\\r\\n            for (let stock of market.getAll(ns)) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            assetWindow.reset();\\r\\n            timeWindow.reset();\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n\\r\\n            assetWindow.push(assetChange);\\r\\n            timeWindow.push(timeChange);\\r\\n\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, lastAssets + assetWindow.average())}, ${format.money(assetWindow.average()/timeWindow.average())}/sec`);\\r\\n        }\\r\\n\\r\\n        lastAssets = assets;\\r\\n        lastTime = time;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(5000);\\r\\n        tick();\\r\\n    }\\r\\n} \\r\\n\\r\\nclass SlidingWindow {\\r\\n    /** @param {number} size */\\r\\n    constructor(size) {\\r\\n        this.size = size;\\r\\n        /** @type {number[]} */\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    /** @param {number} value */\\r\\n    push(value) {\\r\\n        if (this.values.length < this.size) {\\r\\n            this.values.push(value);\\r\\n        } else {\\r\\n            for (let i = 0; i < this.size-1; i++) {\\r\\n                this.values[i] = this.values[i+1];\\r\\n            }\\r\\n            this.values[this.size-1] = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    average() {\\r\\n        let sum = this.values.reduce((a, b) => a + b, 0);\\r\\n        return sum / this.values.length;\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = `${path}; connect ${p.name}`;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\n//import { LifeL0 as Life } from './lib-life-L0.js';\\r\\n//import { LifeL1 as Life } from './lib-life-L1.js';\\r\\n//import { LifeL2 as Life } from './lib-life-L2.js';\\r\\nimport { LifeL3 as Life } from './lib-life-L3.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n    let life = new Life(ns, log);\\r\\n\\r\\n    while (true) {\\r\\n        let nextTick = await life.tick();\\r\\n        await ns.sleep(nextTick);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    //console.log(ns.getBitNodeMultipliers())\\n    console.log(ns.getCharacterInformation())\\n    console.log(ns.getOwnedAugmentations())\\n}\",\"ramUsage\":8.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n\\r\\n    let facsByRep = FactionWithAugs.getAll(ns)\\r\\n        .sort((a, b) => b.reputation - a.reputation);\\r\\n\\r\\n    /** @type {{[key: string]: FactionWithAugs}} */\\r\\n    let facsByName = {};\\r\\n    for (let f of facsByRep) {\\r\\n        facsByName[f.name] = f;\\r\\n    }\\r\\n\\r\\n    let augsByPrice = facsByRep\\r\\n        .map(f => f.augmentations)\\r\\n        .reduce((a, b) => a.concat(b), [])\\r\\n        .filter(a => !a.owned)\\r\\n        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n    ns.tprint('----- LOCKED -----');\\r\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\r\\n    for (let aug of groupAugs(locked)) {\\r\\n        let facs = aug.factions.map(name => {\\r\\n            let f = facsByName[name];\\r\\n            if (f.favor + f.favorGain >= FAVOUR_MAX) {\\r\\n                if (f.favor >= FAVOUR_MAX) {\\r\\n                    return `${name} (donate)`;\\r\\n                } else {\\r\\n                    return `${name} (reset)`;\\r\\n                }\\r\\n            } else {\\r\\n                let diff = Math.floor(aug.requiredReputation - f.reputation);\\r\\n                return `${name} (+${diff})`;\\r\\n            }\\r\\n        });\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${facs}]`)\\r\\n    }\\r\\n\\r\\n    ns.tprint('----- UNLOCKED -----');\\r\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\r\\n    for (let aug of groupAugs(unlocked)) {\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${aug.factions}]`)\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {Augmentation[]} augs */\\r\\nfunction groupAugs(augs) {\\r\\n    /** @type {{name: string, factions: string[], price: number, requiredReputation: number}[]} */\\r\\n    let augsWithFacs = [];\\r\\n    for (let a of augs) {\\r\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\r\\n            augsWithFacs[a.name] = {\\r\\n                factions: [],\\r\\n                name: a.name,\\r\\n                price: a.price,\\r\\n                requiredReputation: a.requiredReputation\\r\\n            };\\r\\n            augsWithFacs.push(augsWithFacs[a.name]);\\r\\n        } \\r\\n\\r\\n        augsWithFacs[a.name].factions.push(a.faction);\\r\\n    }\\r\\n    return augsWithFacs;\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { enrol } from './lib-world.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport const TICK_SECONDS =             20;\\r\\nconst STOCK_MARKET_MIN =         100000000;\\r\\nconst HACKNET_BUYS_MAX =       10000000000;\\r\\nconst PURCHASED_SERVER_PRICE = 22528000000;\\r\\nconst PURCHASED_SERVER_RAM =         16384;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.lastBots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n        this.beganFarm = false;\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n        log.debug('market access: ' + this.marketAccess);\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickAcceptInvites() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / (this.nextTickLength / 1000);\\r\\n        this.nextTickLength = TICK_SECONDS * 1000;\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickAcceptInvites();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n        return this.nextTickLength;\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.shouldBuyNodes()) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // once able to buy good enough servers for MS, switch to buying those\\r\\n        let bots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        let botCost = this.ns.getPurchasedServerCost(PURCHASED_SERVER_RAM);\\r\\n        let botLimit = this.ns.getPurchasedServerLimit();\\r\\n        if (this.cash >= botCost && bots < botLimit) {\\r\\n            this.log.info(`${bots} ${format.ram(PURCHASED_SERVER_RAM)} servers owned; ordering a new one for ${format.money(botCost)}`);\\r\\n            await this.ns.exec('buy-servers.js', this.ns.getHostname(), 1, [bots+1])\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (bots == 0) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                await this.dhStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) { // based on an msRunning check, but only once at init startup\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.skill / this.lastEval > 1.1 || bots > this.lastBots) {\\r\\n                if (this.skill / this.lastEval > 1.1) {\\r\\n                    this.log.debug(`skill ${this.skill} / lastEval ${this.lastEval} > 1.1`);\\r\\n                    await this.msStop();\\r\\n                    await this.ns.sleep(10 * 1000);    \\r\\n                }\\r\\n                \\r\\n                if (bots > this.lastBots) {\\r\\n                    this.log.debug(`bots ${bots} > lastBots ${this.lastBots}`);\\r\\n                }\\r\\n\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill\\r\\n        if (this.shouldFarm()) {\\r\\n            let target = 'foodnstuff';\\r\\n\\r\\n            if (this.ns.scriptRunning('dh-control.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'dh-control.js');\\r\\n                target = p.args[0];\\r\\n            } else if (this.ns.scriptRunning('farm-worker.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'farm-worker.js');\\r\\n                target = p.args[0];\\r\\n            }\\r\\n            \\r\\n            if (!this.beganFarm) {\\r\\n                enrol(this.ns, target);\\r\\n                this.beganFarm = true;\\r\\n            }\\r\\n            \\r\\n            this.ensureRunningWithArg('farm-worker.js', target, true);\\r\\n        } else if (this.beganFarm) {\\r\\n            this.ensureKilled('farm-worker.js');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureRunning(script) {\\r\\n        if (!this.ns.scriptRunning(script, this.ns.getHostname())) {    \\r\\n            await this.ns.exec(script, this.ns.getHostname(), 1);\\r\\n            this.log.info(`run ${script} -t ${1}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {string} arg\\r\\n     * @param {boolean} [maxThreads]\\r\\n     */\\r\\n    async ensureRunningWithArg(script, arg, maxThreads) {\\r\\n        if (!this.ns.isRunning(script, this.ns.getHostname(), arg)) {   \\r\\n            // not running with right arg\\r\\n            if (this.ns.scriptRunning(script, this.ns.getHostname())) { \\r\\n                // running with wrong arg\\r\\n                await this.ensureKilled(script);\\r\\n            } else {\\r\\n                // not running at all\\r\\n                let threads = 1;\\r\\n                if (maxThreads) {\\r\\n                    threads = this.getMaxThreads(script);\\r\\n                    if (threads <= 0) return;\\r\\n                }\\r\\n        \\r\\n                await this.ns.exec(script, this.ns.getHostname(), threads, arg);\\r\\n                this.log.info(`run ${script} -t ${threads} ${arg}`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - this.spareRamNeeded(); // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        let servers = this.ns.getPurchasedServers();\\r\\n        if (servers.length == 0) return false;\\r\\n        let server1 = 'bot0'; // servers[0]; - wrong because it changes\\r\\n        let top = this.ns.ps(server1);\\r\\n        if (top.length == 0) return false;\\r\\n        return top[0].filename.startsWith('ms');\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n    \\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.cash <= HACKNET_BUYS_MAX;\\r\\n    }\\r\\n\\r\\n    shouldFarm() {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return 128;\\r\\n    }\\r\\n}\",\"ramUsage\":13.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\r\\nimport { TICK_SECONDS, LifeL0 } from './lib-life-L0.js';\\r\\n\\r\\nconst WORK_OVERRIDE_TICKS =  9;\\r\\nconst STAT_GOAL_BASE =      90;\\r\\nconst DARKWEB_MIN =     200000;\\r\\nconst TRAIN_MIN =      5000000;\\r\\n\\r\\nexport class LifeL1 extends LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        /** @type {WorkItem} */\\r\\n        this.lastWork = null;\\r\\n    }\\r\\n\\r\\n    tickDarkwebPurchases() {\\r\\n        // buy darkweb router\\r\\n        if (this.cash >= DARKWEB_MIN) {\\r\\n            if (!this.ns.getCharacterInformation().tor) {\\r\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\r\\n                this.ns.purchaseTor();\\r\\n                this.cash = this.getCash();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\r\\n        for (var program of programs()) {\\r\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\r\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\r\\n                this.ns.purchaseProgram(program.name);\\r\\n                this.cash = this.getCash();\\r\\n                this.resetHackEval();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {Program} program */\\r\\n    hasProgram(program) {\\r\\n        return this.ns.fileExists(program.name, 'home');\\r\\n    }\\r\\n\\r\\n    // fullscreen \\\"work\\\" actions\\r\\n    tickPerformWork() {\\r\\n        // continue automation if:\\r\\n        // - we're still doing something, or\\r\\n        // - we deliberately didn't do anything, or\\r\\n        // - we did something which may have finished early\\r\\n        if (this.ns.isBusy() || (this.lastWork && (this.lastWork.name == 'nothing' || this.lastWork.name.startsWith('crime')))) {\\r\\n            // has work been selected, and not overridden (countup>0)?\\r\\n            if (this.lastWork && !this.countup) {\\r\\n                if (this.lastWork.isRep) {\\r\\n                    this.ns.stopAction();\\r\\n                }\\r\\n\\r\\n                let workItem = this.selectWork();\\r\\n                \\r\\n                // is work actually still ongoing?\\r\\n                if (this.ns.isBusy() && this.lastWork.name == workItem.name) {\\r\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\r\\n                    if (this.lastWork.isRep) {\\r\\n                        if (workItem.doWork != null) {\\r\\n                            workItem.doWork();\\r\\n                        } \\r\\n                    }\\r\\n                } else {\\r\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\r\\n                    if (workItem.doWork != null) {\\r\\n                        workItem.doWork();\\r\\n                    } \\r\\n                }\\r\\n\\r\\n                this.lastWork = workItem;              \\r\\n            } else {\\r\\n                this.log.info('automated work overridden by player, pause indefinitely');\\r\\n                this.lastWork = null;\\r\\n            }\\r\\n        } else {\\r\\n            if (!this.lastWork && !this.countup) {\\r\\n                let workItem = this.selectWork();\\r\\n                this.log.info(`start work ${workItem.name}`);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;          \\r\\n            } else {    \\r\\n                if (!this.lastWork) {\\r\\n                    /** @type {number | undefined} */\\r\\n                    this.countup = 0;\\r\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    this.lastWork = new WorkItem('override', null, false);\\r\\n                } else {\\r\\n                    this.countup = this.countup || 0;\\r\\n                    if (this.countup == 0) {\\r\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    } else {\\r\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                this.countup = this.countup + 1;\\r\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\r\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_SECONDS)}`);\\r\\n                    this.countup = 0;\\r\\n                    this.lastWork = null;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    selectWork() {\\r\\n        for (let jobF of [this.workWriteCode, this.workTrainStats, this.workCommitCrimes, this.workForFactions, this.workForCompanies, this.workJoinCompanies]) {\\r\\n            let job = jobF.bind(this)();\\r\\n            if (job != null) return job;\\r\\n        }\\r\\n\\r\\n        return new WorkItem('nothing', null, false);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workWriteCode() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workTrainStats() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        this.guessCharismaMult(info.mult);\\r\\n\\r\\n        let stats = this.ns.getStats();\\r\\n        \\r\\n        if (this.cash >= TRAIN_MIN) {\\r\\n            let statGoals = {};\\r\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility', 'charisma']) {\\r\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\r\\n                \\r\\n                if (stats[stat] < statGoals[stat]) {\\r\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\r\\n                    return new WorkItem('train-' + stat, () => {\\r\\n                        if (stat == 'charisma') {\\r\\n                            let uni = this.getBestUniversity();\\r\\n                            this.ensureCity(info, uni.city);\\r\\n                            this.ns.universityCourse(uni.name, 'Leadership');            \\r\\n                        } else {\\r\\n                            let gym = this.getBestGym();\\r\\n                            this.ensureCity(info, gym.city);\\r\\n                            this.ns.gymWorkout(gym.name, stat);\\r\\n                        }\\r\\n                    }, false);\\r\\n                }\\r\\n            }\\r\\n            this.log.debug(`stat goals reached - ${JSON.stringify(statGoals)}`);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        mult.charisma = Math.min(mult.agility, mult.defense, mult.dexterity, mult.agility);\\r\\n        mult.charismaExp = Math.min(mult.agilityExp, mult.defenseExp, mult.dexterityExp, mult.agilityExp);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForFactions() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n    \\r\\n    getBestGym() {\\r\\n        let gs = gyms();\\r\\n        gs.sort((a, b) => b.price - a.price);\\r\\n        return gs[0];\\r\\n    }\\r\\n\\r\\n    getBestUniversity() {\\r\\n        let us = universities();\\r\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\r\\n        return us[0];\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @param {ICharacterInfo} info\\r\\n     * @param {string} name\\r\\n     */\\r\\n    ensureCity(info, name) {\\r\\n        if (info.city != name) {\\r\\n            if (this.ns.travelToCity(name)) {\\r\\n                this.log.info('travelled to ' + name);\\r\\n            } else {\\r\\n                this.log.error(`travel to ${name} failed`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.ns.getCharacterInformation().bitnode != 4;\\r\\n    }\\r\\n\\r\\n    shouldCommitCrimes() {\\r\\n        return this.cash >= TRAIN_MIN;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return this.ns.getCharacterInformation().bitnode == 4 ? 64 : 128;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class WorkItem {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {() => void | null} doWork\\r\\n     * @param {boolean} isRep\\r\\n     */\\r\\n    constructor(name, doWork, isRep) {\\r\\n        this.name = name;\\r\\n        this.doWork = doWork;\\r\\n        this.isRep = isRep;\\r\\n    }\\r\\n}\",\"ramUsage\":25.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\r\\n\\r\\nconst COMPANY_REP_MAX = 200000; // level required for most factions\\r\\nexport const FAVOUR_MAX = 150; // level required for donations\\r\\n\\r\\nexport class LifeL2 extends LifeL1 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n    }\\r\\n\\r\\n    // persists through aug reset, makes early farming better\\r\\n    tickUpgradeHomeSystem() {\\r\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\r\\n            this.log.info(`purchasing home RAM upgrade`);\\r\\n            this.ns.upgradeHomeRam();\\r\\n            this.cash = this.getCash();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    tickAcceptInvites() {\\r\\n        for (let invite of this.ns.checkFactionInvitations()) {\\r\\n            if (this.shouldAcceptInvite(invite)) {\\r\\n                this.log.info(`join faction ${invite}`);\\r\\n                this.ns.joinFaction(invite);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        // when we've run out of work to do, take another job\\r\\n        let companies = Company.getAll(this.ns).filter(c => !c.employed);\\r\\n        if (companies.length > 0) {\\r\\n            if (this.ns.applyToCompany(companies[0].name, 'software')) {\\r\\n                this.log.info(`now employed by ${companies[0]}`);\\r\\n            } else {\\r\\n                this.log.error(`rejected by ${companies[0]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n\\r\\n        let companies = Company.getCurrent(this.ns);\\r\\n        this.log.debug(`current companies: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => !info.factions.includes(c.faction));\\r\\n        this.log.debug(`companies without faction membership: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => c.reputation < COMPANY_REP_MAX);\\r\\n        this.log.debug(`companies with reputation < ${COMPANY_REP_MAX}: ${companies}`);\\r\\n\\r\\n        if (companies.length > 0) {\\r\\n            companies.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`companies sorted by rep: ${companies}`);\\r\\n\\r\\n            let c = companies[0].name;\\r\\n            return new WorkItem('company-' + c, () => {\\r\\n                if (this.lastWork && this.lastWork.name == 'company-' + c) {\\r\\n                    this.log.debug(`already working for ${c}`);\\r\\n                    if (this.ns.applyToCompany(c, 'software')) {\\r\\n                        this.log.info(`promoted by ${c}`);\\r\\n                    }\\r\\n                    this.ns.workForCompany();\\r\\n                } else {\\r\\n                    this.log.debug(`not currently working for ${c}`);\\r\\n                    this.ns.applyToCompany(c, 'software');\\r\\n                    if (!this.ns.workForCompany()) {\\r\\n                        this.log.error(`rejected by ${c}`);\\r\\n                    }\\r\\n                }\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workForFactions() {\\r\\n        let factions = Faction.getCurrent(this.ns);\\r\\n        this.log.debug(`current factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => {\\r\\n                this.ns.workForFaction(factions[0].name, factions[0].job)\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.job = job;\\r\\n    }\\r\\n\\r\\n    static cities() {\\r\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\r\\n    }\\r\\n\\r\\n    static gangs() {\\r\\n        return ['Slum Snakes', 'Tetrads'];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Faction[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => \\r\\n        {\\r\\n            let rep = ns.getFactionRep(f);\\r\\n            let fav = ns.getFactionFavor(f);\\r\\n            let fvg = ns.getFactionFavorGain(f);\\r\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @type {{[key: string]: string}} */\\r\\nlet companyFactions = {\\r\\n    'Bachman & Associates': 'Bachman & Associates',\\r\\n    'ECorp': 'ECorp',\\r\\n    'MegaCorp': 'MegaCorp',\\r\\n    'KuaiGong International': 'KuaiGong International',\\r\\n    'Four Sigma': 'Four Sigma',\\r\\n    'NWO': 'NWO',\\r\\n    'Blade Industries': 'Blade Industries',\\r\\n    'OmniTek Incorporated': 'OmniTek Incorporated',\\r\\n    'Clarke Incorporated': 'Clarke Incorporated',\\r\\n    'Fulcrum Technologies': 'Fulcrum Secret Technologies',\\r\\n}\\r\\n\\r\\nclass Company {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {string} faction\\r\\n     * @param {boolean} employed\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, faction, employed) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.faction = faction;\\r\\n        this.employed = employed;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static factions() {\\r\\n        return Object.getOwnPropertyNames(companyFactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let i = 0; i < info.jobs.length; i++) {\\r\\n            let c = info.jobs[i];\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], true));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let c of Company.factions()) {\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], info.jobs.includes(c)));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n}\",\"ramUsage\":64.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport { WorkItem } from './lib-life-L1.js';\\r\\nimport { LifeL2, Faction, FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\nconst DONATE_AMOUNT = 1000000000000;\\r\\nconst TRAVEL_MIN =           200000;\\r\\n\\r\\nexport class LifeL3 extends LifeL2 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        \\r\\n        /** @type {{[key: string]: boolean}} */\\r\\n        this.hadProgram = {};\\r\\n        for (let program of programs())\\r\\n        {\\r\\n            this.hadProgram[program.name] = true;\\r\\n        }\\r\\n\\r\\n        /** @type {string} */\\r\\n        this.savingForAug = '';\\r\\n\\r\\n        /** @type {number} */\\r\\n        this.homicides = 0;\\r\\n        let factions = this.ns.getCharacterInformation().factions;\\r\\n        for (let gang of Gang.getAll()) {\\r\\n            if (factions.includes(gang.name)) {\\r\\n                this.homicides = Math.max(this.homicides, gang.requiredKarma);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.log.debug(`assumed starting homicides: ${this.homicides}`);\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction) || !FactionWithAugs.get(this.ns, faction).hasAllAugs();\\r\\n    }\\r\\n\\r\\n    workWriteCode() {\\r\\n        for (let program of programs()) {\\r\\n            if (this.hasProgram(program)) {\\r\\n                if (!this.hadProgram[program.name]) {\\r\\n                    this.hadProgram[program.name] = true;\\r\\n                    this.resetHackEval();\\r\\n                }    \\r\\n            }\\r\\n            else if (program.req <= this.skill)  {\\r\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }  \\r\\n\\r\\n    // L3 override which takes augs into account\\r\\n    workForFactions() {\\r\\n        let factions = FactionWithAugs.getAll(this.ns);\\r\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\r\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\r\\n        let allReqsMet = factions.length == 0;\\r\\n\\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n        let reqsCouldBeMetAfterDonations = factions.length == 0 && !allReqsMet;\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\r\\n        }\\r\\n\\r\\n        if (reqsCouldBeMetAfterDonations && this.cash >= DONATE_AMOUNT) {\\r\\n            for (let f of FactionWithAugs.getAll(this.ns)) {\\r\\n                if (f.favor >= FAVOUR_MAX && f.maxAugRep() > f.reputation) {\\r\\n                    if (this.ns.donateToFaction(f.name, DONATE_AMOUNT)) {\\r\\n                        this.log.info(`donated ${format.money(DONATE_AMOUNT)} to faction ${f}`);\\r\\n                        this.cash = this.getCash();\\r\\n                        if (this.cash < DONATE_AMOUNT) {\\r\\n                            break;\\r\\n                        }\\r\\n                    } else {\\r\\n                        this.log.error(`failed to donate to faction ${f}`);\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            allReqsMet = FactionWithAugs.getAll(this.ns).filter(f => f.maxAugRep() > f.reputation).length == 0;\\r\\n        }\\r\\n\\r\\n        // if all factions are maxed out, buy some of their augs\\r\\n        if (allReqsMet) {\\r\\n            this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\r\\n\\r\\n            let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\r\\n            this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\r\\n\\r\\n            // augs we don't already have\\r\\n            let availableAugs = FactionWithAugs.getAll(this.ns)\\r\\n                .map(f => f.augmentations)\\r\\n                .reduce((a, b) => a.concat(b), [])\\r\\n                .filter(a => !a.owned);\\r\\n\\r\\n            // most expensive augs first, because the price doubles each time\\r\\n            let affordableAugs = availableAugs\\r\\n                .filter(a => a.price <= maxAugCost)\\r\\n                .sort((a, b) => b.price - a.price);\\r\\n\\r\\n            if (affordableAugs.length > 0) {\\r\\n                this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\r\\n                if (affordableAugs[0].price > this.cash) {\\r\\n                    if (this.savingForAug != affordableAugs[0].name) {\\r\\n                        this.savingForAug = affordableAugs[0].name;\\r\\n                        this.log.info(`saving for aug ${affordableAugs[0]}`);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                for (let a of affordableAugs) {\\r\\n                    if (a.price <= this.cash) {\\r\\n                        if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\r\\n                            this.log.info(`bought aug ${a}`);\\r\\n                            this.cash = this.getCash();\\r\\n                            this.savingForAug = '';\\r\\n                        } else {\\r\\n                            this.log.info(`failed to buy aug ${a}`);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        if (!this.shouldCommitCrimes()) {\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let stats = this.ns.getStats();\\r\\n\\r\\n        let gangs = Gang.getAll().filter(g => !info.factions.includes(g.name)).sort((a, b) => a.requiredKarma - b.requiredKarma);\\r\\n        this.log.debug(`unjoined gangs: ${gangs}`);\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredStats <= Math.min(stats.agility, stats.defense, stats.dexterity, stats.strength));\\r\\n            this.log.debug(`gangs with high enough combat stats: ${gangs}`);\\r\\n        }\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredKarma > this.homicides);\\r\\n            this.log.debug(`gangs needing lower karma: ${gangs}`);\\r\\n        }\\r\\n        \\r\\n        for (let gang of gangs) {\\r\\n            if (gang.requiredLocation == null || this.cash >= TRAVEL_MIN) {\\r\\n                return new WorkItem('crime-homicide', () => {\\r\\n                    if (gang.requiredLocation != null) {\\r\\n                        this.ensureCity(this.ns.getCharacterInformation(), gang.requiredLocation);\\r\\n                    }\\r\\n\\r\\n                    this.nextTickLength = this.ns.commitCrime('homicide') + 1000;\\r\\n                }, false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        // start with SF1-1\\r\\n        let stat = 1.16; \\r\\n        let statExp = 1.16;\\r\\n\\r\\n        let augs = this.ns.getOwnedAugmentations();        \\r\\n        if (augs.includes(\\\"NeuroFlux Governor\\\")) {\\r\\n            let level = augs.length / 2; // XXX \\r\\n            for (let i = 0; i < level; i++) {\\r\\n                stat = stat * 1.01;\\r\\n                statExp = statExp * 1.01;\\r\\n            }\\r\\n        }\\r\\n        if (augs.includes(\\\"FocusWire\\\")) { \\r\\n            statExp = statExp * 1.05;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer I\\\")) { \\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer II\\\")) { \\r\\n            statExp = statExp * 1.15;\\r\\n        }\\r\\n        if (augs.includes(\\\"Power Recirculation Core\\\")) { \\r\\n            stat = stat * 1.05;\\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Enhancement\\\")) { \\r\\n            stat = stat * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Processor Implant\\\")) { \\r\\n            stat = stat * 1.2;\\r\\n        }\\r\\n        if (augs.includes(\\\"Enhanced Social Interaction Implant\\\")) {\\r\\n            stat = stat * 1.6;\\r\\n            statExp = statExp * 1.6;\\r\\n        }\\r\\n        if (augs.includes(\\\"SmartJaw\\\")) {\\r\\n            stat = stat * 1.5;\\r\\n            statExp = statExp * 1.5;\\r\\n        }\\r\\n\\r\\n        mult.charisma = stat;\\r\\n        mult.charismaExp = statExp;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class FactionWithAugs extends Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     * @param {Augmentation[]} augs\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job, augs) {\\r\\n        super(name, rep, fav, fvg, job)\\r\\n        this.augmentations = augs;\\r\\n    }\\r\\n\\r\\n    maxAugRep() {\\r\\n        return this.augmentations\\r\\n            .filter(a => !a.owned)\\r\\n            .map(a => a.requiredReputation)\\r\\n            .reduce((a, b) => Math.max(a, b), 0);\\r\\n    }\\r\\n\\r\\n    hasAllAugs() {\\r\\n        return this.augmentations\\r\\n        .map(a => a.owned)\\r\\n        .reduce((a, b) => a && b, true);\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns FactionWithAugs[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => FactionWithAugs.get(ns, f));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @param {string} f\\r\\n     * @returns FactionWithAugs\\r\\n     */\\r\\n    static get(ns, f) {\\r\\n        let rep = ns.getFactionRep(f);\\r\\n        let fav = ns.getFactionFavor(f);\\r\\n        let fvg = ns.getFactionFavorGain(f);\\r\\n        let augInfo = ns.getOwnedAugmentations(true);\\r\\n        let augs = ns.getAugmentationsFromFaction(f).map(a => {\\r\\n            let [aRep, aPrc] = ns.getAugmentationCost(a);\\r\\n            let has = augInfo.includes(a);\\r\\n            return new Augmentation(a, f, aRep, aPrc, has);\\r\\n        })\\r\\n        return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Augmentation {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} fac\\r\\n     * @param {number} rep\\r\\n     * @param {number} prc\\r\\n     * @param {boolean} has\\r\\n     */\\r\\n    constructor(name, fac, rep, prc, has) {\\r\\n        this.name = name;\\r\\n        this.faction = fac;\\r\\n        this.requiredReputation = rep;\\r\\n        this.price = prc;\\r\\n        this.owned = has;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        if (this.owned) {\\r\\n            return `${this.name} (OWNED)`\\r\\n        } else {\\r\\n            return `${this.name} (${format.money(this.price)})`\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Gang {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} requiredKarma\\r\\n     * @param {number} requiredStats\\r\\n     * @param {string|null} requiredLocation\\r\\n     */\\r\\n    constructor(name, requiredKarma, requiredStats, requiredLocation) {\\r\\n        this.name = name;\\r\\n        this.requiredKarma = requiredKarma;\\r\\n        this.requiredStats = requiredStats;\\r\\n        this.requiredLocation = requiredLocation;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static getAll() {\\r\\n        return [\\r\\n            new Gang('Slum Snakes', 9, 30, null),\\r\\n            new Gang('Tetrads', 18, 75, 'Chongqing'),\\r\\n            new Gang('Speakers for the Dead', 45, 300, null),\\r\\n            new Gang('The Dark Army', 45, 300, 'Chongqing'),\\r\\n            new Gang('The Syndicate', 90, 200, 'Sector-12'),\\r\\n            // no silhouette - special company reqs\\r\\n        ];\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L4.js\",\"code\":\"\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"fac-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let f = FactionWithAugs.get(ns, 'Bachman & Associates');\\r\\n    ns.tprint(`${f.name}: ${f.reputation}`);\\r\\n    for (var aug of f.augmentations) {\\r\\n        ns.tprint(aug);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"buy-nodes.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":7.5,\"logs\":[],\"logUpd\":true,\"offlineRunningTime\":7.41,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":90140.20999925806,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"init.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":106.9,\"logs\":[\"Started carrying out hacking contracts for Sector-12\",\"[INF] stop work faction-Sector-12; start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[INF] stop work faction-Tetrads; start work faction-Slum Snakes\",\"Started serving as security details for Slum Snakes\",\"[INF] stop work faction-Slum Snakes; start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[INF] stop work faction-Tetrads; start work faction-Slum Snakes\",\"Started serving as security details for Slum Snakes\",\"[INF] stop work faction-Slum Snakes; start work faction-Tian Di Hui\",\"Started carrying out hacking contracts for Tian Di Hui\",\"[INF] stop work faction-Tian Di Hui; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-CyberSec\",\"Started carrying out hacking contracts for CyberSec\",\"[INF] stop work faction-CyberSec; start work faction-Sector-12\",\"Started carrying out hacking contracts for Sector-12\",\"[INF] stop work faction-Sector-12; start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[INF] stop work faction-Tetrads; start work faction-Slum Snakes\",\"Started serving as security details for Slum Snakes\",\"[INF] stop work faction-Slum Snakes; start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[INF] stop work faction-Tetrads; start work faction-Slum Snakes\",\"Started serving as security details for Slum Snakes\",\"[INF] stop work faction-Slum Snakes; start work faction-Tian Di Hui\",\"Started carrying out hacking contracts for Tian Di Hui\",\"[INF] stop work faction-Tian Di Hui; start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[INF] stop work faction-Tetrads; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-CyberSec\",\"Started carrying out hacking contracts for CyberSec\",\"[INF] stop work faction-CyberSec; start work faction-Sector-12\",\"Started carrying out hacking contracts for Sector-12\",\"[INF] stop work faction-Sector-12; start work faction-Slum Snakes\",\"Started serving as security details for Slum Snakes\",\"[INF] stop work faction-Slum Snakes; start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[INF] stop work faction-Tetrads; start work faction-Slum Snakes\",\"Started serving as security details for Slum Snakes\",\"[INF] stop work faction-Slum Snakes; start work faction-Tetrads\",\"Started serving as security details for Tetrads\",\"[INF] stop work faction-Tetrads; start work faction-Tian Di Hui\",\"Started carrying out hacking contracts for Tian Di Hui\",\"[INF] stop work faction-Tian Di Hui; start work faction-Slum Snakes\",\"Started serving as security details for Slum Snakes\",\"[INF] stop work faction-Slum Snakes; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-CyberSec\",\"Started carrying out hacking contracts for CyberSec\"],\"logUpd\":true,\"offlineRunningTime\":7.41,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":14971.610000019267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] assigning CSEC grow -> hack x4\",\"[INF] status: security level 10 / goal 10; \",\"[INF] status: money $83989883 / goal $50000000; increasing\",\"[INF] assigning CSEC hack -> weaken x4\",\"[INF] assigning iron-gym grow -> hack x18\",\"[INF] status: security level 11 / goal 10; \",\"[INF] status: money $100000000 / goal $50000000; increasing\",\"[INF] assigning foodnstuff hack -> weaken x9\",\"[INF] assigning max-hardware grow -> hack x18\",\"[INF] status: security level 8 / goal 10; \",\"[INF] status: money $36896567 / goal $50000000; \",\"[INF] assigning CSEC weaken -> grow x4\",\"[INF] assigning iron-gym hack -> grow x18\",\"[INF] status: security level 10 / goal 10; \",\"[INF] status: money $57666463 / goal $50000000; \",\"[INF] assigning joesguns hack -> weaken x9\",\"[INF] assigning CSEC grow -> hack x4\",\"[INF] status: security level 6 / goal 10; \",\"[INF] status: money $61914577 / goal $50000000; increasing\",\"[INF] assigning the-hub weaken -> hack x4\",\"[INF] assigning iron-gym grow -> hack x18\",\"[INF] status: security level 7 / goal 10; \",\"[INF] status: money $97687383 / goal $50000000; increasing\",\"[INF] assigning global-pharm weaken -> hack x4\",\"[INF] assigning neo-net grow -> hack x18\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $75695914 / goal $50000000; \",\"[INF] assigning zer0 grow -> hack x18\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $97604678 / goal $50000000; \",\"[INF] assigning phantasy grow -> hack x18\",\"[INF] status: security level 7 / goal 10; \",\"[INF] status: money $23650128 / goal $50000000; \",\"[INF] assigning foodnstuff weaken -> grow x9\",\"[INF] assigning iron-gym hack -> grow x18\",\"[INF] status: security level 6 / goal 10; decreasing\",\"[INF] status: money $26677655 / goal $50000000; \",\"[INF] assigning joesguns weaken -> grow x9\",\"[INF] assigning max-hardware hack -> grow x18\",\"[INF] status: security level 5 / goal 10; decreasing\",\"[INF] status: money $23984695 / goal $50000000; \",\"[INF] assigning neo-net hack -> grow x18\",\"[INF] status: security level 6 / goal 10; \",\"[INF] status: money $33866159 / goal $50000000; \",\"[INF] assigning zer0 hack -> grow x18\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $63278298 / goal $50000000; increasing\",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 5 / goal 10; \",\"[INF] status: money $90937221 / goal $50000000; increasing\",\"[INF] assigning joesguns grow -> hack x9\"],\"logUpd\":true,\"offlineRunningTime\":7.41,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 38.229 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.229 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.229 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.229 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.229 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.229 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.145 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 38.060 seconds (t=467)\",\"Server security level on harakiri-sushi weakened to 5. Gained 3,838.7400 hacking exp (t=467)\",\"Executing weaken() on server harakiri-sushi in 37.977 seconds (t=467)\"],\"logUpd\":true,\"offlineRunningTime\":7.41,\"offlineMoneyMade\":0,\"offlineExpGained\":291.9575033333328,\"onlineRunningTime\":14919.610000019078,\"onlineMoneyMade\":0,\"onlineExpGained\":1378107.6599999971,\"threads\":467,\"dataMap\":{\"45.6.6.2\":[0,0,0,167653]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"hft.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":19.7,\"logs\":[\"[INF] assets: $65,726,629,433, +0.23%, $30,292/sec\",\"[INF] FSIG  : buy 830 ($117,866,024)\",\"[INF] assets: $66,086,686,255, session capital gains: $-40,063,354,727\",\"[INF] assets: $66,086,686,255,  0%, $0/sec\",\"[INF] assets: $65,981,445,179, -0.07%, $-10,521/sec\",\"[INF] assets: $65,831,532,115, -0.12%, $-17,006/sec\",\"[INF] assets: $65,868,561,094, -0.08%, $-10,903/sec\",\"[INF] assets: $65,891,106,466, -0.05%, $-7,822/sec\",\"[INF] FSIG  : buy 719 ($101,416,294)\",\"[INF] assets: $65,989,759,231, session capital gains: $-40,164,771,022\",\"[INF] assets: $65,989,759,231,  0%, $0/sec\",\"[INF] FSIG  : buy 809 ($113,204,631)\",\"[INF] assets: $66,344,748,175, session capital gains: $-40,277,975,653\",\"[INF] assets: $66,469,934,733, +0.18%, $25,027/sec\",\"[INF] ECP   : buy 5976 ($122,880,107)\",\"[INF] assets: $66,725,397,855, session capital gains: $-40,400,855,760\",\"[INF] assets: $66,832,753,281, +0.16%, $21,466/sec\",\"[INF] assets: $66,954,940,068, +0.17%, $22,947/sec\",\"[INF] assets: $66,954,940,068, +0.11%, $15,299/sec\",\"[INF] assets: $67,181,840,525, +0.17%, $22,816/sec\",\"[INF] assets: $67,348,499,421, +0.18%, $24,918/sec\",\"[INF] ECP   : buy 5693 ($116,996,660)\",\"[INF] assets: $67,780,916,836, session capital gains: $-40,517,852,421\",\"[INF] assets: $67,794,347,441, +0.01%, $2,685/sec\",\"[INF] assets: $68,117,040,284, +0.24%, $33,602/sec\",\"[INF] assets: $68,117,040,284, +0.16%, $22,402/sec\",\"[INF] assets: $68,369,188,695, +0.21%, $29,403/sec\",\"[INF] assets: $68,377,855,475, +0.17%, $23,868/sec\",\"[INF] assets: $68,414,036,293, +0.15%, $21,097/sec\",\"[INF] assets: $68,915,530,912, +0.27%, $37,361/sec\",\"[INF] assets: $68,950,172,855, +0.2%, $27,762/sec\",\"[INF] assets: $68,950,172,855, +0.2%, $27,762/sec\",\"[INF] assets: $68,591,593,369, +0.05%, $7,411/sec\",\"[INF] BLD   : buy 5450 ($120,607,295)\",\"[INF] assets: $69,021,974,114, session capital gains: $-40,638,459,718\",\"[INF] APHE  : sell 2263484 ($12,748,668,466)\",\"[INF] FLCM  : buy 260649 ($11,360,437,752)\",\"[INF] FSIG  : sell 78998 ($11,693,482,007)\",\"[INF] GPH   : buy 653064 ($11,360,460,363)\",\"[INF] MGCP  : buy 365394 ($11,360,459,738)\",\"[INF] OMTK  : buy 297650 ($11,360,436,124)\",\"[INF] SLRS  : buy 498778 ($11,360,456,520)\",\"[INF] assets: $101,293,391,898, session capital gains: $-72,998,558,528\",\"[INF] OMTK  : buy 3000 ($113,952,453)\",\"[INF] assets: $101,811,672,681, session capital gains: $-73,112,510,980\",\"[INF] assets: $102,017,211,737, +0.2%, $41,091/sec\",\"[INF] assets: $102,017,211,737, +0.1%, $20,547/sec\",\"[INF] FLCM  : buy 4266 ($184,298,085)\",\"[INF] assets: $102,132,768,520, session capital gains: $-73,296,809,067\",\"[INF] BLD   : buy 4766 ($105,264,583)\",\"[INF] assets: $102,250,241,231, session capital gains: $-73,402,073,651\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2431.40999999998,\"onlineMoneyMade\":25513497378.303104,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"ServerProfiler.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"43.4.1.6\",\"1.5.0.6\",\"31.5.3.7\",\"55.7.5.3\",\"45.6.6.2\",\"61.4.5.8\",\"78.9.0.6\",\"97.3.1.6\",\"40.6.5.8\",\"1.3.2.2\",\"66.7.9.2\",\"35.2.2.3\",\"65.7.3.6\",\"83.3.8.3\",\"12.8.8.2\",\"57.6.0.5\",\"70.5.6.7\",\"45.4.7.0\",\"85.5.7.8\",\"26.1.6.5\",\"86.4.8.6\",\"64.1.1.6\",\"12.5.7.8\",\"45.0.9.4\",\"86.8.9.0\",\"55.3.8.7\",\"28.2.5.7\",\"90.2.5.5\",\"43.7.3.0\",\"82.5.5.5\",\"79.6.0.1\",\"89.5.2.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.6.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.6.1.0\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802538.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0],[0,0,0],[0,1,0],[0,0,1],[0,0,0],[0,0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1391,\"moneyAvailable\":46574326948,\"moneyMax\":1164358173700,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"24.7.5.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.0.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.0.0.0\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327938.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[38,5,63,135,135,156,167,177,101,184,192,4,87,42,151,27,173,44,163,70,90,74,143,35,160,196,93,93,139,24,13,69,196,61,72,67,106,154,32,173,13,109,179,58,121,154,38,24]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-34195.cct\",\"type\":\"Total Ways to Sum\",\"data\":89,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1277,\"moneyAvailable\":51186641727,\"moneyMax\":1279666043175,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"16.6.1.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.7.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.7.5.4\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-600445.cct\",\"type\":\"Array Jumping Game\",\"data\":[0],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1127,\"moneyAvailable\":22010376564,\"moneyMax\":550259414100,\"hackDifficulty\":82,\"baseDifficulty\":82,\"minDifficulty\":27,\"serverGrowth\":60,\"serversOnNetwork\":[\"59.2.3.0\",\"50.6.1.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"16.6.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.6.1.0\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.6.1.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"16.6.1.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 47.202 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.916806%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 52.536 seconds (t=73)\",\"Available money on harakiri-sushi grown by 3.825003%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.553 seconds (t=73)\",\"Available money on harakiri-sushi grown by 1.633250%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.673 seconds (t=73)\",\"Available money on harakiri-sushi grown by 1.636134%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.196 seconds (t=73)\",\"Available money on harakiri-sushi grown by 1.626041%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.896 seconds (t=73)\",\"Available money on harakiri-sushi grown by 1.612559%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.196 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.699311%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 49.600 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.326114%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 45.005 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.413725%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 54.489 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563395%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.901 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.478836%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 47.220 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.642323%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 44.260 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563411%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.929 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563547%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.377 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.934694%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.607 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563401%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.207 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.801796%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.803 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563430%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.382 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.790964%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 49.192 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563592%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.414 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563628%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.700 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563555%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.014 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563485%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.551 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.322064%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 42.695 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.103319%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.190 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":7.41,\"offlineMoneyMade\":0,\"offlineExpGained\":42.24589083333322,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":199819.9799999994,\"threads\":73,\"dataMap\":{\"45.6.6.2\":[0,0,24309,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":969,\"moneyAvailable\":34856256411,\"moneyMax\":871406410275,\"hackDifficulty\":91,\"baseDifficulty\":91,\"minDifficulty\":30,\"serverGrowth\":60,\"serversOnNetwork\":[\"55.9.9.3\",\"12.0.0.0\",\"84.9.3.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"83.7.1.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.7.1.8\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":990,\"moneyAvailable\":20291132485,\"moneyMax\":507278312125,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":80,\"serversOnNetwork\":[\"58.4.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"95.3.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.3.1.1\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1166,\"moneyAvailable\":24899299377,\"moneyMax\":622482484425,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":60,\"serversOnNetwork\":[\"59.2.3.0\",\"75.7.3.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.2.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.2.3.0\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.2.3.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"59.2.3.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 31.654 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.298345%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 45.172 seconds (t=73)\",\"Available money on harakiri-sushi grown by 3.514210%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.190 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.700 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563334%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.156 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563351%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.499 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563386%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.838 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563410%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.173 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563667%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.660 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563476%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.885 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563439%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.584 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.102343%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.247 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563384%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.474 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.382571%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 47.495 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.975 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.851295%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.802 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563386%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.298 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.774483%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.876 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563383%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.656 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563431%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.317 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.901519%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 48.839 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563632%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.958 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563542%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.655 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563525%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.855 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.344684%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 50.703 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.743861%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 45.733 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":7.411,\"offlineMoneyMade\":0,\"offlineExpGained\":42.25159973749987,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":200420.0399999994,\"threads\":73,\"dataMap\":{\"45.6.6.2\":[0,0,24382,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63841.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,1],[0,0],[0,0],[0,1],[0,0],[0,0],[0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1077,\"moneyAvailable\":18284839889,\"moneyMax\":457120997225,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":99,\"serversOnNetwork\":[\"35.3.4.9\",\"24.7.5.4\",\"95.3.1.1\",\"60.4.4.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"55.9.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.9.9.3\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1109,\"moneyAvailable\":23047512742,\"moneyMax\":576187818550,\"hackDifficulty\":62,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":89,\"serversOnNetwork\":[\"90.1.3.4\",\"16.6.1.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"58.4.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.4.5.8\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1148,\"moneyAvailable\":25745212751,\"moneyMax\":643630318775,\"hackDifficulty\":97,\"baseDifficulty\":97,\"minDifficulty\":32,\"serverGrowth\":92,\"serversOnNetwork\":[\"69.6.8.4\",\"83.7.1.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"35.3.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.3.4.9\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1024,\"ramUsed\":1023.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"35.3.4.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"35.3.4.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 39.911 seconds (t=585)\",\"Available money on harakiri-sushi grown by 58.769595%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 36.309 seconds (t=585)\",\"Available money on harakiri-sushi grown by 79.457891%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 35.495 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.157133%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.960 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.156926%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.850 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.156915%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 38.070 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.157228%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.740 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.157698%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.740 seconds (t=585)\",\"Available money on harakiri-sushi grown by 92.857213%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 60.189 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.162125%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 47.574 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.161917%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 48.184 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.159407%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.931 seconds (t=585)\",\"Available money on harakiri-sushi grown by 118.818557%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.266 seconds (t=585)\",\"Available money on harakiri-sushi grown by 64.977085%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 34.287 seconds (t=585)\",\"Available money on harakiri-sushi grown by 94.991104%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 49.405 seconds (t=585)\",\"Available money on harakiri-sushi grown by 94.056073%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 36.649 seconds (t=585)\",\"Available money on harakiri-sushi grown by 24.854024%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 36.434 seconds (t=585)\",\"Available money on harakiri-sushi grown by 23.805420%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.506 seconds (t=585)\",\"Available money on harakiri-sushi grown by 59.694124%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 38.231 seconds (t=585)\",\"Available money on harakiri-sushi grown by 109.782043%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 40.795 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.156986%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 41.495 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.159285%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 46.263 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.163289%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 47.116 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.165240%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 47.244 seconds (t=585)\",\"Available money on harakiri-sushi grown by 158.161095%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 37.573 seconds (t=585)\",\"Available money on harakiri-sushi grown by 83.673884%. Gained 4,808.7000 hacking exp (t=585)\",\"Executing grow() on server harakiri-sushi in 58.897 seconds (t=585)\"],\"logUpd\":true,\"offlineRunningTime\":7.411,\"offlineMoneyMade\":0,\"offlineExpGained\":332.4129083437483,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":1577253.5999999908,\"threads\":585,\"dataMap\":{\"45.6.6.2\":[0,0,191880,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150769.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[39,134,94,186,190,52,171,16,49,20,187,75,151,101,3,99,168,81,47,28,142,59,27,81,44]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1052,\"moneyAvailable\":1405095221,\"moneyMax\":35127380525,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":91,\"serversOnNetwork\":[\"78.3.7.2\",\"59.2.3.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"84.9.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"84.9.3.4\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1509,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"16.6.1.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"63.1.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.1.6.2\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-232172.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[102,192,133,45,185,13,136,144,171,51,98,107,51,144,156,10,167,71,31,132,2,114,4,97,95,2,84,84,27,123,43,195,164,100,53,86,89,174,63,92,129,127,47,112,161],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-220266.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[24,22,14,18,28,36,4,47,12],[49,5,40,24,9,32,40,47,27],[11,49,33,39,14,4,29,47,30],[9,22,50,49,41,27,27,22,5],[19,2,50,49,42,10,13,14,10],[28,2,11,34,23,50,42,42,50],[44,21,45,43,42,37,36,32,10],[27,17,13,27,7,27,39,21,18]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1013,\"moneyAvailable\":1040970955,\"moneyMax\":26024273875,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":72,\"serversOnNetwork\":[\"15.5.1.8\",\"1.4.7.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.4.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.4.2.0\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":997,\"moneyAvailable\":804428844,\"moneyMax\":20110721100,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":50,\"serversOnNetwork\":[\"94.2.7.9\",\"83.8.2.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"37.6.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.6.2.9\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":916,\"moneyAvailable\":663728479,\"moneyMax\":16593211975,\"hackDifficulty\":84,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":66,\"serversOnNetwork\":[\"90.2.4.7\",\"78.3.7.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"90.1.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.1.3.4\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.1.3.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"90.1.3.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 50.512 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705534%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.480 seconds (t=146)\",\"Available money on harakiri-sushi grown by 19.721384%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 51.576 seconds (t=146)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 34.204 seconds (t=146)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 39.526 seconds (t=146)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 39.037 seconds (t=146)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 40.749 seconds (t=146)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 42.340 seconds (t=146)\",\"Available money on harakiri-sushi grown by 18.918551%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 46.530 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705329%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 42.264 seconds (t=146)\",\"Available money on harakiri-sushi grown by 20.682171%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 49.985 seconds (t=146)\",\"Available money on harakiri-sushi grown by 19.387604%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 51.993 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.602542%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 46.274 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705098%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 43.149 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705283%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 40.915 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705390%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.815 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705363%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 40.989 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705283%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 40.484 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705367%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 42.859 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705365%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.391 seconds (t=146)\",\"Available money on harakiri-sushi grown by 22.841774%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 47.049 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705832%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 34.827 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705786%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.227 seconds (t=146)\",\"Available money on harakiri-sushi grown by 18.670183%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 53.108 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705380%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.494 seconds (t=146)\",\"Available money on harakiri-sushi grown by 24.723660%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 44.978 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":7.411,\"offlineMoneyMade\":0,\"offlineExpGained\":84.50319947499975,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":398439.8399999988,\"threads\":146,\"dataMap\":{\"45.6.6.2\":[0,0,48472,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":829,\"moneyAvailable\":580741032,\"moneyMax\":14518525800,\"hackDifficulty\":91,\"baseDifficulty\":91,\"minDifficulty\":30,\"serverGrowth\":70,\"serversOnNetwork\":[\"9.0.5.5\",\"55.9.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"69.6.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.6.8.4\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"69.6.8.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"69.6.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"69.6.8.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 12.189 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,499,542.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.981 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,174,634.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.864 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,120,599.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.400 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,816,983.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.005 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,912,212.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.411 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $973,962.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.054 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,084,266.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.185 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,790,235.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.903 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $843,210.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.585 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $798,399.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.268 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,549,494.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.500 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $699,255.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.041 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $834,246.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.128 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,157,634.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.279 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,057,581.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.532 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $887,265.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.691 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $732,411.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.316 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,064,628.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.118 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,557,243.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.734 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,384,704.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.325 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $875,142.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.865 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,409,668.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.326 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,955,357.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.122 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,514,851.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.807 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,065,751.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.488 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.411,\"offlineMoneyMade\":458695.50525374996,\"offlineExpGained\":16.164373767187794,\"onlineRunningTime\":14435.010000017432,\"onlineMoneyMade\":2144352321,\"onlineExpGained\":76809.73500000063,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2144352321,9315,0,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":811,\"moneyAvailable\":747950678,\"moneyMax\":18698766950,\"hackDifficulty\":82,\"baseDifficulty\":82,\"minDifficulty\":27,\"serverGrowth\":62,\"serversOnNetwork\":[\"78.3.7.2\",\"58.4.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"90.2.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.2.4.7\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113831.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[37,2,12,40,38,31,50,26],[14,42,13,20,22,38,47,17],[32,46,11,4,44,5,6,40]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":917,\"moneyAvailable\":959097132,\"moneyMax\":23977428300,\"hackDifficulty\":91,\"baseDifficulty\":91,\"minDifficulty\":30,\"serverGrowth\":86,\"serversOnNetwork\":[\"94.2.7.9\",\"37.6.2.9\",\"4.2.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"74.7.3.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.7.3.9\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.7.3.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"74.7.3.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 49.135 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961119%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.755 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961118%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.804 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.891230%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 42.352 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.501076%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 46.487 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 40.413 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 42.003 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.686053%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 44.278 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961126%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.158 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961188%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.890 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961151%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.841 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961129%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 41.343 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.251202%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.789 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.332509%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 48.593 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961110%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.695 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961118%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.420 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.718706%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 43.949 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961121%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.901 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.607804%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 45.033 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 40.795 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.866739%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 42.402 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.361533%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 48.084 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.288656%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.113 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.264253%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.472 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.811422%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 42.914 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961112%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.682 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":7.412,\"offlineMoneyMade\":0,\"offlineExpGained\":10.343554799999954,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":48826.79999999976,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[0,0,5940,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":872,\"moneyAvailable\":1192261868,\"moneyMax\":29806546700,\"hackDifficulty\":89,\"baseDifficulty\":89,\"minDifficulty\":30,\"serverGrowth\":81,\"serversOnNetwork\":[\"94.2.7.9\",\"27.8.3.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"85.0.4.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.0.4.4\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.0.4.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"85.0.4.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 44.633 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.046153%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 48.603 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.797008%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 46.450 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.526 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.037 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.749 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.711341%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.037 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.313067%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 47.696 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.093620%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.265 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.190966%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 51.370 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563463%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.817 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.552610%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 44.468 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.937 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.361 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.018069%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.238 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563463%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 42.118 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563389%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.404 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563466%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.706 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563491%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.906 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.340148%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 42.670 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563501%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.374 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.323789%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 47.573 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563556%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.578 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.358456%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 54.624 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563451%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.726 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.391147%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 50.538 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":7.412,\"offlineMoneyMade\":0,\"offlineExpGained\":42.25730864166655,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":199819.9799999994,\"threads\":73,\"dataMap\":{\"45.6.6.2\":[0,0,24309,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":813,\"moneyAvailable\":896702802,\"moneyMax\":22417570050,\"hackDifficulty\":74,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":61,\"serversOnNetwork\":[\"4.2.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"78.3.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"78.3.7.2\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"78.3.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"78.3.7.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 46.083 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009901%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.679 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009924%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.141 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.302597%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 45.349 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.316101%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 45.288 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009919%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.633 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009939%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.902 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009915%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.974 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.930263%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.428 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009973%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.556 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009952%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.658 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.355918%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 44.974 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.773251%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.273 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.836957%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.709 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.846905%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.975 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.796879%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.789 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009929%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.342 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.934133%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.086 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009945%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.118 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009981%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.582 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.832327%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.950 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010039%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.947 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009991%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.029 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.944081%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 55.075 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.903379%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.232 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.409665%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 50.977 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.412,\"offlineMoneyMade\":0,\"offlineExpGained\":21.2194984499999,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":100316.87999999951,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,12204,0]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":850,\"moneyAvailable\":670113174,\"moneyMax\":16752829350,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":85,\"serversOnNetwork\":[\"37.6.2.9\",\"35.3.4.9\",\"69.6.8.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"27.8.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.8.3.7\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-405403.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[72,175,76,16,92,132,136,71,174,41,185,41,195,151,97,141,45,117,125,127,59,179,45,76,188,39,154],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":949,\"moneyAvailable\":844597590,\"moneyMax\":21114939750,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":79,\"serversOnNetwork\":[\"74.7.3.9\",\"15.5.1.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"95.9.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.9.0.9\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-251542.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,-4,2,5,4,-8,-6,6,8,2,4,-1,-10,-8,8,0,-9,10,2,-9,-6,0,-10,1,4,-5,5,-8,-7,-4,6,-4,5,4,9,6,-8,10],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":872,\"moneyAvailable\":772894142,\"moneyMax\":19322353550,\"hackDifficulty\":56,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":74,\"serversOnNetwork\":[\"37.4.1.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.6.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.6.3.3\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":900,\"moneyAvailable\":1021073361,\"moneyMax\":25526834025,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":55,\"serversOnNetwork\":[\"18.4.7.3\",\"98.3.3.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"98.3.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.3.3.0\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"98.3.3.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"98.3.3.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"98.3.3.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 10.847 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,086,533.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.549 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,172,997.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.297 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,799,226.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.762 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,057,382.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.376 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,047,321.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.020 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,042,614.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.869 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,341,323.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.698 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,128,654.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.448 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $609,588.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.738 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,175,138.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.941 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,070,109.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.755 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,020,465.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.703 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $709,092.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.370 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,011,096.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.628 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,002,726.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.056 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $952,821.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.155 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $469,890.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.520 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,036,287.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.928 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,203,948.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.185 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,025,055.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.546 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,702,026.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.759 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,054,843.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.377 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,654,037.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.174 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,130,452.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.859 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,815,542.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.608 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.412,\"offlineMoneyMade\":466978.33594687504,\"offlineExpGained\":16.2331064531253,\"onlineRunningTime\":14501.010000017655,\"onlineMoneyMade\":2185345692,\"onlineExpGained\":77235.12000000062,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2185345692,9369,0,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-845132.cct\",\"type\":\"Total Ways to Sum\",\"data\":72,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":874,\"moneyAvailable\":998617679,\"moneyMax\":24965441975,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":65,\"serversOnNetwork\":[\"87.6.3.3\",\"80.3.3.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"4.2.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.2.5.5\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":822,\"moneyAvailable\":1078709712,\"moneyMax\":26967742800,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":71,\"serversOnNetwork\":[\"90.2.4.7\",\"85.0.4.4\",\"9.0.5.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.0.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.0.5.5\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-279761.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[186,140,75,95,36,143,170,55,163,41,94,70,147,112,108,173,167,105,199,147,72,3,155,72,168,77,106,17,133,178,73,9,147,179,165],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":834,\"moneyAvailable\":852387464,\"moneyMax\":21309686600,\"hackDifficulty\":67,\"baseDifficulty\":67,\"minDifficulty\":22,\"serverGrowth\":73,\"serversOnNetwork\":[\"4.2.5.5\",\"90.1.3.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"60.7.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.7.5.6\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.7.5.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"60.7.5.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 44.762 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563341%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.092 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563353%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.685 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.744517%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 44.138 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.701319%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 44.236 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.929371%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 46.114 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563400%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.807 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563368%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.604 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563541%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.005 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.625003%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 53.598 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563382%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.699 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.647661%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 44.260 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563362%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.233 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563365%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.255 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563405%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.264 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563382%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.273 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563378%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.903 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563375%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.828 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563388%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.057 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.777172%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.858 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.889628%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 46.014 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.935914%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 52.219 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563611%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.102 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563540%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.177 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563423%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.529 seconds (t=73)\",\"Available money on harakiri-sushi grown by 3.878371%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.728 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":7.412,\"offlineMoneyMade\":0,\"offlineExpGained\":42.874203658333215,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":202220.2199999994,\"threads\":73,\"dataMap\":{\"45.6.6.2\":[0,0,24601,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-649665.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[9,154,59,37,158,81,193,120,8,107,31,69,25,118,53,174,129,19,14,174,179,198,19,68,181,73,53,29,191,200,88,99,151,154]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":759,\"moneyAvailable\":741988878,\"moneyMax\":18549721950,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":76,\"serversOnNetwork\":[\"94.2.7.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"95.5.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.5.0.4\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-882196.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,10],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323161.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,8,10],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":803,\"moneyAvailable\":1369197696,\"moneyMax\":34229942400,\"hackDifficulty\":82,\"baseDifficulty\":82,\"minDifficulty\":27,\"serverGrowth\":58,\"serversOnNetwork\":[\"49.6.0.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"49.6.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.6.0.3\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.6.0.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.6.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"49.6.0.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"49.6.0.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 12.882 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $548,428.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.847 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,597,664.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.861 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $880,124.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.713 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $527,468.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.847 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,348,928.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.403 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $618,784.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.012 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $365,020.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.547 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $384,680.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.723 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $644,892.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.601 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $363,492.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 16.906 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $320,328.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.353 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $456,480.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.610 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $453,172.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.038 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $430,448.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.137 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $212,264.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.503 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $455,228.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.842 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $543,896.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.168 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $462,960.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.529 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $289,580.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.155 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,151,880.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.931 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $923,672.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 16.364 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,383,008.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.764 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":306.40999999999116,\"onlineMoneyMade\":14362396,\"onlineExpGained\":723.3599999999999,\"threads\":4,\"dataMap\":{\"45.6.6.2\":[14362396,88,0,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":827,\"moneyAvailable\":1649702179,\"moneyMax\":41242554475,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":83,\"serversOnNetwork\":[\"85.7.1.4\",\"95.5.0.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"83.8.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.8.2.9\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":850,\"moneyAvailable\":1157990695,\"moneyMax\":28949767375,\"hackDifficulty\":62,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":84,\"serversOnNetwork\":[\"59.4.2.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"80.3.3.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.3.3.1\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":827,\"moneyAvailable\":1352125200,\"moneyMax\":33803130000,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":74,\"serversOnNetwork\":[\"98.3.3.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"94.2.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"94.2.7.9\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"94.2.7.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"94.2.7.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 44.921 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.308441%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.056 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.464175%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 46.958 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961109%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.948 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961109%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.471 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961114%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 41.526 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.717519%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 44.058 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.241137%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.930 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.552046%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 45.774 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961139%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.749 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.246777%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.857 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 42.331 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961110%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.274 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961109%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.240 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961112%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.641 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961121%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.756 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.482735%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 46.519 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961111%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 38.724 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961112%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.504 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.887888%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 42.208 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.682612%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 44.217 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.241152%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.820 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.146727%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 51.330 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961145%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.595 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961123%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.924 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961112%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.334 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":10.763314237499948,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":50454.35999999975,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[0,0,6138,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":792,\"moneyAvailable\":1035237636,\"moneyMax\":25880940900,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":72,\"serversOnNetwork\":[\"1.7.7.9\",\"59.4.2.0\",\"90.2.4.7\",\"74.7.3.9\",\"60.7.5.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"68.3.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.3.1.9\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.3.1.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"68.3.1.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 50.334 seconds (t=73)\",\"Available money on harakiri-sushi grown by 3.807146%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.232 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563336%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.920 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.009592%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.700 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563346%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.251 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563365%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.593 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563393%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.823 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563394%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.947 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563551%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.128 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563466%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.419 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.843977%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 49.130 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563346%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.343 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.273 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.056 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.975 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.683637%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 46.665 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.434 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.506 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.231 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.795 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.503550%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 42.116 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.408111%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 47.317 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.064218%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 48.346 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.086187%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 48.267 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563382%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 40.825 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563350%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.422 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":42.41726213541654,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":200420.0399999994,\"threads\":73,\"dataMap\":{\"45.6.6.2\":[0,0,24382,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":707,\"moneyAvailable\":731318131,\"moneyMax\":18282953275,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":56,\"serversOnNetwork\":[\"13.4.6.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"18.4.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.4.7.3\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"18.4.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"18.4.7.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 47.936 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.550366%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 44.058 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.729301%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.196 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.700 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.309841%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.266 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009906%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.951 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.821083%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.691 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009929%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.132 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010012%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.559 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009957%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.540 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009927%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.741 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.776789%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.893 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009914%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.165 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009919%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.296 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009925%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.031 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009902%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.601 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009902%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.625 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009902%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.341 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009902%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.065 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.997989%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.812 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.603726%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.614 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.599920%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 49.546 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.471127%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 50.514 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010008%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.275 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.345676%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 44.917 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009909%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.052 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":20.7659702249999,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":97949.51999999952,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,11916,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-865757.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,9],[18,19]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-239514.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-4,7,-7,-1,-8,4,6],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":483,\"moneyAvailable\":653374014,\"moneyMax\":16334350350,\"hackDifficulty\":47,\"baseDifficulty\":47,\"minDifficulty\":16,\"serverGrowth\":45,\"serversOnNetwork\":[\"11.9.5.6\",\"87.6.3.3\",\"1.7.7.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"37.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.4.1.6\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"37.4.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"37.4.1.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 41.092 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.645 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.204 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.772080%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.526 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.762814%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.037 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.739147%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.749 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.717175%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.340 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.347832%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 45.017 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009958%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.323 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.838835%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.013 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.611766%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 49.570 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009904%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.794 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.768600%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.608 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.056 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.975 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009921%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.419 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.990860%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.947 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.834664%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.536 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009942%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.593 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.008139%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.769 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.573090%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 49.753 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010035%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.138 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010032%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.260 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009990%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.465 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009981%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.383 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.990054%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 46.951 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":21.298430999999898,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":100316.87999999951,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,12204,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":555,\"moneyAvailable\":668935569,\"moneyMax\":16723389225,\"hackDifficulty\":61,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":56,\"serversOnNetwork\":[\"72.9.6.1\",\"95.9.0.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"73.3.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.3.6.6\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"73.3.6.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"73.3.6.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"73.3.6.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.791 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,281,951.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.172 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,632,148.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.964 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,256,192.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.847 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,130,328.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,782,585.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.847 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,983,465.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.393 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,009,971.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.037 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,126,215.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.168 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,856,547.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.886 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $874,197.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.568 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $828,900.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.251 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,537,767.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.346 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $724,500.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.023 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $865,800.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.111 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,199,817.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.262 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,001,754.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 17.228 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $884,664.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.189 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,097,982.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.781 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,173,456.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.453 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,579,122.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.057 seconds (t=9)\",\"Script FAILED to hack harakiri-sushi. Gained 18.4950 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.563 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,362,185.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.775 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,064,014.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.508 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,975,716.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.362 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,264,849.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.378 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":465813.264063125,\"offlineExpGained\":16.178250154687795,\"onlineRunningTime\":14399.010000017308,\"onlineMoneyMade\":2172442257,\"onlineExpGained\":76809.73500000063,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2172442257,9315,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-143391.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1969961409\",45],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":427,\"moneyAvailable\":274464893,\"moneyMax\":6861622325,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":39,\"serversOnNetwork\":[\"4.3.6.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"13.4.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.4.6.3\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.4.6.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"13.4.6.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 43.545 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.948671%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.429 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.674780%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.453 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.936920%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.260 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.956549%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.368 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.749 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.037 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.746244%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.630 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.563950%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.894 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.234636%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 52.536 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009925%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.618 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.921462%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.234 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.608 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.813198%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.404 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.365 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009916%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.090 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.837371%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.606 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009951%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.899 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009977%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.389 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009988%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.131 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.904196%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.487 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010029%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.332 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010016%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.677 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.104946%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 53.559 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009980%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.913 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.893593%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.566 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":21.0702335249999,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":99429.11999999952,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,12096,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-808554.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"220209196124\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":423,\"moneyAvailable\":238926755,\"moneyMax\":5973168875,\"hackDifficulty\":49,\"baseDifficulty\":49,\"minDifficulty\":16,\"serverGrowth\":43,\"serversOnNetwork\":[\"99.7.3.2\",\"68.3.1.9\",\"85.7.1.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"72.9.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.9.6.1\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"72.9.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"72.9.6.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 43.178 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.421271%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.349 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563355%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.082 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563354%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 42.150 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.221403%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.104 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.186554%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 45.447 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.183108%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 48.199 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563366%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.443 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.601371%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 46.878 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563486%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.872 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.782868%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 52.951 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.893386%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 48.013 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.176674%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 45.371 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.195062%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 43.064 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.250911%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 45.200 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563367%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.096 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563421%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.306 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563508%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 41.081 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.679925%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 44.077 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563545%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.482 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.823202%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 49.101 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563677%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.799 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563595%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.113 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563514%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.376 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563404%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.705 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.563344%. Gained 600.0600 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.006 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":42.41726213541654,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":199819.9799999994,\"threads\":73,\"dataMap\":{\"45.6.6.2\":[0,0,24309,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":735,\"moneyAvailable\":880340333,\"moneyMax\":22008508325,\"hackDifficulty\":67,\"baseDifficulty\":67,\"minDifficulty\":22,\"serverGrowth\":81,\"serversOnNetwork\":[\"38.4.9.5\",\"37.4.1.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"4.3.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.3.6.5\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.3.6.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"4.3.6.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 39.966 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009909%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.590 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.849603%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.658 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.939715%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.260 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.167041%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 46.120 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.757106%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.664 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009916%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.536 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010006%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.077 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.293400%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 52.029 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009927%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.111 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009912%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.439 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.273 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.818019%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.056 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.975 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.483600%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 44.297 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009920%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.749 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009946%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.350 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009975%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.895 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009978%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.087 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.606710%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 49.509 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010022%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.409 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010013%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.404 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010007%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.628 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009975%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.118 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.550453%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.864 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.381 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":21.3744968249999,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":100908.7199999995,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,12276,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":444,\"moneyAvailable\":214942622,\"moneyMax\":5373565550,\"hackDifficulty\":46,\"baseDifficulty\":46,\"minDifficulty\":15,\"serverGrowth\":56,\"serversOnNetwork\":[\"30.8.5.5\",\"73.3.6.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"11.9.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.9.5.6\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433067.cct\",\"type\":\"Total Ways to Sum\",\"data\":62,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":556,\"moneyAvailable\":523719028,\"moneyMax\":13092975700,\"hackDifficulty\":61,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":70,\"serversOnNetwork\":[\"42.6.3.8\",\"18.4.7.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"49.6.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.6.7.2\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.6.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"49.6.7.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 46.413 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.916796%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 42.119 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961124%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 41.581 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.573511%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 45.637 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.564563%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 45.741 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961110%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 41.648 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.774075%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 43.375 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961123%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.992 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961172%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 38.560 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961143%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 38.566 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961127%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 40.177 seconds (t=18)\",\"Available money on harakiri-sushi grown by 1.249920%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 48.422 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.493102%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 46.494 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.405 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.039 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961114%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.766 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961120%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.120 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961132%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.668 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961151%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 39.625 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.593792%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 45.204 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961194%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.942 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.153378%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 51.220 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961160%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.902 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961158%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.715 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.679785%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 44.260 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961109%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.274 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":0,\"offlineExpGained\":10.497083849999951,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":49566.59999999976,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[0,0,6030,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551503.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"242359137\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-275413.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[121,127,107,122,4,79,42,42,8],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":443,\"moneyAvailable\":370500932,\"moneyMax\":9262523300,\"hackDifficulty\":67,\"baseDifficulty\":67,\"minDifficulty\":22,\"serverGrowth\":46,\"serversOnNetwork\":[\"30.8.5.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"38.4.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.4.9.5\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.4.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.4.9.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"38.4.9.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"38.4.9.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.804 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $787,932.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.732 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,197,632.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.421 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $666,300.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.026 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $470,384.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.496 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,077,280.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.291 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $547,716.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.934 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $504,872.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.574 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,370,812.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.395 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $628,752.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.004 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $371,208.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.540 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $391,044.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.715 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $655,088.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.593 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $369,152.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 16.899 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $325,588.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.345 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $463,696.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.603 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $460,812.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.031 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $437,532.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.130 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $215,744.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.495 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $462,920.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.835 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $522,352.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.019 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $470,460.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.521 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $294,236.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.147 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,170,236.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.923 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $938,140.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 16.356 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,253,204.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.476 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":348.60999999998876,\"onlineMoneyMade\":16653984,\"onlineExpGained\":854.8799999999999,\"threads\":4,\"dataMap\":{\"45.6.6.2\":[16653984,104,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":325,\"moneyAvailable\":2024380667,\"moneyMax\":4051238875,\"hackDifficulty\":15.228,\"baseDifficulty\":43,\"minDifficulty\":14,\"serverGrowth\":54,\"serversOnNetwork\":[\"9.2.7.2\",\"72.9.6.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"99.7.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.7.3.2\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-338232.cct\",\"type\":\"Total Ways to Sum\",\"data\":55,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":332,\"moneyAvailable\":6174566475,\"moneyMax\":6174566475,\"hackDifficulty\":23.472,\"baseDifficulty\":60,\"minDifficulty\":20,\"serverGrowth\":46,\"serversOnNetwork\":[\"9.2.7.2\",\"13.4.6.3\",\"27.1.2.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"30.8.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.8.5.5\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"30.8.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"30.8.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"30.8.5.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 10.531 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $4,668,948.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.514 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,611,332.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.691 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,597,768.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.446 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $4,770,270.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.325 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,425,626.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.968 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,234,070.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.608 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $5,973,264.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.437 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,740,392.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 14.046 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,615,788.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.549 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,910,736.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.039 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,856,852.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.635 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,754,082.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.549 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,726,344.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.462 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,419,650.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 14.792 seconds (t=18)\",\"Script FAILED to hack harakiri-sushi. Gained 36.9900 exp (t=18)\",\"Attempting to hack harakiri-sushi in 16.771 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,657,880.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.019 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,308,924.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.385 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,678,472.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.584 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,000,492.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.768 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,669,850.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.359 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,687,752.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.900 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $6,576,984.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 14.360 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $5,705,010.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 16.157 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $6,766,812.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.842 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $6,076,638.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.590 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1297.010000000158,\"onlineMoneyMade\":385140762,\"onlineExpGained\":14832.989999999962,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[385140762,1800,0,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66023.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[26,26,22,42,13,34,25,9,37,20,26,17],[43,41,23,43,37,28,24,47,28,50,24,33],[19,48,35,26,42,1,45,46,24,46,50,28],[23,7,9,17,3,22,25,4,7,18,34,20],[40,19,43,32,31,33,41,12,31,8,21,50],[38,40,17,15,50,3,44,33,19,11,2,19],[9,35,35,41,29,39,43,12,23,8,21,45],[22,45,1,47,7,40,2,41,32,6,14,15],[22,49,31,1,38,35,29,40,17,30,43,1],[12,25,32,48,26,9,14,8,2,45,26,49],[41,37,26,12,25,29,30,48,35,13,19,34]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":398,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":58,\"serversOnNetwork\":[\"73.5.8.2\",\"4.3.6.5\",\"49.6.7.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"58.0.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.0.7.3\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-127442.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,2],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":264,\"moneyAvailable\":1026298958,\"moneyMax\":2067152450,\"hackDifficulty\":16.714,\"baseDifficulty\":47,\"minDifficulty\":16,\"serverGrowth\":45,\"serversOnNetwork\":[\"73.5.8.2\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"43.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.4.1.6\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.4.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"43.4.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"43.4.1.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 15.491 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,046,753.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.345 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,658,419.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.327 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":42.41000000000007,\"onlineMoneyMade\":5705172,\"onlineExpGained\":147.95999999999998,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[5705172,18,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-918072.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0],[0,0,0,1],[0,0,0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"hackDifficulty\":16.962,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.5.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.5.0.6\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"1.5.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"1.5.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"1.5.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"1.5.0.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 10.548 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,165,076.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.531 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,211,112.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.708 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,665,288.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.463 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,213,640.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.342 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,126,251.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.985 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,063,098.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.694 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,772,171.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.454 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,272,492.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.063 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $747,306.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.566 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $885,663.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.056 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,328,436.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.652 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $811,260.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.566 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $770,427.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.496 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,084,563.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.826 seconds (t=9)\",\"Script FAILED to hack harakiri-sushi. Gained 18.4950 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.788 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,187,028.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.054 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $584,856.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.419 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,262,160.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.759 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,339,587.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.803 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,194,471.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.393 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $794,790.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.071 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,124,440.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.689 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,472,651.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.208 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,070,368.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.033 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,612,934.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.642 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.412999999999999,\"offlineMoneyMade\":222716.10409812498,\"offlineExpGained\":7.83953408906246,\"onlineRunningTime\":8000.609999994915,\"onlineMoneyMade\":1239502581,\"onlineExpGained\":44572.950000000346,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[1239502581,5409,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"hackDifficulty\":10.084,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\",\"95.5.2.7\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"31.5.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.5.3.7\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"31.5.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"31.5.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"31.5.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"31.5.3.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.642 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":6.410000000000004,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":9,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"hackDifficulty\":8.672,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"62.4.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.4.9.6\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.4.9.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.4.9.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"62.4.9.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 42.256 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.144097%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 51.360 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":78.41000000000058,\"onlineMoneyMade\":0,\"onlineExpGained\":147.95999999999998,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[0,0,18,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159311.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,28,8,44,14,29,8,26],[11,34,47,15,31,49,21,46],[40,25,9,15,12,27,39,17]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"hackDifficulty\":9.991999999999999,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"55.7.5.3\",\"9.2.7.2\",\"15.8.6.4\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"43.1.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.1.6.3\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.1.6.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.1.6.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"43.1.6.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"43.1.6.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.825 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,335,510.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.488 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,468,942.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.067 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,096,046.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.882 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,209,690.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.699 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,599,064.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.765 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,843,533.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.428 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $962,784.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.143 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,582,018.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.178 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,726,299.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.921 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $869,985.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.055 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,098,386.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.958 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,032,714.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.772 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,040,094.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.861 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $683,325.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.387 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $975,708.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.645 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,021,752.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.214 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $918,108.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.172 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $452,844.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $997,587.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.945 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,160,109.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.202 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $988,299.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.563 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,839,861.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.058 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,829,258.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.899 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,186,721.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.349 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,041,352.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.451 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":477392.159655,\"offlineExpGained\":16.427682843750304,\"onlineRunningTime\":14573.210000017896,\"onlineMoneyMade\":2221307271,\"onlineExpGained\":77845.45500000057,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2221307271,9459,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":34298063,\"moneyMax\":68750000,\"hackDifficulty\":7.234,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"61.4.5.8\",\"73.5.8.2\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"80.9.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.9.0.1\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"80.9.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"80.9.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"80.9.0.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 39.412 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.794525%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 43.078 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.094986%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 52.207 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":114.41000000000109,\"onlineMoneyMade\":0,\"onlineExpGained\":295.91999999999996,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[0,0,36,0]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-682450.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[170,158,140,52,164,150,32,116,60,140,194,122,174,72,98,190,90,29,166,7,180,87,30,57,62,90,78,72,193,28,34,16,117,1,161,53,44]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":61994207,\"moneyMax\":125000000,\"hackDifficulty\":8.258,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"87.0.9.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"9.2.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.2.7.2\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.2.7.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"9.2.7.2\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 36.645 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.810783%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.204 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.190 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.700 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.413 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.683010%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.003 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.580018%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.827 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009936%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.608 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010058%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.286 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009994%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.347 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009936%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.684 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.628114%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.819 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.850967%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.934 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.975 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.212175%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 45.761 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009912%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.547 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009927%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.658 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.377715%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 44.759 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009942%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.162 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009999%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.471 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.823062%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.011 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010003%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.699 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.954 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.640841%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 49.253 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.002311%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.806 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009905%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.400 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":0,\"offlineExpGained\":21.4534601999999,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":100908.7199999995,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,12276,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-199248.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,0,7,4,0,0,6,5,3,5,5,1,1,8,5,0,0,10],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"hackDifficulty\":13.138,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"62.4.9.6\",\"38.4.9.5\",\"99.7.3.2\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"55.7.5.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.7.5.3\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"55.7.5.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"55.7.5.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"55.7.5.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"55.7.5.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.894 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,680,165.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.706 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,015,342.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.379 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,676,250.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.984 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,226,691.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.437 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,810,376.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.232 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,427,283.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.875 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,320,975.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.821 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,318,498.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.371 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,521,315.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.980 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $840,834.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.395 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,776,654.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.277 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $819,243.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.883 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $967,149.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.393 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $536,958.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.497 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $824,184.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.968 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $921,393.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.674 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $760,050.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.299 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,103,499.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.100 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,284,075.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.161 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,436,355.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.308 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $907,578.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.848 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,535,335.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.309 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,061,935.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.105 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,651,426.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.790 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,144,870.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.395 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":472012.87137749995,\"offlineExpGained\":16.3325877187503,\"onlineRunningTime\":14615.210000018038,\"onlineMoneyMade\":2212887681,\"onlineExpGained\":77383.0800000006,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2212887681,9378,0,0]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"hackDifficulty\":8.687999999999999,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"62.4.9.6\",\"87.0.9.1\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"45.6.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.6.6.2\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"45.6.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"45.6.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"45.6.6.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"45.6.6.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.772 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,488,033.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.846 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,554,893.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.455 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,428,687.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.632 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,426,977.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.347 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,134,071.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.359 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,086,066.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.002 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,083,096.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.852 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,428,263.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.681 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,170,189.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.431 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $633,294.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.721 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,957,329.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.509 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,108,881.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.738 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,059,714.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.685 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $788,904.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.320 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,120,419.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.578 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,118,745.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.006 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,060,335.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.105 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $522,684.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.471 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,124,064.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.810 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,196,226.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.854 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,097,928.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.513 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $711,837.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.122 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,932,821.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.882 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,265,363.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.332 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,158,658.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.434 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":228559.55264625,\"offlineExpGained\":7.983235743749959,\"onlineRunningTime\":8036.409999994882,\"onlineMoneyMade\":1258492977,\"onlineExpGained\":44905.86000000036,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[1258492977,5454,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":69065150.04601382,\"moneyMax\":100000000,\"hackDifficulty\":7.261999999999994,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"73.5.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.5.8.2\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"73.5.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"73.5.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"73.5.8.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 13.903 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,871,928.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.038 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $4,213,566.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 14.492 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,384,514.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.721 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,289,006.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.668 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,701,576.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.303 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,409,678.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.561 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,417,976.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.989 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,287,458.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.088 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,127,214.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.453 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,429,874.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.793 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,581,182.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.837 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,365,596.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.496 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,532,916.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 14.105 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $6,027,732.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 14.724 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $4,773,366.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 16.242 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $6,633,522.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.349 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":228.40999999999556,\"onlineMoneyMade\":47047104,\"onlineExpGained\":2367.36,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[47047104,288,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"hackDifficulty\":9.264,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"43.1.6.3\",\"30.8.5.5\",\"58.0.7.3\",\"42.6.3.8\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"87.0.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.0.9.1\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.0.9.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"87.0.9.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"87.0.9.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 49.113 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.249616%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 49.704 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.788892%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 43.133 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961113%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.980 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":150.41,\"onlineMoneyMade\":0,\"onlineExpGained\":443.87999999999994,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[0,0,54,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-472089.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[91,38,45,64,47,170,171,36,18,29,92,162,128,115,69,92,64,140,86,177,116,90,118,86,21,157,158,93,165,163],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":124486960,\"moneyMax\":250000000,\"hackDifficulty\":5.272,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"55.7.5.3\",\"80.9.0.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"15.8.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.8.6.4\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"15.8.6.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"15.8.6.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"15.8.6.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.738 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,240,054.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.740 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $5,811,552.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.413 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,231,504.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.019 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,365,290.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.471 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $5,418,468.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.266 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,752,578.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.909 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,551,806.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.549 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $7,150,986.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.354 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,276,486.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.962 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,808,658.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.378 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,822,048.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.260 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,761,462.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.865 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,972,764.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.235 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,157,976.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.480 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,771,956.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.951 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,774,134.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.375 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,639,386.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.282 seconds (t=18)\",\"Script FAILED to hack harakiri-sushi. Gained 36.9900 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.083 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,772,450.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.144 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,095,352.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.291 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,905,588.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 13.759 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $7,082,748.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 14.090 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $6,385,158.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 15.982 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $7,458,174.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.637 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $7,047,810.00 and 147.9600 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.361 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":441287.830845,\"offlineExpGained\":14.701706324999925,\"onlineRunningTime\":7598.209999995281,\"onlineMoneyMade\":2469995352,\"onlineExpGained\":85077.00000000052,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[2469995352,10332,0,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-478934.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":449632544,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-393162.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":457818036,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":211,\"moneyAvailable\":1504334300,\"moneyMax\":1504334300,\"hackDifficulty\":15.196000000000002,\"baseDifficulty\":35,\"minDifficulty\":12,\"serverGrowth\":37,\"serversOnNetwork\":[\"62.4.9.6\",\"72.7.9.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"42.6.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.6.3.8\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":270,\"moneyAvailable\":1387631075,\"moneyMax\":1387631075,\"hackDifficulty\":14,\"baseDifficulty\":43,\"minDifficulty\":14,\"serverGrowth\":29,\"serversOnNetwork\":[\"73.5.8.2\",\"11.9.5.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"61.4.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.4.5.8\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.4.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.4.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"61.4.5.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 49.600 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.174285%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 50.879 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961150%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.396 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961128%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 38.803 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961110%. Gained 147.9600 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.056 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":192.4099999999976,\"onlineMoneyMade\":0,\"onlineExpGained\":591.8399999999999,\"threads\":18,\"dataMap\":{\"45.6.6.2\":[0,0,72,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106502.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"89196113202\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"hackDifficulty\":14.442,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"43.1.6.3\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"85.7.1.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.7.1.4\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.7.1.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"85.7.1.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 42.933 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705081%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 38.871 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705122%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.012 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705142%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 41.190 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705154%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 42.144 seconds (t=146)\",\"Available money on harakiri-sushi grown by 25.792314%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 44.120 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.629992%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 46.334 seconds (t=146)\",\"Available money on harakiri-sushi grown by 18.863578%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 52.884 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705766%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 36.576 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705347%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 36.338 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705250%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 34.440 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705147%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 39.713 seconds (t=146)\",\"Available money on harakiri-sushi grown by 7.707405%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.937 seconds (t=146)\",\"Available money on harakiri-sushi grown by 7.810753%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 34.361 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705089%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.518 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705444%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 41.160 seconds (t=146)\",\"Available money on harakiri-sushi grown by 24.087523%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 45.731 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705122%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 35.899 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705193%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 33.591 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.879104%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 45.855 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705488%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 34.370 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.706005%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.939 seconds (t=146)\",\"Available money on harakiri-sushi grown by 18.183681%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 53.997 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705425%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 38.243 seconds (t=146)\",\"Available money on harakiri-sushi grown by 26.705431%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 40.825 seconds (t=146)\",\"Available money on harakiri-sushi grown by 20.902519%. Gained 1,200.1200 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 49.570 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":0,\"offlineExpGained\":83.61186034999977,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":394839.4799999988,\"threads\":146,\"dataMap\":{\"45.6.6.2\":[0,0,48034,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-196041.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,4,4,10,2,3,0,1,1,3,7,8,1,0,4,8,2,2],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":515,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":42,\"serversOnNetwork\":[\"13.4.6.3\",\"49.6.0.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"60.4.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.4.4.0\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"60.4.4.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"60.4.4.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"60.4.4.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.755 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,543,194.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.829 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,651,166.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.438 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,482,408.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.615 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,097,757.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.489 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,514,312.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.283 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,277,991.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.926 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,180,206.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.566 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,199,257.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.388 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,467,027.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.997 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $867,771.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.532 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $913,293.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.707 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,527,444.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.586 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $860,256.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.891 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $760,212.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.337 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,081,179.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.595 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,077,003.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.023 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,021,680.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.122 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $503,712.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.488 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,082,025.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.827 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,219,806.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.012 seconds (t=9)\",\"Script FAILED to hack harakiri-sushi. Gained 18.4950 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.513 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $686,484.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.139 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,729,376.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.916 seconds (t=9)\",\"Script FAILED to hack harakiri-sushi. Gained 18.4950 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.349 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,928,429.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.468 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":463935.41973375,\"offlineExpGained\":16.10911417500029,\"onlineRunningTime\":14336.410000017095,\"onlineMoneyMade\":2177924697,\"onlineExpGained\":76550.80500000063,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2177924697,9288,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1052,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"hackDifficulty\":57,\"baseDifficulty\":57,\"minDifficulty\":19,\"serverGrowth\":54,\"serversOnNetwork\":[\"59.2.3.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"1.7.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.7.7.9\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-799731.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1311610182\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":731,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"hackDifficulty\":42,\"baseDifficulty\":42,\"minDifficulty\":14,\"serverGrowth\":43,\"serversOnNetwork\":[\"18.4.7.3\",\"94.2.7.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"15.5.1.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.5.1.8\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"15.5.1.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"15.5.1.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 45.202 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009902%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.933 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009910%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.248 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.416038%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 44.743 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.418389%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 44.731 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.022124%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 46.976 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.920084%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.334 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009930%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.625 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010013%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.028 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009948%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.845 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009922%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.070 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.263813%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.331 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.763948%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.944 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009903%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.021 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009902%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.201 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009918%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.316 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.138421%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 46.170 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.506 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.231 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.795 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.116 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.862278%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 47.755 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.707963%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.784 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.703558%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.815 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009921%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.331 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009906%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.896 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":0,\"offlineExpGained\":21.3013079999999,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":100020.95999999951,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,12168,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":530,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"27.8.3.7\",\"63.1.6.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"27.1.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.1.2.9\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.1.2.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"27.1.2.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"27.1.2.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.789 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,509,543.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.004 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,462,130.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.472 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,376,910.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.649 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,344,942.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.566 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,989,701.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.118 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,559,808.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.833 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,129,527.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.095 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,095,947.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.749 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,011,366.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.499 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $861,237.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.901 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,980,684.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.226 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $912,600.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.831 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,024,092.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.201 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $600,804.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.446 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $918,000.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.917 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $921,312.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.341 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $850,644.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.248 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,042,524.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.806 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,282,851.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.828 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,583,676.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.222 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $988,164.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.725 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,964,240.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.496 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,307,941.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.947 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,733,569.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.511 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,239,406.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.922 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":474993.30993,\"offlineExpGained\":16.327832962500302,\"onlineRunningTime\":14537.210000017776,\"onlineMoneyMade\":2218471515,\"onlineExpGained\":77346.09000000061,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2218471515,9378,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":346,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"99.7.3.2\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"72.7.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.7.9.3\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"72.7.9.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"72.7.9.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 42.211 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.802249%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.860 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.031128%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 46.921 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.819723%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.792 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.966603%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.132 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.158528%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 46.156 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.628887%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 40.413 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009904%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.428 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.722723%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.131 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009930%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.693 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.010014%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.120 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009968%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.236 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009937%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 39.628 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.013 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.181972%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 45.920 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.632701%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 43.570 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009925%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.967 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009950%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.495 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.009953%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.538 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.239431%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 45.508 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.733433%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 41.130 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.454105%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 42.622 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.726564%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 48.669 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.582283%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 49.686 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.388874%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 51.141 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.064681%. Gained 295.9200 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 46.513 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":7.414,\"offlineMoneyMade\":0,\"offlineExpGained\":21.3013079999999,\"onlineRunningTime\":14957.610000019216,\"onlineMoneyMade\":0,\"onlineExpGained\":99725.03999999951,\"threads\":36,\"dataMap\":{\"45.6.6.2\":[0,0,12132,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":205,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"15.8.6.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"1.4.7.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.4.7.4\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"1.4.7.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"1.4.7.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"1.4.7.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.877 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,563,813.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.411 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,129,075.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.362 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,739,025.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.967 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,272,384.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.420 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,962,728.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.207 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,504,062.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.850 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,157,589.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.565 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,925,334.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.869 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $906,318.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.551 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $813,132.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.093 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,593,747.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.329 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $735,489.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 15.934 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $799,794.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.479 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,124,289.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.809 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $925,911.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.788 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,231,965.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.037 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $606,897.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 12.402 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,311,237.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.742 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,390,455.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.785 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,238,985.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 13.376 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $824,175.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.054 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,946,339.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 14.394 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,561,733.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 16.191 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,013,452.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.876 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,712,339.00 and 73.9800 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.625 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":7.415,\"offlineMoneyMade\":467449.73546406254,\"offlineExpGained\":16.187376281250295,\"onlineRunningTime\":14363.010000017184,\"onlineMoneyMade\":2177274969,\"onlineExpGained\":76772.74500000062,\"threads\":9,\"dataMap\":{\"45.6.6.2\":[2177274969,9324,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":532,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"63.1.6.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"95.5.2.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.5.2.7\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"95.5.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"95.5.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"95.5.2.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"95.5.2.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.797 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $663,320.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.080 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,054,556.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.480 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $589,792.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.657 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $724,504.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.130 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,269,364.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.215 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $644,584.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.858 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $532,072.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.523 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,577,356.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.258 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $739,848.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.928 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $373,032.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.062 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $920,216.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.034 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $442,944.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.780 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $499,524.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.150 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $292,664.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.394 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $436,448.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.793 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $449,808.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.290 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $378,868.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.196 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $470,740.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 14.788 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $502,172.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.461 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $715,300.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.205 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $423,496.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 13.570 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,070,960.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 12.923 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,314,048.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 15.515 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $847,628.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 16.370 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,385,156.00 and 32.8800 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.471 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":384.4099999999867,\"onlineMoneyMade\":21527344,\"onlineExpGained\":953.5199999999999,\"threads\":4,\"dataMap\":{\"45.6.6.2\":[21527344,116,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":54,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"1.5.0.6\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"75.7.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"75.7.3.2\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"95.3.1.1\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.6.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.6.0.4\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"78.9.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"78.9.0.6\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"97.3.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.3.1.6\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":102.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"97.3.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"97.3.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"97.3.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"97.3.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"97.3.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"97.3.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"the-hub\",1],\"server\":\"97.3.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server the-hub in 489.943 seconds (t=25)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":276.60999999999285,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":25,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"40.6.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.6.5.8\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":188.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"40.6.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"40.6.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"40.6.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"40.6.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"40.6.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"40.6.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"phantasy\",1],\"server\":\"40.6.5.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server phantasy in 107.178 seconds (t=46)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":84.41000000000066,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":46,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.3.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.3.2.2\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":258.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"1.3.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"1.3.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"1.3.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"1.3.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"1.3.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"1.3.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"silver-helix\",1],\"server\":\"1.3.2.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server silver-helix in 206.544 seconds (t=63)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":84.41000000000066,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":63,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"66.7.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.7.9.2\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":287,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"66.7.9.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"66.7.9.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"66.7.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"66.7.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"66.7.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"66.7.9.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"comptek\",1],\"server\":\"66.7.9.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server comptek in 760.515 seconds (t=70)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":246.60999999999453,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":70,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"35.2.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.2.2.3\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":262.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"35.2.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"35.2.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"35.2.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"35.2.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"35.2.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"35.2.2.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"omega-net\",1],\"server\":\"35.2.2.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server omega-net in 324.119 seconds (t=64)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":24.409999999999947,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":64,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"65.7.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.7.3.6\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":3070.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"65.7.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"65.7.3.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"65.7.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"65.7.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"65.7.3.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"65.7.3.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"johnson-ortho\",1],\"server\":\"65.7.3.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server johnson-ortho in 351.107 seconds (t=749)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":342.6099999999891,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":749,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"83.3.8.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.3.8.3\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1466.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"83.3.8.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"83.3.8.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"83.3.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"83.3.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"83.3.8.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"83.3.8.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"crush-fitness\",1],\"server\":\"83.3.8.3\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack crush-fitness in 94.675 seconds (t=362)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":60.41000000000032,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":362,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.8.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.8.8.2\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2353.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"12.8.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"12.8.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"12.8.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"12.8.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"12.8.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"12.8.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"max-hardware\",1],\"server\":\"12.8.8.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server max-hardware in 47.329 seconds (t=574)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":24.409999999999947,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":574,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"57.6.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"57.6.0.5\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":364.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.6.0.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"57.6.0.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"57.6.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"57.6.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"57.6.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"57.6.0.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"iron-gym\",1],\"server\":\"57.6.0.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server iron-gym in 156.447 seconds (t=89)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":24.409999999999947,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":89,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.5.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.5.6.7\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":164,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"70.5.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"70.5.6.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"70.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"70.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"70.5.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"70.5.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zer0\",1],\"server\":\"70.5.6.7\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zer0 in 90.137 seconds (t=40)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":6.410000000000004,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":40,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"45.4.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.4.7.0\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1148,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"45.4.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"45.4.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"45.4.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"45.4.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"45.4.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"45.4.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"foodnstuff\",1],\"server\":\"45.4.7.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server foodnstuff in 20.599 seconds (t=280)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":18.409999999999968,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":280,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"85.5.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.5.7.8\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":582.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"85.5.7.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"85.5.7.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"85.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"85.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"85.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"85.5.7.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"sigma-cosmetics\",1],\"server\":\"85.5.7.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server sigma-cosmetics in 23.775 seconds (t=142)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":12.40999999999999,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":142,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.1.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.1.6.5\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":303.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.1.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.1.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"26.1.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.1.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.1.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"26.1.6.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"joesguns\",1],\"server\":\"26.1.6.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server joesguns in 27.222 seconds (t=74)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":12.40999999999999,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":74,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.4.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.4.8.6\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2841.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.4.8.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.4.8.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"86.4.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.4.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.4.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"86.4.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"neo-net\",1],\"server\":\"86.4.8.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server neo-net in 46.552 seconds (t=693)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":18.409999999999968,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":693,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"64.1.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"64.1.1.6\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2816.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"64.1.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"64.1.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"64.1.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"64.1.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"64.1.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"64.1.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"nectar-net\",1],\"server\":\"64.1.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server nectar-net in 26.237 seconds (t=687)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":24.409999999999947,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":687,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"12.5.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.5.7.8\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":309.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"12.5.7.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"12.5.7.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"12.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"12.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"12.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"12.5.7.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"hong-fang-tea\"],\"server\":\"12.5.7.8\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot15/hong-fang-tea: weaken by 3.687999999999999\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3.210000000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"hong-fang-tea\",1],\"server\":\"12.5.7.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server hong-fang-tea in 43.734 seconds (t=74)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":0.41000000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":74,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"45.0.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.0.9.4\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.8.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.8.9.0\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"55.3.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.3.8.7\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"28.2.5.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"28.2.5.7\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"90.2.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.2.5.5\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.7.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.7.3.0\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.5.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.5.5.5\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.6.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.6.0.1\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"89.5.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.5.2.2\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":808.4936769230764,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":763.9520564102559,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":772.3697599999999,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":777.2862564102563,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":18072.110989743152,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":800.998865934066,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":765.2726717948713,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"84.9.3.4\",\"BitRunners Server\":\"15.5.1.8\",\"The Black Hand Server\":\"27.1.2.9\",\"NiteSec Server\":\"72.7.9.3\",\"The Dark Army Server\":\"1.4.7.4\",\"CyberSec Server\":\"95.5.2.7\",\"Daedalus Server\":\"75.7.3.2\",\"w0r1d_d43m0n\":\"4.6.0.4\",\"Darkweb Server\":\"78.9.0.6\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":20842.51152941093,\"playerShares\":546038,\"playerAvgPx\":20021.933840763006,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":20.61151284482576,\"cap\":92474400,\"totalShares\":114000000,\"maxShares\":22800000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":31210.185271163216,\"playerShares\":365394,\"playerAvgPx\":31090.985993664613,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":17.7373229173528,\"cap\":206098967,\"totalShares\":70900000,\"maxShares\":14200000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":22060.890738073373,\"playerShares\":518305,\"playerAvgPx\":20590.58988826075,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":11.128417815088365,\"cap\":194324228,\"totalShares\":81200000,\"maxShares\":16200000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":24044.55642459234,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":12.869737958939668,\"cap\":59249487,\"totalShares\":72900000,\"maxShares\":14600000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":38422.19443744157,\"playerShares\":300650,\"playerAvgPx\":38165.27020297994,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":12.484545429865468,\"cap\":653483403,\"totalShares\":47000000,\"maxShares\":9400000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":143864.19243821723,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":false,\"otlkMag\":15.961523978599166,\"cap\":1538972643,\"totalShares\":26000000,\"maxShares\":5200000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":18214.068457015394,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":9.310811898846755,\"cap\":407918962,\"totalShares\":112700000,\"maxShares\":22500000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":43413.53587942718,\"playerShares\":264915,\"playerAvgPx\":43579.019110383655,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":16.04722046960953,\"cap\":618290979,\"totalShares\":61800000,\"maxShares\":12400000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":21298.421073952897,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":5.80116286099519,\"cap\":147445441,\"totalShares\":49500000,\"maxShares\":9900000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":19733.83324634083,\"playerShares\":508238,\"playerAvgPx\":19682.923712427477,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.63760389668568,\"cap\":70224126,\"totalShares\":48600000,\"maxShares\":9700000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":13490.060248009717,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":9.566217227075326,\"cap\":246681695,\"totalShares\":70500000,\"maxShares\":14100000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":12108.413193616752,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":7.13101092148664,\"cap\":113786834,\"totalShares\":91600000,\"maxShares\":18300000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19368.386253894754,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":8.512124482934082,\"cap\":237831962,\"totalShares\":58900000,\"maxShares\":11800000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":21949.27013980539,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":9.482828192999639,\"cap\":402184695,\"totalShares\":39500000,\"maxShares\":7900000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":10329.230881507327,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":5.952110094813878,\"cap\":89384124,\"totalShares\":64700000,\"maxShares\":12900000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13627.917823077523,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":4.181582786946261,\"cap\":236416463,\"totalShares\":47200000,\"maxShares\":9400000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":22852.8257010977,\"playerShares\":498778,\"playerAvgPx\":22776.578994195377,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":10.446070656747498,\"cap\":166960499,\"totalShares\":39100000,\"maxShares\":7800000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":17632.54682460105,\"playerShares\":653064,\"playerAvgPx\":17395.630715763527,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":10.262678301823467,\"cap\":84254079,\"totalShares\":38000000,\"maxShares\":7600000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":26758.112436461368,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.338944836639251,\"cap\":348065436,\"totalShares\":24100000,\"maxShares\":4800000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3401.726520281536,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":false,\"otlkMag\":1.0281847418353747,\"cap\":39833882,\"totalShares\":89300000,\"maxShares\":17900000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7209.47218107973,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":true,\"otlkMag\":6.36325208205777,\"cap\":115325117,\"totalShares\":41400000,\"maxShares\":8300000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2642.341162772058,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":0.9926704971252657,\"cap\":52470898,\"totalShares\":69000000,\"maxShares\":13800000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5603.098747434633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.84,\"b\":false,\"otlkMag\":13.056106208595027,\"cap\":69775832,\"totalShares\":52800000,\"maxShares\":10600000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5724.580069102309,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":false,\"otlkMag\":2.479400547158259,\"cap\":70765566,\"totalShares\":31700000,\"maxShares\":6300000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4494.870464391101,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":3.8008256865256342,\"cap\":71275593,\"totalShares\":38100000,\"maxShares\":7600000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3857.3587651861335,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.21,\"b\":false,\"otlkMag\":0.7681056897703293,\"cap\":74607393,\"totalShares\":13300000,\"maxShares\":2700000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1823.2927711806672,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":false,\"otlkMag\":0.3911373433411497,\"cap\":50651017,\"totalShares\":26100000,\"maxShares\":5200000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1902.150771432123,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":1.0461698644817312,\"cap\":18520953,\"totalShares\":24800000,\"maxShares\":5000000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1842.2545539223263,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.8,\"b\":false,\"otlkMag\":0.8889969620356539,\"cap\":12978603,\"totalShares\":16400000,\"maxShares\":3300000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":682.2471117320061,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.7,\"b\":true,\"otlkMag\":0.4205550104151212,\"cap\":13136735,\"totalShares\":29900000,\"maxShares\":6000000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1282.1408071701524,\"playerShares\":9422964,\"playerAvgPx\":1083.5070988354523,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":16.840578743929385,\"cap\":6804512,\"totalShares\":149300000,\"maxShares\":29900000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":22819.33520602381,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":8.06517760458434,\"cap\":534783436,\"totalShares\":15200000,\"maxShares\":3000000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":19044.695899143375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":9.868373186957554,\"cap\":225902296,\"totalShares\":21100000,\"maxShares\":4200000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":12,\"lastUpdate\":1551958084851}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.44.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}