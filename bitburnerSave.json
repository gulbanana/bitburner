{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":498,\"hp\":25,\"max_hp\":25,\"strength\":155,\"defense\":155,\"dexterity\":163,\"agility\":171,\"charisma\":125,\"intelligence\":0,\"hacking_chance_mult\":1.183316,\"hacking_speed_mult\":1.21881548,\"hacking_money_mult\":1.183316,\"hacking_grow_mult\":1.183316,\"hacking_exp\":143993658.8062211,\"strength_exp\":30877.55420243855,\"defense_exp\":31007.718962438576,\"dexterity_exp\":30880.157497638553,\"agility_exp\":30877.55420243855,\"charisma_exp\":10050.802108160617,\"intelligence_exp\":0,\"hacking_mult\":1.2424818,\"strength_mult\":1.183316,\"defense_mult\":1.183316,\"dexterity_mult\":1.2424818,\"agility_mult\":1.30460589,\"charisma_mult\":1.3016476000000001,\"hacking_exp_mult\":1.3016476000000001,\"strength_exp_mult\":1.3016476000000001,\"defense_exp_mult\":1.3016476000000001,\"dexterity_exp_mult\":1.3016476000000001,\"agility_exp_mult\":1.3016476000000001,\"charisma_exp_mult\":1.3016476000000001,\"company_rep_mult\":1.9759010568000002,\"faction_rep_mult\":1.49689474,\"money\":\"1672566577266.9074203\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Aevum\",\"location\":\"NetLink Technologies\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"30.2.5.6\",\"6.4.5.5\",\"61.4.8.2\",\"53.2.9.2\",\"32.1.0.6\",\"42.1.6.5\",\"39.0.1.7\",\"22.8.7.1\",\"24.1.1.6\",\"13.8.1.2\",\"5.9.1.8\",\"97.3.5.4\",\"99.1.6.2\",\"92.6.1.1\",\"73.9.5.3\",\"36.4.1.0\",\"34.9.3.2\",\"52.3.2.0\",\"13.3.2.7\",\"83.9.2.3\",\"87.9.6.1\",\"8.3.2.9\",\"7.0.4.8\",\"41.6.9.7\",\"20.0.5.8\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":1606915712.2706733,\"onlineTimeSeconds\":57296.99999978697,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":1607161256.6988583,\"onlineTimeSeconds\":56906.99999979442,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":1606566871.7996144,\"onlineTimeSeconds\":56636.999999799584,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":1606167581.0107143,\"onlineTimeSeconds\":56366.999999804735,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":1605234203.2223768,\"onlineTimeSeconds\":56036.999999811036,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":1608984028.8575745,\"onlineTimeSeconds\":56006.99999981162,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":1607695954.9793828,\"onlineTimeSeconds\":55946.99999981275,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":1600633173.2056966,\"onlineTimeSeconds\":55946.99999981275,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":1599881127.562108,\"onlineTimeSeconds\":55916.999999813335,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":1599676314.9116607,\"onlineTimeSeconds\":55676.99999981792,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":1598998513.5939147,\"onlineTimeSeconds\":55586.999999819636,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":1597645354.6857765,\"onlineTimeSeconds\":55286.99999982537,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":1597238006.4187071,\"onlineTimeSeconds\":55166.999999827654,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":1597091374.691498,\"onlineTimeSeconds\":55106.999999828804,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":1595902892.5955596,\"onlineTimeSeconds\":55046.99999982995,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":1593035627.0301127,\"onlineTimeSeconds\":54956.99999983167,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":1591293901.0527709,\"onlineTimeSeconds\":54836.999999833955,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":1582003345.2756023,\"onlineTimeSeconds\":54446.999999841406,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":1571690932.6340466,\"onlineTimeSeconds\":54026.999999849424,\"moneyGainRatePerSecond\":29195.910411179775}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":1539403314.3387823,\"onlineTimeSeconds\":52796.79999987293,\"moneyGainRatePerSecond\":29195.910411179775}}],\"factions\":[\"CyberSec\",\"Netburners\",\"Sector-12\",\"Slum Snakes\",\"Tian Di Hui\",\"Tetrads\",\"NiteSec\",\"Aevum\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":14,\"karma\":-42,\"crime_money_mult\":1.3016476000000001,\"crime_success_mult\":1.183316,\"isWorking\":true,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"Aevum\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.19524714,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.7798591303901539,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":12.30056981999999,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":49.131125214579626,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":12600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3016476000000001,\"hacknet_node_money_mult\":2.9844338878749994,\"hacknet_node_purchase_cost_mult\":0.6298122599999999,\"hacknet_node_ram_cost_mult\":0.8232839999999999,\"hacknet_node_core_cost_mult\":0.8232839999999999,\"hacknet_node_level_cost_mult\":0.6997914,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1552026563497,\"totalPlaytime\":3156834600,\"playtimeSinceLastAug\":57309400,\"playtimeSinceLastBitnode\":158651200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":820037.988,\"gang\":0,\"hacking\":925772645983.6567,\"hacknetnode\":31913219489.83081,\"infiltration\":0,\"stock\":6734626702736.091,\"total\":7692306447463.426,\"work\":-6940640}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":1289837.988,\"gang\":0,\"hacking\":1160150318702.6572,\"hacknetnode\":42937738065.35354,\"infiltration\":0,\"stock\":6969498859934.905,\"total\":8172573604284.242,\"work\":-14602080}},\"scriptProdSinceLastAug\":7660240768291.091,\"total_money\":\"275820126137160696.69\",\"lifetime_money\":\"275820126137160696.69\",\"totalHacknetNodeProduction\":0,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":131072,\"ramUsed\":8082.15,\"cpuCores\":3,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let loop = !ns.args.includes('noloop');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\r\\n\\r\\n    do {\\r\\n        await run(ns, log);\\r\\n        await ns.sleep(30000);\\r\\n    } while (loop)\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {Logger} log\\r\\n */\\r\\nasync function run(ns, log) {\\r\\n    let purchased = true;\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\r\\n            cash = cash - program.price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('loading costs');\\r\\n    let numNodes = ns.hacknet.numNodes();\\r\\n    let maxProduction = 0;\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\r\\n    }\\r\\n\\r\\n    let costCap = (maxProduction * 60 * 60 * 1) || Infinity;\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} uncappedCost\\r\\n     */\\r\\n    function getCappedCost(name, uncappedCost) {\\r\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\r\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\r\\n            return Infinity;\\r\\n        } else {\\r\\n            return uncappedCost;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let costs = [];\\r\\n    for (let i = 0; i < numNodes; i++) {\\r\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\r\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\r\\n    }\\r\\n\\r\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n\\r\\n    log.debug('begin purchase run');\\r\\n    while (purchased) {\\r\\n        purchased = false;\\r\\n\\r\\n        /** @type {number} */\\r\\n        let minCost = Math.min.apply(null, costs);\\r\\n        /** @type {number} */\\r\\n        let minIdx = costs.indexOf(minCost);\\r\\n        \\r\\n        if (buyNodeCost < minCost) {\\r\\n            if (buyNodeCost <= cash) {\\r\\n                let newIdx = numNodes;\\r\\n                \\r\\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\r\\n                ns.hacknet.purchaseNode();\\r\\n                cash = cash - buyNodeCost;\\r\\n                log.info(`remaining budget: ${format.money(cash)}`);\\r\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\r\\n                \\r\\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\r\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\r\\n                \\r\\n                numNodes = numNodes + 1;\\r\\n                purchased = true;\\r\\n            }\\r\\n        } else if (minCost <= cash) {\\r\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\r\\n            let itemIdx = minIdx - (nodeIdx * 3);\\r\\n            \\r\\n            let cost = minCost;\\r\\n            let count = 1;\\r\\n            \\r\\n            let getF;\\r\\n            let buyF;\\r\\n            let n;\\r\\n            if (itemIdx == 0) {\\r\\n                n = 'level'\\r\\n                getF = ns.hacknet.getLevelUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeLevel;\\r\\n            } else if (itemIdx == 1) {\\r\\n                n = 'ram';\\r\\n                getF = ns.hacknet.getRamUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeRam;\\r\\n            } else if (itemIdx == 2) {\\r\\n                n = 'core';\\r\\n                getF = ns.hacknet.getCoreUpgradeCost;\\r\\n                buyF = ns.hacknet.upgradeCore;\\r\\n            }\\r\\n\\r\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\r\\n                count = count + 1;\\r\\n                cost = cost + getF(nodeIdx, count);\\r\\n            }\\r\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\r\\n            buyF(nodeIdx, count);\\r\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\r\\n            \\r\\n            if (count == 1) {\\r\\n                cash = cash - cost;               \\r\\n            } else {\\r\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            }\\r\\n            log.info(`remaining budget: ${format.money(cash)}`);\\r\\n            \\r\\n            purchased = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('purchase run complete');\\r\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nconst LARGEST_USEFUL_SERVER = 16384;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number' || !Number.isNaN(parseInt(ns.args[0]));\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? parseInt(ns.args[0]) : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    let maxPurchaseRam = Math.min(ns.getPurchasedServerMaxRam(), LARGEST_USEFUL_SERVER);\\r\\n    for (let power = 0; Math.pow(2, power) <= maxPurchaseRam; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (ram > minRam || existingServers.length < limit) {\\r\\n        let processes = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                let ps = ns.ps(existingServers[i]);\\r\\n                if (ps.length > 0) {\\r\\n                    processes.push(existingServers[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processes.length > 0) {\\r\\n            if (dryRun) {\\r\\n                log.info('scripts running on existing servers, continuing dry run');    \\r\\n            } else {\\r\\n                log.info('scripts running on existing servers, exit');\\r\\n                ns.exit();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.2,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: false });\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    log.info(`copy scripts to ${host}`);\\r\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\r\\n\\r\\n    if (ns.args.length > 1) {\\r\\n        let target = ns.args[1];\\r\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\r\\n        worker.enrol(ns);\\r\\n\\r\\n        log.info(`execute attack on ${target}`);\\r\\n        await ns.exec('ms-control.js', host, 1, target);\\r\\n    }\\r\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    function getFreeRam() {\\r\\n        let ram = ns.getServerRam(ns.getHostname())\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of world.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    let top = ns.ps(ns.getHostname()).filter(p => p.filename == 'dh-control.js');\\r\\n    if (top.length > 0) {\\r\\n        let excludedTarget = top[0].args[0];\\r\\n        log.info(`${excludedTarget.padEnd(20)} ignored - DH victim`);\\r\\n        targets.splice(targets.findIndex(t => t.name == excludedTarget), 1);\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----')\\r\\n\\r\\n        let req = ns.getScriptRam('ms-setup.js');\\r\\n        if (getFreeRam() < req) {\\r\\n            log.error('insufficient ram to run ms-setup.js');\\r\\n        }\\r\\n\\r\\n        let bots = ns.getPurchasedServers()\\r\\n            .filter(b => ns.ps(b).length == 0) //ignore busy\\r\\n            .filter(b => ns.getServerRam(b)[0] >= 16384) // ignore too small\\r\\n            .sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of world.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            log.info(`run ms-setup.js ${bots[i]} ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n\\r\\n            while (getFreeRam() < req) {\\r\\n                await ns.sleep(1 * 1000);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.85,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let worker of world.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----');\\r\\n        log.info(`run dh-control.js ${targets[0].name}`)\\r\\n        await ns.exec('dh-control.js', ns.getHostname(), 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":8.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args.length == 0 ? 'foodnstuff' : ns.args[0];\\r\\n\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n    for (let stock of market.getAll(ns)) {\\r\\n        lastAssets = lastAssets + stock.position.shares * stock.price;\\r\\n    }\\r\\n\\r\\n    let assetWindow = new SlidingWindow(6);\\r\\n    let timeWindow = new SlidingWindow(6);\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            assets = 0;\\r\\n            for (let stock of market.getAll(ns)) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            assetWindow.reset();\\r\\n            timeWindow.reset();\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n\\r\\n            assetWindow.push(assetChange);\\r\\n            timeWindow.push(timeChange);\\r\\n\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, lastAssets + assetWindow.average())}, ${format.money(assetWindow.average()/timeWindow.average())}/sec`);\\r\\n        }\\r\\n\\r\\n        lastAssets = assets;\\r\\n        lastTime = time;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(5000);\\r\\n        tick();\\r\\n    }\\r\\n} \\r\\n\\r\\nclass SlidingWindow {\\r\\n    /** @param {number} size */\\r\\n    constructor(size) {\\r\\n        this.size = size;\\r\\n        /** @type {number[]} */\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    /** @param {number} value */\\r\\n    push(value) {\\r\\n        if (this.values.length < this.size) {\\r\\n            this.values.push(value);\\r\\n        } else {\\r\\n            for (let i = 0; i < this.size-1; i++) {\\r\\n                this.values[i] = this.values[i+1];\\r\\n            }\\r\\n            this.values[this.size-1] = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    average() {\\r\\n        let sum = this.values.reduce((a, b) => a + b, 0);\\r\\n        return sum / this.values.length;\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = `${path}; connect ${p.name}`;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\n//import { LifeL0 as Life } from './lib-life-L0.js';\\r\\n//import { LifeL1 as Life } from './lib-life-L1.js';\\r\\n//import { LifeL2 as Life } from './lib-life-L2.js';\\r\\nimport { LifeL3 as Life } from './lib-life-L3.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n    let life = new Life(ns, log);\\r\\n\\r\\n    while (true) {\\r\\n        let nextTick = await life.tick();\\r\\n        await ns.sleep(nextTick);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    //console.log(ns.getBitNodeMultipliers())\\n    console.log(ns.getCharacterInformation())\\n    console.log(ns.getOwnedAugmentations())\\n}\",\"ramUsage\":8.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, {});\\r\\n\\r\\n    let facsByRep = FactionWithAugs.getAll(ns)\\r\\n        .sort((a, b) => b.reputation - a.reputation);\\r\\n\\r\\n    /** @type {{[key: string]: FactionWithAugs}} */\\r\\n    let facsByName = {};\\r\\n    for (let f of facsByRep) {\\r\\n        facsByName[f.name] = f;\\r\\n    }\\r\\n\\r\\n    let augsByPrice = facsByRep\\r\\n        .map(f => f.augmentations)\\r\\n        .reduce((a, b) => a.concat(b), [])\\r\\n        .filter(a => !a.owned)\\r\\n        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n    ns.tprint('----- LOCKED -----');\\r\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\r\\n    for (let aug of groupAugs(locked)) {\\r\\n        let facs = aug.factions.map(name => {\\r\\n            let f = facsByName[name];\\r\\n            if (f.favor + f.favorGain >= FAVOUR_MAX) {\\r\\n                if (f.favor >= FAVOUR_MAX) {\\r\\n                    return `${name} (donate)`;\\r\\n                } else {\\r\\n                    return `${name} (reset)`;\\r\\n                }\\r\\n            } else {\\r\\n                let diff = Math.floor(aug.requiredReputation - f.reputation);\\r\\n                return `${name} (+${diff})`;\\r\\n            }\\r\\n        });\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${facs}]`)\\r\\n    }\\r\\n\\r\\n    ns.tprint('----- UNLOCKED -----');\\r\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\r\\n    for (let aug of groupAugs(unlocked)) {\\r\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(50)} [${aug.factions}]`)\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {Augmentation[]} augs */\\r\\nfunction groupAugs(augs) {\\r\\n    /** @type {{name: string, factions: string[], price: number, requiredReputation: number}[]} */\\r\\n    let augsWithFacs = [];\\r\\n    for (let a of augs) {\\r\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\r\\n            augsWithFacs[a.name] = {\\r\\n                factions: [],\\r\\n                name: a.name,\\r\\n                price: a.price,\\r\\n                requiredReputation: a.requiredReputation\\r\\n            };\\r\\n            augsWithFacs.push(augsWithFacs[a.name]);\\r\\n        } \\r\\n\\r\\n        augsWithFacs[a.name].factions.push(a.faction);\\r\\n    }\\r\\n    return augsWithFacs;\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { enrol } from './lib-world.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport const TICK_SECONDS =             20;\\r\\nconst STOCK_MARKET_MIN =         100000000;\\r\\nconst HACKNET_BUYS_MAX =       10000000000;\\r\\nconst PURCHASED_SERVER_PRICE = 22528000000;\\r\\nconst PURCHASED_SERVER_RAM =         16384;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.lastBots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n        this.beganFarm = false;\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n        log.debug('market access: ' + this.marketAccess);\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickAcceptInvites() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / (this.nextTickLength / 1000);\\r\\n        this.nextTickLength = TICK_SECONDS * 1000;\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickAcceptInvites();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n        return this.nextTickLength;\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.shouldBuyNodes()) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // once able to buy good enough servers for MS, switch to buying those\\r\\n        let bots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= PURCHASED_SERVER_RAM).length;\\r\\n        let botCost = this.ns.getPurchasedServerCost(PURCHASED_SERVER_RAM);\\r\\n        let botLimit = this.ns.getPurchasedServerLimit();\\r\\n        if (this.cash >= botCost && bots < botLimit) {\\r\\n            this.log.info(`${bots} ${format.ram(PURCHASED_SERVER_RAM)} servers owned; ordering a new one for ${format.money(botCost)}`);\\r\\n            await this.ns.exec('buy-servers.js', this.ns.getHostname(), 1, [bots+1])\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (bots == 0) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                await this.dhStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) { // based on an msRunning check, but only once at init startup\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.skill / this.lastEval > 1.1 || bots > this.lastBots) {\\r\\n                if (this.skill / this.lastEval > 1.1) {\\r\\n                    this.log.debug(`skill ${this.skill} / lastEval ${this.lastEval} > 1.1`);\\r\\n                    await this.msStop();\\r\\n                    await this.ns.sleep(10 * 1000);    \\r\\n                }\\r\\n                \\r\\n                if (bots > this.lastBots) {\\r\\n                    this.log.debug(`bots ${bots} > lastBots ${this.lastBots}`);\\r\\n                }\\r\\n\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill\\r\\n        if (this.shouldFarm()) {\\r\\n            let target = 'foodnstuff';\\r\\n\\r\\n            if (this.ns.scriptRunning('dh-control.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'dh-control.js');\\r\\n                target = p.args[0];\\r\\n            } else if (this.ns.scriptRunning('farm-worker.js', this.ns.getHostname())) {\\r\\n                let top = this.ns.ps(this.ns.getHostname());\\r\\n                let p = top.find(p => p.filename == 'farm-worker.js');\\r\\n                target = p.args[0];\\r\\n            }\\r\\n            \\r\\n            if (!this.beganFarm) {\\r\\n                enrol(this.ns, target);\\r\\n                this.beganFarm = true;\\r\\n            }\\r\\n            \\r\\n            this.ensureRunningWithArg('farm-worker.js', target, true);\\r\\n        } else if (this.beganFarm) {\\r\\n            this.ensureKilled('farm-worker.js');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureRunning(script) {\\r\\n        if (!this.ns.scriptRunning(script, this.ns.getHostname())) {    \\r\\n            await this.ns.exec(script, this.ns.getHostname(), 1);\\r\\n            this.log.info(`run ${script} -t ${1}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {string} arg\\r\\n     * @param {boolean} [maxThreads]\\r\\n     */\\r\\n    async ensureRunningWithArg(script, arg, maxThreads) {\\r\\n        if (!this.ns.isRunning(script, this.ns.getHostname(), arg)) {   \\r\\n            // not running with right arg\\r\\n            if (this.ns.scriptRunning(script, this.ns.getHostname())) { \\r\\n                // running with wrong arg\\r\\n                await this.ensureKilled(script);\\r\\n            } else {\\r\\n                // not running at all\\r\\n                let threads = 1;\\r\\n                if (maxThreads) {\\r\\n                    threads = this.getMaxThreads(script);\\r\\n                    if (threads <= 0) return;\\r\\n                }\\r\\n        \\r\\n                await this.ns.exec(script, this.ns.getHostname(), threads, arg);\\r\\n                this.log.info(`run ${script} -t ${threads} ${arg}`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - this.spareRamNeeded(); // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        let servers = this.ns.getPurchasedServers();\\r\\n        if (servers.length == 0) return false;\\r\\n        let server1 = 'bot0'; // servers[0]; - wrong because it changes\\r\\n        let top = this.ns.ps(server1);\\r\\n        if (top.length == 0) return false;\\r\\n        return top[0].filename.startsWith('ms');\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n    \\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.cash <= HACKNET_BUYS_MAX;\\r\\n    }\\r\\n\\r\\n    shouldFarm() {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return 128;\\r\\n    }\\r\\n}\",\"ramUsage\":13.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\r\\nimport { TICK_SECONDS, LifeL0 } from './lib-life-L0.js';\\r\\n\\r\\nconst WORK_OVERRIDE_TICKS =  9;\\r\\nconst STAT_GOAL_BASE =      90;\\r\\nconst DARKWEB_MIN =     200000;\\r\\nconst TRAIN_MIN =      5000000;\\r\\n\\r\\nexport class LifeL1 extends LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        /** @type {WorkItem} */\\r\\n        this.lastWork = null;\\r\\n    }\\r\\n\\r\\n    tickDarkwebPurchases() {\\r\\n        // buy darkweb router\\r\\n        if (this.cash >= DARKWEB_MIN) {\\r\\n            if (!this.ns.getCharacterInformation().tor) {\\r\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\r\\n                this.ns.purchaseTor();\\r\\n                this.cash = this.getCash();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\r\\n        for (var program of programs()) {\\r\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\r\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\r\\n                this.ns.purchaseProgram(program.name);\\r\\n                this.cash = this.getCash();\\r\\n                this.resetHackEval();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {Program} program */\\r\\n    hasProgram(program) {\\r\\n        return this.ns.fileExists(program.name, 'home');\\r\\n    }\\r\\n\\r\\n    // fullscreen \\\"work\\\" actions\\r\\n    tickPerformWork() {\\r\\n        // continue automation if:\\r\\n        // - we're still doing something, or\\r\\n        // - we deliberately didn't do anything, or\\r\\n        // - we did something which may have finished early\\r\\n        if (this.ns.isBusy() || (this.lastWork && (this.lastWork.name == 'nothing' || this.lastWork.name.startsWith('crime')))) {\\r\\n            // has work been selected, and not overridden (countup>0)?\\r\\n            if (this.lastWork && !this.countup) {\\r\\n                if (this.lastWork.isRep) {\\r\\n                    this.ns.stopAction();\\r\\n                }\\r\\n\\r\\n                let workItem = this.selectWork();\\r\\n                \\r\\n                // is work actually still ongoing?\\r\\n                if (this.ns.isBusy() && this.lastWork.name == workItem.name) {\\r\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\r\\n                    if (this.lastWork.isRep) {\\r\\n                        if (workItem.doWork != null) {\\r\\n                            workItem.doWork();\\r\\n                        } \\r\\n                    }\\r\\n                } else {\\r\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\r\\n                    if (workItem.doWork != null) {\\r\\n                        workItem.doWork();\\r\\n                    } \\r\\n                }\\r\\n\\r\\n                this.lastWork = workItem;              \\r\\n            } else {\\r\\n                this.log.info('automated work overridden by player, pause indefinitely');\\r\\n                this.lastWork = null;\\r\\n            }\\r\\n        } else {\\r\\n            if (!this.lastWork && !this.countup) {\\r\\n                let workItem = this.selectWork();\\r\\n                this.log.info(`start work ${workItem.name}`);\\r\\n                if (workItem.doWork != null) {\\r\\n                    workItem.doWork();\\r\\n                } \\r\\n\\r\\n                this.lastWork = workItem;          \\r\\n            } else {    \\r\\n                if (!this.lastWork) {\\r\\n                    /** @type {number | undefined} */\\r\\n                    this.countup = 0;\\r\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    this.lastWork = new WorkItem('override', null, false);\\r\\n                } else {\\r\\n                    this.countup = this.countup || 0;\\r\\n                    if (this.countup == 0) {\\r\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    } else {\\r\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_SECONDS)}`);\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                this.countup = this.countup + 1;\\r\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\r\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_SECONDS)}`);\\r\\n                    this.countup = 0;\\r\\n                    this.lastWork = null;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    selectWork() {\\r\\n        for (let jobF of [this.workWriteCode, this.workTrainStats, this.workCommitCrimes, this.workForFactions, this.workForCompanies, this.workJoinCompanies]) {\\r\\n            let job = jobF.bind(this)();\\r\\n            if (job != null) return job;\\r\\n        }\\r\\n\\r\\n        return new WorkItem('nothing', null, false);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workWriteCode() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workTrainStats() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        this.guessCharismaMult(info.mult);\\r\\n\\r\\n        let stats = this.ns.getStats();\\r\\n        \\r\\n        if (this.cash >= TRAIN_MIN) {\\r\\n            let statGoals = {};\\r\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility', 'charisma']) {\\r\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\r\\n                \\r\\n                if (stats[stat] < statGoals[stat]) {\\r\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\r\\n                    return new WorkItem('train-' + stat, () => {\\r\\n                        if (stat == 'charisma') {\\r\\n                            let uni = this.getBestUniversity();\\r\\n                            this.ensureCity(info, uni.city);\\r\\n                            this.ns.universityCourse(uni.name, 'Leadership');            \\r\\n                        } else {\\r\\n                            let gym = this.getBestGym();\\r\\n                            this.ensureCity(info, gym.city);\\r\\n                            this.ns.gymWorkout(gym.name, stat);\\r\\n                        }\\r\\n                    }, false);\\r\\n                }\\r\\n            }\\r\\n            this.log.debug(`stat goals reached - ${JSON.stringify(statGoals)}`);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        mult.charisma = Math.min(mult.agility, mult.defense, mult.dexterity, mult.agility);\\r\\n        mult.charismaExp = Math.min(mult.agilityExp, mult.defenseExp, mult.dexterityExp, mult.agilityExp);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForFactions() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        return null;\\r\\n    }\\r\\n    \\r\\n    getBestGym() {\\r\\n        let gs = gyms();\\r\\n        gs.sort((a, b) => b.price - a.price);\\r\\n        return gs[0];\\r\\n    }\\r\\n\\r\\n    getBestUniversity() {\\r\\n        let us = universities();\\r\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\r\\n        return us[0];\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @param {ICharacterInfo} info\\r\\n     * @param {string} name\\r\\n     */\\r\\n    ensureCity(info, name) {\\r\\n        if (info.city != name) {\\r\\n            if (this.ns.travelToCity(name)) {\\r\\n                this.log.info('travelled to ' + name);\\r\\n            } else {\\r\\n                this.log.error(`travel to ${name} failed`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**********/\\r\\n    /* policy */\\r\\n    /**********/\\r\\n\\r\\n    shouldBuyNodes() {\\r\\n        return this.ns.getCharacterInformation().bitnode != 4;\\r\\n    }\\r\\n\\r\\n    shouldCommitCrimes() {\\r\\n        return this.cash >= TRAIN_MIN;\\r\\n    }\\r\\n\\r\\n    spareRamNeeded() {\\r\\n        return this.ns.getCharacterInformation().bitnode == 4 ? 64 : 128;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class WorkItem {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {() => void | null} doWork\\r\\n     * @param {boolean} isRep\\r\\n     */\\r\\n    constructor(name, doWork, isRep) {\\r\\n        this.name = name;\\r\\n        this.doWork = doWork;\\r\\n        this.isRep = isRep;\\r\\n    }\\r\\n}\",\"ramUsage\":25.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\r\\n\\r\\nconst COMPANY_REP_MAX = 200000; // level required for most factions\\r\\nexport const FAVOUR_MAX = 150; // level required for donations\\r\\n\\r\\nexport class LifeL2 extends LifeL1 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n    }\\r\\n\\r\\n    // persists through aug reset, makes early farming better\\r\\n    tickUpgradeHomeSystem() {\\r\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\r\\n            this.log.info(`purchasing home RAM upgrade`);\\r\\n            this.ns.upgradeHomeRam();\\r\\n            this.cash = this.getCash();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    tickAcceptInvites() {\\r\\n        for (let invite of this.ns.checkFactionInvitations()) {\\r\\n            if (this.shouldAcceptInvite(invite)) {\\r\\n                this.log.info(`join faction ${invite}`);\\r\\n                this.ns.joinFaction(invite);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction);\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workJoinCompanies() {\\r\\n        // when we've run out of work to do, take another job\\r\\n        let companies = Company.getAll(this.ns).filter(c => !c.employed);\\r\\n        if (companies.length > 0) {\\r\\n            if (this.ns.applyToCompany(companies[0].name, 'software')) {\\r\\n                this.log.info(`now employed by ${companies[0]}`);\\r\\n            } else {\\r\\n                this.log.error(`rejected by ${companies[0]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workForCompanies() {\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n\\r\\n        let companies = Company.getCurrent(this.ns);\\r\\n        this.log.debug(`current companies: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => !info.factions.includes(c.faction));\\r\\n        this.log.debug(`companies without faction membership: ${companies}`);\\r\\n\\r\\n        companies = companies.filter(c => c.reputation < COMPANY_REP_MAX);\\r\\n        this.log.debug(`companies with reputation < ${COMPANY_REP_MAX}: ${companies}`);\\r\\n\\r\\n        if (companies.length > 0) {\\r\\n            companies.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`companies sorted by rep: ${companies}`);\\r\\n\\r\\n            let c = companies[0].name;\\r\\n            return new WorkItem('company-' + c, () => {\\r\\n                if (this.lastWork && this.lastWork.name == 'company-' + c) {\\r\\n                    this.log.debug(`already working for ${c}`);\\r\\n                    if (this.ns.applyToCompany(c, 'software')) {\\r\\n                        this.log.info(`promoted by ${c}`);\\r\\n                    }\\r\\n                    this.ns.workForCompany();\\r\\n                } else {\\r\\n                    this.log.debug(`not currently working for ${c}`);\\r\\n                    this.ns.applyToCompany(c, 'software');\\r\\n                    if (!this.ns.workForCompany()) {\\r\\n                        this.log.error(`rejected by ${c}`);\\r\\n                    }\\r\\n                }\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    workForFactions() {\\r\\n        let factions = Faction.getCurrent(this.ns);\\r\\n        this.log.debug(`current factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => {\\r\\n                this.ns.workForFaction(factions[0].name, factions[0].job)\\r\\n            }, true);\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.job = job;\\r\\n    }\\r\\n\\r\\n    static cities() {\\r\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\r\\n    }\\r\\n\\r\\n    static gangs() {\\r\\n        return ['Slum Snakes', 'Tetrads'];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Faction[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => \\r\\n        {\\r\\n            let rep = ns.getFactionRep(f);\\r\\n            let fav = ns.getFactionFavor(f);\\r\\n            let fvg = ns.getFactionFavorGain(f);\\r\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @type {{[key: string]: string}} */\\r\\nlet companyFactions = {\\r\\n    'Bachman & Associates': 'Bachman & Associates',\\r\\n    'ECorp': 'ECorp',\\r\\n    'MegaCorp': 'MegaCorp',\\r\\n    'KuaiGong International': 'KuaiGong International',\\r\\n    'Four Sigma': 'Four Sigma',\\r\\n    'NWO': 'NWO',\\r\\n    'Blade Industries': 'Blade Industries',\\r\\n    'OmniTek Incorporated': 'OmniTek Incorporated',\\r\\n    'Clarke Incorporated': 'Clarke Incorporated',\\r\\n    'Fulcrum Technologies': 'Fulcrum Secret Technologies',\\r\\n}\\r\\n\\r\\nclass Company {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {string} faction\\r\\n     * @param {boolean} employed\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, faction, employed) {\\r\\n        this.name = name;\\r\\n        this.reputation = rep;\\r\\n        this.favor = fav;\\r\\n        this.favorGain = fvg;\\r\\n        this.faction = faction;\\r\\n        this.employed = employed;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static factions() {\\r\\n        return Object.getOwnPropertyNames(companyFactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getCurrent(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let i = 0; i < info.jobs.length; i++) {\\r\\n            let c = info.jobs[i];\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], true));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns Company[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        let cs = [];\\r\\n        for (let c of Company.factions()) {\\r\\n            let rep = ns.getCompanyRep(c);\\r\\n            let fav = ns.getCompanyFavor(c);\\r\\n            let fvg = ns.getCompanyFavorGain(c);\\r\\n            cs.push(new Company(c, rep, fav, fvg, companyFactions[c], info.jobs.includes(c)));\\r\\n        }\\r\\n        return cs;\\r\\n    }\\r\\n}\",\"ramUsage\":64.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { programs } from './lib-world.js';\\r\\nimport { WorkItem } from './lib-life-L1.js';\\r\\nimport { LifeL2, Faction, FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\nconst DONATE_AMOUNT = 1000000000000;\\r\\nconst TRAVEL_MIN =           200000;\\r\\n\\r\\nexport class LifeL3 extends LifeL2 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        super(ns, log);\\r\\n        \\r\\n        /** @type {{[key: string]: boolean}} */\\r\\n        this.hadProgram = {};\\r\\n        for (let program of programs())\\r\\n        {\\r\\n            this.hadProgram[program.name] = true;\\r\\n        }\\r\\n\\r\\n        /** @type {string} */\\r\\n        this.savingForAug = '';\\r\\n\\r\\n        /** @type {number} */\\r\\n        this.homicides = 0;\\r\\n        let factions = this.ns.getCharacterInformation().factions;\\r\\n        for (let gang of Gang.getAll()) {\\r\\n            if (factions.includes(gang.name)) {\\r\\n                this.homicides = Math.max(this.homicides, gang.requiredKarma);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.log.debug(`assumed starting homicides: ${this.homicides}`);\\r\\n    }\\r\\n\\r\\n    /** @param {string} faction */\\r\\n    shouldAcceptInvite(faction) {\\r\\n        return !Faction.cities().includes(faction) || !FactionWithAugs.get(this.ns, faction).hasAllAugs();\\r\\n    }\\r\\n\\r\\n    workWriteCode() {\\r\\n        for (let program of programs()) {\\r\\n            if (this.hasProgram(program)) {\\r\\n                if (!this.hadProgram[program.name]) {\\r\\n                    this.hadProgram[program.name] = true;\\r\\n                    this.resetHackEval();\\r\\n                }    \\r\\n            }\\r\\n            else if (program.req <= this.skill)  {\\r\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }  \\r\\n\\r\\n    // L3 override which takes augs into account\\r\\n    workForFactions() {\\r\\n        let factions = FactionWithAugs.getAll(this.ns);\\r\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\r\\n        \\r\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\r\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\r\\n        let allReqsMet = factions.length == 0;\\r\\n\\r\\n        factions = factions.filter(f => f.favor + f.favorGain < FAVOUR_MAX);\\r\\n        this.log.debug(`factions with favour < ${FAVOUR_MAX}: ${factions.map(f => f.name)}`);\\r\\n        let reqsCouldBeMetAfterDonations = factions.length == 0 && !allReqsMet;\\r\\n\\r\\n        if (factions.length > 0) {\\r\\n            factions.sort((a, b) => a.reputation - b.reputation);\\r\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\r\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\r\\n        }\\r\\n\\r\\n        if (reqsCouldBeMetAfterDonations && this.cash >= DONATE_AMOUNT) {\\r\\n            for (let f of FactionWithAugs.getAll(this.ns)) {\\r\\n                if (f.favor >= FAVOUR_MAX && f.maxAugRep() > f.reputation) {\\r\\n                    if (this.ns.donateToFaction(f.name, DONATE_AMOUNT)) {\\r\\n                        this.log.info(`donated ${format.money(DONATE_AMOUNT)} to faction ${f}`);\\r\\n                        this.cash = this.getCash();\\r\\n                        if (this.cash < DONATE_AMOUNT) {\\r\\n                            break;\\r\\n                        }\\r\\n                    } else {\\r\\n                        this.log.error(`failed to donate to faction ${f}`);\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            allReqsMet = FactionWithAugs.getAll(this.ns).filter(f => f.maxAugRep() > f.reputation).length == 0;\\r\\n        }\\r\\n\\r\\n        // if all factions are maxed out, buy some of their augs\\r\\n        if (allReqsMet) {\\r\\n            this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\r\\n\\r\\n            let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\r\\n            this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\r\\n\\r\\n            // augs we don't already have\\r\\n            let availableAugs = FactionWithAugs.getAll(this.ns)\\r\\n                .map(f => f.augmentations)\\r\\n                .reduce((a, b) => a.concat(b), [])\\r\\n                .filter(a => !a.owned);\\r\\n\\r\\n            // most expensive augs first, because the price doubles each time\\r\\n            let affordableAugs = availableAugs\\r\\n                .filter(a => a.price <= maxAugCost)\\r\\n                .sort((a, b) => b.price - a.price);\\r\\n\\r\\n            if (affordableAugs.length > 0) {\\r\\n                this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\r\\n                if (affordableAugs[0].price > this.cash) {\\r\\n                    if (this.savingForAug != affordableAugs[0].name) {\\r\\n                        this.savingForAug = affordableAugs[0].name;\\r\\n                        this.log.info(`saving for aug ${affordableAugs[0]}`);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                for (let a of affordableAugs) {\\r\\n                    if (a.price <= this.cash) {\\r\\n                        if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\r\\n                            this.log.info(`bought aug ${a}`);\\r\\n                            this.cash = this.getCash();\\r\\n                            this.savingForAug = '';\\r\\n                        } else {\\r\\n                            this.log.info(`failed to buy aug ${a}`);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @returns {WorkItem | null} */\\r\\n    workCommitCrimes() {\\r\\n        if (!this.shouldCommitCrimes()) {\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        let info = this.ns.getCharacterInformation();\\r\\n        let stats = this.ns.getStats();\\r\\n\\r\\n        let gangs = Gang.getAll().filter(g => !info.factions.includes(g.name)).sort((a, b) => a.requiredKarma - b.requiredKarma);\\r\\n        this.log.debug(`unjoined gangs: ${gangs}`);\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredStats <= Math.min(stats.agility, stats.defense, stats.dexterity, stats.strength));\\r\\n            this.log.debug(`gangs with high enough combat stats: ${gangs}`);\\r\\n        }\\r\\n\\r\\n        if (gangs.length > 0) {\\r\\n            gangs = gangs.filter(g => g.requiredKarma > this.homicides);\\r\\n            this.log.debug(`gangs needing lower karma: ${gangs}`);\\r\\n        }\\r\\n        \\r\\n        for (let gang of gangs) {\\r\\n            if (gang.requiredLocation == null || this.cash >= TRAVEL_MIN) {\\r\\n                return new WorkItem('crime-homicide', () => {\\r\\n                    if (gang.requiredLocation != null) {\\r\\n                        this.ensureCity(this.ns.getCharacterInformation(), gang.requiredLocation);\\r\\n                    }\\r\\n\\r\\n                    this.nextTickLength = this.ns.commitCrime('homicide') + 1000;\\r\\n                }, false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    /** @param {ICharacterInfoMultipliers} mult */\\r\\n    guessCharismaMult(mult) {\\r\\n        // start with SF1-1\\r\\n        let stat = 1.16; \\r\\n        let statExp = 1.16;\\r\\n\\r\\n        let augs = this.ns.getOwnedAugmentations();        \\r\\n        if (augs.includes(\\\"NeuroFlux Governor\\\")) {\\r\\n            let level = augs.length / 2; // XXX \\r\\n            for (let i = 0; i < level; i++) {\\r\\n                stat = stat * 1.01;\\r\\n                statExp = statExp * 1.01;\\r\\n            }\\r\\n        }\\r\\n        if (augs.includes(\\\"FocusWire\\\")) { \\r\\n            statExp = statExp * 1.05;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer I\\\")) { \\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Neurotrainer II\\\")) { \\r\\n            statExp = statExp * 1.15;\\r\\n        }\\r\\n        if (augs.includes(\\\"Power Recirculation Core\\\")) { \\r\\n            stat = stat * 1.05;\\r\\n            statExp = statExp * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Enhancement\\\")) { \\r\\n            stat = stat * 1.1;\\r\\n        }\\r\\n        if (augs.includes(\\\"Speech Processor Implant\\\")) { \\r\\n            stat = stat * 1.2;\\r\\n        }\\r\\n        if (augs.includes(\\\"Enhanced Social Interaction Implant\\\")) {\\r\\n            stat = stat * 1.6;\\r\\n            statExp = statExp * 1.6;\\r\\n        }\\r\\n        if (augs.includes(\\\"SmartJaw\\\")) {\\r\\n            stat = stat * 1.5;\\r\\n            statExp = statExp * 1.5;\\r\\n        }\\r\\n\\r\\n        mult.charisma = stat;\\r\\n        mult.charismaExp = statExp;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class FactionWithAugs extends Faction {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} rep\\r\\n     * @param {number} fav\\r\\n     * @param {number} fvg\\r\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\r\\n     * @param {Augmentation[]} augs\\r\\n     */\\r\\n    constructor(name, rep, fav, fvg, job, augs) {\\r\\n        super(name, rep, fav, fvg, job)\\r\\n        this.augmentations = augs;\\r\\n    }\\r\\n\\r\\n    maxAugRep() {\\r\\n        return this.augmentations\\r\\n            .filter(a => !a.owned)\\r\\n            .map(a => a.requiredReputation)\\r\\n            .reduce((a, b) => Math.max(a, b), 0);\\r\\n    }\\r\\n\\r\\n    hasAllAugs() {\\r\\n        return this.augmentations\\r\\n        .map(a => a.owned)\\r\\n        .reduce((a, b) => a && b, true);\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @returns FactionWithAugs[]\\r\\n     */\\r\\n    static getAll(ns) {\\r\\n        let info = ns.getCharacterInformation();\\r\\n        return info.factions.map(f => FactionWithAugs.get(ns, f));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     * @param {string} f\\r\\n     * @returns FactionWithAugs\\r\\n     */\\r\\n    static get(ns, f) {\\r\\n        let rep = ns.getFactionRep(f);\\r\\n        let fav = ns.getFactionFavor(f);\\r\\n        let fvg = ns.getFactionFavorGain(f);\\r\\n        let augInfo = ns.getOwnedAugmentations(true);\\r\\n        let augs = ns.getAugmentationsFromFaction(f).map(a => {\\r\\n            let [aRep, aPrc] = ns.getAugmentationCost(a);\\r\\n            let has = augInfo.includes(a);\\r\\n            return new Augmentation(a, f, aRep, aPrc, has);\\r\\n        })\\r\\n        return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Augmentation {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} fac\\r\\n     * @param {number} rep\\r\\n     * @param {number} prc\\r\\n     * @param {boolean} has\\r\\n     */\\r\\n    constructor(name, fac, rep, prc, has) {\\r\\n        this.name = name;\\r\\n        this.faction = fac;\\r\\n        this.requiredReputation = rep;\\r\\n        this.price = prc;\\r\\n        this.owned = has;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        if (this.owned) {\\r\\n            return `${this.name} (OWNED)`\\r\\n        } else {\\r\\n            return `${this.name} (${format.money(this.price)})`\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class Gang {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} requiredKarma\\r\\n     * @param {number} requiredStats\\r\\n     * @param {string|null} requiredLocation\\r\\n     */\\r\\n    constructor(name, requiredKarma, requiredStats, requiredLocation) {\\r\\n        this.name = name;\\r\\n        this.requiredKarma = requiredKarma;\\r\\n        this.requiredStats = requiredStats;\\r\\n        this.requiredLocation = requiredLocation;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.name;\\r\\n    }\\r\\n\\r\\n    static getAll() {\\r\\n        return [\\r\\n            new Gang('Slum Snakes', 9, 30, null),\\r\\n            new Gang('Tetrads', 18, 75, 'Chongqing'),\\r\\n            new Gang('Speakers for the Dead', 45, 300, null),\\r\\n            new Gang('The Dark Army', 45, 300, 'Chongqing'),\\r\\n            new Gang('The Syndicate', 90, 200, 'Sector-12'),\\r\\n            // no silhouette - special company reqs\\r\\n        ];\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L4.js\",\"code\":\"\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"fac-augs.js\",\"code\":\"import * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\r\\nimport { FAVOUR_MAX } from './lib-life-L2.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let f = FactionWithAugs.get(ns, 'Bachman & Associates');\\r\\n    ns.tprint(`${f.name}: ${f.reputation}`);\\r\\n    for (var aug of f.augmentations) {\\r\\n        ns.tprint(aug);\\r\\n    }\\r\\n}\",\"ramUsage\":106.9,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"init.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":106.9,\"logs\":[\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\",\"[INF] stop work faction-Aevum; start work faction-Aevum\",\"Started carrying out hacking contracts for Aevum\"],\"logUpd\":true,\"offlineRunningTime\":6290.138,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":51008.00999989979,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"buy-nodes.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":7.5,\"logs\":[],\"logUpd\":true,\"offlineRunningTime\":6290.139,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":51007.009999899805,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.999 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\",\"Server security level on harakiri-sushi weakened to 5. Gained 40,177.2308 hacking exp (t=4536)\",\"Executing weaken() on server harakiri-sushi in 29.944 seconds (t=4536)\"],\"logUpd\":true,\"offlineRunningTime\":6290.14,\"offlineMoneyMade\":0,\"offlineExpGained\":1535625.0294246336,\"onlineRunningTime\":50767.0099999033,\"onlineMoneyMade\":0,\"onlineExpGained\":55404401.28864564,\"threads\":4536,\"dataMap\":{\"86.0.4.7\":[0,0,0,6255144]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"hft.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":19.7,\"logs\":[\"[INF] assets: $1,117,179,325,103, +0.13%, $308,663/sec\",\"[INF] assets: $1,116,990,206,263, +0.06%, $135,441/sec\",\"[INF] assets: $1,117,760,766,728, +0.06%, $141,654/sec\",\"[INF] BLD   : buy 828 ($602,997,489)\",\"[INF] assets: $1,121,173,379,844, session capital gains: $5,688,176,751,983\",\"[INF] BLD   : buy 2601 ($1,883,227,465)\",\"[INF] assets: $1,125,706,348,021, session capital gains: $5,686,293,524,518\",\"[INF] assets: $1,124,036,657,509, -0.14%, $-333,872/sec\",\"[INF] assets: $1,124,022,591,260, -0.07%, $-168,343/sec\",\"[INF] assets: $1,124,150,305,031, -0.04%, $-103,716/sec\",\"[INF] assets: $1,123,688,921,276, -0.04%, $-100,852/sec\",\"[INF] assets: $1,124,946,932,565, -0.01%, $-30,371/sec\",\"[INF] assets: $1,121,586,055,521, -0.06%, $-137,316/sec\",\"[INF] assets: $1,123,919,863,507, -0%, $-3,893/sec\",\"[INF] assets: $1,123,392,152,525, -0%, $-21,010/sec\",\"[INF] assets: $1,123,436,266,330, -0.01%, $-23,796/sec\",\"[INF] assets: $1,124,224,060,471, +0%, $17,833/sec\",\"[INF] assets: $1,126,367,171,889, +0.02%, $47,328/sec\",\"[INF] assets: $1,122,655,116,299, +0.01%, $35,623/sec\",\"[INF] assets: $1,122,215,852,387, -0.02%, $-56,782/sec\",\"[INF] assets: $1,122,340,645,466, -0.01%, $-35,041/sec\",\"[INF] assets: $1,125,130,792,968, +0.02%, $56,467/sec\",\"[INF] assets: $1,129,975,077,250, +0.08%, $191,643/sec\",\"[INF] assets: $1,129,942,315,040, +0.05%, $119,139/sec\",\"[INF] assets: $1,131,032,423,744, +0.12%, $279,178/sec\",\"[INF] assets: $1,130,710,215,120, +0.12%, $283,088/sec\",\"[INF] assets: $1,130,819,908,728, +0.12%, $282,566/sec\",\"[INF] assets: $1,131,117,458,382, +0.08%, $199,502/sec\",\"[INF] assets: $1,131,110,973,429, +0.01%, $37,851/sec\",\"[INF] assets: $1,127,402,863,111, -0.03%, $-84,621/sec\",\"[INF] BLD   : buy 2258 ($1,630,096,389)\",\"[INF] assets: $1,128,667,183,576, session capital gains: $5,684,663,428,128\",\"[INF] assets: $1,130,130,122,070, +0.12%, $292,470/sec\",\"[INF] assets: $1,132,166,859,445, +0.15%, $349,862/sec\",\"[INF] assets: $1,132,243,550,716, +0.1%, $238,360/sec\",\"[INF] assets: $1,133,810,923,566, +0.11%, $257,135/sec\",\"[INF] assets: $1,136,909,623,565, +0.14%, $329,618/sec\",\"[INF] assets: $1,136,980,030,133, +0.12%, $277,030/sec\",\"[INF] assets: $1,136,919,879,813, +0.09%, $226,280/sec\",\"[INF] assets: $1,138,222,412,073, +0.08%, $201,811/sec\",\"[INF] assets: $1,137,685,837,680, +0.07%, $181,373/sec\",\"[INF] assets: $1,137,714,935,641, +0.05%, $130,103/sec\",\"[INF] assets: $1,136,949,163,928, +0%, $1,317/sec\",\"[INF] assets: $1,144,701,845,868, +0.11%, $257,333/sec\",\"[INF] assets: $1,150,034,588,697, +0.19%, $437,040/sec\",\"[INF] assets: $1,150,071,550,822, +0.17%, $394,879/sec\",\"[INF] assets: $1,153,569,353,608, +0.23%, $529,327/sec\",\"[INF] assets: $1,157,046,446,856, +0.27%, $644,190/sec\",\"[INF] assets: $1,158,797,167,759, +0.31%, $728,096/sec\",\"[INF] assets: $1,161,037,792,230, +0.23%, $544,404/sec\",\"[INF] assets: $1,164,740,315,756, +0.21%, $490,092/sec\"],\"logUpd\":true,\"offlineRunningTime\":6290.1410000000005,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":46876.6099999599,\"onlineMoneyMade\":6734626702736.091,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] status: money $59742120 / goal $50000000; decreasing\",\"[INF] status: security level 7 / goal 10; increasing\",\"[INF] status: money $59783458 / goal $50000000; \",\"[INF] assigning omega-net grow -> hack x18\",\"[INF] status: security level 7 / goal 10; \",\"[INF] status: money $34058440 / goal $50000000; \",\"[INF] assigning iron-gym hack -> grow x18\",\"[INF] status: security level 9 / goal 10; \",\"[INF] status: money $40902787 / goal $50000000; \",\"[INF] assigning max-hardware hack -> grow x18\",\"[INF] status: security level 5 / goal 10; \",\"[INF] status: money $89062677 / goal $50000000; increasing\",\"[INF] assigning iron-gym grow -> hack x18\",\"[INF] status: security level 7 / goal 10; \",\"[INF] status: money $85982447 / goal $50000000; \",\"[INF] assigning max-hardware grow -> hack x18\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $60489937 / goal $50000000; decreasing\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $57516559 / goal $50000000; decreasing\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $50237057 / goal $50000000; decreasing\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $49120518 / goal $50000000; decreasing\",\"[INF] assigning iron-gym hack -> grow x18\",\"[INF] status: security level 9 / goal 10; increasing\",\"[INF] status: money $37245034 / goal $50000000; decreasing\",\"[INF] assigning max-hardware hack -> grow x18\",\"[INF] status: security level 9 / goal 10; increasing\",\"[INF] status: money $64736466 / goal $50000000; \",\"[INF] assigning iron-gym grow -> hack x18\",\"[INF] status: security level 6 / goal 10; \",\"[INF] status: money $73579823 / goal $50000000; increasing\",\"[INF] assigning max-hardware grow -> hack x18\",\"[INF] status: security level 7 / goal 10; \",\"[INF] status: money $87297930 / goal $50000000; increasing\",\"[INF] assigning zer0 grow -> hack x18\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $54378772 / goal $50000000; \",\"[INF] assigning neo-net grow -> hack x18\",\"[INF] status: security level 8 / goal 10; increasing\",\"[INF] status: money $17617790 / goal $50000000; decreasing\",\"[INF] assigning iron-gym hack -> grow x18\",\"[INF] status: security level 10 / goal 10; increasing\",\"[INF] status: money $14595294 / goal $50000000; decreasing\",\"[INF] assigning CSEC hack -> weaken x4\",\"[INF] assigning max-hardware hack -> grow x18\",\"[INF] status: security level 8 / goal 10; \",\"[INF] status: money $15353652 / goal $50000000; \",\"[INF] assigning CSEC weaken -> grow x4\",\"[INF] assigning omega-net hack -> grow x18\"],\"logUpd\":true,\"offlineRunningTime\":6290.1410000000005,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":45243.20999998362,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"FTPCrack.exe-21.88%-INC\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"relaySMTP.exe-1.43%-INC\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"67.0.9.2\",\"49.1.0.3\",\"15.9.5.4\",\"39.0.0.6\",\"86.0.4.7\",\"67.8.4.1\",\"42.1.9.4\",\"30.2.5.6\",\"6.4.5.5\",\"61.4.8.2\",\"53.2.9.2\",\"32.1.0.6\",\"42.1.6.5\",\"39.0.1.7\",\"22.8.7.1\",\"24.1.1.6\",\"13.8.1.2\",\"5.9.1.8\",\"97.3.5.4\",\"99.1.6.2\",\"92.6.1.1\",\"73.9.5.3\",\"36.4.1.0\",\"34.9.3.2\",\"52.3.2.0\",\"13.3.2.7\",\"83.9.2.3\",\"87.9.6.1\",\"8.3.2.9\",\"7.0.4.8\",\"41.6.9.7\",\"20.0.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"46.9.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.9.8.4\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1099,\"moneyAvailable\":35890467497,\"moneyMax\":897261687425,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"56.5.8.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"58.6.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"58.6.8.2\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1310,\"moneyAvailable\":41616140704,\"moneyMax\":1040403517600,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"33.3.7.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.3.7.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.3.7.6\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316754.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[69,17,95,159,24,45,115,68,185,63,55,195,124,3,193,33,90,22,136,127,101,95,199,107,145,98,31,6,11,192,154],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":971,\"moneyAvailable\":28917085156,\"moneyMax\":722927128900,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":60,\"serversOnNetwork\":[\"49.3.1.5\",\"58.6.8.2\",\"37.4.2.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"89.9.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.9.7.0\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"89.9.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"89.9.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"89.9.7.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 26.869 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.120260%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.258 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.663 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.901 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831459%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.524 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831465%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.420 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.333524%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.055 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.078750%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 38.581 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831435%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.146 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.258429%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.352 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831413%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.999 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831425%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.464 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831460%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.732 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831470%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.413 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.676989%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.446 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.401325%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.882 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.010959%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.544 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.182445%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.067 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831426%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.253 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831455%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.135 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.172857%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.086 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831503%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.702 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831764%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.542 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.490925%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.533 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831766%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.681 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831707%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.143 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":6290.1410000000005,\"offlineMoneyMade\":0,\"offlineExpGained\":6354.91184635312,\"onlineRunningTime\":44967.009999987604,\"onlineMoneyMade\":0,\"onlineExpGained\":794660.6297813876,\"threads\":73,\"dataMap\":{\"86.0.4.7\":[0,0,89717,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1098,\"moneyAvailable\":39540565647,\"moneyMax\":988514141175,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":58,\"serversOnNetwork\":[\"49.3.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"7.6.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.6.7.5\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1201,\"moneyAvailable\":20059280882,\"moneyMax\":501482022050,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":76,\"serversOnNetwork\":[\"49.3.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.5.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.5.8.7\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1098,\"moneyAvailable\":24052333188,\"moneyMax\":601308329700,\"hackDifficulty\":48,\"baseDifficulty\":48,\"minDifficulty\":16,\"serverGrowth\":57,\"serversOnNetwork\":[\"33.2.8.8\",\"46.9.8.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.2.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.2.8.8\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"33.2.8.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"33.2.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"33.2.8.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 27.935 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831506%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.143 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.360554%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.909 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.699086%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.105 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.609 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831447%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.749 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.189743%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.128 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.269931%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.554 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831467%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.412 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831480%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.463 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.991442%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.640 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831443%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.935 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831523%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.104 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.811991%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.906 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831426%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.290 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831429%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.535 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831452%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.205 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831435%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.847 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831431%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.006 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831427%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.258 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831460%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.522 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.683223%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.437 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.600338%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.576 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.984011%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.479 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831943%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.726 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831979%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.707 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":6290.143,\"offlineMoneyMade\":0,\"offlineExpGained\":6354.913866950734,\"onlineRunningTime\":45003.00999998708,\"onlineMoneyMade\":0,\"onlineExpGained\":794660.6297813876,\"threads\":73,\"dataMap\":{\"86.0.4.7\":[0,0,89717,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":918,\"moneyAvailable\":15093295096,\"moneyMax\":377332377400,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":98,\"serversOnNetwork\":[\"20.5.5.8\",\"56.5.8.7\",\"19.1.6.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"82.7.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.7.5.0\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1110,\"moneyAvailable\":17017599768,\"moneyMax\":425439994200,\"hackDifficulty\":65,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":91,\"serversOnNetwork\":[\"23.0.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.9.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.9.2.5\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1117,\"moneyAvailable\":27701123834,\"moneyMax\":692528095850,\"hackDifficulty\":98,\"baseDifficulty\":98,\"minDifficulty\":33,\"serverGrowth\":98,\"serversOnNetwork\":[\"19.8.8.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"69.5.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"69.5.6.0\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"69.5.6.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"69.5.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"69.5.6.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 34.967 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309334%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 25.828 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309373%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 33.148 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309322%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 25.679 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309535%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 33.320 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309480%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 25.453 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.257505%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 34.016 seconds (t=146)\",\"Available money on harakiri-sushi grown by 25.108331%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 35.586 seconds (t=146)\",\"Available money on harakiri-sushi grown by 24.599371%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 29.332 seconds (t=146)\",\"Available money on harakiri-sushi grown by 5.130882%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 27.479 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309318%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.797 seconds (t=146)\",\"Available money on harakiri-sushi grown by 24.844526%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 35.797 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309403%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 28.876 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309513%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 28.037 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309703%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.317 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.925119%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 36.503 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309380%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 29.015 seconds (t=146)\",\"Available money on harakiri-sushi grown by 25.025430%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 27.697 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309435%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.471 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.551322%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 36.834 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309354%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 28.828 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309594%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.993 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.310310%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 25.589 seconds (t=146)\",\"Available money on harakiri-sushi grown by 24.798346%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 35.770 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.311088%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.308 seconds (t=146)\",\"Available money on harakiri-sushi grown by 22.576263%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.739 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":6290.143,\"offlineMoneyMade\":0,\"offlineExpGained\":14404.471431755,\"onlineRunningTime\":45177.00999998455,\"onlineMoneyMade\":0,\"onlineExpGained\":1591907.624509175,\"threads\":146,\"dataMap\":{\"86.0.4.7\":[0,0,179726,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1242,\"moneyAvailable\":1698265871,\"moneyMax\":42456646775,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":86,\"serversOnNetwork\":[\"85.3.7.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"37.4.2.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"37.4.2.6\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1487,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"33.3.7.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.5.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.5.5.8\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":976,\"moneyAvailable\":1138325498,\"moneyMax\":28458137450,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":81,\"serversOnNetwork\":[\"85.3.7.9\",\"33.2.8.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"91.6.3.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.6.3.4\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-562551.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,0,0,3,3,7,0,8,1,0,6,0,3,4],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":873,\"moneyAvailable\":809899583,\"moneyMax\":20247489575,\"hackDifficulty\":93,\"baseDifficulty\":93,\"minDifficulty\":31,\"serverGrowth\":55,\"serversOnNetwork\":[\"19.9.9.1\",\"59.0.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.8.0.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.8.0.2\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":894,\"moneyAvailable\":864270980,\"moneyMax\":21606774500,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":42,\"serversOnNetwork\":[\"20.9.6.3\",\"85.3.7.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"19.8.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.8.8.8\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"19.8.8.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"19.8.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"19.8.8.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 30.978 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.476 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.341 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.185 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021521%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.732 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.999 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.349 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021522%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.015 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021525%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.436 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.685 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.020 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.399 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.527 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021522%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.252 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021527%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.450 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.986735%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.929 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.948829%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.192 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.879723%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.691 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021535%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.377 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.889500%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.609 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.667014%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.387 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021552%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.565 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.640637%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.617 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021618%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.198 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.657175%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.473 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021589%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.434 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":6290.143,\"offlineMoneyMade\":0,\"offlineExpGained\":661.6074710798018,\"onlineRunningTime\":43982.810000001926,\"onlineMoneyMade\":0,\"onlineExpGained\":191957.88054239724,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,21672,0]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":827,\"moneyAvailable\":556573628,\"moneyMax\":13914340700,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":74,\"serversOnNetwork\":[\"59.3.8.7\",\"67.9.2.5\",\"49.3.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"23.0.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.0.2.0\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"23.0.2.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"23.0.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"23.0.2.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 31.482 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.117776%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.970 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.711275%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.668 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134341%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.669 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134351%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.384 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134351%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.719 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134351%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.069 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134362%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.821 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134353%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.780 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134342%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.029 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134351%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.824 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134361%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.333 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134387%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.644 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.963731%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.498 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.530296%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.037 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134396%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.062 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.435043%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.435 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134345%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.417 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134366%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.814 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134367%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.707 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.740090%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.237 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.931798%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.725 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134420%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.088 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134454%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.077 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134475%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.035 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134451%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.497 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":6290.143,\"offlineMoneyMade\":0,\"offlineExpGained\":2576.786992626598,\"onlineRunningTime\":44691.00999999162,\"onlineMoneyMade\":0,\"onlineExpGained\":391568.5669535943,\"threads\":36,\"dataMap\":{\"86.0.4.7\":[0,0,44208,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":820,\"moneyAvailable\":793932783,\"moneyMax\":19848319575,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":78,\"serversOnNetwork\":[\"85.3.7.9\",\"82.7.5.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"55.4.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.4.7.3\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":869,\"moneyAvailable\":962703458,\"moneyMax\":24067586450,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":95,\"serversOnNetwork\":[\"43.5.7.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.5.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.5.6.8\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"1.5.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"1.5.6.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"1.5.6.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 26.433 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.487405%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.112 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.260 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.303 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.832508%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.108 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.068 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021522%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.097 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.907266%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.541 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021531%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.645 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.741959%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.813 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021524%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.386 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.882988%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.719 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021549%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.719 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.835040%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.079 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021556%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.137 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.774726%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.496 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.512358%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.791 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.697 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021523%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.544 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021530%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.426 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.698546%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.118 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021547%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.254 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.704317%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.071 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021628%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.436 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.795467%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.323 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021628%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.287 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":6290.143,\"offlineMoneyMade\":0,\"offlineExpGained\":696.4289169261073,\"onlineRunningTime\":44054.81000000088,\"onlineMoneyMade\":0,\"onlineExpGained\":192914.4812759972,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,21780,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":837,\"moneyAvailable\":1105645176,\"moneyMax\":27641129400,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":87,\"serversOnNetwork\":[\"19.9.9.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"0.8.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.8.1.5\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"0.8.1.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"0.8.1.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"0.8.1.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 32.207 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134335%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.159 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134334%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.873 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134336%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.420 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134335%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.754 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134334%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.061 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.554 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134345%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.468 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134345%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.076 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134349%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.781 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134371%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.221 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.789492%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.117 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134387%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.429 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.589534%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.866 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134394%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.672 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.089878%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.963 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134342%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.369 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.697 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134346%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.362 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134363%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.062 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.612819%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.721 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134404%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.482 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.788310%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.050 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.881119%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.984 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134479%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.476 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134448%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.895 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":6290.143,\"offlineMoneyMade\":0,\"offlineExpGained\":2507.1441009339874,\"onlineRunningTime\":44655.009999992144,\"onlineMoneyMade\":0,\"onlineExpGained\":390293.0993087943,\"threads\":36,\"dataMap\":{\"86.0.4.7\":[0,0,44064,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":861,\"moneyAvailable\":857798141,\"moneyMax\":21444953525,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":75,\"serversOnNetwork\":[\"29.4.4.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"85.3.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"85.3.7.9\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"85.3.7.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"85.3.7.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"85.3.7.9\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 37.568 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021526%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.111 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.663 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.364 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021532%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.791 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021545%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.866 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.688330%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.269 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.446397%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.724 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021542%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.065 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.837553%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.060 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021527%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.407 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021537%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.823 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.937995%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.320 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.469644%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.290 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.880 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021523%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.273 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.973528%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.010 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.921855%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.384 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021524%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.744 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.926549%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.351 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.910559%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.466 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.692875%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.166 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021626%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.180 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.797296%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.318 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.677215%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.291 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021591%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.252 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":38858.61000003239,\"onlineMoneyMade\":0,\"onlineExpGained\":171072.0978587978,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,19314,0]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":869,\"moneyAvailable\":502812049,\"moneyMax\":12570301225,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":77,\"serversOnNetwork\":[\"88.8.0.2\",\"69.5.6.0\",\"20.5.5.8\",\"23.0.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"86.8.7.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.8.7.6\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":886,\"moneyAvailable\":869804530,\"moneyMax\":21745113250,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":70,\"serversOnNetwork\":[\"1.6.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"35.6.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.6.5.5\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-597187.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,12],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862892.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"613046035\",65],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":851,\"moneyAvailable\":786449486,\"moneyMax\":19661237150,\"hackDifficulty\":58,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":88,\"serversOnNetwork\":[\"31.4.8.7\",\"19.9.9.1\",\"43.5.7.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"54.7.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.7.8.9\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":923,\"moneyAvailable\":1096571194,\"moneyMax\":27414279850,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":58,\"serversOnNetwork\":[\"98.2.3.8\",\"20.0.9.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.0.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.0.9.7\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"20.0.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.0.9.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.0.9.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"20.0.9.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.807 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,972,133.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,044,260.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.130 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,613,500.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.256 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,981,394.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.184 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,894,743.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.798 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,292,056.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.025 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,427,759.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.914 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,874,304.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.918 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,867,337.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.244 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,957,806.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.157 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,317,897.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.070 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,856,448.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.140 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,168,290.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.084 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $706,149.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.973 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,120,149.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.567 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $680,949.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.262 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $535,104.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.511 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $729,486.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.319 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $487,026.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.980 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $372,123.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.918 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $597,627.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.040 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $446,859.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.732 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $503,064.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.500 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $982,017.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.043 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $665,595.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.573 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41644.41000003597,\"onlineMoneyMade\":7428841065,\"onlineExpGained\":287458.52044680284,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7428841065,32454,0,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":880,\"moneyAvailable\":926578688,\"moneyMax\":23164467200,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":63,\"serversOnNetwork\":[\"54.7.8.9\",\"1.6.9.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"29.4.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"29.4.4.6\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":803,\"moneyAvailable\":1001979212,\"moneyMax\":25049480300,\"hackDifficulty\":55,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":66,\"serversOnNetwork\":[\"20.9.6.3\",\"0.8.1.5\",\"59.3.8.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"66.1.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.1.7.7\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":822,\"moneyAvailable\":952002959,\"moneyMax\":23800073975,\"hackDifficulty\":68,\"baseDifficulty\":68,\"minDifficulty\":23,\"serverGrowth\":75,\"serversOnNetwork\":[\"59.0.5.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.9.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.9.6.3\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"20.9.6.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"20.9.6.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"20.9.6.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 29.864 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.663 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.672270%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.901 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831471%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.770 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.816683%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.938 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.351 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831413%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.580 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831520%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.796 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.475905%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.824 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.962689%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.579 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.024 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831415%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.917 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831436%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.586 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831481%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.789 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831523%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.788 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831550%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.857 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.148863%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.144 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831434%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.394 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.266485%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.112 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831419%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.917 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831495%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.145 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.724837%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.025 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831679%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.627 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831834%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.907 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.832331%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.899 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.327013%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.794 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":6290.144,\"offlineMoneyMade\":0,\"offlineExpGained\":6637.355538460633,\"onlineRunningTime\":45033.00999998664,\"onlineMoneyMade\":0,\"onlineExpGained\":794014.0385447877,\"threads\":73,\"dataMap\":{\"86.0.4.7\":[0,0,89644,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":760,\"moneyAvailable\":836184020,\"moneyMax\":20904600500,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":80,\"serversOnNetwork\":[\"19.9.9.1\",\"88.8.0.2\",\"29.4.4.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"19.9.9.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.9.9.1\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":880,\"moneyAvailable\":1650214139,\"moneyMax\":41255353475,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":58,\"serversOnNetwork\":[\"35.6.5.5\",\"91.6.3.4\",\"1.5.6.8\",\"20.9.6.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"6.9.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.9.5.1\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.9.5.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"6.9.5.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"6.9.5.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.793 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,089,331.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.524 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,004,741.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.006 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,756,582.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.242 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,009,564.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.114 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,968,057.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.784 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,422,853.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.012 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,522,952.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.901 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,798,884.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.739 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,813,274.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.119 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,034,288.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.144 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,334,232.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.003 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,089,557.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.100 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,312,821.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.043 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $752,238.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.819 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,166,499.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.292 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $794,817.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.208 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $443,466.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.738 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $924,597.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.976 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $690,534.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.859 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $459,765.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.524 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $830,691.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.399 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $700,101.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.507 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $511,677.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.199 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $963,603.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.919 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $691,821.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.560 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":6290.144,\"offlineMoneyMade\":12922020.808554376,\"offlineExpGained\":2541.96595089981,\"onlineRunningTime\":45243.20999998362,\"onlineMoneyMade\":7533048051,\"onlineExpGained\":307307.98566900956,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7533048051,34902,0,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":790,\"moneyAvailable\":1624402259,\"moneyMax\":40610056475,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":90,\"serversOnNetwork\":[\"7.6.6.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"59.0.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.0.5.8\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":792,\"moneyAvailable\":1150506156,\"moneyMax\":28762653900,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":79,\"serversOnNetwork\":[\"91.6.3.4\",\"66.1.7.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.6.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.6.9.6\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":824,\"moneyAvailable\":1300626499,\"moneyMax\":32515662475,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":73,\"serversOnNetwork\":[\"20.0.9.7\",\"86.8.7.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.5.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.5.7.0\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.5.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"43.5.7.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"43.5.7.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 28.117 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021536%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.325 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021523%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.268 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021525%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.525 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021532%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.016 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.861041%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.882 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.578619%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.794 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021524%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.892 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021549%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.981 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.710575%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.082 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.212 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.821874%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.189 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021528%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.773 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.489851%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.088 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021521%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.516 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021522%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.803 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021528%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.493 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.972136%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.030 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021521%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.188 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021522%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.546 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.007108%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.780 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.848940%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.911 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.785043%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.405 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.320845%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 38.812 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021605%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.956 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021574%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.203 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":6290.144,\"offlineMoneyMade\":0,\"offlineExpGained\":522.3217707328387,\"onlineRunningTime\":43832.81000000411,\"onlineMoneyMade\":0,\"onlineExpGained\":191639.01363119725,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,21636,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":776,\"moneyAvailable\":1019121305,\"moneyMax\":25478032625,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":80,\"serversOnNetwork\":[\"35.6.5.5\",\"55.4.7.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"7.4.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.4.0.3\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.4.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"7.4.0.3\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"7.4.0.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 32.236 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.963657%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.498 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134337%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.460 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134348%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.461 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134360%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.181 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134367%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.621 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134378%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.120 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134412%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.045 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.123687%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.951 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.850417%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.887 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.441953%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.461 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.855825%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.196 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134340%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.960 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134351%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.872 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134359%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.388 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134359%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.995 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134362%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.424 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134346%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.019 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134365%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.373 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.976894%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.509 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134344%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.537 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134374%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.368 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134465%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.477 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134575%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.254 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.761066%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.151 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134563%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.062 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":6290.144,\"offlineMoneyMade\":0,\"offlineExpGained\":3064.2877216326556,\"onlineRunningTime\":44931.00999998813,\"onlineMoneyMade\":0,\"onlineExpGained\":391249.7000423943,\"threads\":36,\"dataMap\":{\"86.0.4.7\":[0,0,44172,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":706,\"moneyAvailable\":768748339,\"moneyMax\":19218708475,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":60,\"serversOnNetwork\":[\"81.0.2.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"31.4.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.4.8.7\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"31.4.8.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"31.4.8.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"31.4.8.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 38.711 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.765 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.449 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.330 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.834 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.943 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.068 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021521%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.279 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.877809%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.767 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021530%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.828 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.710558%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.082 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.023 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.602386%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.023 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.853 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.698 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021523%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.047 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.017757%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.709 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.946102%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.202 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021521%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.433 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.003569%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.804 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.954286%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.154 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.818161%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.146 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.677691%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.286 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021617%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.972 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.698699%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.118 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021606%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.360 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41998.610000030814,\"onlineMoneyMade\":0,\"onlineExpGained\":185899.4092295974,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,20988,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-572396.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[6,8],[7,3,9],[5,6,4,8],[7,5,4,5,3],[6,9,7,3,2,1],[3,4,8,7,8,4,2]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":485,\"moneyAvailable\":571659117,\"moneyMax\":14291477925,\"hackDifficulty\":56,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":56,\"serversOnNetwork\":[\"45.7.0.7\",\"35.6.5.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"7.6.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.6.6.1\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.6.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"7.6.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"7.6.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"7.6.6.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 7.832 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,262,752.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.847 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,518,137.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.661 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,837,935.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.365 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,356,775.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.551 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,530,305.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.305 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,132,802.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.524 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,294,279.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.546 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,229,057.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.271 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,921,545.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.552 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,320,029.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.835 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,413,747.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.530 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,500,615.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.905 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,231,641.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.281 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $779,508.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.224 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $538,524.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.198 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $762,525.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.700 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $522,999.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.614 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $547,704.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.711 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $887,112.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.251 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $591,129.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.913 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $427,527.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.739 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $762,120.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.889 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $584,865.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.638 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $545,751.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.877 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $909,792.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.465 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41548.410000037366,\"onlineMoneyMade\":7359395130,\"onlineExpGained\":286103.3360742024,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7359395130,32301,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168199.cct\",\"type\":\"Total Ways to Sum\",\"data\":14,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":530,\"moneyAvailable\":652219241,\"moneyMax\":16305481025,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":56,\"serversOnNetwork\":[\"45.7.0.7\",\"6.9.5.1\",\"32.7.5.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"98.2.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.2.3.8\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"98.2.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"98.2.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"98.2.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 24.354 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.595600%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.851 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.731056%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.323 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134332%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.522 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134356%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.857 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.653778%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.626 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134343%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.914 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.014228%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.325 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134371%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.753 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.963683%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.498 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.627628%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.717 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134353%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.397 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134393%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.074 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.692837%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.477 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134420%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.822 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.529098%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.051 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134378%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.124 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.498130%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.176 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134372%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.062 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.565166%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.908 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134368%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.306 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.353126%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.770 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134474%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.897 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.758488%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.630 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134483%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.559 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134458%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.021 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":6290.145,\"offlineMoneyMade\":0,\"offlineExpGained\":2716.073639609705,\"onlineRunningTime\":44763.00999999057,\"onlineMoneyMade\":0,\"onlineExpGained\":391887.43386479426,\"threads\":36,\"dataMap\":{\"86.0.4.7\":[0,0,44244,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":429,\"moneyAvailable\":3426340970,\"moneyMax\":6945688100,\"hackDifficulty\":25.924,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":36,\"serversOnNetwork\":[\"45.7.0.7\",\"54.7.8.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"45.7.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.7.0.7\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"45.7.0.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"45.7.0.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"45.7.0.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 37.179 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831461%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.746 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.663 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.625967%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.283 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.609 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.115741%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.669 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831425%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.930 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.433517%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 37.741 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831444%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.167 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831412%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.416 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.689 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.024 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.196 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831418%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.671 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831440%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.581 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831443%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.826 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831433%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.195 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831415%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.793 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831441%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.254 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831441%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.549 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831439%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.492 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831470%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.287 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831583%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.095 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.618723%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.537 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.832161%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.924 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.699996%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.085 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":6290.145,\"offlineMoneyMade\":0,\"offlineExpGained\":6778.57694671824,\"onlineRunningTime\":45105.009999985596,\"onlineMoneyMade\":0,\"onlineExpGained\":792720.8560715878,\"threads\":73,\"dataMap\":{\"86.0.4.7\":[0,0,89498,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":400,\"moneyAvailable\":4503395475,\"moneyMax\":4503395475,\"hackDifficulty\":20.412,\"baseDifficulty\":50,\"minDifficulty\":17,\"serverGrowth\":39,\"serversOnNetwork\":[\"31.8.2.7\",\"31.4.8.7\",\"7.6.6.1\",\"98.2.3.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"81.0.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.0.2.1\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"81.0.2.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.0.2.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"81.0.2.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 31.496 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831411%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.223 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.105 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.609 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.669 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831413%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.641 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831445%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.709 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831574%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 31.799 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.892568%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.813 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831432%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.674 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831491%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.220 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831464%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.892 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.374744%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.997 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.889180%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.676 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831459%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.117 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831455%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.906 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831422%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 30.078 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.697 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831411%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.144 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831436%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.026 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831496%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.684 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.808679%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.898 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.933121%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.585 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831700%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.679 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831824%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.972 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831784%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.069 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":6290.145,\"offlineMoneyMade\":0,\"offlineExpGained\":7061.0176528315,\"onlineRunningTime\":45141.00999998507,\"onlineMoneyMade\":0,\"onlineExpGained\":795307.2210179876,\"threads\":73,\"dataMap\":{\"86.0.4.7\":[0,0,89790,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":766,\"moneyAvailable\":803499695,\"moneyMax\":20087492375,\"hackDifficulty\":70,\"baseDifficulty\":70,\"minDifficulty\":23,\"serverGrowth\":83,\"serversOnNetwork\":[\"50.3.6.1\",\"7.4.0.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"5.2.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.2.6.4\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.2.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"5.2.6.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"5.2.6.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 30.584 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.162 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.085992%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.761 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021525%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.268 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021542%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.372 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.815662%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.227 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021525%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.161 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021552%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.476 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.624305%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.816 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.181 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021523%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.117 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.913880%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.503 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021548%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.268 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.883654%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.714 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.516819%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.757 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021529%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.178 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021531%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.606 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021523%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.599 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.976993%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.996 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021531%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.244 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.724431%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.893 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021549%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.072 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.736739%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.802 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021635%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.856 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.887660%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.633 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.365090%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 38.309 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41584.210000036845,\"onlineMoneyMade\":0,\"onlineExpGained\":184783.37504039743,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,20862,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-587134.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9336841643\",-22],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-577898.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[169,188,25,128,49,127,4,177,174,117,87,8,95,28,80,129,164,97,125,31,24,140,72,61,60,127,147,82,195]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":443,\"moneyAvailable\":3602958414,\"moneyMax\":7210187350,\"hackDifficulty\":21.264,\"baseDifficulty\":57,\"minDifficulty\":19,\"serverGrowth\":60,\"serversOnNetwork\":[\"31.8.2.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"77.4.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.4.3.8\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-921161-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[109,69,91,100,132,37,73,3],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"dir\":0,\"requiredHackingSkill\":560,\"moneyAvailable\":596879937,\"moneyMax\":14921998425,\"hackDifficulty\":63,\"baseDifficulty\":63,\"minDifficulty\":21,\"serverGrowth\":70,\"serversOnNetwork\":[\"91.8.3.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"83.9.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.9.4.5\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"83.9.4.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"83.9.4.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"83.9.4.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 28.036 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831412%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.538 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.407174%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 33.935 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.891539%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.085 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831484%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.709 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831541%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 32.965 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.136862%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.234 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831450%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.113 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831453%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.538 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.338881%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 35.835 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831417%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.065 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831466%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.591 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.194622%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.109 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831462%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.499 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831489%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.852 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831536%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.050 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831530%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.770 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.846335%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.821 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831508%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.664 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.106163%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 34.381 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.771522%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 36.925 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831486%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.077 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831638%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 29.336 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.831775%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.616 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.832023%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.017 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.858952%. Gained 646.5912 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 39.052 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":6290.145,\"offlineMoneyMade\":0,\"offlineExpGained\":6637.35659366161,\"onlineRunningTime\":45069.00999998612,\"onlineMoneyMade\":0,\"onlineExpGained\":793367.4473081877,\"threads\":73,\"dataMap\":{\"86.0.4.7\":[0,0,89571,0]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":428,\"moneyAvailable\":11442844225,\"moneyMax\":11442844225,\"hackDifficulty\":26.412,\"baseDifficulty\":66,\"minDifficulty\":22,\"serverGrowth\":39,\"serversOnNetwork\":[\"91.8.3.5\",\"33.4.7.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"11.3.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.3.9.3\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":6.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"11.3.9.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"11.3.9.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"11.3.9.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"11.3.9.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.866 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,036,036.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.681 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $756,784.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.385 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,328,560.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.584 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,002,740.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.338 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $846,956.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.557 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,303,816.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.579 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $883,304.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.304 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $809,708.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 7.492 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,179,152.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.263 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $805,952.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.177 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $571,280.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.198 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $705,148.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.187 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $444,724.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.130 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $298,524.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.046 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $460,816.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.587 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $314,760.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.500 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $242,996.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.749 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $300,016.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.338 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $200,448.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.000 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $174,436.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 7.492 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $362,048.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.530 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $288,320.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 10.527 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $210,888.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 11.219 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $427,836.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.173 seconds (t=4)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $273,816.00 and 35.4297 exp (t=4)\",\"Attempting to hack harakiri-sushi in 9.593 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":8035.8099999973165,\"onlineMoneyMade\":293029128,\"onlineExpGained\":11550.06811680008,\"threads\":4,\"dataMap\":{\"86.0.4.7\":[293029128,1304,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245357.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":319,\"moneyAvailable\":2016754999,\"moneyMax\":4044790675,\"hackDifficulty\":15.662,\"baseDifficulty\":45,\"minDifficulty\":15,\"serverGrowth\":50,\"serversOnNetwork\":[\"29.0.6.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"95.0.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"95.0.2.1\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":324,\"moneyAvailable\":3062653494,\"moneyMax\":6158948250,\"hackDifficulty\":22.744,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":52,\"serversOnNetwork\":[\"82.0.8.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"50.3.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.3.6.1\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.3.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"50.3.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"50.3.6.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 35.192 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.022466%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.663 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.775897%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.539 seconds (t=18)\",\"Available money on harakiri-sushi grown by 1.398578%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.609 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021528%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.039 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.709991%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.087 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021520%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.869 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.630785%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.768 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.557 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.705 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.205 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021532%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.181 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.946812%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.268 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.678769%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.341 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021544%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.036 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021544%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.137 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.746100%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.716 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.559130%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.355 seconds (t=18)\",\"Available money on harakiri-sushi grown by 1.716147%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.307 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.454 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021530%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.036 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021550%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.664 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.808299%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.232 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.367276%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 38.285 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021591%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.161 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021572%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.537 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":42262.61000002698,\"onlineMoneyMade\":0,\"onlineExpGained\":186856.00996319737,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,21096,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":417,\"moneyAvailable\":3434038952,\"moneyMax\":6875000000,\"hackDifficulty\":26.644,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":56,\"serversOnNetwork\":[\"62.9.0.6\",\"81.0.2.1\",\"66.6.6.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"31.8.2.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"31.8.2.7\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":295,\"moneyAvailable\":1899594200,\"moneyMax\":1899594200,\"hackDifficulty\":13,\"baseDifficulty\":40,\"minDifficulty\":13,\"serverGrowth\":57,\"serversOnNetwork\":[\"82.0.8.4\",\"45.7.0.7\",\"5.2.6.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"67.0.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.0.9.2\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.0.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.0.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"67.0.9.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"67.0.9.2\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.838 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,849,535.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.155 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,961,208.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.748 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,890,783.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.721 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,229,479.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.564 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,435,391.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.319 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,054,214.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,169,350.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.560 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,145,402.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.284 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,850,769.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.566 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,232,414.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.849 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,360,890.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.543 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,442,367.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.919 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,184,751.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.295 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $750,231.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.238 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $518,580.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.211 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $733,671.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.714 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $503,469.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.627 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $541,854.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.781 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $820,836.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.278 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $547,380.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.940 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $396,252.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.766 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $671,616.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.000 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $501,579.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.692 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $480,078.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.985 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $778,122.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.519 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":25376.21000003701,\"onlineMoneyMade\":4261528296,\"onlineExpGained\":165731.0770961968,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[4261528296,18711,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":24891560,\"moneyMax\":50000000,\"hackDifficulty\":3.21,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"49.1.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.1.0.3\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.1.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.1.0.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"49.1.0.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"49.1.0.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.920 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,038,302.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.735 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,490,985.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.439 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,613,303.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.638 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,031,552.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.449 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,024,190.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.610 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,045,321.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.052 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,248,056.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.941 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,782,990.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.001 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,608,200.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.277 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,783,098.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.190 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,264,230.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.211 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,500,255.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.214 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $946,908.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.157 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $636,093.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.073 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $980,739.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.614 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $670,392.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.527 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $542,484.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.883 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $638,388.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.365 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $426,753.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.027 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $370,620.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.519 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $776,817.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.751 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $631,125.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.611 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $472,113.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.356 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $901,323.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.271 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $709,434.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.073 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41752.4100000344,\"onlineMoneyMade\":7397821179,\"onlineExpGained\":287697.6706302029,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7397821179,32481,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-834962-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[59,142,76,195,84,135,5,111,88,130,194,90,179,67,67,100,78,129,50,109,154,101],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"hackDifficulty\":9.976,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"15.9.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.9.5.4\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"15.9.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"15.9.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"15.9.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"15.9.5.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.675 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,119,661.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.453 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,083,248.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.992 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,794,058.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.172 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,127,212.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.100 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,976,994.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.522 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,743,667.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.914 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,835,981.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.861 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,912,761.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.588 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,076,578.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.022 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,285,730.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.103 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,309,365.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.684 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,918,359.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.670 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,312,299.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.781 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $738,189.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.506 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $872,991.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.476 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $892,953.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.168 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $484,677.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.641 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $619,686.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.130 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $614,115.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.378 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $410,679.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.040 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $356,148.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.532 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $792,018.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.876 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $607,554.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.624 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $566,514.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.864 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $945,711.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.452 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":38720.61000003189,\"onlineMoneyMade\":6882597567,\"onlineExpGained\":266652.4544909958,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[6882597567,30105,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-289023.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[144],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"hackDifficulty\":8.586,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"40.1.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"40.1.5.0\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"40.1.5.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"40.1.5.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"40.1.5.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 10.401 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,894,030.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.949 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $5,642,946.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.781 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,431,664.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.476 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,087,594.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.513 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $4,019,598.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.127 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,526,786.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.070 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,486,854.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.903 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,424,150.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.554 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,472,454.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.248 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,155,384.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.497 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,579,176.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.305 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,053,468.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.967 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $762,984.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.793 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,292,616.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.027 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $965,736.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.718 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,012,878.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 12.231 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,497,204.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.546 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":183.6099999999981,\"onlineMoneyMade\":37305522,\"onlineExpGained\":2710.368745199999,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[37305522,306,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"hackDifficulty\":9.948,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"67.8.4.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"9.1.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.1.7.3\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.1.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.1.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.1.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"9.1.7.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.298 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,137,778.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.860 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,422,800.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.675 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,769,049.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.379 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,107,034.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.578 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,344,059.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.332 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,978,533.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.551 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,049,173.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.573 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,064,906.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.298 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,782,612.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.579 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,148,120.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.862 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,346,274.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.611 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,386,387.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.932 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,441,683.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.748 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $722,061.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.251 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $584,604.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.500 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,189,026.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.416 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $764,955.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.221 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $585,567.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.413 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $853,326.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.265 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $568,836.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.926 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $411,588.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.753 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $678,033.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.929 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $521,010.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.678 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $487,215.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.918 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $808,812.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.506 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41680.410000035445,\"onlineMoneyMade\":7416061038,\"onlineExpGained\":287697.6706302029,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7416061038,32481,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":34183490,\"moneyMax\":68750000,\"hackDifficulty\":7.228,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"39.0.0.6\",\"82.0.8.4\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.9.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.9.4.1\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"5.9.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"5.9.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"5.9.4.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 11.211 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,886,192.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.241 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,822,626.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.184 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,256,274.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.157 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,887,156.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.641 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,290,654.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.554 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,045,206.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.910 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,181,538.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.405 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $790,434.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.067 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $684,504.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.559 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,466,712.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.916 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,126,062.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 10.665 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,051,488.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 11.904 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,750,500.00 and 159.4335 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.492 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":147.61000000000016,\"onlineMoneyMade\":18239346,\"onlineExpGained\":2072.6349227999995,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[18239346,234,0,0]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"hackDifficulty\":10.954,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"84.6.9.4\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"29.0.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"29.0.6.5\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"29.0.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"29.0.6.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"29.0.6.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 30.220 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.992666%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.937 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134332%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.343 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.719516%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.376 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.955704%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.943 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.953408%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.068 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134344%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.516 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.117849%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 32.970 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134372%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.354 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.100280%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.037 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.929110%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.618 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134359%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.377 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.657552%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.611 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134425%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.664 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.617795%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.692 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134398%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.664 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.524300%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.061 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134343%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.535 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134363%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.913 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.466403%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.296 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134364%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.499 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.003225%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.380 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134422%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.690 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134479%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.970 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134548%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.080 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134550%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.642 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":6290.146000000001,\"offlineMoneyMade\":0,\"offlineExpGained\":2925.00284613239,\"onlineRunningTime\":44895.00999998865,\"onlineMoneyMade\":0,\"onlineExpGained\":391249.7000423943,\"threads\":36,\"dataMap\":{\"86.0.4.7\":[0,0,44172,0]}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":561743271,\"moneyMax\":1125000000,\"hackDifficulty\":10.322,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"48.9.8.5\",\"11.3.9.3\",\"91.8.3.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"39.0.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"39.0.0.6\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"39.0.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"39.0.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"39.0.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"39.0.0.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.834 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,617,245.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.648 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,909,512.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.352 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,489,111.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,628,945.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.292 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,804,518.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.070 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,424,158.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.533 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,315,997.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.257 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,807,218.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.317 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,411,109.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.822 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,468,674.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.516 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,431,423.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.721 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,559,700.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.200 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $983,907.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.144 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $660,600.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.060 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,019,367.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.600 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $696,438.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.513 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $537,822.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.762 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $663,633.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.352 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $443,457.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.013 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $385,668.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.505 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $800,874.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.543 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $655,614.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.597 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $478,368.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.289 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $974,106.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.244 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $605,709.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.606 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41716.41000003492,\"onlineMoneyMade\":7505373384,\"onlineExpGained\":288016.537541403,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7505373384,32517,0,0]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":37284354,\"moneyMax\":75000000,\"hackDifficulty\":5.228,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"9.1.7.3\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.0.4.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.0.4.7\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"86.0.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"86.0.4.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"86.0.4.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"86.0.4.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.820 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,859,399.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.551 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,967,382.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.144 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,475,890.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.269 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,869,353.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.197 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,922,544.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.922 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $3,166,272.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.039 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,336,175.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.928 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,851,759.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.988 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,758,131.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.257 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,884,204.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.171 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,334,808.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.192 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,649,466.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.181 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,039,734.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.124 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $697,563.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.040 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,077,687.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.581 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $735,732.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.494 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $567,594.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.743 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $701,739.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.332 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $468,666.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.994 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $386,883.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.099 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $575,127.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.054 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $430,200.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.745 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $576,216.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.845 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $937,008.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.257 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $737,181.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.060 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":41782.41000003396,\"onlineMoneyMade\":7439700186,\"onlineExpGained\":288016.537541403,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7439700186,32517,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":18235036.05061815,\"moneyMax\":100000000,\"hackDifficulty\":8.455999999999992,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\",\"48.9.8.5\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.0.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.0.8.4\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"82.0.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"82.0.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"82.0.8.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 31.837 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.963178%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.143 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021517%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.893 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021524%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.976 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021527%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.610 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021527%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.944 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021529%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.381 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021534%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.090 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021534%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.240 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021527%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.447 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021529%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.136 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021541%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 31.837 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.972859%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.085 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.714608%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.039 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021545%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.854 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.455882%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.361 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.816 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.941 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.307 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.045029%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.464 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021529%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.218 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021550%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.890 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.763364%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.577 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021627%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.363 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.936765%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.279 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.564384%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.297 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":42040.6100000302,\"onlineMoneyMade\":0,\"onlineExpGained\":186377.70959639738,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,21042,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":298013366,\"moneyMax\":600000000,\"hackDifficulty\":7.274,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"9.1.7.3\",\"95.0.2.1\",\"31.8.2.7\",\"24.0.0.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"84.6.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"84.6.9.4\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"84.6.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"84.6.9.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"84.6.9.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 31.506 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.855998%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.868 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":69.61000000000045,\"onlineMoneyMade\":0,\"onlineExpGained\":159.4334556,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,18,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":124875790,\"moneyMax\":250000000,\"hackDifficulty\":5.254,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"67.8.4.1\",\"5.9.4.1\",\"62.9.0.6\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"62.9.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.9.0.6\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.9.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.9.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"62.9.0.6\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 35.899 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":27.609999999999935,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":18,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":183,\"moneyAvailable\":1599963575,\"moneyMax\":1599963575,\"hackDifficulty\":11,\"baseDifficulty\":34,\"minDifficulty\":11,\"serverGrowth\":38,\"serversOnNetwork\":[\"84.6.9.4\",\"50.3.6.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"91.8.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.8.3.5\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":227,\"moneyAvailable\":1014352500,\"moneyMax\":1014352500,\"hackDifficulty\":18.346,\"baseDifficulty\":41,\"minDifficulty\":14,\"serverGrowth\":29,\"serversOnNetwork\":[\"29.0.6.5\",\"77.4.3.8\",\"83.9.4.5\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"67.8.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.8.4.1\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"67.8.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"67.8.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"67.8.4.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 27.079 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021633%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.631 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.911343%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.451 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.401958%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.921 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":111.61000000000105,\"onlineMoneyMade\":0,\"onlineExpGained\":478.3003668,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,54,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746197.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,4],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":249351773,\"moneyMax\":500000000,\"hackDifficulty\":10.282,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"40.1.5.0\",\"84.6.9.4\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"33.4.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.4.7.3\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":256,\"ramUsed\":255.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"33.4.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"33.4.7.3\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"33.4.7.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 25.895 seconds (t=146)\",\"Available money on harakiri-sushi grown by 24.231265%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 36.296 seconds (t=146)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 24.901 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309356%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 33.978 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309320%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 28.161 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309390%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.865 seconds (t=146)\",\"Available money on harakiri-sushi grown by 25.175022%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 35.523 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309493%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.701 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.081186%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.323 seconds (t=146)\",\"Available money on harakiri-sushi grown by 15.399818%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 28.689 seconds (t=146)\",\"Available money on harakiri-sushi grown by 16.233913%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 29.024 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309331%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 29.164 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309480%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 27.421 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309679%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 26.073 seconds (t=146)\",\"Available money on harakiri-sushi grown by 23.941646%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 36.489 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309486%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 28.641 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309504%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 27.069 seconds (t=146)\",\"Available money on harakiri-sushi grown by 22.472681%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 37.840 seconds (t=146)\",\"Available money on harakiri-sushi grown by 13.292817%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 30.390 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309303%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 30.375 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309366%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 31.171 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.309680%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 31.151 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.310053%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.493 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.310349%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 31.506 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.310320%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 33.581 seconds (t=146)\",\"Available money on harakiri-sushi grown by 27.310264%. Gained 1,293.1825 hacking exp (t=146)\",\"Executing grow() on server harakiri-sushi in 32.148 seconds (t=146)\"],\"logUpd\":true,\"offlineRunningTime\":6290.147,\"offlineMoneyMade\":0,\"offlineExpGained\":14686.92138771511,\"onlineRunningTime\":45213.00999998403,\"onlineMoneyMade\":0,\"onlineExpGained\":1589321.2595627753,\"threads\":146,\"dataMap\":{\"86.0.4.7\":[0,0,179434,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803983-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,1,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,1],[1,0,1,0,1,0,0,1,0,0,1,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":525,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"hackDifficulty\":53,\"baseDifficulty\":53,\"minDifficulty\":18,\"serverGrowth\":45,\"serversOnNetwork\":[\"83.9.4.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"19.1.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"19.1.6.0\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"19.1.6.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"19.1.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"19.1.6.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 26.250 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.127598%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.843 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.009293%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.034 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134333%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.034 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.900380%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.709 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134344%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.220 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.165956%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.666 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134342%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.823 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134340%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.613 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134338%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.029 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.829074%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.964 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134357%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.775 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.555514%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.010 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134392%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.447 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.031786%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.231 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134347%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.260 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134333%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.634 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.697 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.182 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134333%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.272 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134359%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.854 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.864232%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 38.079 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134417%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.486 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134464%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.561 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134478%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.893 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134451%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.336 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":6290.147,\"offlineMoneyMade\":0,\"offlineExpGained\":2716.074503207589,\"onlineRunningTime\":44727.009999991096,\"onlineMoneyMade\":0,\"onlineExpGained\":389655.3654863943,\"threads\":36,\"dataMap\":{\"86.0.4.7\":[0,0,43992,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-735842.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":1241157,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":987,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"hackDifficulty\":61,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":54,\"serversOnNetwork\":[\"33.2.8.8\",\"77.5.0.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"32.7.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.7.5.2\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":766,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":57,\"serversOnNetwork\":[\"7.6.6.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.3.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.3.8.7\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"59.3.8.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"59.3.8.7\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"59.3.8.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 32.418 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.883619%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.714 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021522%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.772 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021529%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.816 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021540%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.666 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021541%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.039 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021545%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.476 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021548%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.164 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.668691%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.427 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.688169%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.913 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021526%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.181 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021543%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.106 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.811957%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.256 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021560%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.224 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.792310%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.347 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.472990%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.179 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 30.279 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.697 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.583152%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.182 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021522%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.208 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021537%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.952 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.666471%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.382 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021596%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.771 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.522354%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.704 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021616%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 28.262 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021617%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.824 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":6290.148,\"offlineMoneyMade\":0,\"offlineExpGained\":696.4294705144946,\"onlineRunningTime\":44018.8100000014,\"onlineMoneyMade\":0,\"onlineExpGained\":191798.44708679724,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,21654,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":538,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"29.4.4.6\",\"19.8.8.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"66.6.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.6.6.4\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.6.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"66.6.6.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"66.6.6.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 30.402 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.937 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021518%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.569 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.763892%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.635 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.901897%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.226 seconds (t=18)\",\"Available money on harakiri-sushi grown by 0.899670%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.351 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021521%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.687 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.822519%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.175 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021523%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.258 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021525%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.964 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021535%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 32.404 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.807623%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 34.299 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021541%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.010 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.605062%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.923 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021532%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.034 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021542%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.232 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021540%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 25.349 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.668117%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 35.368 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021527%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 26.653 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.475373%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 37.155 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021524%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 29.139 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021537%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.927 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021582%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 27.079 seconds (t=18)\",\"Available money on harakiri-sushi grown by 3.021630%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 24.180 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.961263%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 33.097 seconds (t=18)\",\"Available money on harakiri-sushi grown by 2.588793%. Gained 159.4335 hacking exp (t=18)\",\"Executing grow() on server harakiri-sushi in 36.081 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":42226.6100000275,\"onlineMoneyMade\":0,\"onlineExpGained\":186696.57650759738,\"threads\":18,\"dataMap\":{\"86.0.4.7\":[0,0,21078,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537610.cct\",\"type\":\"Total Ways to Sum\",\"data\":91,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":357,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"50.3.6.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"24.0.0.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.0.0.4\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"24.0.0.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"24.0.0.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"24.0.0.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 32.816 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.773765%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.175 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134342%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.213 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134363%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 30.364 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134384%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 31.146 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.015619%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.311 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.087820%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 37.031 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134339%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.178 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134337%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.969 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134332%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.749 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.529046%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.115 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134350%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.753 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134385%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.828 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.377905%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 35.665 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134376%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.143 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134390%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.255 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.171196%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.575 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.697 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134349%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.007 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134369%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 24.310 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.849086%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 33.839 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.230481%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 36.316 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134455%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.831 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134550%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.790 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.569124%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 34.893 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.134528%. Gained 318.8669 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.178 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":6290.148,\"offlineMoneyMade\":0,\"offlineExpGained\":2855.360829109431,\"onlineRunningTime\":44859.009999989175,\"onlineMoneyMade\":0,\"onlineExpGained\":388698.76475279435,\"threads\":36,\"dataMap\":{\"86.0.4.7\":[0,0,43884,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":205,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"82.0.8.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"49.3.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.3.1.5\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"49.3.1.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"49.3.1.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"49.3.1.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 8.907 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,118,438.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.721 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,548,981.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.425 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,716,200.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.624 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,110,572.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.436 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,863,756.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.762 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,665,593.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.620 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,859,724.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.401 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,025,621.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.922 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $2,932,344.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.754 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,587,195.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.230 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,502,748.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.913 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $1,387,170.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.762 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $694,962.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.265 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $753,165.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.067 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $872,109.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.654 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $597,087.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.567 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $566,667.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.500 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $942,291.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.100 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $664,461.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.873 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $442,566.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $799,119.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.413 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $673,920.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 10.521 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $492,732.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 11.213 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $944,505.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.057 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $640,359.00 and 79.7167 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.587 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":6290.148,\"offlineMoneyMade\":13597672.405141875,\"offlineExpGained\":2498.4407254707457,\"onlineRunningTime\":45243.20999998362,\"onlineMoneyMade\":7522042734,\"onlineExpGained\":306690.18102855934,\"threads\":9,\"dataMap\":{\"86.0.4.7\":[7522042734,34875,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":530,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"19.8.8.8\",\"33.3.7.6\",\"89.9.7.0\",\"7.6.7.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"48.9.8.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.9.8.5\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"48.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"48.9.8.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"48.9.8.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"48.9.8.5\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 34.385 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":33.60999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":4,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":56,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"86.0.4.7\",\"29.0.6.5\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"77.5.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.5.0.9\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"19.1.6.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"66.5.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.5.6.5\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"42.1.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.1.9.4\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-261174.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[6,148,180,50,97,124,189,145,53]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"30.2.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.2.5.6\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":3534.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"30.2.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"30.2.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"30.2.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"30.2.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"30.2.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"30.2.5.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"comptek\",1],\"server\":\"30.2.5.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server comptek in 453.297 seconds (t=862)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":279.80999999999267,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":862,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"6.4.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.4.5.5\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2521.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"6.4.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"6.4.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"6.4.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"6.4.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"6.4.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"6.4.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"the-hub\",1],\"server\":\"6.4.5.5\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server the-hub in 311.190 seconds (t=615)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":165.80999999999912,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":615,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.4.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.4.8.2\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":729,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"61.4.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"61.4.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"61.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"61.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"61.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"61.4.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"omega-net\",1],\"server\":\"61.4.8.2\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack omega-net in 41.416 seconds (t=180)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":33.60999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":180,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.2.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.2.9.2\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1984.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.2.9.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.2.9.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"53.2.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.2.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.2.9.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"53.2.9.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"phantasy\",1],\"server\":\"53.2.9.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server phantasy in 55.540 seconds (t=484)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":21.609999999999957,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":484,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"32.1.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"32.1.0.6\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2767.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"32.1.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"32.1.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"32.1.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"32.1.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"32.1.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"32.1.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"silver-helix\",1],\"server\":\"32.1.0.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server silver-helix in 104.703 seconds (t=675)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":45.61000000000011,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":675,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"42.1.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"42.1.6.5\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":282.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"42.1.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"42.1.6.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"42.1.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"42.1.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"42.1.6.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"42.1.6.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"rothman-uni\",1],\"server\":\"42.1.6.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server rothman-uni in 626.191 seconds (t=69)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":39.61000000000003,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":69,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"39.0.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"39.0.1.7\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":4141,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"39.0.1.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"39.0.1.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"39.0.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"39.0.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"39.0.1.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"39.0.1.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"iron-gym\",1],\"server\":\"39.0.1.7\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server iron-gym in 73.555 seconds (t=1010)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":63.61000000000037,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1010,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"22.8.7.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.8.7.1\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1154.25,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"22.8.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"22.8.7.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"22.8.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"22.8.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"22.8.7.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"22.8.7.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"args\":[\"johnson-ortho\",1],\"server\":\"22.8.7.1\",\"ramUsage\":4.05,\"logs\":[\"Attempting to hack johnson-ortho in 75.515 seconds (t=285)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":33.60999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":285,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.1.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.1.1.6\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2301.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"24.1.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"24.1.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"24.1.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"24.1.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"24.1.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"24.1.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"max-hardware\"],\"server\":\"24.1.1.6\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot8/max-hardware: grow by factor of 2.0019893367641557\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.410000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"max-hardware\",1],\"server\":\"24.1.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server max-hardware in 37.150 seconds (t=560)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3.610000000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":560,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"13.8.1.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.8.1.2\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":364.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"13.8.1.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"13.8.1.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"13.8.1.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"13.8.1.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"13.8.1.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"13.8.1.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"catalyst\",1],\"server\":\"13.8.1.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server catalyst in 862.792 seconds (t=89)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":622.0100000000045,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":89,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.9.1.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.9.1.8\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":6938.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"5.9.1.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"5.9.1.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"5.9.1.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"5.9.1.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"5.9.1.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"5.9.1.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"sigma-cosmetics\",1],\"server\":\"5.9.1.8\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server sigma-cosmetics in 12.939 seconds (t=1691)\",\"Available money on sigma-cosmetics grown by 101.158167%. Gained 11,676.2583 hacking exp (t=1691)\",\"Running script: ms-control.js on bot10 with 1 threads and args: [\\\"sigma-cosmetics\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":15.609999999999978,\"onlineMoneyMade\":0,\"onlineExpGained\":11676.2582748,\"threads\":1691,\"dataMap\":{\"49.1.0.3\":[0,0,1691,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"sigma-cosmetics\"],\"server\":\"5.9.1.8\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2.8100000000000005,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"97.3.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.3.5.4\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":3457.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"97.3.5.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"97.3.5.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"97.3.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"97.3.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"97.3.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"97.3.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"joesguns\",1],\"server\":\"97.3.5.4\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server joesguns in 15.103 seconds (t=842)\",\"Available money on joesguns grown by 100.530710%. Gained 7,457.9428 hacking exp (t=842)\",\"Running script: ms-control.js on bot11 with 1 threads and args: [\\\"joesguns\\\"]. May take a few seconds to start up...\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":15.609999999999978,\"onlineMoneyMade\":0,\"onlineExpGained\":7457.942756400001,\"threads\":842,\"dataMap\":{\"15.9.5.4\":[0,0,842,0]}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"joesguns\"],\"server\":\"97.3.5.4\",\"ramUsage\":5.7,\"logs\":[],\"logUpd\":false,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":0.6100000000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"99.1.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.1.6.2\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":13837.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"99.1.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"99.1.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"99.1.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"99.1.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"99.1.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"99.1.6.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"foodnstuff\",1],\"server\":\"99.1.6.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server foodnstuff in 12.170 seconds (t=3375)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":9.61,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":3375,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.6.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.6.1.1\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":356.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"92.6.1.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"92.6.1.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"92.6.1.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"92.6.1.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"92.6.1.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"92.6.1.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"crush-fitness\",1],\"server\":\"92.6.1.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server crush-fitness in 326.731 seconds (t=87)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":285.8099999999923,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":87,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"73.9.5.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"73.9.5.3\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":188.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"73.9.5.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"73.9.5.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"73.9.5.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"73.9.5.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"73.9.5.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"73.9.5.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"summit-uni\",1],\"server\":\"73.9.5.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server summit-uni in 721.469 seconds (t=46)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":568.0099999999923,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":46,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"36.4.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"36.4.1.0\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":246,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"36.4.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"36.4.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"36.4.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"36.4.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"36.4.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"36.4.1.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"neo-net\",1],\"server\":\"36.4.1.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server neo-net in 55.973 seconds (t=60)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":33.60999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":60,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"34.9.3.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.9.3.2\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2781.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"34.9.3.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"34.9.3.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"34.9.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"34.9.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"34.9.3.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"34.9.3.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"nectar-net\"],\"server\":\"34.9.3.2\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot16/nectar-net: grow by factor of 2.011204824317236\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":9.21,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"nectar-net\",1],\"server\":\"34.9.3.2\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server nectar-net in 20.635 seconds (t=677)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3.610000000000001,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":677,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"52.3.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"52.3.2.0\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":159.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.3.2.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"52.3.2.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"52.3.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.3.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"52.3.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"52.3.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zer0\",1],\"server\":\"52.3.2.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zer0 in 70.825 seconds (t=39)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":27.609999999999935,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":39,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"13.3.2.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.3.2.7\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":3468.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"13.3.2.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"13.3.2.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"13.3.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"13.3.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"13.3.2.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"13.3.2.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"hong-fang-tea\",1],\"server\":\"13.3.2.7\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server hong-fang-tea in 21.371 seconds (t=846)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":15.609999999999978,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":846,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"83.9.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.9.2.3\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":159.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"83.9.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"83.9.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"83.9.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"83.9.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"83.9.2.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"83.9.2.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"aevum-police\",1],\"server\":\"83.9.2.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server aevum-police in 847.523 seconds (t=39)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":195.80999999999742,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":39,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.9.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.9.6.1\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":135.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"87.9.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"87.9.6.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0];\\r\\n    let log = new Logger(ns, { });\\r\\n\\r\\n    // gather info\\r\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\r\\n    let current = ns.getServerMoneyAvailable(target);\\r\\n    let goal = current / 2;\\r\\n    let max = ns.getServerMaxMoney(target);\\r\\n    let factor = max / current;\\r\\n    let minSec = ns.getServerMinSecurityLevel(target);\\r\\n    let sec = ns.getServerSecurityLevel(target);\\r\\n    let maxMultiple = 4;\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} threads\\r\\n     * @param {(hostname: string) => number} getTime\\r\\n     */\\r\\n    async function job(name, threads, getTime) {\\r\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\r\\n        let reqRam = scriptRam * threads;\\r\\n\\r\\n        let multiple = 1;\\r\\n\\r\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\r\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\r\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\r\\n            if (serverRam < reqRam) {\\r\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\r\\n                threads = Math.floor(threads / 2);\\r\\n                multiple = multiple * 2;\\r\\n                reqRam = scriptRam * threads;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (serverRam >= reqRam) {\\r\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\r\\n        } else {\\r\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\r\\n            ns.exit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // phase 1/3: weaken to minimum\\r\\n    if (sec-1 > minSec) {\\r\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\r\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\r\\n        await job('weaken', threads, ns.getWeakenTime);\\r\\n    }\\r\\n\\r\\n    // phase 2: grow to max\\r\\n    else if (factor > 1) {\\r\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\r\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\r\\n        await job('grow', threads, ns.getGrowTime);\\r\\n    }\\r\\n    \\r\\n    // phase 4: steal half\\r\\n    else {\\r\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\r\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\r\\n        await job('hack', threads, ns.getHackTime);\\r\\n    }\\r\\n}\",\"ramUsage\":5.7,\"server\":\"87.9.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"87.9.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"87.9.6.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"87.9.6.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"netlink\",1],\"server\":\"87.9.6.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server netlink in 846.711 seconds (t=33)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":33.60999999999994,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":33,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"8.3.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"8.3.2.9\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"7.0.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.0.4.8\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"41.6.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.6.9.7\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"20.0.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"20.0.5.8\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":19270.89507097833,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":7038.632490942846,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":23953.646899060157,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":19153.223917540447,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":19158.08472932736,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":27,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":696.2955572584032,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":11,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":39893.492632455134,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":7,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":18786.476710672312,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"37.4.2.6\",\"BitRunners Server\":\"59.3.8.7\",\"The Black Hand Server\":\"66.6.6.4\",\"NiteSec Server\":\"24.0.0.4\",\"The Dark Army Server\":\"49.3.1.5\",\"CyberSec Server\":\"48.9.8.5\",\"Daedalus Server\":\"77.5.0.9\",\"w0r1d_d43m0n\":\"66.5.6.5\",\"Darkweb Server\":\"42.1.9.4\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":124799.92380473853,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":false,\"otlkMag\":14.888957165217386,\"cap\":335919010,\"totalShares\":100000000,\"maxShares\":20000000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":860728.2900677247,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":23.433447249368257,\"cap\":74309292,\"totalShares\":85300000,\"maxShares\":17100000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":755803.0464684066,\"playerShares\":387290,\"playerAvgPx\":739013.6302623814,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":15.68101944568771,\"cap\":114431274,\"totalShares\":102000000,\"maxShares\":20400000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":30899.855915590244,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":7.129063504975538,\"cap\":341806820,\"totalShares\":71700000,\"maxShares\":14300000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":365086.7479891841,\"playerShares\":766241,\"playerAvgPx\":300465.64436977333,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":9.96911098508328,\"cap\":79911169,\"totalShares\":54700000,\"maxShares\":10900000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":609135.4518123333,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":true,\"otlkMag\":6.401368845744117,\"cap\":120059888,\"totalShares\":26700000,\"maxShares\":5300000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":73262.86996628805,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":6.716791790279548,\"cap\":567839962,\"totalShares\":73600000,\"maxShares\":14700000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":763462.0035328283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":14.444691091744916,\"cap\":553408715,\"totalShares\":58300000,\"maxShares\":11700000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":53170.02623415291,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":false,\"otlkMag\":8.319119991190286,\"cap\":475983299,\"totalShares\":58300000,\"maxShares\":11700000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":41860.20051608604,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":8.349337752765228,\"cap\":348662453,\"totalShares\":62300000,\"maxShares\":12500000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":92077.028950828,\"playerShares\":3443754,\"playerAvgPx\":77916.99631097062,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":14.43933817999845,\"cap\":206063896,\"totalShares\":67200000,\"maxShares\":13400000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":18389.85889117426,\"playerShares\":15100000,\"playerAvgPx\":17633.478275216694,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":9.67861621613953,\"cap\":307454681,\"totalShares\":75600000,\"maxShares\":15100000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":59099.768033290406,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":15.45917785939655,\"cap\":59144587,\"totalShares\":65800000,\"maxShares\":13200000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":28633.176358400327,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":4.651019775318577,\"cap\":477174668,\"totalShares\":41500000,\"maxShares\":8300000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":43023.31851092983,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":10.821486094491847,\"cap\":47377273,\"totalShares\":38300000,\"maxShares\":7700000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7189.146049351884,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":4.120718733801251,\"cap\":27523137,\"totalShares\":96600000,\"maxShares\":19300000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":1049567.402598054,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":15.55098985071353,\"cap\":443889716,\"totalShares\":28800000,\"maxShares\":5800000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":117646.1678662022,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":14.287685191296244,\"cap\":632397318,\"totalShares\":25900000,\"maxShares\":5200000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":36720.02868668938,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":3.672850814744238,\"cap\":246135146,\"totalShares\":22400000,\"maxShares\":4500000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":18613.849268084545,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.4,\"b\":true,\"otlkMag\":1.148305989531697,\"cap\":157450473,\"totalShares\":55700000,\"maxShares\":11100000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":2685.644381491112,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":1.3612957485656567,\"cap\":118129041,\"totalShares\":60500000,\"maxShares\":12100000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":7388.254845787066,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":1.4994844492199235,\"cap\":14157228,\"totalShares\":39300000,\"maxShares\":7900000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":38394.40401815503,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":false,\"otlkMag\":5.101141182042657,\"cap\":144244513,\"totalShares\":29600000,\"maxShares\":5900000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6231.306299669504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":true,\"otlkMag\":0.9359798140106604,\"cap\":52968498,\"totalShares\":25500000,\"maxShares\":5100000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":6993.456558849374,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":2.5415620444107025,\"cap\":90361666,\"totalShares\":35500000,\"maxShares\":7100000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":479.23844610745755,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.24,\"b\":false,\"otlkMag\":0.387220705778153,\"cap\":23142708,\"totalShares\":25600000,\"maxShares\":5100000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3344.655822371421,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":0.2642671370472321,\"cap\":115782560,\"totalShares\":10900000,\"maxShares\":2200000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1296.908828823418,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":1.473758586871906,\"cap\":2283563,\"totalShares\":57000000,\"maxShares\":11400000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1890.387650098578,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.84,\"b\":false,\"otlkMag\":0.2582135368311148,\"cap\":54047454,\"totalShares\":12700000,\"maxShares\":2500000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":12178.405522175535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.66,\"b\":false,\"otlkMag\":0.2565224128000375,\"cap\":23862426,\"totalShares\":38900000,\"maxShares\":7800000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":5679.087139790764,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":true,\"otlkMag\":8.312564213722473,\"cap\":19799151,\"totalShares\":111500000,\"maxShares\":22300000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":59346.097202035555,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":7.662569818632834,\"cap\":550792164,\"totalShares\":12200000,\"maxShares\":2400000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":54383.235438791016,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":13.485011486313553,\"cap\":319504566,\"totalShares\":27000000,\"maxShares\":5400000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":20687,\"lastUpdate\":1552026562704}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.44.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}