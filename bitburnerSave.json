{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":989,\"hp\":32,\"max_hp\":32,\"strength\":310,\"defense\":227,\"dexterity\":312,\"agility\":202,\"charisma\":139,\"intelligence\":0,\"hacking_chance_mult\":1.4639113152279,\"hacking_speed_mult\":1.3864459442373307,\"hacking_money_mult\":1.9087279053424997,\"hacking_grow_mult\":1.2071006516,\"hacking_exp\":1364179374.601169,\"strength_exp\":11537.053871757493,\"defense_exp\":11416.116871675047,\"dexterity_exp\":11335.979312315787,\"agility_exp\":22995.83462957878,\"charisma_exp\":6531.790577638755,\"intelligence_exp\":0,\"hacking_mult\":2.091037653779372,\"strength_mult\":3.0794738044643912,\"defense_mult\":2.265833568502228,\"dexterity_mult\":3.119993196628397,\"agility_mult\":1.6600754314684385,\"charisma_mult\":1.6730415031176,\"hacking_exp_mult\":2.8394999811037165,\"strength_exp_mult\":1.6796805567013997,\"defense_exp_mult\":1.6796805567013997,\"dexterity_exp_mult\":1.9316326402066095,\"agility_exp_mult\":1.6796805567013997,\"charisma_exp_mult\":1.6796805567013997,\"company_rep_mult\":2.0156166680416803,\"faction_rep_mult\":1.526982324274,\"money\":\"8262350764575.6564976\",\"total_money\":\"266423721257916388.61\",\"lifetime_money\":\"266423721257916388.61\",\"homeComputer\":\"44.1.3.8\",\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"OmniTek Incorporated\":\"Software Engineering Intern\",\"MegaCorp\":\"Software Engineering Intern\",\"Bachman & Associates\":\"Software Engineering Intern\"},\"companyName\":\"Bachman & Associates\",\"currentServer\":\"44.1.3.8\",\"purchasedServers\":[\"70.8.6.8\",\"34.6.8.9\",\"49.3.0.6\",\"44.4.1.3\",\"50.8.6.0\",\"55.3.1.0\",\"3.4.0.9\",\"46.7.5.8\",\"24.2.1.6\",\"47.2.7.0\",\"33.9.6.4\",\"79.3.7.6\",\"72.0.8.1\",\"86.8.3.7\",\"26.3.5.6\",\"60.4.8.2\",\"88.2.4.8\",\"76.5.7.5\",\"76.0.7.0\",\"53.3.3.3\",\"68.9.2.5\",\"68.6.4.6\",\"33.2.4.6\",\"15.5.6.2\",\"21.7.6.2\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":176975550.8557957,\"onlineTimeSeconds\":127704.19999876096,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":176772392.6094999,\"onlineTimeSeconds\":127704.19999876096,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":176695546.10169208,\"onlineTimeSeconds\":127704.19999876096,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":176982297.95288035,\"onlineTimeSeconds\":127704.19999876096,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":176521574.94494233,\"onlineTimeSeconds\":126684.1999987758,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":176371031.25721455,\"onlineTimeSeconds\":126564.19999877755,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":176183424.628876,\"onlineTimeSeconds\":126473.99999877886,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":176551362.98061964,\"onlineTimeSeconds\":126384.19999878017,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":176462215.16659346,\"onlineTimeSeconds\":126113.9999987841,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":175917830.79965708,\"onlineTimeSeconds\":125843.99999878803,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":175716279.84766108,\"onlineTimeSeconds\":124253.99999881117,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":176014097.61855063,\"onlineTimeSeconds\":123683.99999881945,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":175419178.2574759,\"onlineTimeSeconds\":122723.99999883342,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":175213228.95993933,\"onlineTimeSeconds\":122303.99999883953,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":174469869.35876983,\"onlineTimeSeconds\":121043.79999885787,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":173522153.0600776,\"onlineTimeSeconds\":119993.79999887315,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":172345407.65957022,\"onlineTimeSeconds\":119003.79999888754,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":165779652.20705676,\"onlineTimeSeconds\":114083.59999895903,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":162680844.59481397,\"onlineTimeSeconds\":110783.39999900696,\"moneyGainRatePerSecond\":1489.1374105222249}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":150805165.38857177,\"onlineTimeSeconds\":101753.19999913836,\"moneyGainRatePerSecond\":1489.1374105222249}}],\"totalHacknetNodeProduction\":29782.748210444486,\"factions\":[\"Netburners\",\"Netburners\",\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"Volhaven\",\"BitRunners\",\"Tian Di Hui\",\"Slum Snakes\",\"Tetrads\",\"The Syndicate\",\"Bachman & Associates\",\"MegaCorp\",\"OmniTek Incorporated\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":33,\"karma\":-99,\"crime_money_mult\":2.0747042449375,\"crime_success_mult\":1.2071006516,\"isWorking\":true,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"Bachman & Associates\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.21296249858277874,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.161681168236143,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":8.944424940476711,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":48.790609065918005,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":750,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":8400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3278107167600002,\"hacknet_node_money_mult\":3.0444210090212875,\"hacknet_node_purchase_cost_mult\":0.6172789960259999,\"hacknet_node_ram_cost_mult\":0.8069006484,\"hacknet_node_core_cost_mult\":0.8069006484,\"hacknet_node_level_cost_mult\":0.68586555114,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1550561487784,\"totalPlaytime\":1691763800,\"playtimeSinceLastAug\":127887400,\"playtimeSinceLastBitnode\":684862200,\"scriptProdSinceLastAug\":36310322170852.63,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"44.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.1.3.8\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":262144,\"ramUsed\":26327.9,\"cpuCores\":4,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-nodes.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport { programs } from './lib-world.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let loop = !ns.args.includes('noloop');\\n    let debug = ns.args.includes('debug');\\n    let log = new Logger(ns, { showDebug: debug, termInfo: !loop, termDebug: !loop && debug });\\n\\n    do {\\n        await run(ns, log);\\n        await ns.sleep(30000);\\n    } while (loop)\\n}\\n\\n/**\\n * @param {IGame} ns\\n * @param {Logger} log\\n */\\nasync function run(ns, log) {\\n    let purchased = true;\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\n    for (let program of programs()) {\\n        if (!ns.fileExists(program.name, 'home') && cash >= program.price) {\\n            cash = cash - program.price;\\n        }\\n    }\\n\\n    log.debug('loading costs');\\n    let numNodes = ns.hacknet.numNodes();\\n    let maxProduction = 0;\\n    for (let i = 0; i < numNodes; i++) {\\n        maxProduction = Math.max(maxProduction, ns.hacknet.getNodeStats(i).production)\\n    }\\n\\n    let costCap = (maxProduction * 60 * 60 * 24) || Infinity;\\n    /**\\n     * @param {string} name\\n     * @param {number} uncappedCost\\n     */\\n    function getCappedCost(name, uncappedCost) {\\n        if (uncappedCost < Infinity && uncappedCost > costCap) {\\n            log.debug(`capping ${name} cost at ${format.money(costCap)}`)\\n            return Infinity;\\n        } else {\\n            return uncappedCost;\\n        }\\n    }\\n\\n    let costs = [];\\n    for (let i = 0; i < numNodes; i++) {\\n        costs.push(getCappedCost(`level[${i}]`, ns.hacknet.getLevelUpgradeCost(i, 1)));\\n        costs.push(getCappedCost(`ram[${i}]`, ns.hacknet.getRamUpgradeCost(i, 1)));\\n        costs.push(getCappedCost(`core[${i}]`, ns.hacknet.getCoreUpgradeCost(i, 1)));\\n    }\\n\\n    let buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\n\\n    log.debug('begin purchase run');\\n    while (purchased) {\\n        purchased = false;\\n\\n        let minCost = Math.min.apply(null, costs);\\n        let minIdx = costs.indexOf(minCost);\\n        \\n        if (buyNodeCost < minCost) {\\n            if (buyNodeCost <= cash) {\\n                let newIdx = numNodes;\\n                \\n                log.info(`buy node[${newIdx}] - ${format.money(buyNodeCost)}`);\\n                ns.hacknet.purchaseNode();\\n                cash = cash - buyNodeCost;\\n                log.info(`remaining budget: ${format.money(cash)}`);\\n                buyNodeCost = getCappedCost('node', ns.hacknet.getPurchaseNodeCost());\\n                \\n                costs.push(ns.hacknet.getLevelUpgradeCost(newIdx, 1));\\n                costs.push(ns.hacknet.getRamUpgradeCost(newIdx, 1));\\n                costs.push(ns.hacknet.getCoreUpgradeCost(newIdx, 1));\\n                \\n                numNodes = numNodes + 1;\\n                purchased = true;\\n            }\\n        } else if (minCost <= cash) {\\n            let nodeIdx = Math.floor(minIdx / 3) % numNodes;\\n            let itemIdx = minIdx - (nodeIdx * 3);\\n            \\n            let cost = minCost;\\n            let count = 1;\\n            \\n            let getF;\\n            let buyF;\\n            let n;\\n            if (itemIdx == 0) {\\n                n = 'level'\\n                getF = ns.hacknet.getLevelUpgradeCost;\\n                buyF = ns.hacknet.upgradeLevel;\\n            } else if (itemIdx == 1) {\\n                n = 'ram';\\n                getF = ns.hacknet.getRamUpgradeCost;\\n                buyF = ns.hacknet.upgradeRam;\\n            } else if (itemIdx == 2) {\\n                n = 'core';\\n                getF = ns.hacknet.getCoreUpgradeCost;\\n                buyF = ns.hacknet.upgradeCore;\\n            }\\n\\n            while (cost + getF(nodeIdx, count+1) < cash) {\\n                count = count + 1;\\n                cost = cost + getF(nodeIdx, count);\\n            }\\n            log.info(`buy ${n}[${nodeIdx}] x${count} - ${format.money(cost)}`);\\n            buyF(nodeIdx, count);\\n            costs[minIdx] = getCappedCost(`${n}[${nodeIdx}]`, getF(nodeIdx, 1));\\n            \\n            if (count == 1) {\\n                cash = cash - cost;               \\n            } else {\\n                cash = ns.getServerMoneyAvailable(\\\"home\\\");\\n            }\\n            log.info(`remaining budget: ${format.money(cash)}`);\\n            \\n            purchased = true;\\n        }\\n    }\\n\\n    log.debug('purchase run complete');\\n}\",\"ramUsage\":7.5,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-servers.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {string} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    /** @type {servers.Server[]} */\\r\\n    let workerMap = [];\\r\\n    let log = new Logger(ns, { showInfo: true, showDebug: false, termInfo: false, termDebug: false });\\r\\n\\r\\n    /** \\r\\n     * @param {servers.Server} worker\\r\\n     * @param {string} worker\\r\\n     */\\r\\n    async function setJob(worker, job) {\\r\\n        let script = 'dh-worker-' + job + '.js';\\r\\n        ns.scp(script, worker.name);\\r\\n        \\r\\n        let cost = ns.getScriptRam(script, worker.name);\\r\\n        let threads = Math.floor(worker.ram / cost);\\r\\n        log.info(`assigning ${worker.name} ${worker.job} -> ${job} x${threads}`);\\r\\n        \\r\\n        if (stopJob(worker)) {\\r\\n            log.debug('stopping old job');\\r\\n            while (jobRunning(worker)) { \\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            log.debug('old job stopped');\\r\\n        }\\r\\n\\r\\n        await ns.exec(script, worker.name, threads, target);\\r\\n        log.debug('new job started');\\r\\n        \\r\\n        worker.job = job;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function stopJob(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptKill(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.killall(worker.name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {servers.Server} worker\\r\\n     */\\r\\n    function jobRunning(worker) {\\r\\n        if (typeof worker.lock == 'string') {\\r\\n            return ns.scriptRunning(`dh-worker-${worker.lock}.js`, worker.name);\\r\\n        } else {\\r\\n            return ns.getServerRam(worker.name)[1] > 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} job\\r\\n     * @param {function(number, number): boolean} f\\r\\n     */\\r\\n    function find(job, f) {\\r\\n        /** @type {servers.Server} */\\r\\n        let worker = null;\\r\\n        for (let w of workerMap) {\\r\\n            if (typeof w.lock == 'undefined' && w.job === job && (worker == null || f(w.ram, worker.ram))) {\\r\\n                worker = w;\\r\\n            }\\r\\n        }\\r\\n        return worker;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} job\\r\\n     */\\r\\n    function findAll(job) {\\r\\n        let workers = [];\\r\\n        for (let worker of workerMap) {\\r\\n            if (typeof worker.lock == 'undefined' && worker.job === job) {\\r\\n                workers.push(worker);\\r\\n            }\\r\\n        }\\r\\n        return workers;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param {string} oldJob\\r\\n     * @param {string} newJob\\r\\n     * @param {boolean} [fast=false]\\r\\n     */\\r\\n    async function swapJob(oldJob, newJob, fast) {\\r\\n        let victim = find(oldJob, fast ? (x, y) => x > y : (x, y) => x < y);\\r\\n        if (victim != null) { \\r\\n            await setJob(victim, newJob);\\r\\n        } else {\\r\\n            log.error(`trying to assign from ${oldJob} -> ${newJob} but no workers are available`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('scan target...');\\r\\n    if (ns.args.length < 1) log.error('hostname required');\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    servers.enrol(ns, target);\\r\\n\\r\\n    var targetSecMin = ns.getServerMinSecurityLevel(target);\\r\\n    var targetSecBase = ns.getServerBaseSecurityLevel(target);\\r\\n    var targetSecGoal = ((targetSecBase - targetSecMin) / 2) + targetSecMin;\\r\\n    log.info(\\\"goal: security level <= \\\" + Math.floor(targetSecGoal));\\r\\n\\r\\n    var targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    var targetMoneyMax = ns.getServerMaxMoney(target);\\r\\n    var targetMoneyGoal = targetMoneyMax * (ns.args.length < 2 ? 0.5 : ns.args[1]);\\r\\n    log.info(\\\"goal: available money >= $\\\" + Math.floor(targetMoneyGoal));\\r\\n\\r\\n    // not currently used, it seems more effective to respond rapidly in small increments\\r\\n    // var targetTimeGrow = ns.getGrowTime(target);\\r\\n    // var targetTimeWeaken = ns.getWeakenTime(target);\\r\\n    // var targetTimeGoal = Math.max(targetTimeGrow, targetTimeWeaken) * 1000; \\r\\n    // log.info(\\\"goal: sleep \\\" + Math.floor(targetTimeGoal) + \\\"ms\\\");\\r\\n\\r\\n    log.info('scan workers...');\\r\\n    let jobs = ['hack', 'grow', 'weaken'];\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {            \\r\\n            for (let job of jobs) {\\r\\n                if (ns.isRunning('dh-worker-' + job + '.js', worker.name, target)) {\\r\\n                    worker.job = job;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            log.debug(worker.print());\\r\\n            workerMap.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.debug('assign idle workers...');\\r\\n    for (let worker of workerMap) {\\r\\n        if (worker.job === '') {\\r\\n            worker.enrol(ns); \\r\\n            \\r\\n            if (typeof worker.lock == 'string') {\\r\\n                await setJob(worker, worker.lock);\\r\\n            } else if (targetMoney > targetMoneyGoal) {\\r\\n                await setJob(worker, 'hack');\\r\\n            } else {\\r\\n                await setJob(worker, 'grow');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info('monitor...');\\r\\n    targetMoney = ns.getServerMoneyAvailable(target);\\r\\n    let moneyReadings = [targetMoney, targetMoney, targetMoney];\\r\\n    let targetSec = ns.getServerSecurityLevel(target);\\r\\n    let secReadings = [targetSec, targetSec, targetSec];\\r\\n    \\r\\n    while (true) {\\r\\n        targetMoney = ns.getServerMoneyAvailable(target);\\r\\n        targetSec = ns.getServerSecurityLevel(target);\\r\\n\\r\\n        secReadings[0] = secReadings[1];\\r\\n        secReadings[1] = secReadings[2];\\r\\n        secReadings[2] = targetSec;\\r\\n\\r\\n        let secDecreasing = secReadings[2] < secReadings[1] && secReadings[1] < secReadings[0];\\r\\n        let secIncreasing = secReadings[2] > secReadings[1] && secReadings[1] > secReadings[0];\\r\\n\\r\\n        log.info(`status: security level ${Math.floor(targetSec)} / goal ${Math.floor(targetSecGoal)}; ${secIncreasing ? 'increasing' : ''}${secDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        moneyReadings[0] = moneyReadings[1];\\r\\n        moneyReadings[1] = moneyReadings[2];\\r\\n        moneyReadings[2] = targetMoney;\\r\\n        \\r\\n        let moneyDecreasing = moneyReadings[2] < moneyReadings[1] && moneyReadings[1] < moneyReadings[0];\\r\\n        let moneyIncreasing = moneyReadings[2] > moneyReadings[1] && moneyReadings[1] > moneyReadings[0];\\r\\n\\r\\n        log.info(`status: money \\\\$${Math.floor(targetMoney)} / goal \\\\$${Math.floor(targetMoneyGoal)}; ${moneyIncreasing ? 'increasing' : ''}${moneyDecreasing ? 'decreasing' : ''}`);\\r\\n\\r\\n        if (targetSec > targetSecGoal && !secDecreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'weaken');\\r\\n            } else {\\r\\n                await swapJob('grow', 'weaken');\\r\\n            }\\r\\n        } else if (targetSec < targetSecGoal && !secIncreasing) {\\r\\n            if (findAll('weaken').length > 0) {\\r\\n                if (targetMoney < targetMoneyGoal || moneyDecreasing) {\\r\\n                    await swapJob('weaken', 'grow');\\r\\n                } else {\\r\\n                    await swapJob('weaken', 'hack');\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (targetMoney < targetMoneyGoal && !moneyIncreasing) {\\r\\n            if (findAll('hack').length > 0) {\\r\\n                await swapJob('hack', 'grow', true);\\r\\n            }\\r\\n        } else if (targetMoney > targetMoneyGoal && !moneyDecreasing) {\\r\\n            if (findAll('grow').length > 0) {\\r\\n                await swapJob('grow', 'hack');\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(30000);\\r\\n    }\\r\\n}\",\"ramUsage\":10.05,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    if (ns.scriptRunning('dh-control.js', ns.getHostname())) {\\r\\n        ns.scriptKill('dh-control.js', ns.getHostname());\\r\\n        log.info('killed dh-control.js');\\r\\n    }\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    ns.scriptKill('dh-worker-' + job + '.js', worker.name);\\r\\n                    counts[job] += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`killed hack() x${counts.hack}`);\\r\\n    log.info(`killed grow() x${counts.grow}`);\\r\\n    log.info(`killed weaken() x${counts.weaken}`);\\r\\n}\",\"ramUsage\":7.4,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"buy-servers.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let specify = typeof ns.args[0] === 'number' || !Number.isNaN(parseInt(ns.args[0]));\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { termInfo: true, termDebug: debug });\\r\\n\\r\\n    let existingServers = ns.getPurchasedServers();\\r\\n    existingServers.sort((a, b) => a.localeCompare(b, undefined, {numeric: true}));\\r\\n\\r\\n    let minRam = 0;\\r\\n    let maxRam = 0;\\r\\n\\r\\n    if (existingServers.length > 0) {\\r\\n        for (var existing of existingServers) {\\r\\n            let ram = ns.getServerRam(existing);\\r\\n            if (ram[0] > maxRam) maxRam = ram[0];\\r\\n            if (ram[0] < minRam || minRam == 0) minRam = ram[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`${existingServers.length} existing servers, min ${format.ram(minRam)} max ${format.ram(maxRam)}`);\\r\\n\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let limit = specify ? parseInt(ns.args[0]) : ns.getPurchasedServerLimit();\\r\\n\\r\\n    let p = 0;\\r\\n    let maxPurchaseRam = ns.getPurchasedServerMaxRam();\\r\\n    for (let power = 0; Math.pow(2, power) <= maxPurchaseRam; power++) {\\r\\n        let actual = limit;\\r\\n        for (var existing of existingServers) {\\r\\n            let existingRam = ns.getServerRam(existing);\\r\\n            if (existingRam[0] >= Math.pow(2, power)) {\\r\\n                actual = Math.max(actual -1, 0);\\r\\n            }\\r\\n        }\\r\\n        let cost = ns.getPurchasedServerCost(Math.pow(2, power));\\r\\n        if (cost * actual < cash) p = power;\\r\\n    }\\r\\n\\r\\n    let actual = limit;\\r\\n    for (var existing of existingServers) {\\r\\n        let existingRam = ns.getServerRam(existing);\\r\\n        if (existingRam[0] >= Math.pow(2, p)) {\\r\\n            actual = Math.max(actual -1, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let ram = Math.pow(2, p);\\r\\n    let total = ns.getPurchasedServerCost(ram) * actual;\\r\\n    log.info(`can buy ${actual} servers, ${format.ram(ram)} each: ${format.money(total)} total`);\\r\\n\\r\\n    if (ram > minRam || existingServers.length < limit) {\\r\\n        let processes = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                let ps = ns.ps(existingServers[i]);\\r\\n                if (ps.length > 0) {\\r\\n                    processes.push(existingServers[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processes.length > 0) {\\r\\n            if (dryRun) {\\r\\n                log.info('scripts running on existing servers, continuing dry run');    \\r\\n            } else {\\r\\n                log.info('scripts running on existing servers, exit');\\r\\n                ns.exit();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('deleting existing servers...');\\r\\n        let sold = [];\\r\\n        for (let i = 0; i < existingServers.length && i < limit; i++) {\\r\\n            if (ns.getServerRam(existingServers[i])[0] < ram) {\\r\\n                log.debug(`delete ${existingServers[i]}`);\\r\\n                sold.push(existingServers[i]);\\r\\n                if (!dryRun) ns.deleteServer(existingServers[i]);\\r\\n            } else {\\r\\n                log.debug(`keep ${existingServers[i]}`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.info('buying new servers...');\\r\\n        for (let i = 0; i < limit; i++) {\\r\\n            if (!ns.serverExists(existingServers[i]) || sold.includes(existingServers[i])) {\\r\\n                log.debug(`buy bot${i}`);\\r\\n                if (!dryRun) ns.purchaseServer('bot'+i, ram);\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        log.info('nothing to do, exit');\\r\\n    }\\r\\n}\",\"ramUsage\":9.2,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.script\",\"code\":\"import * as servers from 'lib-servers.js';\\n\\ntprint(servers.map(ns));\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-setup.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as world from './lib-world.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let log = new Logger(ns, {});\\n    let host = ns.args[0]\\n\\n    ns.scp(['lib-log.js', 'lib-format.js', 'ms-control.js', 'ms-worker-grow.js', 'ms-worker-weaken.js', 'ms-worker-hack.js',], host);\\n\\n    if (ns.args.length > 1) {\\n        let target = ns.args[1];\\n        let worker = new world.Server(target, ns.getServerRam(target)[0], ns.getServerNumPortsRequired(target));\\n        worker.enrol(ns);\\n        await ns.exec('ms-control.js', host, 1, target);\\n    }\\n}\",\"ramUsage\":6.95,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                let job = script.filename.slice(0, script.filename.length-3).slice(3);\\r\\n                if (job.startsWith('worker')) job = job.slice(7);\\r\\n                log.info(`${bot.name}: ${script.args[0]} (${job})`);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    let dryRun = ns.args.includes('dry') || ns.args.includes('dryrun') || ns.args.includes('dry-run');\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let target of world.map(ns)) {\\r\\n        let weakenTime = ns.getWeakenTime(target.name);\\r\\n        let growTime = ns.getGrowTime(target.name);\\r\\n        let hackTime = ns.getHackTime(target.name);\\r\\n        hackTime = hackTime / ns.hackChance(target.name); // since it might take multiple tries\\r\\n\\r\\n        let cycleTime = weakenTime + growTime + weakenTime + hackTime;\\r\\n        let hackAmount = ns.getServerMaxMoney(target.name) / 2;\\r\\n\\r\\n        if (target.canHack(ns)) {\\r\\n            targets.push({\\r\\n                name: target.name,\\r\\n                cycleTime: cycleTime,\\r\\n                hackAmount: hackAmount,\\r\\n            })\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => {\\r\\n        return (b.hackAmount/b.cycleTime) > (a.hackAmount/a.cycleTime) ? 1 : -1;\\r\\n    });\\r\\n\\r\\n    let top = ns.ps(ns.getHostname()).filter(p => p.filename == 'dh-control.js');\\r\\n    if (top.length > 0) {\\r\\n        let excludedTarget = top[0].args[0];\\r\\n        log.info(`${excludedTarget.padEnd(20)} ignored - DH victim`);\\r\\n        targets.splice(targets.findIndex(t => t.name == excludedTarget), 1);\\r\\n    }\\r\\n\\r\\n    for (let target of targets) {\\r\\n        log.info(`${target.name.padEnd(20)} ${format.money(target.hackAmount / target.cycleTime).padEnd(12)} (${format.money(target.hackAmount)} in ${format.time(target.cycleTime)})`)\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----')\\r\\n        let bots = ns.getPurchasedServers()\\r\\n            .filter(b => ns.ps(b).length == 0) //ignore busy\\r\\n            .filter(b => ns.getServerRam(b)[0] >= 16384); // ignore too small\\r\\n        \\r\\n        // ignore busy workers\\r\\n        var i = bots.length;\\r\\n        while (i--) {\\r\\n            if (ns.ps(bots[i]).length > 0) { \\r\\n                bots.splice(i, 1);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // ignore busy targets\\r\\n        for (var bot of world.bots(ns)) {            \\r\\n            let scripts = ns.ps(bot.name);\\r\\n            for (let script of scripts) {\\r\\n                if (script.filename.startsWith('ms-')) {\\r\\n                    let target = script.args[0];\\r\\n                    targets.splice(targets.findIndex(t => t.name == target), 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        for (let i = 0; i < bots.length && i < targets.length; i++) {\\r\\n            log.debug(`${bots[i]}: ${targets[i].name}`)\\r\\n            log.info(`run ms-setup.js ${bots[i]} ${targets[i].name}`)\\r\\n            await ns.exec('ms-setup.js', ns.getHostname(), 1, bots[i], targets[i].name);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":7.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-eval.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\nimport * as format from './lib-format.js';\\r\\n\\r\\nlet MAX_HACK = 0.8;\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let autostart = ns.args.includes('autostart') || ns.args.includes('auto');\\r\\n    var log = new Logger(ns, { termInfo: true });\\r\\n    \\r\\n    if (autostart) {\\r\\n        log.info('----- TARGETS -----');\\r\\n    }\\r\\n\\r\\n    let targets = [];\\r\\n    for (let worker of world.map(ns)) {\\r\\n        if (worker.canHack(ns)) {\\r\\n            targets.push(worker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    targets.sort((a, b) => \\r\\n    {\\r\\n        let cA = Math.min(MAX_HACK, ns.hackChance(a.name));\\r\\n        let cB = Math.min(MAX_HACK, ns.hackChance(b.name));\\r\\n        if (cA != cB) {\\r\\n            return cB - cA;\\r\\n        } else {\\r\\n            return ns.getServerGrowth(b.name) - ns.getServerGrowth(a.name)\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (let target of targets) {        \\r\\n        let hackLevel = ns.getServerRequiredHackingLevel(target.name)\\r\\n        let hackChance = ns.hackChance(target.name);        \\r\\n        let hackRate = ns.hackAnalyzePercent(target.name);        \\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(target.name);\\r\\n        let maxMoney = ns.getServerMaxMoney(target.name);\\r\\n        let growthRate = ns.getServerGrowth(target.name);\\r\\n        var sec = ns.getServerSecurityLevel(target.name);\\r\\n        var secBase = ns.getServerBaseSecurityLevel(target.name);\\r\\n\\r\\n        log.info(`${target.name.padEnd(20)} Hack req ${hackLevel}; chance ${Math.floor(hackChance*100)}%, per-hack ${Math.floor(hackRate*100)/100}% of max ${maxMoney}`);\\r\\n        log.info(`${target.name.padEnd(20)} Growth param ${growthRate}, money ${format.money(moneyAvailable)} (${Math.ceil(moneyAvailable / maxMoney * 100)}%), security level: ${sec} (${secBase} base)`);\\r\\n    }\\r\\n\\r\\n    if (autostart) {\\r\\n        log.info('----- AUTOSTART -----');\\r\\n        log.info(`run dh-control.js ${targets[0].name}`)\\r\\n        await ns.exec('dh-control.js', ns.getHostname(), 1, targets[0].name);\\r\\n    }\\r\\n}\",\"ramUsage\":8.8,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-report.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var log = new Logger(ns, { termInfo: true, termDebug: ns.args.includes('debug') });\\r\\n\\r\\n    var jobs = ['hack', 'grow', 'weaken'];\\r\\n    var counts = { hack: 0, grow: 0, weaken: 0 };\\r\\n\\r\\n    for (let worker of servers.map(ns)) {\\r\\n        if (worker.canWork(ns)) {\\r\\n            for (var jID in jobs) {\\r\\n                var job = jobs[jID];\\r\\n                if (ns.scriptRunning('dh-worker-' + job + '.js', worker.name)) {\\r\\n                    worker.job = job;\\r\\n                    counts[job] += worker.ram;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            log.debug(worker.print());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    log.info(`total hack(): ${counts.hack}GB`);\\r\\n    log.info(`total grow(): ${counts.grow}GB`);\\r\\n    log.info(`total weaken(): ${counts.weaken}GB`);\\r\\n}\",\"ramUsage\":6.35,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-worker.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.weaken('foodnstuff');\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-start.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.ps(bot).length == 0) {\\r\\n            ns.scp('farm-worker.js', bot);\\r\\n            let scriptRam = ns.getScriptRam('farm-worker.js');\\r\\n            let serverRam = ns.getServerRam(bot)[0];\\r\\n            let threads = Math.floor(serverRam / scriptRam);\\r\\n            ns.tprint(`${bot}: exec x${threads}`);\\r\\n            await ns.exec('farm-worker.js', bot, threads);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: busy`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"farm-stop.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let bots = ns.getPurchasedServers();\\r\\n    for (let bot of bots) {\\r\\n        if (ns.scriptRunning('farm-worker.js', bot)) {\\r\\n            ns.tprint(`${bot}: kill`);\\r\\n            ns.scriptKill('farm-worker.js', bot);\\r\\n        } else {\\r\\n            ns.tprint(`${bot}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":5.85,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-stop.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as servers from './lib-servers.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    for (var bot of servers.bots(ns)) {\\r\\n        let idle = true;\\r\\n        \\r\\n        let scripts = ns.ps(bot.name);\\r\\n        for (let script of scripts) {\\r\\n            if (script.filename.startsWith('ms-')) {\\r\\n                log.info(`${bot.name}: ${script.args[0]} (kill)`);\\r\\n                ns.scriptKill(script.filename, bot.name);\\r\\n                idle = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idle) {\\r\\n            log.info(`${bot.name}: idle`);\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":6.25,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"hft.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as format from './lib-format.js';\\r\\nimport * as market from './lib-market.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let dryRun = ns.args.includes('dry');\\r\\n    let debug = ns.args.includes('debug');\\r\\n    let log = new Logger(ns, { showDebug: debug });\\r\\n\\r\\n    let commission = 100000;\\r\\n    let peaks = {};\\r\\n    let profit = 0;\\r\\n\\r\\n    let lastTime = Date.now();\\r\\n    let lastAssets = 0;\\r\\n    for (let stock of market.getAll(ns)) {\\r\\n        lastAssets = lastAssets + stock.position.shares * stock.price;\\r\\n    }\\r\\n\\r\\n    let assetWindow = new SlidingWindow(6);\\r\\n    let timeWindow = new SlidingWindow(6);\\r\\n\\r\\n    function tick() {\\r\\n        let time = Date.now();\\r\\n        let stocks = market.getAll(ns);\\r\\n        \\r\\n        // there are 33 stocks available, but we're assuming we won't be in all of them at once\\r\\n        let cash = ns.getServerMoneyAvailable('home');\\r\\n        log.debug(`cash assets: ${format.money(cash)}`);\\r\\n\\r\\n        let assets = 0;\\r\\n        for (let stock of stocks) {\\r\\n            assets = assets + stock.position.shares * stock.price;\\r\\n        }\\r\\n        log.debug(`stock assets: ${format.money(assets)}`);\\r\\n\\r\\n        let budget = (cash + assets) * 0.1;\\r\\n        log.debug(`budget: ${format.money(budget)} per stock`);\\r\\n\\r\\n        // calculate current and desired positions        \\r\\n        for (let stock of stocks) {\\r\\n            stock.hftPosition = stock.position.shares * stock.price;\\r\\n\\r\\n            // currently holding\\r\\n            if (stock.position.shares) {\\r\\n                peaks[stock.symbol] = peaks[stock.symbol] || stock.position.avgPx;\\r\\n\\r\\n                // keep a stop at 5% below peak\\r\\n                if (stock.price > peaks[stock.symbol]) {\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                } \\r\\n                \\r\\n                // sell when stop reached\\r\\n                if (stock.price <= peaks[stock.symbol] * 0.95) {\\r\\n                    log.debug(`${format.stock(stock)}: reached stop, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // sell when sentiment is bad\\r\\n                else if (stock.forecast <= 0.4) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast --, sell`);\\r\\n                    stock.hftTarget = 0;\\r\\n                }\\r\\n\\r\\n                // buy more when sentiment is good\\r\\n                else if (stock.forecast >= 0.6) {\\r\\n                    log.debug(`${format.stock(stock)}: forecast ++, hold or buy up to budget`);\\r\\n                    stock.hftTarget = Math.max(stock.hftPosition, budget);\\r\\n                }\\r\\n\\r\\n                // profit-take when budget exceeded and position neutral\\r\\n                else {\\r\\n                    log.debug(`${format.stock(stock)}: forecast neutral, position ${format.money(stock.hftPosition)}, buy or sell to budget`);\\r\\n                    stock.hftTarget = Math.min(stock.hftPosition, budget)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // not holding, buy if sentiment is good \\r\\n            else if (stock.forecast >= 0.6) {\\r\\n                log.debug(`${format.stock(stock)}: forecast ++, buy`);\\r\\n                stock.hftTarget = budget;\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                stock.hftTarget = stock.hftPosition;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // buy and sell to change positions\\r\\n        let transacted = false;\\r\\n        for (let stock of stocks) {\\r\\n            if (stock.hftTarget > stock.hftPosition && stock.position.shares < stock.maxShares) {\\r\\n                let diff = stock.hftTarget - stock.hftPosition;\\r\\n                let shares = Math.floor(diff / stock.price);\\r\\n                shares = Math.min(stock.maxShares - stock.position.shares, shares);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (total > commission * 1000) {\\r\\n                    log.info(`${format.stock(stock)}: buy ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let purchasePrice = ns.buyStock(stock.symbol, shares);\\r\\n                        profit -= purchasePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = stock.price;\\r\\n                }\\r\\n            } else if (stock.hftTarget < stock.hftPosition) {\\r\\n                let diff = stock.hftPosition - stock.hftTarget;\\r\\n                let shares = Math.ceil(diff / stock.price);\\r\\n                let total = shares * stock.price;\\r\\n\\r\\n                if (stock.hftTarget == 0 || total > commission * 1000) {\\r\\n                    if (total <= commission * 1000) {\\r\\n                        log.debug(`${format.stock(stock)}: emergency sale despite commission limit`);\\r\\n                    }\\r\\n\\r\\n                    log.info(`${format.stock(stock)}: sell ${shares} (${format.money(total)})`);\\r\\n\\r\\n                    if (!dryRun) {\\r\\n                        let salePrice = ns.sellStock(stock.symbol, shares);\\r\\n                        profit += salePrice * shares;\\r\\n                        transacted = true;\\r\\n                    } \\r\\n\\r\\n                    peaks[stock.symbol] = undefined;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (transacted) {\\r\\n            assets = 0;\\r\\n            for (let stock of market.getAll(ns)) {\\r\\n                assets = assets + stock.position.shares * stock.price;\\r\\n            }\\r\\n            log.info(`assets: ${format.money(assets)}, session capital gains: ${format.money(profit)}`);\\r\\n            assetWindow.reset();\\r\\n            timeWindow.reset();\\r\\n        } else {\\r\\n            let assetChange = assets - lastAssets;\\r\\n            let timeChange = time - lastTime;\\r\\n\\r\\n            assetWindow.push(assetChange);\\r\\n            timeWindow.push(timeChange);\\r\\n\\r\\n            log.info(`assets: ${format.money(assets)}, ${format.change(lastAssets, lastAssets + assetWindow.average())}, ${format.money(assetWindow.average()/timeWindow.average())}/sec`);\\r\\n        }\\r\\n\\r\\n        lastAssets = assets;\\r\\n        lastTime = time;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(5000);\\r\\n        tick();\\r\\n    }\\r\\n} \\r\\n\\r\\nclass SlidingWindow {\\r\\n    /** @param {number} size */\\r\\n    constructor(size) {\\r\\n        this.size = size;\\r\\n        /** @type {number[]} */\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.values = [];\\r\\n    }\\r\\n\\r\\n    /** @param {number} value */\\r\\n    push(value) {\\r\\n        if (this.values.length < this.size) {\\r\\n            this.values.push(value);\\r\\n        } else {\\r\\n            for (let i = 0; i < this.size-1; i++) {\\r\\n                this.values[i] = this.values[i+1];\\r\\n            }\\r\\n            this.values[this.size-1] = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    average() {\\r\\n        let sum = this.values.reduce((a, b) => a + b, 0);\\r\\n        return sum / this.values.length;\\r\\n    }\\r\\n}\",\"ramUsage\":19.7,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-market.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {StockPosition}\\r\\n */\\r\\nexport function getPosition(ns, sym) {\\r\\n    let raw = ns.getStockPosition(sym);\\r\\n    return {\\r\\n        shares: raw[0],\\r\\n        avgPx: raw[1],\\r\\n        sharesShort: raw[2],\\r\\n        avgPxShort: raw[3],\\r\\n    };\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @param {string} sym \\r\\n * @returns {Stock}\\r\\n */\\r\\nexport function getStock(ns, sym) {\\r\\n    /** @type {Stock} */\\r\\n    let stock = {};\\r\\n    stock.symbol = sym;\\r\\n    stock.price = ns.getStockPrice(sym);\\r\\n    stock.maxShares = ns.getStockMaxShares(sym);\\r\\n    stock.position = getPosition(ns, sym);\\r\\n    stock.volatility = ns.getStockVolatility(sym);\\r\\n    stock.forecast = ns.getStockForecast(sym);\\r\\n    return stock;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {IGame} ns\\r\\n * @returns {Stock[]}\\r\\n */\\r\\nexport function getAll(ns) {\\r\\n    let stocks = [];\\r\\n    for (let s of ns.getStockSymbols())\\r\\n    {\\r\\n        let stock = getStock(ns, s);\\r\\n        stocks.push(stock);\\r\\n        stocks[s] = stock;\\r\\n    }\\r\\n    stocks.sort((a, b) => a.symbol.localeCompare(b.symbol));\\r\\n    return stocks;\\r\\n}\",\"ramUsage\":14.6,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"find-factions.js\",\"code\":\"import { Logger } from './lib-log.js';\\r\\nimport * as world from './lib-world.js';\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    let map = world.map(ns);\\r\\n    let log = new Logger(ns, { termInfo: true });\\r\\n\\r\\n    /**\\r\\n     * @param {string[]} sources\\r\\n     * @param {world.Server} current\\r\\n     * @returns {world.Server[][]}\\r\\n     */\\r\\n    function paths(sources, current) {\\r\\n        log.debug(\\\"sources:\\\");\\r\\n        for (let source of sources) {\\r\\n            log.debug('..' + source);\\r\\n        }\\r\\n        log.debug(\\\"current:\\\");\\r\\n        log.debug('..' + current.name);\\r\\n\\r\\n        let links = current.links.filter(s => !sources.includes(s));\\r\\n        log.debug(\\\"links:\\\");\\r\\n        for (let link of links) {\\r\\n            log.debug('..' + link);\\r\\n        }\\r\\n\\r\\n        let results = [[current]];\\r\\n        if (links.length > 0) {\\r\\n            for (let link of links) {\\r\\n                if (typeof link == 'undefined') {\\r\\n                    log.error('undefined link in collection');\\r\\n                    ns.exit();\\r\\n                }\\r\\n\\r\\n                let next = map[link];\\r\\n                if (typeof next == 'undefined') {\\r\\n                    log.debug('no mapped server found for host ' + next);\\r\\n                } else {\\r\\n                    let ps = paths(sources.concat([current.name]), next);\\r\\n                    if (typeof ps == 'undefined') {\\r\\n                        log.error('no return value from paths()');\\r\\n                        ns.exit();\\r\\n                    }\\r\\n\\r\\n                    for (let p of ps) {\\r\\n                        results.push([current].concat(p));\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        log.debug(\\\"results:\\\");\\r\\n        for (let result of results) {\\r\\n            log.debug('..' + result);\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {world.Server} target\\r\\n     * @returns {world.Server[]}\\r\\n     */\\r\\n    function find(target) {\\r\\n        let allPaths = paths([], world.home(ns));\\r\\n        return allPaths.filter(ps => ps[ps.length-1] == target)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} host\\r\\n     */\\r\\n    function findFaction(name, host) {\\r\\n        let path = '';\\r\\n        for (let p of find(map[host])) {\\r\\n            path = path + ' -> ' + p.name;\\r\\n        }\\r\\n\\r\\n        log.info(`${name}: ${path}`);\\r\\n    }\\r\\n\\r\\n    findFaction(\\\"CyberSec\\\", \\\"CSEC\\\");\\r\\n    findFaction(\\\"NiteSec\\\", \\\"avmnite-02h\\\");\\r\\n    findFaction(\\\"The Black Hand\\\", \\\"I.I.I.I\\\");\\r\\n    findFaction(\\\"BitRunners\\\", \\\"run4theh111z\\\");\\r\\n    findFaction(\\\"Daedalus/Icarus\\\", \\\"The-Cave\\\");\\r\\n}\",\"ramUsage\":5.25,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"init.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport { TICK_LENGTH } from './lib-life-L0.js'; // 7.80GB total\\n//import { LifeL1 as Life } from './lib-life-L1.js'; // 14.80GB total\\n//import { LifeL2 as Life } from './lib-life-L2.js'; // 28.30GB total\\nimport { LifeL3 as Life } from './lib-life-L3.js'; // 43.30GB total\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let debug = ns.args.includes('debug');\\n    let log = new Logger(ns, { showDebug: debug });\\n    let life = new Life(ns, log);\\n\\n    while (true) {\\n        await life.tick();\\n        await ns.sleep(TICK_LENGTH * 1000);\\n    }\\n}\",\"ramUsage\":48.15,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"temp.js\",\"code\":\"export async function main(ns) {\\n    console.log(ns);\\n    \\n    let access = false;\\n    try\\n    {\\n        let symbols = ns.getStockSymbols();\\n    }\\n    catch (error) { }\\n    \\n    ns.getStockVolatility('');\\n}\",\"ramUsage\":6.1,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-world.js\",\"code\":\"export class Server {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {number} ram\\r\\n     * @param {number} ports\\r\\n     * @param {string} [lock='']\\r\\n     */\\r\\n    constructor(name, ram, ports, lock) {\\r\\n        this.name = name;\\r\\n        this.ram = ram;\\r\\n        this.ports = ports;\\r\\n        this.lock = lock;\\r\\n        this.job = '';\\r\\n        this.links = [];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canWork(ns) {\\r\\n        return this.ram >= 2 && this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canHack(ns) {\\r\\n        return this.name != 'home' && \\r\\n               !this.name.startsWith('bot') &&\\r\\n               ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(this.name) && \\r\\n               ns.getServerMaxMoney(this.name) > 0 &&\\r\\n               this.canExec(ns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    canExec(ns) {\\r\\n        return ns.hasRootAccess(this.name) || this.ports <= hacks(ns).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {IGame} ns\\r\\n     */\\r\\n    enrol(ns) {\\r\\n        enrol(ns, this.name);\\r\\n    }\\r\\n\\r\\n    print() {\\r\\n        if (typeof(this.job) === 'string' && this.job !== '') {\\r\\n            return `${this.name} (${this.ram}GB): ${this.job}`;\\r\\n        } else {\\r\\n            return `${this.name} (${this.ram}GB)`;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.print();\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @param {string} host\\r\\n */\\r\\nexport function enrol(ns, host) {\\r\\n    if (!ns.hasRootAccess(host)) {\\r\\n        for (var hack of hacks(ns)) {\\r\\n            hack(host);\\r\\n        }\\r\\n        ns.nuke(host);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n * @returns {((host: string) => void)[]}\\r\\n */\\r\\nexport function hacks(ns) {\\r\\n    /** @type {((host: string) => void)[]} */\\r\\n    let hacks = [];\\r\\n\\r\\n    for (let program of programs()) {\\r\\n        if (program.hack && ns.fileExists(program.name, 'home')) {\\r\\n            hacks.push(program.hack(ns));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return hacks;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function bots(ns) {\\r\\n    let all = [];\\r\\n    for (let host of ns.getPurchasedServers(true)) {\\r\\n        let ram = ns.getServerRam(host);\\r\\n        all.push(new Server(host, ram[0], 0));\\r\\n    }\\r\\n    all.sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}));\\r\\n    return all;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {IGame} ns\\r\\n */\\r\\nexport function map(ns) {\\r\\n    let scanned = ['home'];\\r\\n    let hosts = ns.scan('home');\\r\\n\\r\\n    while (hosts.length > 0) {\\r\\n        for (let host of hosts) {\\r\\n            if (!host.startsWith('bot')) {\\r\\n                for (let next of ns.scan(host)) {\\r\\n                    if (!scanned.includes(next)) {\\r\\n                        hosts.push(next);\\r\\n                    }\\r\\n                }\\r\\n                scanned.push(host);\\r\\n            }\\r\\n\\r\\n            hosts.splice(hosts.indexOf(host), 1);\\r\\n        }            \\r\\n    }\\r\\n    scanned.splice(0, 1);\\r\\n\\r\\n    let servers = [];\\r\\n    for (let host of scanned) {\\r\\n        let server = new Server(host, ns.getServerRam(host)[0], ns.getServerNumPortsRequired(host));\\r\\n        for (let next of ns.scan(server.name)) {\\r\\n            server.links.push(next);\\r\\n        }\\r\\n        servers.push(server);\\r\\n        servers[server.name] = server;\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport function all(ns) {\\r\\n    return bots(ns).concat(map(ns));\\r\\n}\\r\\n\\r\\nexport function home(ns) {\\r\\n    let h = new Server('home', ns.getServerRam('home')[0], 0);\\r\\n    for (let next of ns.scan(h.name)) {\\r\\n        h.links.push(next);\\r\\n    }\\r\\n\\r\\n    return h;\\r\\n}\\r\\n\\r\\nexport class Program {\\r\\n    /**\\r\\n     * @param {number} req\\r\\n     * @param {ProgramName} name\\r\\n     * @param {number} price\\r\\n     * @param {(ns: IGame) => ((host: string) => void)} [hack]\\r\\n     */\\r\\n    constructor(req, name, price, hack) {\\r\\n        this.req = req;\\r\\n        this.name = name;\\r\\n        this.price = price;\\r\\n        this.hack = hack;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function programs() {\\r\\n    return [\\r\\n        new Program( 50, 'BruteSSH.exe',          500000, ns => ns.brutessh),\\r\\n        new Program(100, 'FTPCrack.exe',         1500000, ns => ns.ftpcrack),\\r\\n        new Program(250, 'relaySMTP.exe',        5000000, ns => ns.relaysmtp),\\r\\n        new Program(500, 'HTTPWorm.exe',        30000000, ns => ns.httpworm),\\r\\n        new Program(750, 'SQLInject.exe',      250000000, ns => ns.sqlinject),\\r\\n        new Program( 75, 'DeepscanV1.exe',        500000),\\r\\n        new Program(400, 'DeepscanV2.exe',      25000000),\\r\\n        new Program( 25, 'AutoLink.exe',         1000000),\\r\\n        new Program( 75, 'ServerProfiler.exe',   1000000),\\r\\n    ];\\r\\n}\\r\\n\\r\\nexport class Gym {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} price\\r\\n     */\\r\\n    constructor(name, city, price) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function gyms() {\\r\\n    return [\\r\\n        new Gym('Crush Fitness Gym', 'Aevum', 360), \\r\\n        new Gym('Snap Fitness Gym', 'Aevum', 1200), \\r\\n        new Gym('Iron Gym', 'Sector-12', 120), \\r\\n        new Gym('Powerhouse Gym', 'Sector-12', 2400), \\r\\n        new Gym('Millenium Fitness Gym', 'Volhaven', 840),\\r\\n    ]\\r\\n}\\r\\n\\r\\nexport class University {\\r\\n    /**\\r\\n     * @param {string} name\\r\\n     * @param {string} city\\r\\n     * @param {number} leadershipPrice\\r\\n     */\\r\\n    constructor(name, city, leadershipPrice) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n        this.leadershipPrice = leadershipPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function universities() {\\r\\n    return [\\r\\n        new University('Summit University', 'Aevum', 1280), \\r\\n        new University('Rothman University', 'Sector-12', 960), \\r\\n        new University('ZB Institute Of Technology', 'Volhaven', 1600), \\r\\n    ]\\r\\n}\",\"ramUsage\":5.05,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"list-augs.js\",\"code\":\"import * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { Augmentation, FactionWithAugs } from './lib-life-L3.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let log = new Logger(ns, {});\\n\\n    let facsByRep = FactionWithAugs.getAllWithAugs(ns)\\n        .sort((a, b) => b.reputation - a.reputation);\\n\\n    let facsByName = {};\\n    for (let f of facsByRep) {\\n        facsByName[f.name] = f;\\n    }\\n\\n    let augsByPrice = facsByRep\\n        .map(f => f.augmentations)\\n        .reduce((a, b) => a.concat(b), [])\\n        .filter(a => !a.owned)\\n        .sort((a, b) => b.price - a.price);\\n\\n    ns.tprint('----- LOCKED -----');\\n    let locked = augsByPrice.filter(a => facsByName[a.faction].reputation < a.requiredReputation);\\n    for (let aug of groupAugs(locked)) {\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\n    }\\n\\n    ns.tprint('----- UNLOCKED -----');\\n    let unlocked = augsByPrice.filter(a => facsByName[a.faction].reputation >= a.requiredReputation);\\n    for (let aug of groupAugs(unlocked)) {\\n        ns.tprint(`${format.money(aug.price).padEnd(20)} ${aug.name.padEnd(40)} [${aug.factions}]`)\\n    }\\n}\\n\\n/** @param {Augmentation[]} augs */\\nfunction groupAugs(augs) {\\n    /** @type {{name: string, factions: string[], price: number}[]} */\\n    let augsWithFacs = [];\\n    for (let a of augs) {\\n        if (!augsWithFacs.hasOwnProperty(a.name)) {\\n            augsWithFacs[a.name] = {\\n                factions: [],\\n                name: a.name,\\n                price: a.price\\n            };\\n            augsWithFacs.push(augsWithFacs[a.name]);\\n        } \\n\\n        augsWithFacs[a.name].factions.push(a.faction);\\n    }\\n    return augsWithFacs;\\n}\",\"ramUsage\":47.8,\"server\":\"44.1.3.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L0.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nimport * as format from './lib-format.js';\\r\\nimport { Logger } from './lib-log.js';\\r\\n\\r\\nexport let TICK_LENGTH =  20; // seconds\\r\\nlet STOCK_MARKET_MIN =        100000000;\\r\\nlet HACKNET_BUYS_MAX =      10000000000;\\r\\nlet PURCHASED_SERVERS_MIN = 22528000000;\\r\\n\\r\\nexport class LifeL0 {\\r\\n    /** \\r\\n     * @param {IGame} ns \\r\\n     * @param {Logger} log\\r\\n     */\\r\\n    constructor(ns, log) {\\r\\n        this.ns = ns;\\r\\n        this.log = log;\\r\\n        this.lastEval = ns.getHackingLevel();\\r\\n        this.lastCash = this.getCash();\\r\\n        this.lastBots = this.ns.getPurchasedServers().length;\\r\\n        this.beganMS = this.msRunning();\\r\\n        this.beganDH = this.beganMS || this.dhRunning();\\r\\n        this.beganFarm = false;\\r\\n\\r\\n        // this costs an extra 4.5GB of ram :(\\r\\n        this.marketAccess = false;\\r\\n        try\\r\\n        {\\r\\n            let symbols = ns.getStockSymbols();\\r\\n            ns.getStockVolatility(symbols[0]);\\r\\n            this.marketAccess = true;\\r\\n        }\\r\\n        catch (error) { }\\r\\n        log.debug('market access: ' + this.marketAccess);\\r\\n    }\\r\\n\\r\\n    // singularity functions available with various levels of Source-File 4\\r\\n    tickDarkwebPurchases() { }\\r\\n    tickPerformWork() { }\\r\\n    tickUpgradeHomeSystem() { }\\r\\n    tickJoinFactions() { }\\r\\n\\r\\n    async tick() {\\r\\n        this.cash = this.getCash();\\r\\n        this.cashRate = (this.cash - this.lastCash) / TICK_LENGTH;\\r\\n        this.skill = this.ns.getHackingLevel();\\r\\n\\r\\n        this.tickDarkwebPurchases();\\r\\n        this.tickUpgradeHomeSystem();\\r\\n        this.tickJoinFactions();\\r\\n        await this.tickManageScripts();\\r\\n        this.tickPerformWork();\\r\\n\\r\\n        this.lastCash = this.getCash();\\r\\n    }\\r\\n\\r\\n    async tickManageScripts() {\\r\\n        // in the early game, buy a bunch of Hacknet nodes\\r\\n        if (this.cash < HACKNET_BUYS_MAX) {\\r\\n            await this.ensureRunning('buy-nodes.js');\\r\\n        } else if (this.cash >= HACKNET_BUYS_MAX) {\\r\\n            await this.ensureKilled('buy-nodes.js');\\r\\n        }\\r\\n\\r\\n        // once able to buy good enough servers for MS, switch to buying those\\r\\n        let reqRAM = 16384;\\r\\n        let bots = this.ns.getPurchasedServers().filter(b => this.ns.getServerRam(b)[0] >= reqRAM).length;\\r\\n        let botCost = this.ns.getPurchasedServerCost(reqRAM);\\r\\n        let botLimit = this.ns.getPurchasedServerLimit();\\r\\n        if (this.cash >= botCost && bots < botLimit) {\\r\\n            this.log.info(`${bots} ${format.ram(reqRAM)} servers owned; ordering a new one for ${format.money(botCost)}`);\\r\\n            await this.ns.exec('buy-servers.js', this.ns.getHostname(), 1, [bots+1])\\r\\n        }\\r\\n\\r\\n        // before we can afford a server farm, use DH\\r\\n        if (bots == 0) {\\r\\n            if (!this.beganDH) {\\r\\n                this.log.info('begin distributed-hack architecture');\\r\\n                this.beganDH = true;\\r\\n            }\\r\\n\\r\\n            if (!this.dhRunning()) {\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            } else if (this.skill / this.lastEval > 1.1) {\\r\\n                await this.dhStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.dhStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // once a server farm is available, use MS\\r\\n        } else {\\r\\n            if (!this.beganMS) { // based on an msRunning check, but only once at init startup\\r\\n                this.log.info('begin mega-server architecture');\\r\\n                this.beganMS = true;\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.skill / this.lastEval > 1.1 || bots > this.lastBots) {\\r\\n                await this.msStop();\\r\\n                await this.ns.sleep(10 * 1000);\\r\\n                if (await this.msStart()) {\\r\\n                    this.lastEval = this.skill;\\r\\n                    this.lastBots = bots;\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // assume that everyone with enough to buy stock market access has done so\\r\\n        if (this.marketAccess && this.cash >= STOCK_MARKET_MIN) {\\r\\n            await this.ensureRunning('hft.js');\\r\\n        }\\r\\n\\r\\n        // use spare ram to farm hacking skill, unless farming it via bots\\r\\n        if (bots == 0) {\\r\\n            this.beganFarm = true;\\r\\n            this.ensureRunning('farm-worker.js', true);\\r\\n        } else if (this.beganFarm) {\\r\\n            this.ensureKilled('farm-worker.js');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************/\\r\\n    /* script utilities */\\r\\n    /********************/\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     * @param {boolean} [maxThreads=false]\\r\\n     */\\r\\n    async ensureRunning(script, maxThreads) {\\r\\n        let threads = 1;\\r\\n        if (maxThreads) {\\r\\n            threads = this.getMaxThreads(script);\\r\\n            if (threads <= 0) return;\\r\\n        }\\r\\n\\r\\n        if (!this.ns.scriptRunning(script, 'home')) {\\r\\n            let threads = 1;\\r\\n            if (maxThreads) {\\r\\n                threads = this.getMaxThreads(script);\\r\\n            }\\r\\n    \\r\\n            await this.ns.exec(script, 'home', threads);\\r\\n            this.log.info(`started ${script} (${threads} threads)`);\\r\\n        } else {\\r\\n            let top = this.ns.ps('home');\\r\\n            let p = top.find(s => s.filename == script);\\r\\n            if (p.threads != threads) {\\r\\n                await this.ensureKilled(script);\\r\\n                await this.ensureRunning(script, maxThreads);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {string} script\\r\\n     */\\r\\n    async ensureKilled(script) {\\r\\n        let killed = false;\\r\\n        while (this.ns.scriptRunning(script, 'home')) {\\r\\n            if (!killed) {\\r\\n                killed = this.ns.scriptKill(script, 'home');\\r\\n                if (killed) {\\r\\n                    this.log.info('stopped ' + script);\\r\\n                } else {\\r\\n                    this.log.error('failed to kill script ' + script + 'on home');\\r\\n                    return;    \\r\\n                }\\r\\n            }\\r\\n\\r\\n            await this.ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** @param {string} script */\\r\\n    async runOnce(script) {\\r\\n        if (!this.ns.isRunning(script, 'home')) {\\r\\n            await this.ns.exec(script, 'home', 1);\\r\\n            this.log.info(`started ${script}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /******************/\\r\\n    /* info utilities */\\r\\n    /******************/\\r\\n\\r\\n    getCash() {\\r\\n        return this.ns.getServerMoneyAvailable('home');\\r\\n    }\\r\\n\\r\\n    getFreeRam() {\\r\\n        let ram = this.ns.getServerRam('home');\\r\\n        return ram[0] - ram[1];\\r\\n    }\\r\\n\\r\\n    /** @param {string} script */\\r\\n    getMaxThreads(script) {\\r\\n        let available = this.getFreeRam() - 64; // keep a bunch for maintenance scripts\\r\\n        let cost = this.ns.getScriptRam(script, 'home');\\r\\n        return Math.floor(available / cost);\\r\\n    }\\r\\n\\r\\n    /******************************/\\r\\n    /* hack architecture controls */\\r\\n    /******************************/\\r\\n    resetHackEval() {\\r\\n        this.lastEval = 1;\\r\\n    }\\r\\n\\r\\n    dhRunning() {\\r\\n        return this.ns.scriptRunning('dh-control.js', 'home');\\r\\n    }\\r\\n    \\r\\n    async dhStart() {\\r\\n        this.log.debug('starting distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async dhStop() {\\r\\n        if (this.getFreeRam() < this.ns.getScriptRam('dh-stop.js')) {\\r\\n            await this.ensureKilled('dh-control.js');\\r\\n        }\\r\\n\\r\\n        this.log.debug('stopping distributed-hack architecture');\\r\\n        return await this.ns.exec('dh-stop.js', 'home', 1);\\r\\n    }\\r\\n\\r\\n    msRunning() {\\r\\n        let servers = this.ns.getPurchasedServers();\\r\\n        if (servers.length == 0) return false;\\r\\n        let server1 = 'bot0'; // servers[0]; - wrong because it changes\\r\\n        let top = this.ns.ps(server1);\\r\\n        if (top.length == 0) return false;\\r\\n        return top[0].filename.startsWith('ms');\\r\\n    }\\r\\n\\r\\n    async msStart() {\\r\\n        this.log.debug('starting mega-server architecture');\\r\\n        return await this.ns.exec('ms-eval.js', 'home', 1, 'autostart');\\r\\n    }\\r\\n\\r\\n    async msStop() {\\r\\n        this.log.debug('stopping mega-server architecture');\\r\\n        return await this.ns.exec('ms-stop.js', 'home', 1);\\r\\n    }\\r\\n}\",\"ramUsage\":12.65,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L1.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { Program, programs, gyms, universities  } from './lib-world.js';\\nimport { TICK_LENGTH, LifeL0 } from './lib-life-L0.js';\\n\\nlet WORK_OVERRIDE_TICKS = 10;\\nlet STAT_GOAL_BASE =     100;\\nlet DARKWEB_MIN =     200000;\\nlet TRAIN_MIN =      5000000;\\n\\nexport class LifeL1 extends LifeL0 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n    }\\n\\n    tickDarkwebPurchases() {\\n        // buy darkweb router\\n        if (this.cash >= DARKWEB_MIN) {\\n            if (!this.ns.getCharacterInformation().tor) {\\n                this.log.info(`purchasing TOR router for ${format.money(DARKWEB_MIN)}`);\\n                this.ns.purchaseTor();\\n                this.cash = this.getCash();\\n            }\\n        }\\n\\n        // buy darkweb programs (requires router, but it's cheaper than all of them)\\n        for (var program of programs()) {\\n            if (!this.hasProgram(program) && this.cash >= program.price) {\\n                this.log.info(`purchasing ${program.name} for ${format.money(program.price)}`);\\n                this.ns.purchaseProgram(program.name);\\n                this.cash = this.getCash();\\n                this.resetHackEval();\\n            }\\n        }\\n    }\\n\\n    /** @param {Program} program */\\n    hasProgram(program) {\\n        return this.ns.fileExists(program.name, 'home');\\n    }\\n\\n    // fullscreen \\\"work\\\" actions\\n    tickPerformWork() {\\n        if (this.ns.isBusy() || (this.lastWork && this.lastWork.name == 'nothing')) {\\n            if (this.lastWork && !this.countup) {\\n                if (this.lastWork.isRep) {\\n                    this.ns.stopAction();\\n                }\\n\\n                let workItem = this.selectWork();\\n                \\n                if (this.lastWork.name == workItem.name) {\\n                    this.log.debug(`continue work ${this.lastWork.name}`);\\n                    if (this.lastWork.isRep) {\\n                        if (workItem.doWork != null) {\\n                            workItem.doWork();\\n                        } \\n                    }\\n                } else {\\n                    this.log.info(`stop work ${this.lastWork.name}; start work ${workItem.name}`);\\n                    if (workItem.doWork != null) {\\n                        workItem.doWork();\\n                    } \\n                }\\n\\n                this.lastWork = workItem;              \\n            } else {\\n                this.log.info('automated work overridden by player, pause indefinitely');\\n                this.lastWork = null;\\n            }\\n        } else {\\n            if (!this.lastWork && !this.countup) {\\n                let workItem = this.selectWork();\\n                this.log.info(`start work ${workItem.name}`);\\n                if (workItem.doWork != null) {\\n                    workItem.doWork();\\n                } \\n\\n                this.lastWork = workItem;          \\n            } else {    \\n                if (!this.lastWork) {\\n                    /** @type {number | undefined} */\\n                    this.countup = 0;\\n                    this.log.info(`overriden work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    this.lastWork = new WorkItem('override', null, false);\\n                } else {\\n                    this.countup = this.countup || 0;\\n                    if (this.countup == 0) {\\n                        this.log.info(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    } else {\\n                        this.log.debug(`automated work cancelled by player, pause ${format.time((WORK_OVERRIDE_TICKS - this.countup) * TICK_LENGTH)}`);\\n                    }\\n                }\\n                \\n                this.countup = this.countup + 1;\\n                if (this.countup >= WORK_OVERRIDE_TICKS) {\\n                    this.log.info(`resume automated work, having waited ${format.time(WORK_OVERRIDE_TICKS * TICK_LENGTH)}`);\\n                    this.countup = 0;\\n                    this.lastWork = null;\\n                }\\n            }\\n        }\\n    }\\n\\n    selectWork() {\\n        for (let jobF of [this.workWriteCode, this.workTrainCombatStats, this.workForFactions, this.workTrainCharisma]) {\\n            let job = jobF.bind(this)();\\n            if (job != null) return job;\\n        }\\n\\n        return new WorkItem('nothing', null, false);\\n    }\\n\\n    /** @returns {WorkItem | null} */\\n    workWriteCode() {\\n        return null;\\n    }\\n\\n    workTrainCombatStats() {\\n        let info = this.ns.getCharacterInformation();\\n        let stats = this.ns.getStats();\\n        \\n        if (this.cash >= TRAIN_MIN) {\\n            let statGoals = {};\\n            for (let stat of ['strength', 'defense', 'dexterity', 'agility']) {\\n                statGoals[stat] = STAT_GOAL_BASE * info.mult[stat]; // * info.mult[stat + 'Exp']; - reciprocal effect only\\n                if (stats[stat] < statGoals[stat]) {\\n                    this.log.debug(`${stat} ${stats[stat]} < goal ${statGoals[stat]}`);\\n                    return new WorkItem('train-' + stat, () => {\\n                        let gym = this.getBestGym();\\n                        this.ensureCity(info, gym.city);\\n                        this.ns.gymWorkout(gym.name, stat);\\n                    }, true);\\n                }\\n            }\\n        }\\n\\n        return null;\\n    }\\n\\n    /** @returns {WorkItem | null} */\\n    workForFactions() {\\n        return null;\\n    }\\n\\n    workTrainCharisma() {\\n        let info = this.ns.getCharacterInformation();\\n\\n        if (this.cash >= TRAIN_MIN) {\\n            return new WorkItem('university', () => {\\n                let uni = this.getBestUniversity();\\n                this.ensureCity(info, uni.city);\\n                this.ns.universityCourse(uni.name, 'Leadership');\\n            }, true);\\n        }\\n\\n        return null;\\n    }\\n\\n    getBestGym() {\\n        let gs = gyms();\\n        gs.sort((a, b) => b.price - a.price);\\n        return gs[0];\\n    }\\n\\n    getBestUniversity() {\\n        let us = universities();\\n        us.sort((a, b) => b.leadershipPrice - a.leadershipPrice);\\n        return us[0];\\n    }\\n   \\n    /**\\n     * @param {ICharacterInfo} info\\n     * @param {string} name\\n     */\\n    ensureCity(info, name) {\\n        if (info.city != name) {\\n            if (this.ns.travelToCity(name)) {\\n                this.log.info('travelled to ' + name);\\n            } else {\\n                this.log.error(`travel to ${name} failed`);\\n            }\\n        }\\n    }\\n}\\n\\nexport class WorkItem {\\n    /**\\n     * @param {string} name\\n     * @param {() => void | null} doWork\\n     * @param {boolean} isRep\\n     */\\n    constructor(name, doWork, isRep) {\\n        this.name = name;\\n        this.doWork = doWork;\\n        this.isRep = isRep;\\n    }\\n}\",\"ramUsage\":19.65,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L2.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport { Logger } from './lib-log.js';\\nimport { LifeL1, WorkItem } from './lib-life-L1.js';\\n\\nexport class LifeL2 extends LifeL1 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n    }\\n\\n    // persists through aug reset, makes early farming better\\n    tickUpgradeHomeSystem() {\\n        while (this.cash >= this.ns.getUpgradeHomeRamCost()) {\\n            this.log.info(`purchasing home RAM upgrade`);\\n            this.ns.upgradeHomeRam();\\n            this.cash = this.getCash();\\n        }\\n    }\\n\\n    tickJoinFactions() {\\n        for (let invite of this.ns.checkFactionInvitations()) {\\n            if (!Faction.cities().includes(invite)) {\\n                this.log.info(`join faction ${invite}`);\\n                this.ns.joinFaction(invite);\\n            }\\n        }\\n    }\\n\\n    workForFactions() {\\n        let factions = Faction.getAll(this.ns);\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\n        factions = factions.filter(f => f.favor + f.favorGain < 150);\\n        this.log.debug(`factions with favour < 150: ${factions.map(f => f.name)}`);\\n\\n        if (factions.length > 0) {\\n            factions.sort((a, b) => a.reputation - b.reputation);\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\n        }\\n\\n        return null;\\n    }\\n}\\n\\nexport class Faction {\\n    /**\\n     * @param {string} name\\n     * @param {number} rep\\n     * @param {number} fav\\n     * @param {number} fvg\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\n     */\\n    constructor(name, rep, fav, fvg, job) {\\n        this.name = name;\\n        this.reputation = rep;\\n        this.favor = fav;\\n        this.favorGain = fvg;\\n        this.job = job;\\n    }\\n\\n    static cities() {\\n        return ['Sector-12', 'Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\n    }\\n\\n    static gangs() {\\n        return ['Slum Snakes', 'Tetrads'];\\n    }\\n\\n    /**\\n     * @param {IGame} ns\\n     * @returns Faction[]\\n     */\\n    static getAll(ns) {\\n        let info = ns.getCharacterInformation();\\n        return info.factions.map(f => \\n        {\\n            let rep = ns.getFactionRep(f);\\n            let fav = ns.getFactionFavor(f);\\n            let fvg = ns.getFactionFavorGain(f);\\n            return new Faction(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking');\\n        });\\n    }\\n}\",\"ramUsage\":33.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L3.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\nimport * as format from './lib-format.js';\\nimport { Logger } from './lib-log.js';\\nimport { programs } from './lib-world.js';\\nimport { WorkItem } from './lib-life-L1.js';\\nimport { LifeL2, Faction } from './lib-life-L2.js';\\n\\nexport class LifeL3 extends LifeL2 {\\n    /** \\n     * @param {IGame} ns \\n     * @param {Logger} log\\n     */\\n    constructor(ns, log) {\\n        super(ns, log);\\n        /** @type {{[key: string]: boolean}} */\\n        this.hadProgram = {};\\n        /** @type {string} */\\n        this.savingForAug = '';\\n    }\\n\\n    workWriteCode() {\\n        for (let program of programs()) {\\n            if (this.hasProgram(program)) {\\n                if (!this.hadProgram[program.name]) {\\n                    this.hadProgram[program.name] = true;\\n                    this.resetHackEval();\\n                }    \\n            }\\n            else if (program.req <= this.skill)  {\\n                return new WorkItem('program-' + program.name, () => this.ns.createProgram(program.name), false);\\n            }\\n        }\\n\\n        return null;\\n    }  \\n\\n    // L3 override which takes augs into account\\n    workForFactions() {\\n        let factions = FactionWithAugs.getAllWithAugs(this.ns);\\n        this.log.debug(`joined factions: ${factions.map(f => f.name)}`);\\n        factions = factions.filter(f => f.reputation < f.maxAugRep());\\n        this.log.debug(`factions with aug reqs not met: ${factions.map(f => f.name)}`);\\n\\n        if (factions.length > 0) {\\n            factions.sort((a, b) => a.reputation - b.reputation);\\n            this.log.debug(`factions sorted by rep: ${factions.map(f => f.name)}`);\\n            return new WorkItem('faction-' + factions[0].name, () => this.ns.workForFaction(factions[0].name, factions[0].job), true);\\n        }\\n\\n        // if all factions are maxed out, buy some of their augs\\n        this.log.debug(`cash rate: ${format.money(this.cashRate)}/sec`);\\n\\n        let maxAugCost = this.cashRate * 60 * 60; // an hour's income\\n        this.log.debug(`max aug cost: ${format.money(maxAugCost)}`);\\n\\n        // augs we don't already have\\n        let availableAugs = FactionWithAugs.getAllWithAugs(this.ns)\\n            .map(f => f.augmentations)\\n            .reduce((a, b) => a.concat(b), [])\\n            .filter(a => !a.owned);\\n\\n        // most expensive augs first, because the price doubles each time\\n        let affordableAugs = availableAugs\\n            .filter(a => a.price <= maxAugCost)\\n            .sort((a, b) => b.price - a.price);\\n\\n        if (affordableAugs.length > 0) {\\n            this.log.debug(\\\"best affordable aug: \\\" + affordableAugs[0]);\\n            if (affordableAugs[0].price > this.cash) {\\n                if (this.savingForAug != affordableAugs[0].name) {\\n                    this.savingForAug = affordableAugs[0].name;\\n                    this.log.info(`saving for aug ${affordableAugs[0]}`);\\n                }\\n            }\\n\\n            for (let a of affordableAugs) {\\n                if (a.price <= this.cash) {\\n                    if (this.ns.purchaseAugmentation(a.faction, a.name)) {\\n                        this.log.info(`bought aug ${a}`);\\n                        this.cash = this.getCash();\\n                        this.savingForAug = '';\\n                    } else {\\n                        this.log.info(`failed to buy aug ${a}`);\\n                    }\\n                }\\n            }\\n        } \\n\\n        return null;\\n    }\\n}\\n\\nexport class FactionWithAugs extends Faction {\\n    /**\\n     * @param {string} name\\n     * @param {number} rep\\n     * @param {number} fav\\n     * @param {number} fvg\\n     * @param {\\\"hacking\\\" | \\\"security\\\"} job\\n     * @param {Augmentation[]} augs\\n     */\\n    constructor(name, rep, fav, fvg, job, augs) {\\n        super(name, rep, fav, fvg, job)\\n        this.augmentations = augs;\\n    }\\n\\n    maxAugRep() {\\n        return this.augmentations\\n            .filter(a => !a.owned)\\n            .map(a => a.requiredReputation)\\n            .reduce((a, b) => Math.max(a, b), 0);\\n    }\\n\\n\\n    /**\\n     * @param {IGame} ns\\n     * @returns FactionWithAugs[]\\n     */\\n    static getAllWithAugs(ns) {\\n        let info = ns.getCharacterInformation();\\n        let augInfo = ns.getOwnedAugmentations(true);\\n        return info.factions.map(f => \\n        {\\n            let rep = ns.getFactionRep(f);\\n            let fav = ns.getFactionFavor(f);\\n            let fvg = ns.getFactionFavorGain(f);\\n            let augs = ns.getAugmentationsFromFaction(f).map(a => {\\n                let [aRep, aPrc] = ns.getAugmentationCost(a);\\n                let has = augInfo.includes(a);\\n                return new Augmentation(a, f, aRep, aPrc, has);\\n            })\\n            return new FactionWithAugs(f, rep, fav, fvg, Faction.gangs().includes(f) ? 'security' : 'hacking', augs);\\n        });\\n    }\\n}\\n\\nexport class Augmentation {\\n    /**\\n     * @param {string} name\\n     * @param {string} fac\\n     * @param {number} rep\\n     * @param {number} prc\\n     * @param {boolean} has\\n     */\\n    constructor(name, fac, rep, prc, has) {\\n        this.name = name;\\n        this.faction = fac;\\n        this.requiredReputation = rep;\\n        this.price = prc;\\n        this.owned = has;\\n    }\\n\\n    toString() {\\n        if (this.owned) {\\n            return `${this.name} (OWNED)`\\n        } else {\\n            return `${this.name} (${format.money(this.price)})`\\n        }\\n    }\\n}\",\"ramUsage\":48.15,\"server\":\"44.1.3.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-life-L4.js\",\"code\":\"\",\"ramUsage\":1.6,\"server\":\"44.1.3.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"hft.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":19.7,\"logs\":[\"[INF] assets: $14,663,867,073,205, +0.22%, $6,512,063/sec\",\"[INF] MGCP  : buy 1909 ($1,895,260,213)\",\"[INF] assets: $14,720,137,690,073, session capital gains: $10,727,053,967,425\",\"[INF] assets: $14,714,652,356,588, -0.03%, $-1,096,848/sec\",\"[INF] assets: $14,741,807,362,713, +0.07%, $2,166,533/sec\",\"[INF] MGCP  : buy 3414 ($3,397,007,852)\",\"[INF] assets: $14,800,079,615,950, session capital gains: $10,723,656,959,571\",\"[INF] assets: $14,786,024,727,201, -0.09%, $-2,809,854/sec\",\"[INF] assets: $14,866,931,882,212, +0.22%, $6,682,553/sec\",\"[INF] assets: $14,872,002,506,244, +0.16%, $4,793,261/sec\",\"[INF] assets: $14,878,585,994,804, +0.13%, $3,924,141/sec\",\"[INF] assets: $14,879,554,098,589, +0.1%, $3,177,962/sec\",\"[INF] assets: $14,899,777,763,268, +0.11%, $3,322,274/sec\",\"[INF] assets: $14,903,343,868,052, +0.13%, $3,909,465/sec\",\"[INF] assets: $14,924,189,145,553, +0.06%, $1,908,066/sec\",\"[INF] assets: $14,923,735,162,261, +0.05%, $1,723,904/sec\",\"[INF] MGCP  : buy 156 ($157,400,553)\",\"[INF] assets: $15,069,858,282,869, session capital gains: $10,723,499,559,018\",\"[INF] assets: $15,075,535,105,422, +0.03%, $1,135,137/sec\",\"[INF] assets: $15,071,229,499,290, +0%, $137,094/sec\",\"[INF] MGCP  : buy 11821 ($11,888,139,154)\",\"[INF] VITA  : buy 26775 ($8,273,206,393)\",\"[INF] assets: $15,145,484,828,382, session capital gains: $10,703,338,213,473\",\"[INF] MGCP  : buy 11964 ($11,970,120,327)\",\"[INF] VITA  : buy 17915 ($5,525,460,335)\",\"[INF] assets: $15,182,780,855,740, session capital gains: $10,685,842,632,817\",\"[INF] FLCM  : buy 343955 ($1,948,685,455,664)\",\"[INF] OMTK  : sell 577993 ($2,015,164,325,154)\",\"[INF] TITN  : sell 1547773 ($2,015,794,817,144)\",\"[INF] VITA  : sell 6309524 ($1,939,143,003,659)\",\"[INF] assets: $11,186,620,184,990, session capital gains: $14,707,259,320,010\",\"[INF] MGCP  : buy 2211 ($2,214,598,473)\",\"[INF] assets: $11,206,062,493,546, session capital gains: $14,705,044,721,537\",\"[INF] FLCM  : buy 313 ($1,772,757,488)\",\"[INF] MGCP  : buy 1704 ($1,704,796,913)\",\"[INF] assets: $11,203,996,735,479, session capital gains: $14,701,567,167,135\",\"[INF] assets: $11,242,421,612,609, +0.34%, $7,681,902/sec\",\"[INF] assets: $11,251,565,308,649, +0.21%, $4,755,430/sec\",\"[INF] FLCM  : buy 937 ($5,294,145,128)\",\"[INF] assets: $11,215,104,553,072, session capital gains: $14,696,273,022,006\",\"[INF] FLCM  : buy 4858 ($27,119,484,736)\",\"[INF] assets: $11,279,879,547,498, session capital gains: $14,669,153,537,268\",\"[INF] assets: $11,315,929,855,954, +0.31%, $7,208,619/sec\",\"[INF] assets: $11,369,309,374,368, +0.39%, $8,941,194/sec\",\"[INF] assets: $11,386,248,253,960, +0.31%, $7,089,356/sec\",\"[INF] assets: $11,419,298,153,579, +0.3%, $6,969,188/sec\",\"[INF] assets: $11,451,567,334,626, +0.3%, $6,865,589/sec\",\"[INF] assets: $11,489,047,240,278, +0.3%, $6,970,397/sec\",\"[INF] assets: $11,513,999,552,499, +0.28%, $6,600,563/sec\",\"[INF] assets: $11,570,691,716,959, +0.29%, $6,710,955/sec\",\"[INF] assets: $11,569,452,337,637, +0.26%, $6,105,378/sec\"],\"logUpd\":true,\"offlineRunningTime\":3991.1380000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":86937.20999929598,\"onlineMoneyMade\":35195511775801.64,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-control.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"44.1.3.8\",\"ramUsage\":10.05,\"logs\":[\"[INF] assigning sigma-cosmetics hack -> weaken x9\",\"[INF] assigning iron-gym hack -> grow x18\",\"[INF] status: security level 12 / goal 10; \",\"[INF] status: money $10454091 / goal $5625000; increasing\",\"[INF] assigning nectar-net hack -> weaken x9\",\"[INF] assigning zer0 grow -> hack x18\",\"[INF] status: security level 9 / goal 10; decreasing\",\"[INF] status: money $10970460 / goal $5625000; increasing\",\"[INF] assigning CSEC weaken -> hack x4\",\"[INF] assigning iron-gym grow -> hack x18\",\"[INF] status: security level 7 / goal 10; decreasing\",\"[INF] status: money $10094789 / goal $5625000; \",\"[INF] assigning global-pharm weaken -> hack x4\",\"[INF] assigning silver-helix grow -> hack x37\",\"[INF] status: security level 6 / goal 10; decreasing\",\"[INF] status: money $8283728 / goal $5625000; decreasing\",\"[INF] assigning foodnstuff weaken -> grow x9\",\"[INF] status: security level 8 / goal 10; \",\"[INF] status: money $11250000 / goal $5625000; \",\"[INF] assigning joesguns weaken -> hack x9\",\"[INF] assigning foodnstuff grow -> hack x9\",\"[INF] status: security level 6 / goal 10; \",\"[INF] status: money $5421800 / goal $5625000; \",\"[INF] assigning harakiri-sushi weaken -> grow x9\",\"[INF] assigning silver-helix hack -> grow x36\",\"[INF] status: security level 8 / goal 10; \",\"[INF] status: money $10907182 / goal $5625000; \",\"[INF] assigning sigma-cosmetics weaken -> hack x9\",\"[INF] assigning harakiri-sushi grow -> hack x9\",\"[INF] status: security level 6 / goal 10; \",\"[INF] status: money $6300104 / goal $5625000; \",\"[INF] assigning nectar-net weaken -> hack x9\",\"[INF] assigning silver-helix grow -> hack x37\",\"[INF] status: security level 5 / goal 10; decreasing\",\"[INF] status: money $5788769 / goal $5625000; decreasing\",\"[INF] assigning hong-fang-tea weaken -> grow x9\",\"[INF] status: security level 6 / goal 10; \",\"[INF] status: money $6612892 / goal $5625000; \",\"[INF] assigning avmnite-02h weaken -> hack x9\",\"[INF] assigning hong-fang-tea grow -> hack x9\",\"[INF] status: security level 9 / goal 10; increasing\",\"[INF] status: money $7789087 / goal $5625000; increasing\",\"[INF] assigning the-hub grow -> hack x37\",\"[INF] status: security level 17 / goal 10; increasing\",\"[INF] status: money $6250136 / goal $5625000; \",\"[INF] assigning CSEC hack -> weaken x4\",\"[INF] assigning rothman-uni grow -> hack x37\",\"[INF] status: security level 17 / goal 10; \",\"[INF] status: money $2328025 / goal $5625000; decreasing\",\"[INF] assigning global-pharm hack -> weaken x4\",\"[INF] assigning silver-helix hack -> grow x36\"],\"logUpd\":true,\"offlineRunningTime\":3991.1380000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":80403.00999939098,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"init.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":48.15,\"logs\":[\"[INF] automated work cancelled by player, pause 3m 20s\",\"[INF] resume automated work, having waited 3m 20s\",\"[INF] start work faction-MegaCorp\",\"ERROR: workForFaction() failed because you are in the middle of a mission.\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[INF] resume automated work, having waited 3m 20s\",\"[INF] start work faction-MegaCorp\",\"ERROR: workForFaction() failed because you are in the middle of a mission.\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[INF] resume automated work, having waited 3m 20s\",\"[INF] start work faction-MegaCorp\",\"ERROR: workForFaction() failed because you are in the middle of a mission.\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[INF] resume automated work, having waited 3m 20s\",\"[INF] start work faction-MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[INF] resume automated work, having waited 3m 20s\",\"[INF] start work faction-Bachman & Associates\",\"ERROR: workForFaction() failed because you are in the middle of a mission.\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[INF] resume automated work, having waited 3m 20s\",\"[INF] start work faction-MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"Started carrying out hacking contracts for MegaCorp\",\"[INF] automated work cancelled by player, pause 3m 20s\",\"[INF] automated work overridden by player, pause indefinitely\"],\"logUpd\":true,\"offlineRunningTime\":3991.1380000000004,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":79184.60999940871,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"farm-worker.js\",\"args\":[],\"server\":\"44.1.3.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\",\"Server security level on foodnstuff weakened to 3. Gained 69,110.9997 hacking exp (t=15000)\",\"Executing weaken() on server foodnstuff in 7.046 seconds (t=15000)\"],\"logUpd\":true,\"offlineRunningTime\":3985.503,\"offlineMoneyMade\":0,\"offlineExpGained\":18907453.48669934,\"onlineRunningTime\":76195.40999945221,\"onlineMoneyMade\":0,\"onlineExpGained\":724697942.4335527,\"threads\":15000,\"dataMap\":{\"77.1.4.1\":[0,0,0,157290000]}}}],\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"AutoLink.exe-18.38%-INC\",\"FTPCrack.exe\",\"FTPCrack.exe-34.29%-INC\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"relaySMTP.exe-23.07%-INC\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"HTTPWorm.exe-80.61%-INC\",\"SQLInject.exe\",\"SQLInject.exe-75.68%-INC\"],\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}}],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"77.1.4.1\",\"92.1.8.4\",\"74.1.2.0\",\"66.0.6.8\",\"61.5.6.0\",\"17.9.1.5\",\"87.9.5.8\",\"70.8.6.8\",\"34.6.8.9\",\"49.3.0.6\",\"44.4.1.3\",\"50.8.6.0\",\"55.3.1.0\",\"3.4.0.9\",\"46.7.5.8\",\"24.2.1.6\",\"47.2.7.0\",\"33.9.6.4\",\"79.3.7.6\",\"72.0.8.1\",\"86.8.3.7\",\"26.3.5.6\",\"60.4.8.2\",\"88.2.4.8\",\"76.5.7.5\",\"76.0.7.0\",\"53.3.3.3\",\"68.9.2.5\",\"68.6.4.6\",\"33.2.4.6\",\"15.5.6.2\",\"21.7.6.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"97.8.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"97.8.6.2\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1359,\"moneyAvailable\":36854354975.25,\"moneyMax\":138203831157.1875,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"83.1.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.5.9.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.5.9.2\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1293,\"moneyAvailable\":34250604904.5,\"moneyMax\":128439768391.875,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"75.1.9.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"75.1.9.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"75.1.9.9\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934511.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,1,6,0,1,4,7,0,3,5,7,2,1,0,3,5,7,0,9],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1102,\"moneyAvailable\":17303199870.75,\"moneyMax\":64886999515.3125,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":68,\"serversOnNetwork\":[\"70.8.5.8\",\"5.5.9.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.9.2.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.9.2.2\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.9.2.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.9.2.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.9.2.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"9.9.2.2\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.785999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.990 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.607999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.132 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.801999999999987. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.997 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.125999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.836 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.801999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.386 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.807999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.783 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.055999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.962 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.253999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.402 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.529999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.008 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.98799999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.256 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.495999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.738 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.253999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.625 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.387999999999968. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.588 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.367999999999952. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.560 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.563999999999943. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 21.609 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.787999999999945. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 24.697 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.307999999999957. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 26.807 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.353999999999996. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 32.424 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 18.460000000000072. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 32.572 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4639.009999997972,\"onlineMoneyMade\":0,\"onlineExpGained\":25105.555664695134,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,3978]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1157,\"moneyAvailable\":15227692182.75,\"moneyMax\":57103845685.3125,\"hackDifficulty\":94,\"baseDifficulty\":94,\"minDifficulty\":31,\"serverGrowth\":71,\"serversOnNetwork\":[\"70.8.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"83.1.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"83.1.1.5\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-708068-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[0,1],[1,0],[0,0],[1,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-17853-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[199,115,1,72,188],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":1032,\"moneyAvailable\":29161715578.5,\"moneyMax\":109356433419.375,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":84,\"serversOnNetwork\":[\"70.8.5.8\",\"97.8.6.2\",\"70.2.7.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.5.4.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.5.4.0\",\"hostname\":\"clarkinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146873.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(a)))(a((aa)()a\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1175,\"moneyAvailable\":12177282642,\"moneyMax\":45664809907.5,\"hackDifficulty\":45,\"baseDifficulty\":45,\"minDifficulty\":15,\"serverGrowth\":49,\"serversOnNetwork\":[\"0.3.6.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.8.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.8.5.8\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"70.8.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"70.8.5.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"70.8.5.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.213 seconds (t=292)\",\"Available money on harakiri-sushi grown by 29.634735%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.137 seconds (t=292)\",\"Available money on harakiri-sushi grown by 59.108509%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.142 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.664369%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.058 seconds (t=292)\",\"Available money on harakiri-sushi grown by 57.270975%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.540 seconds (t=292)\",\"Available money on harakiri-sushi grown by 17.014331%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 11.565 seconds (t=292)\",\"Available money on harakiri-sushi grown by 3.858658%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.381 seconds (t=292)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.274 seconds (t=292)\",\"Available money on harakiri-sushi grown by 2.601313%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.838 seconds (t=292)\",\"Available money on harakiri-sushi grown by 42.709148%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.059 seconds (t=292)\",\"Available money on harakiri-sushi grown by 60.931798%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.348 seconds (t=292)\",\"Available money on harakiri-sushi grown by 62.713832%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.366 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.664311%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.403 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.665730%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.781 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.667727%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.973 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.669776%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.853 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.666210%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.069 seconds (t=292)\",\"Available money on harakiri-sushi grown by 49.024841%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.633 seconds (t=292)\",\"Available money on harakiri-sushi grown by 35.736759%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.869 seconds (t=292)\",\"Available money on harakiri-sushi grown by 52.882490%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 17.907 seconds (t=292)\",\"Available money on harakiri-sushi grown by 47.953767%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 18.833 seconds (t=292)\",\"Available money on harakiri-sushi grown by 44.218215%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 19.666 seconds (t=292)\",\"Available money on harakiri-sushi grown by 37.979586%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 21.435 seconds (t=292)\",\"Available money on harakiri-sushi grown by 34.381487%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 22.741 seconds (t=292)\",\"Available money on harakiri-sushi grown by 31.555946%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 23.976 seconds (t=292)\",\"Available money on harakiri-sushi grown by 23.764385%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 28.892 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":3991.142,\"offlineMoneyMade\":0,\"offlineExpGained\":187632.877613962,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":7575920.132369809,\"threads\":292,\"dataMap\":{\"61.5.6.0\":[0,0,1200412,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-932798-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,19],[12,17],[5,13],[23,32],[11,20],[9,16],[24,29],[16,19],[19,23],[19,27],[11,16],[15,24],[7,8],[2,3],[13,19]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":39709653201,\"moneyMax\":52944133005,\"hackDifficulty\":40.242,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":98,\"serversOnNetwork\":[\"4.9.5.4\",\"75.1.9.9\",\"9.9.2.2\",\"83.1.1.5\",\"34.8.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"0.3.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"0.3.6.6\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-31976.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":584993515,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1110,\"moneyAvailable\":14840344243.5,\"moneyMax\":55651290913.125,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":98,\"serversOnNetwork\":[\"87.8.8.4\",\"43.5.4.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.3.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.3.9.4\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374384-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":27,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"dir\":0,\"requiredHackingSkill\":1001,\"moneyAvailable\":19079127839.25,\"moneyMax\":71546729397.1875,\"hackDifficulty\":98,\"baseDifficulty\":98,\"minDifficulty\":33,\"serverGrowth\":97,\"serversOnNetwork\":[\"87.8.8.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.9.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.9.5.4\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":512,\"ramUsed\":511,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.9.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"4.9.5.4\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"4.9.5.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 12.970 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.663783%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.821 seconds (t=292)\",\"Available money on harakiri-sushi grown by 32.050793%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 11.949 seconds (t=292)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.118 seconds (t=292)\",\"Available money on harakiri-sushi grown by 10.996542%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.172 seconds (t=292)\",\"Available money on harakiri-sushi grown by 25.753208%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.379 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.663970%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 15.019 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.666505%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.926 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.666979%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 14.555 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.665086%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.588 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.665743%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 13.488 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.664601%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.995 seconds (t=292)\",\"Available money on harakiri-sushi grown by 63.664291%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 12.818 seconds (t=292)\",\"Available money on harakiri-sushi grown by 30.778734%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 11.818 seconds (t=292)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.085 seconds (t=292)\",\"Available money on harakiri-sushi grown by 8.252094%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.445 seconds (t=292)\",\"Available money on harakiri-sushi grown by 40.784358%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.410 seconds (t=292)\",\"Available money on harakiri-sushi grown by 25.400034%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 17.458 seconds (t=292)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 16.869 seconds (t=292)\",\"Available money on harakiri-sushi grown by 17.343689%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 18.498 seconds (t=292)\",\"Available money on harakiri-sushi grown by 39.693798%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 20.237 seconds (t=292)\",\"Available money on harakiri-sushi grown by 37.046728%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 21.748 seconds (t=292)\",\"Available money on harakiri-sushi grown by 33.591516%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 23.063 seconds (t=292)\",\"Available money on harakiri-sushi grown by 29.718990%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 24.896 seconds (t=292)\",\"Available money on harakiri-sushi grown by 27.753619%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 26.026 seconds (t=292)\",\"Available money on harakiri-sushi grown by 26.471341%. Gained 1,842.8412 hacking exp (t=292)\",\"Executing grow() on server harakiri-sushi in 26.857 seconds (t=292)\"],\"logUpd\":true,\"offlineRunningTime\":3991.143,\"offlineMoneyMade\":0,\"offlineExpGained\":186909.95654976077,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":7548277.514518788,\"threads\":292,\"dataMap\":{\"61.5.6.0\":[0,0,1196032,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1229,\"moneyAvailable\":1228127584.5,\"moneyMax\":4605478441.875,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":98,\"serversOnNetwork\":[\"27.5.1.0\",\"70.8.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"87.0.0.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.0.0.3\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1403,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"34.8.2.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.5.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.5.1.1\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109677.cct\",\"type\":\"Total Ways to Sum\",\"data\":53,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1064,\"moneyAvailable\":871721562,\"moneyMax\":3268955857.5,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":69,\"serversOnNetwork\":[\"68.1.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"15.6.5.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.6.5.2\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":938,\"moneyAvailable\":669453841.5,\"moneyMax\":2510451905.625,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":63,\"serversOnNetwork\":[\"45.3.7.3\",\"23.2.9.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.2.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.2.9.7\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":938,\"moneyAvailable\":616117743,\"moneyMax\":2310441536.25,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":70,\"serversOnNetwork\":[\"15.6.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.8.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.8.8.4\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.8.8.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"87.8.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"87.8.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"87.8.8.4\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 16.846 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.439999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.272 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.187999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.310 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.657999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.963 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.489999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.953 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.583999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.695 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.807999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.783 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.925999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.335 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.353999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.375 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.39199999999997. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.982 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.529999999999953. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.397 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 12.355999999999945. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 24.097 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.499999999999947. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 21.520 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 15.775999999999959. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.845 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 15.653999999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 28.676 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 19.804000000000066. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 34.438 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4681.209999997934,\"onlineMoneyMade\":0,\"onlineExpGained\":25219.155464082894,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,3996]}}}],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":842,\"moneyAvailable\":455247092.25,\"moneyMax\":1707176595.9375,\"hackDifficulty\":95,\"baseDifficulty\":95,\"minDifficulty\":32,\"serverGrowth\":74,\"serversOnNetwork\":[\"12.3.1.1\",\"0.3.6.6\",\"79.3.9.4\",\"13.2.6.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"79.9.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.9.0.0\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.9.0.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.9.0.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"79.9.0.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.359 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.863562%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.493 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261790%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.657 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261758%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.151 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261807%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.896 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261784%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.272 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261864%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.139 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261908%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.828 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261869%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.062 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261837%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.742 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261872%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.568 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261802%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.220 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261838%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.460 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261814%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.272 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261941%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.008 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262082%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.968 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261947%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.346 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261926%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.328 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261988%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.229 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261858%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.224 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.018546%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.531 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.694178%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 18.329 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.281925%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 19.513 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.913329%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 20.788 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.639325%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.939 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.469006%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 29.469 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":3991.145,\"offlineMoneyMade\":0,\"offlineExpGained\":23737.0510364613,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":958555.1072338511,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,151884,0]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549350-OmniTekIncorporated.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[148,166,8,93,34,61,54,79,76,144,185,90,126,200,115,188,110,61,36,105,50,141,188,41,69,140],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-87881.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[140,92,103,175,66,79,114,124,149,62,109,77,90,8,175,126,134,85,1,63,149,167,78,85,133,8,178,52],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247074-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,0,10,10,0,10,3],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229447.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,0,0,-6,4,-5,-7,-8,-10,-9,10],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":866,\"moneyAvailable\":560498465.25,\"moneyMax\":2101869244.6875,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":68,\"serversOnNetwork\":[\"27.5.1.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"81.4.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.4.7.7\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-719406-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[175,64,87,103,137,75,44,200,178,26,9,130,119,70,69,85,194,157,61,132,64,58,194,34,15,85,59,165,190,36,172,87,63,55,32,5,93,192],\"reward\":{\"type\":2,\"name\":\"Bachman & Associates\"}}}],\"dir\":0,\"requiredHackingSkill\":917,\"moneyAvailable\":703492458.75,\"moneyMax\":2638096720.3125,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":86,\"serversOnNetwork\":[\"98.6.0.0\",\"17.6.5.1\",\"49.9.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.4.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.4.4.1\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"82.4.4.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"82.4.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"82.4.4.1\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.564 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.201012%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.015 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.244901%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.899 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106320%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.564 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106408%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.328 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106579%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.133 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106761%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.547 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106670%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.996 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106352%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.625 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.059 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.610 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.848 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.315745%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.979 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.907536%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.541 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.798719%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.614 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106989%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.379 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106646%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.023 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106998%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.159 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106858%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.377 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.057788%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 17.061 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.362136%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 22.396 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.671753%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.054 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.112840%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 25.662 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.728055%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.959 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.446518%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.030 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.146,\"offlineMoneyMade\":0,\"offlineExpGained\":47934.417598824424,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":1936826.0907615344,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,306892,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-359380.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[103,88,87,147,104,120,186,13,128,136],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-933834.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[17,27],[15,24],[20,28],[21,25],[20,25],[12,13],[2,9],[4,9],[17,19],[16,19],[12,22],[6,13],[18,22],[12,17],[17,25],[21,27],[16,17],[15,23]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":896,\"moneyAvailable\":1811309126.25,\"moneyMax\":3173645486.25,\"hackDifficulty\":27,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":80,\"serversOnNetwork\":[\"50.3.5.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"27.5.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"27.5.1.0\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.5.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"27.5.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"27.5.1.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"27.5.1.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.716 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,297.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 3.985 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,313.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.282 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $66,843.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.732 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $118,710.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.934 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,965.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.308 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,994.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.771 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,799.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.333 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $113,076.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.186 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $107,361.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.983 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,936.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.442 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $102,132.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.257 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $118,242.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.611 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,297.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.736 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $67,302.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.172 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,999.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.320 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,438.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.812 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $53,118.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.587 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $46,692.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.274 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $46,062.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.339 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $34,569.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.972 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $28,485.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.615 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $24,912.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.475 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $20,097.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.108 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $18,153.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.969 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,723.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.633 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3672.609999998851,\"onlineMoneyMade\":55831302,\"onlineExpGained\":38112.73269459342,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[55831302,6039,0,0]}}}],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200717-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[190,176,51,152,118,141,1,43,186,75,4,54,61,43,79,143,48,60,155,33],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"dir\":0,\"requiredHackingSkill\":873,\"moneyAvailable\":2483110147.5,\"moneyMax\":2483110147.5,\"hackDifficulty\":26.832,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":65,\"serversOnNetwork\":[\"49.9.5.8\",\"4.9.5.4\",\"79.9.0.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"79.5.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.5.4.8\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.5.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"79.5.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"79.5.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"79.5.4.8\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 15.596 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.957999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.008 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.225999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.586 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.039999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.939 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.997999999999989. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.046 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.71199999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.872 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.581999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.080 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.901999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.136 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.653999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.957 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.753999999999982. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.319 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.847999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.450 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.161999999999987. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.274 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.35199999999997. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.149 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.097999999999953. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.574 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.897999999999945. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.684 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.587999999999946. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 27.196 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 13.02399999999996. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 25.024 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 16.554. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 29.925 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 20.11200000000007. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 34.865 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4717.209999997901,\"onlineMoneyMade\":0,\"onlineExpGained\":25219.155464082894,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,3996]}}}],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-742441.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-10,-9,-2,-4,-6,0,7,-6,-4,-4],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116619-Bachman&Associates.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-4,2,4,5,-6,5,5,-1,8,-6,-4,-3,10,-3,5,-9],\"reward\":{\"type\":2,\"name\":\"Bachman & Associates\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518603.cct\",\"type\":\"Total Ways to Sum\",\"data\":47,\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":840,\"moneyAvailable\":406324938.75,\"moneyMax\":1523718520.3125,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":70,\"serversOnNetwork\":[\"49.9.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"72.7.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.7.7.3\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":918,\"moneyAvailable\":613289331,\"moneyMax\":2299834991.25,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":80,\"serversOnNetwork\":[\"44.7.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"14.6.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"14.6.2.5\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":874,\"moneyAvailable\":1178199674.8125,\"moneyMax\":2356590827.8125,\"hackDifficulty\":25.618000000000002,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":84,\"serversOnNetwork\":[\"38.0.9.4\",\"50.3.5.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"63.6.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.6.2.9\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":852,\"moneyAvailable\":875235912.75,\"moneyMax\":3282134672.8125,\"hackDifficulty\":90,\"baseDifficulty\":90,\"minDifficulty\":30,\"serverGrowth\":58,\"serversOnNetwork\":[\"90.7.5.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.3.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.3.5.4\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.3.5.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"50.3.5.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"50.3.5.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.953 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.119879%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.296 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.231619%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.665 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.428 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.428 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.546 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.437 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.087502%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.499 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.067664%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.534 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.561356%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.197 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.721 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.166 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.701901%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.085 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.960919%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.701 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.916463%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.779 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.036988%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.583 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261867%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.188 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262091%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.506 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261969%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.581 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.162299%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.383 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.600752%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 22.072 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.291444%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 23.585 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.006513%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.255 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.834695%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.433 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.704393%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.426 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3300.4099999991895,\"onlineMoneyMade\":0,\"onlineExpGained\":40214.32898326731,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,6372,0]}}}],\"programs\":[],\"messages\":[\"history-of-synthoids.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105321-OmniTekIncorporated.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8272942\",17],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}}],\"dir\":0,\"requiredHackingSkill\":924,\"moneyAvailable\":707340732.75,\"moneyMax\":2652527747.8125,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":61,\"serversOnNetwork\":[\"14.6.2.5\",\"82.4.4.1\",\"81.1.9.3\",\"44.7.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"17.6.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.6.5.1\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-522367.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[65,49,118,7,135,137,137,72,136,78,22,147,140,24,166,20,109,182,31,94,76,43,98,58,105,181,138,165,180,185,84,87,39]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-750177-Bachman&Associates.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"55949832\",\"reward\":{\"type\":0,\"name\":\"Bachman & Associates\"}}}],\"dir\":0,\"requiredHackingSkill\":784,\"moneyAvailable\":1350449958.875,\"moneyMax\":2701822741.875,\"hackDifficulty\":19,\"baseDifficulty\":57,\"minDifficulty\":19,\"serverGrowth\":70,\"serversOnNetwork\":[\"81.4.7.7\",\"68.1.5.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"12.3.1.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.3.1.1\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-287883.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[6,8],[3,6,3],[3,7,2,7],[7,3,3,7,3],[1,1,4,7,9,6],[4,4,2,6,8,6,4],[6,8,8,5,4,9,3,9],[4,8,1,2,1,4,2,7,6],[9,2,8,3,7,6,6,7,9,5],[6,3,8,5,9,5,7,2,3,5,8],[6,4,8,5,9,7,1,3,2,2,1,2]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":802,\"moneyAvailable\":1367914323.4375,\"moneyMax\":2737054403.4375,\"hackDifficulty\":24.136,\"baseDifficulty\":61,\"minDifficulty\":20,\"serverGrowth\":75,\"serversOnNetwork\":[\"49.9.5.8\",\"87.8.8.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"81.1.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"81.1.9.3\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.1.9.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"81.1.9.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"81.1.9.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"81.1.9.3\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 14.345 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.607999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.132 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.303999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.471 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.939999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.189 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.901999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.136 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.555999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.044 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.781999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.746 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.597999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.714 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.789999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.758 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.059999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.132 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.72199999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.886 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.917999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.324 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.549999999999969. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.036 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 10.789999999999953. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 21.923 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.705999999999944. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.029 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 13.687999999999946. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 25.946 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 13.725999999999956. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 25.999 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 17.453999999999997. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 31.175 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 19.21200000000007. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 33.616 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":3889.7360000000003,\"offlineMoneyMade\":0,\"offlineExpGained\":2071.2754372188615,\"onlineRunningTime\":7786.009999995111,\"onlineMoneyMade\":0,\"onlineExpGained\":40782.32798020613,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,6462]}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":779,\"moneyAvailable\":1061869433.375,\"moneyMax\":2123793849.375,\"hackDifficulty\":24,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":75,\"serversOnNetwork\":[\"50.3.5.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"45.3.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.3.7.3\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537155-OmniTekIncorporated.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"7815173130\",\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701914.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a)())(aaa)a(a\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-25318.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,1],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":875,\"moneyAvailable\":4196567891.25,\"moneyMax\":4196567891.25,\"hackDifficulty\":27.996,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":64,\"serversOnNetwork\":[\"38.3.8.6\",\"15.6.5.2\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"38.3.8.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.3.8.6\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"38.3.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.3.8.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.3.8.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"38.3.8.6\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 35.465 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":28.80999999999993,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":4,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":801,\"moneyAvailable\":4769883703.125,\"moneyMax\":4769883703.125,\"hackDifficulty\":30.456,\"baseDifficulty\":84,\"minDifficulty\":28,\"serverGrowth\":88,\"serversOnNetwork\":[\"62.2.3.7\",\"45.3.7.3\",\"98.6.0.0\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"49.9.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.9.5.8\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730247.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[1,138,14,178,136,157,66,62,16,165,164,31,149,162,189,73,153,98,175,74,180,36,13,149,104,141,55,37,99,185,133,4,138,55,54,170,179,167,188],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-757883-BitRunners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,2],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"dir\":0,\"requiredHackingSkill\":777,\"moneyAvailable\":1698654566.8125,\"moneyMax\":3398818862.8125,\"hackDifficulty\":22,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":76,\"serversOnNetwork\":[\"81.4.7.7\",\"27.5.1.0\",\"79.5.4.8\",\"12.3.1.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"44.7.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.7.9.3\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":829,\"moneyAvailable\":1846359257.0625,\"moneyMax\":3694004249.0625,\"hackDifficulty\":31.248,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":77,\"serversOnNetwork\":[\"50.3.5.4\",\"72.7.7.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"98.6.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.6.0.0\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"98.6.0.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"98.6.0.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"98.6.0.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.953 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261747%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.878 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.215064%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.308 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.216574%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.301 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.077509%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.519 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.571340%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.490 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.231403%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.279 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.242908%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.159 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.434038%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.170 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.864 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.075234%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.267135%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.610 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.848 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.992379%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.650 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261907%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.172 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.251162%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.250 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261971%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.670 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261951%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.655 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261966%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.433 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261841%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.429 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.452850%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 18.993 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.131868%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 20.004 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.701648%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 21.639 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.408271%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 22.987 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.231768%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 23.914 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.751129%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.057 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":3991.147,\"offlineMoneyMade\":0,\"offlineExpGained\":23718.093815821572,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":958100.7080363001,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,151812,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":797,\"moneyAvailable\":2924521512.1875,\"moneyMax\":2924521512.1875,\"hackDifficulty\":27.428,\"baseDifficulty\":74,\"minDifficulty\":25,\"serverGrowth\":79,\"serversOnNetwork\":[\"38.3.8.6\",\"81.4.7.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"90.7.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"90.7.5.5\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"90.7.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.7.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"90.7.5.5\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"90.7.5.5\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.329999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.135 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.217999999999984. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.575 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.045999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.948 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.355999999999986. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.543 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.905999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.919 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.46599999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.531 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.215999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.961 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.439999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 15.883 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.62999999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.759 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.905999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.307 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.817999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.573 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.759999999999968. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.939 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.907999999999953. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.698 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.569999999999945. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 20.229 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 11.887999999999945. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 23.447 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.875999999999959. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 27.596 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 19.253999999999994. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 33.674 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 17.634000000000075. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 31.425 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":3991.1479999999997,\"offlineMoneyMade\":0,\"offlineExpGained\":10300.172090009866,\"onlineRunningTime\":79740.60999940062,\"onlineMoneyMade\":0,\"onlineExpGained\":412480.871576935,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,65358]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":730,\"moneyAvailable\":1114502661,\"moneyMax\":2229293385,\"hackDifficulty\":27.156,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":55,\"serversOnNetwork\":[\"61.5.7.8\",\"63.6.2.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"62.2.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"62.2.3.7\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"62.2.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"62.2.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"62.2.3.7\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.446 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.953 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261743%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.122 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.063363%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.537 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.560063%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.928 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.140892%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.428 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.546 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.437 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.218121%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.299 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.173965%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.370 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.579589%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.170 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.610 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.854238%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.019 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.085 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.864402%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.861 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.701737%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.143 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.839605%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.903 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.826553%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.930 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262025%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.875 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261931%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.999 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.935113%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.748 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.453844%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 22.756 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.035273%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.075 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.735535%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.170 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.588939%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.372 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3342.4099999991513,\"onlineMoneyMade\":0,\"onlineExpGained\":40441.52858204283,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,6408,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978235.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":496,\"moneyAvailable\":851134109.4375,\"moneyMax\":1704007988.4375,\"hackDifficulty\":18.518,\"baseDifficulty\":52,\"minDifficulty\":17,\"serverGrowth\":52,\"serversOnNetwork\":[\"76.9.2.9\",\"38.3.8.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"68.8.2.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.8.2.3\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"68.8.2.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.8.2.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"68.8.2.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.669 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.953 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.407 seconds (t=73)\",\"Available money on harakiri-sushi grown by 3.909491%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.939 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.660346%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.719 seconds (t=73)\",\"Available money on harakiri-sushi grown by 2.533406%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.794 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106286%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.097 seconds (t=73)\",\"Available money on harakiri-sushi grown by 2.595755%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.548 seconds (t=73)\",\"Available money on harakiri-sushi grown by 2.550976%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.274 seconds (t=73)\",\"Available money on harakiri-sushi grown by 1.271976%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.226 seconds (t=73)\",\"Available money on harakiri-sushi grown by 2.615126%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.808 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.610 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.019 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.085 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.049452%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.190 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.711170%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.467 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.567780%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.596 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.356873%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.781 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.147031%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.112 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.960218%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.263 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.062574%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 17.056 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.061431%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 18.118 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.360473%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 22.405 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.947386%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.197 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.533526%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.683 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.1479999999997,\"offlineMoneyMade\":0,\"offlineExpGained\":47864.38546074848,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":1933601.1186789153,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,306381,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-451494-OmniTekIncorporated.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[123,19,189,114,174,46,97,96,12,194,55,153,125,177,114]],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}}],\"dir\":0,\"requiredHackingSkill\":541,\"moneyAvailable\":1851854903.4375,\"moneyMax\":1851854903.4375,\"hackDifficulty\":19.612000000000002,\"baseDifficulty\":52,\"minDifficulty\":17,\"serverGrowth\":50,\"serversOnNetwork\":[\"61.5.7.8\",\"93.7.6.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"63.8.8.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"63.8.8.0\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"63.8.8.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"63.8.8.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"63.8.8.0\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.953 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.573697%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.407 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.563766%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.777 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.542827%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.118 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261759%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.837 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261782%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.541 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261858%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.357 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.262004%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.949 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261907%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 12.249 seconds (t=36)\",\"Available money on harakiri-sushi grown by 6.261758%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 11.272 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.289291%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.864 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.721 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.260901%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.105 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.085 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.445 seconds (t=36)\",\"Available money on harakiri-sushi grown by 1.262623%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.970 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.377211%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.756 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.267569%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.985 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.630491%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.276 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.548961%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.423 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.076925%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.394 seconds (t=36)\",\"Available money on harakiri-sushi grown by 4.622541%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 18.520 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.706299%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 21.619 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.769478%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.906 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.608121%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 28.212 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":617.0100000000034,\"onlineMoneyMade\":0,\"onlineExpGained\":7951.98595714323,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,1260,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":408,\"moneyAvailable\":176902468.5,\"moneyMax\":663384256.875,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":46,\"serversOnNetwork\":[\"76.9.2.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"76.9.2.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.9.2.9\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"76.9.2.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"76.9.2.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"76.9.2.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 7.199 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $202,612.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.060 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $170,570.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 6.898 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $140,045.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.540 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $115,662.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.298 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,902.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 9.033 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $89,022.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.894 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $74,925.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.507 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":64.81000000000039,\"onlineMoneyMade\":890738,\"onlineExpGained\":1634.5748911905525,\"threads\":37,\"dataMap\":{\"61.5.6.0\":[890738,259,0,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-464835-OmniTekIncorporated.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[110,172,165,170,73,59,4,135,148,192,74,192,133,168,19,34,125,110,27,51,145,114,148,22,89,114,91,93,195,73,118,163,85,135,152,131,99,25,171,113,35,113,14,50,131,141,58,72,128],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731457.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":369419116,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":387,\"moneyAvailable\":132332870.25,\"moneyMax\":496248263.4375,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":36,\"serversOnNetwork\":[\"16.7.6.7\",\"62.2.3.7\",\"63.8.8.0\",\"38.0.9.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"61.5.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.5.7.8\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.7.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.5.7.8\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"61.5.7.8\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 14.564 seconds (t=73)\",\"Available money on harakiri-sushi grown by 7.976435%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.684 seconds (t=73)\",\"Available money on harakiri-sushi grown by 4.494557%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.681 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106380%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.146 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106352%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.717 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106515%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.527 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106642%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.887 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106401%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 11.476 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106527%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.157 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.059 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.348 seconds (t=73)\",\"Available money on harakiri-sushi grown by 4.454914%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.554 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.534432%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.808 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106474%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.250 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106823%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.579 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106886%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.262 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106891%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.977 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106539%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.582 seconds (t=73)\",\"Available money on harakiri-sushi grown by 13.106505%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 12.280 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.558023%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.605 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.383865%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.756 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.162141%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 18.002 seconds (t=73)\",\"Available money on harakiri-sushi grown by 9.158082%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 19.271 seconds (t=73)\",\"Available money on harakiri-sushi grown by 8.375565%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 20.466 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.549055%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 27.617 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.262105%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.783 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.1499999999996,\"offlineMoneyMade\":0,\"offlineExpGained\":47788.01880673275,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":1931297.5671913303,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,306016,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":729,\"moneyAvailable\":2931122466.5625,\"moneyMax\":2931122466.5625,\"hackDifficulty\":26.392,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":77,\"serversOnNetwork\":[\"16.7.6.7\",\"90.7.5.5\",\"68.8.2.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"9.6.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.6.4.6\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"9.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"9.6.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"9.6.4.6\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 5.256 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $226,602.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 3.850 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $169,290.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.146 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,884.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.597 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $240,210.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.608 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $221,904.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.209 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $172,332.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.569 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $141,966.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.979 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $268,488.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.337 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $233,442.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.870 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $179,748.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.229 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,950.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.740 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $248,922.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.061 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $206,964.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.674 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $153,972.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.110 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $137,376.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.800 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,584.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.014 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $125,154.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.509 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $109,602.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.196 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $101,412.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.032 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,464.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.869 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,110.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.511 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $57,582.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.273 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $48,708.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.007 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,334.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.869 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $37,296.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.481 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3468.4099999990367,\"onlineMoneyMade\":105404958,\"onlineExpGained\":70999.87461735017,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[105404958,11250,0,0]}}}],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":440,\"moneyAvailable\":774605033.4375,\"moneyMax\":774605033.4375,\"hackDifficulty\":23.072,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":50,\"serversOnNetwork\":[\"59.3.1.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"76.3.7.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.3.7.9\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":612,\"moneyAvailable\":343012708.5,\"moneyMax\":1286297656.875,\"hackDifficulty\":75,\"baseDifficulty\":75,\"minDifficulty\":25,\"serverGrowth\":60,\"serversOnNetwork\":[\"16.7.6.7\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"22.7.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"22.7.0.1\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":31.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"22.7.0.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.7.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"22.7.0.1\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"22.7.0.1\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.127999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.075 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.135999999999989. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.866 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.897 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.089999999999988. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.786 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.289999999999987. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.063 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5.765999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 14.947 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.943999999999981. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.583 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.061999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.135 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 8.581999999999983. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 18.857 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 5. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 13.884 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 7.613999999999985. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 17.513 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.9539999999999855. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.597 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 9.287999999999968. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 19.837 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 6.941999999999951. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 16.580 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 11.455999999999944. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 22.847 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 11.023999999999944. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 22.248 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 16.67599999999996. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 30.095 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 14.753999999999998. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 27.426 seconds (t=18)\",\"Server security level on harakiri-sushi weakened to 20.704000000000065. Gained 113.5998 hacking exp (t=18)\",\"Executing weaken() on server harakiri-sushi in 35.687 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":3991.1499999999996,\"offlineMoneyMade\":0,\"offlineExpGained\":10301.980456891664,\"onlineRunningTime\":79770.80999940018,\"onlineMoneyMade\":0,\"onlineExpGained\":412708.0711757105,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[0,0,0,65394]}}}],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":417,\"moneyAvailable\":605528887.0625,\"moneyMax\":1212306359.0625,\"hackDifficulty\":21,\"baseDifficulty\":63,\"minDifficulty\":21,\"serverGrowth\":30,\"serversOnNetwork\":[\"61.9.5.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"61.9.5.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.9.5.1\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":62.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.9.5.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.9.5.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"61.9.5.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 6.848 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $371,665.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 5.456 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $320,124.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 6.048 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $296,962.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 6.788 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $310,652.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.785 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $260,924.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 6.446 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $229,400.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.132 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $206,941.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.918 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $168,387.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.681 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,404.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 7.499 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $120,990.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.209 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $100,048.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.892 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,572.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.169 seconds (t=37)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,403.00 and 233.5107 exp (t=37)\",\"Attempting to hack harakiri-sushi in 8.419 seconds (t=37)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":106.81000000000098,\"onlineMoneyMade\":2710472,\"onlineExpGained\":3035.639083639597,\"threads\":37,\"dataMap\":{\"61.5.6.0\":[2710472,481,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-126133.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a(a)\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":275,\"moneyAvailable\":499095573.75,\"moneyMax\":499095573.75,\"hackDifficulty\":14.91,\"baseDifficulty\":37,\"minDifficulty\":12,\"serverGrowth\":52,\"serversOnNetwork\":[\"93.3.0.1\",\"22.7.0.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"8.1.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"8.1.6.1\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-694617-OmniTekIncorporated.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9639900969\",44],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-4312.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(aaa((()a)(a)))))))\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":343,\"moneyAvailable\":629396805.9375,\"moneyMax\":629396805.9375,\"hackDifficulty\":20.16,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":64,\"serversOnNetwork\":[\"25.2.3.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"16.8.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.8.8.1\",\"hostname\":\"netlink\",\"organizationName\":\"Netlink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.8.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.8.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.8.8.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"16.8.8.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.747 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,036.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.032 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,032.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.431 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,310.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.882 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $110,034.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.355 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,126.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.302 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,002.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.765 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,753.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.327 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $114,516.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.180 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $110,133.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.970 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,884.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.379 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $100,683.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.195 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $121,239.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.599 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,574.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.724 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,976.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.160 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,961.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.308 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,274.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.800 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $56,448.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.555 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $49,545.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.243 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $48,780.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.308 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $36,711.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.941 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $30,213.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.583 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $26,379.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.443 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $21,249.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.077 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $19,242.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.938 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $16,641.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.602 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1595.610000000226,\"onlineMoneyMade\":24727608,\"onlineExpGained\":16471.970911225315,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[24727608,2610,0,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-877160.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":955138414,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":391,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":48,\"serversOnNetwork\":[\"93.3.0.1\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"80.9.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.9.3.6\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":265,\"moneyAvailable\":55468611,\"moneyMax\":208007291.25,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":53,\"serversOnNetwork\":[\"25.2.3.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"77.1.4.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.1.4.1\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.1.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"77.1.4.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"77.1.4.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"77.1.4.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.741 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,224.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.026 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,319.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.322 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $61,524.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.773 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $110,376.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.662 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,813.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,995.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.777 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,863.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.339 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $111,654.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.193 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $103,320.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.002 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,552.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.461 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,442.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.276 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $113,877.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.630 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $90,855.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.806 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $64,863.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.191 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,603.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.389 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,503.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.518 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $53,766.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.580 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $47,250.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.268 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $46,593.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.333 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $34,983.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.966 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $28,827.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.608 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $25,200.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.468 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $20,322.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.102 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $18,360.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.963 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,903.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.627 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":335.00999999998953,\"onlineMoneyMade\":6158601,\"onlineExpGained\":3919.1930788777418,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[6158601,621,0,0]}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-782093.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[185,112,182,104,64,181,53,101,14,41,155,115,188,154,146,150,77,87,52,147,144,25,59,20,64,199,42,1,159,123],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-547057.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a())(a\",\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"hackDifficulty\":3,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"92.1.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.1.8.4\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.1.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"92.1.8.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"92.1.8.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"92.1.8.4\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.597 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,203.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.010 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,524.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.307 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,486.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.757 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $113,904.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.646 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,490.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.274 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,637.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.737 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,118.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.299 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $119,880.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.465 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $102,015.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.008 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,463.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.467 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,245.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.282 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $112,464.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.636 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $89,730.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.812 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $64,071.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.197 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,649.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.395 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,612.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.525 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $52,479.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.593 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $46,143.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.280 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,540.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.346 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $34,155.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.979 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $28,161.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.621 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $24,633.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.481 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $19,872.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.114 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $17,946.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.976 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,543.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.639 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":263.0099999999936,\"onlineMoneyMade\":4279419,\"onlineExpGained\":2839.9949846940135,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[4279419,450,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-831165.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[36,101,94,108,61,26,135,134,100,175,110,113,35,165,184,65,84,139,168,127,83,84,165,74,174,50,166,12,110,170,41,128,62,53,125,11,51,21,38,110,152,12,133,130,85,125,132],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-190940-Volhaven.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[160,49,107,28,96,114,157,113,105,12,8,167,145,83,41,173,184,5,58,82,165]],\"reward\":{\"type\":0,\"name\":\"Volhaven\"}}}],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":6468750,\"moneyMax\":6468750,\"hackDifficulty\":10.24,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"74.1.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"74.1.2.0\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.1.2.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"74.1.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"74.1.2.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"74.1.2.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.709 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $100,611.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 3.979 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,285.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.276 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $67,707.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.726 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $120,231.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.927 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,042.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.287 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,513.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.750 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,120.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.311 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $116,910.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.477 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $96,948.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.033 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,233.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.492 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,601.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.307 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $106,992.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.661 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,383.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.837 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $61,002.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.222 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,774.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.523 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $69,174.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.550 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $49,995.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.618 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,010.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.305 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,631.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.421 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $32,562.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.004 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $26,865.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.646 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $23,535.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.506 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $19,008.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.139 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $17,136.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.001 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,606.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.766 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":340.8099999999892,\"onlineMoneyMade\":6317307,\"onlineExpGained\":3919.1930788777418,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[6317307,621,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"6.5.7.3\",\"50.5.8.8\",\"25.4.8.9\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"6.5.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.5.7.3\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.5.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"6.5.7.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"6.5.7.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"6.5.7.3\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.703 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $212,166.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 3.960 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $158,670.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.257 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,596.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.707 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $253,152.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.909 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $209,340.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.237 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $183,114.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.700 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $175,122.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.261 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $261,918.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.427 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $233,190.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.949 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $188,064.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.358 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $212,706.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.173 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $256,410.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.577 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $200,736.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.690 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $149,382.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.126 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $175,752.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.222 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $166,194.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.768 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $121,464.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.524 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $106,452.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.211 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,924.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.073 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,912.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.910 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $64,854.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.552 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $53,640.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.311 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,450.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.045 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $41,256.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.907 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $34,758.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.519 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":497.0099999999803,\"onlineMoneyMade\":22278762,\"onlineExpGained\":12268.778333878157,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[22278762,1944,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248556-OmniTekIncorporated.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,5],[12,18],[25,33],[13,15],[3,5],[12,13],[24,27],[20,27],[25,34],[25,27],[20,27],[22,24],[7,12],[16,17],[12,21],[20,21],[14,18],[7,14]],\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712359-CyberSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23911549245\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"74.1.2.0\",\"4.0.0.5\",\"25.2.3.3\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"50.5.8.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.5.8.8\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"50.5.8.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"50.5.8.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"50.5.8.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.734 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $92,970.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.017 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $69,615.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.313 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $62,676.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.764 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $112,446.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.652 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,257.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.280 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,566.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.743 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,110.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.305 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $118,386.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.471 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,450.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.020 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,321.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.479 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,887.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.295 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $109,692.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.649 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,525.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.825 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $62,514.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.210 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,768.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.408 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,875.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.537 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $51,228.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.605 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,063.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.293 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,514.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.358 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $33,354.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.991 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $27,504.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.633 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $24,075.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.493 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $19,440.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.127 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $17,532.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.988 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,192.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.652 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":220.809999999996,\"onlineMoneyMade\":3094227,\"onlineExpGained\":2215.1960880613287,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[3094227,351,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-705424.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[8,3],[9,5,1],[3,1,2,4]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22785.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,49,48,18,15,43,20,27,44,4,41,19,23,39,45],[39,12,9,2,4,41,11,20,33,15,27,14,1,33,14],[3,16,7,4,31,24,2,39,16,28,48,41,8,9,42],[19,3,39,35,24,14,15,30,15,22,24,39,1,10,28],[32,10,40,45,31,36,18,36,3,40,26,40,1,36,28],[36,19,38,22,26,2,22,41,27,29,46,38,5,14,46],[13,37,50,26,41,4,33,6,29,46,35,44,28,27,13],[27,8,2,7,31,7,25,22,25,9,12,33,31,37,11],[24,36,2,25,35,21,39,48,43,47,24,28,16,48,44],[30,26,29,26,45,30,3,42,36,38,6,36,33,24,7],[4,19,47,49,46,35,47,9,43,31,19,25,4,28,12],[14,34,22,28,16,11,3,41,30,31,7,2,13,22,37],[15,43,21,29,17,47,40,10,32,49,22,28,47,2,32],[36,1,50,8,37,37,30,48,4,35,23,45,46,44,22],[6,43,7,49,12,1,21,22,20,49,34,2,29,13,34]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"hackDifficulty\":20,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"74.1.2.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"4.0.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.0.0.5\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.0.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"4.0.0.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"4.0.0.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"4.0.0.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.728 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $193,446.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.004 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,792.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.301 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $130,302.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.751 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $231,426.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.952 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $164,538.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.352 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $144,414.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.815 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $138,690.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.377 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $209,574.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.230 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $184,248.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.064 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $156,384.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.523 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $176,346.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.339 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $203,526.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.692 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $162,468.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.869 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $116,154.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.253 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,668.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.606 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $133,164.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.269 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,614.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.637 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,968.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.324 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,246.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.439 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,594.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.022 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $52,488.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.665 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $46,026.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.525 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $37,188.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.158 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $33,480.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.019 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $30,528.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.784 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3426.409999999075,\"onlineMoneyMade\":105093126,\"onlineExpGained\":70545.47541979916,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[105093126,11178,0,0]}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-482815.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,1,0,0,5,3,8,1,1,0,10,3,5,0],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"hackDifficulty\":25,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"6.5.7.3\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"25.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.2.3.3\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.2.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.2.3.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"25.2.3.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 28.550 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":22.809999999999953,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":36,\"dataMap\":{}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":126562500,\"moneyMax\":126562500,\"hackDifficulty\":13.6,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"6.5.7.3\",\"8.1.6.1\",\"80.9.3.6\",\"59.3.1.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"66.0.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"66.0.6.8\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.0.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"66.0.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"66.0.6.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"66.0.6.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.355 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,554.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.327 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,051.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.790 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,027.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.352 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,864.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.205 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,190.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.027 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,268.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.486 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $93,735.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.301 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,333.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.655 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,454.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.831 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $61,758.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.216 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,841.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.414 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $70,020.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.543 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $50,607.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.612 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,532.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.299 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,144.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.414 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $32,958.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.997 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $27,189.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.640 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $23,805.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.500 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $19,224.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.133 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $17,334.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.994 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,021.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.658 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":142.81000000000043,\"onlineMoneyMade\":1296909,\"onlineExpGained\":1192.7978935714846,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[1296909,189,0,0]}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"61.5.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.5.6.0\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"61.5.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"61.5.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"61.5.6.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.691 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,117.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 3.945 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,847.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.242 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,639.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.692 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $127,638.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.206 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,836.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.293 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,478.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.756 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,139.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.318 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $115,452.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.483 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,724.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.039 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $81,207.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.498 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,476.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $105,660.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.667 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $84,330.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.844 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $60,264.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.228 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $80,820.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.529 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,346.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.556 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $49,401.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.624 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $43,488.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.311 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,127.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.427 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $32,175.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.010 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $26,559.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.652 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $23,274.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.512 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $18,801.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.145 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $16,938.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.007 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,435.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.772 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":256.809999999994,\"onlineMoneyMade\":4160124,\"onlineExpGained\":2726.3951853062526,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[4160124,432,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995719.cct\",\"type\":\"Total Ways to Sum\",\"data\":22,\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":1302853.3803152356,\"moneyMax\":11250000,\"hackDifficulty\":20.380000000000116,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"13.7.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.7.5.8\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"13.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.7.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"13.7.5.8\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.991 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $219,546.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.321 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $168,210.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.070 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,164.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.469 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $127,854.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.920 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $205,704.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.394 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $151,794.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.390 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $133,380.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.853 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $128,268.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.415 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $214,524.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.370 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $165,978.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.115 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,962.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.676 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,516.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.389 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $185,454.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.431 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $146,754.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.919 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,992.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.711 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $145,944.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.656 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $130,086.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.421 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,256.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.700 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $97,452.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.792 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,790.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.655 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $56,286.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.086 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $46,584.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.728 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,180.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.664 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $36,396.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.622 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $31,302.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.987 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2928.409999999528,\"onlineMoneyMade\":98811468,\"onlineExpGained\":64070.28685469711,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[98811468,10152,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243780-OmniTekIncorporated.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":669921011,\"reward\":{\"type\":2,\"name\":\"OmniTek Incorporated\"}}}],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":33714520,\"moneyMax\":67500000,\"hackDifficulty\":7.752,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"25.4.8.9\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"53.9.0.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.9.0.0\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"53.9.0.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"53.9.0.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"53.9.0.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"53.9.0.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.672 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $227,988.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 3.926 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $170,406.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.223 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $153,000.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.673 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $268,632.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.187 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $214,902.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.224 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $177,138.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.636 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $179,640.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.249 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $268,632.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.415 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $240,606.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.934 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $193,968.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.343 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $219,222.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.158 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $261,684.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.874 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $195,750.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.702 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $145,728.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.138 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $177,048.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.286 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $162,216.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.781 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $118,548.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.537 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $103,932.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.224 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,782.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.085 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $77,040.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.923 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,342.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.565 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $52,434.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.323 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,442.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.058 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $40,302.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.919 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $34,830.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.583 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":2730.209999999708,\"onlineMoneyMade\":87954732,\"onlineExpGained\":58390.296885309064,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[87954732,9252,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"hackDifficulty\":15,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"17.9.1.5\",\"93.3.0.1\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"93.3.0.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.3.0.1\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.0.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"93.3.0.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"93.3.0.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"93.3.0.1\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.303 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $206,622.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 3.973 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $154,566.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.269 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $138,960.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.720 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $246,726.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.921 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $196,056.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.268 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $171,648.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.731 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $164,358.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.293 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $245,898.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.458 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $212,004.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.995 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $179,586.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.454 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $201,780.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.270 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $233,550.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.624 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $186,300.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.800 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $132,966.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.185 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $167,130.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.383 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $150,642.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.512 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $110,196.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.574 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $96,768.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.261 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,346.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.327 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $71,676.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.960 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $59,022.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.602 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $51,570.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.462 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $41,562.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.095 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $37,602.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.957 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $32,526.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.621 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3474.609999999031,\"onlineMoneyMade\":105998958,\"onlineExpGained\":71340.67401551343,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[105998958,11304,0,0]}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":207,\"moneyAvailable\":85517594.875,\"moneyMax\":171303316.875,\"hackDifficulty\":9.874,\"baseDifficulty\":26,\"minDifficulty\":9,\"serverGrowth\":36,\"serversOnNetwork\":[\"53.9.0.0\",\"61.9.5.1\",\"16.8.8.1\",\"16.7.6.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"59.3.1.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.3.1.9\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":263,\"moneyAvailable\":35445779.25,\"moneyMax\":132921672.1875,\"hackDifficulty\":44,\"baseDifficulty\":44,\"minDifficulty\":15,\"serverGrowth\":29,\"serversOnNetwork\":[\"25.2.3.3\",\"9.6.4.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"17.9.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.9.1.5\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.9.1.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"17.9.1.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"17.9.1.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"17.9.1.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.659 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $234,108.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 3.914 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $174,942.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.210 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $157,014.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.661 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $273,330.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.793 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $168,894.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.339 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $148,194.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.802 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,254.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.364 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $214,992.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.218 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $189,018.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.052 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $160,380.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.511 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $180,720.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.326 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $208,710.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.680 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $166,590.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.856 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $119,052.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.241 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $159,750.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.542 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $135,036.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.568 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $95,256.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.649 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,934.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.336 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,444.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.503 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $62,082.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.035 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $51,282.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.677 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $44,982.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.537 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $37,188.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.222 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $32,724.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.032 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $29,844.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.797 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":455.0099999999827,\"onlineMoneyMade\":20290176,\"onlineExpGained\":11132.780340000549,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[20290176,1764,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"hackDifficulty\":30,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"44.1.3.8\",\"53.9.0.0\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"38.0.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.0.9.4\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":63,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"38.0.9.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"38.0.9.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"38.0.9.4\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 13.886 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.953 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.407 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.939 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.812 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.794 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.650 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 14.437 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.790143%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.988 seconds (t=36)\",\"Available money on harakiri-sushi grown by 5.746767%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.068 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 13.808 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.565281%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 15.721 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.556646%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.045 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.085 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.445 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.410 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 17.458 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 16.869 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 18.498 seconds (t=36)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 20.237 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.637932%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 21.912 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.351040%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 23.276 seconds (t=36)\",\"Available money on harakiri-sushi grown by 3.031693%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 25.095 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.868626%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 26.186 seconds (t=36)\",\"Available money on harakiri-sushi grown by 2.745462%. Gained 227.1996 hacking exp (t=36)\",\"Executing grow() on server harakiri-sushi in 27.099 seconds (t=36)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3384.409999999113,\"onlineMoneyMade\":0,\"onlineExpGained\":40214.32898326731,\"threads\":36,\"dataMap\":{\"61.5.6.0\":[0,0,6372,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-674044.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[0,0,0]],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":515,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":30,\"serversOnNetwork\":[\"76.9.2.9\",\"14.6.2.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"34.8.2.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.8.2.0\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.8.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"34.8.2.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"34.8.2.0\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"34.8.2.0\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.047 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,836.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.083 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $138,510.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.482 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $124,596.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.932 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $212,616.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.457 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $166,716.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.505 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $129,978.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.866 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $125,064.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.427 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $211,266.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.070 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $170,280.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.102 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $158,904.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.664 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $163,476.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.377 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $190,206.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.418 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $150,462.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.907 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $107,658.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.291 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $149,436.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.644 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $133,326.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.408 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,380.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.687 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $78,012.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.374 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,716.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.643 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $57,654.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.073 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $47,700.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.715 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $43,974.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.550 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $36,378.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.234 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $32,040.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.975 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $29,178.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.809 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4212.80999999836,\"onlineMoneyMade\":137517048,\"onlineExpGained\":92129.43730347234,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[137517048,14598,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-242808.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((\",\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":1053,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"hackDifficulty\":55,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":52,\"serversOnNetwork\":[\"70.8.5.8\",\"87.0.0.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"93.7.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.7.6.7\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":751,\"moneyAvailable\":1265625000,\"moneyMax\":1265625000,\"hackDifficulty\":15.92,\"baseDifficulty\":42,\"minDifficulty\":14,\"serverGrowth\":56,\"serversOnNetwork\":[\"68.8.2.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}},\"68.1.5.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.1.5.5\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":32,\"ramUsed\":30.6,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"68.1.5.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.1.5.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"68.1.5.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"68.1.5.5\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.684 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $222,030.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 3.939 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $165,996.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.235 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $149,076.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.686 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $261,864.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.200 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $203,922.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.249 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $178,434.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.712 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $170,730.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.274 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $255,384.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.440 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $227,268.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 4.961 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $183,366.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.370 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $207,522.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.186 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $250,038.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.590 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $190,908.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 5.715 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $142,182.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.151 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $172,872.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.299 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $158,328.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.793 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $115,686.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.549 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $101,484.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.236 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $94,662.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.199 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $75,204.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 6.935 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $61,866.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.577 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $53,982.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.437 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $43,452.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 9.070 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $39,384.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 7.932 seconds (t=18)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $34,038.00 and 113.5998 exp (t=18)\",\"Attempting to hack harakiri-sushi in 8.596 seconds (t=18)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4248.809999998327,\"onlineMoneyMade\":143959230,\"onlineExpGained\":93492.63489612538,\"threads\":18,\"dataMap\":{\"61.5.6.0\":[143959230,14814,0,0]}}}],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":529,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"17.6.5.1\",\"88.5.1.1\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"43.8.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.8.1.3\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":128,\"ramUsed\":127.75,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"43.8.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"43.8.1.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"43.8.1.3\",\"ramUsage\":1.75,\"logs\":[\"Executing grow() on server harakiri-sushi in 13.886 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.953 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.407 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 13.939 seconds (t=73)\",\"Available money on harakiri-sushi grown by 3.227638%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.812 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.794 seconds (t=73)\",\"Available money on harakiri-sushi grown by 1.911066%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.650 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.437 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.513762%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.828 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.466585%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.863 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 14.197 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.459 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.721 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.045 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.085 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.445 seconds (t=73)\",\"Available money on harakiri-sushi grown by 0.000000%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.910 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.949145%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.267 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.771201%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.416 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.823719%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.601 seconds (t=73)\",\"Available money on harakiri-sushi grown by 12.420535%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 15.894 seconds (t=73)\",\"Available money on harakiri-sushi grown by 11.455310%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 16.692 seconds (t=73)\",\"Available money on harakiri-sushi grown by 10.352834%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 17.789 seconds (t=73)\",\"Available money on harakiri-sushi grown by 6.390588%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 24.829 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.839685%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 26.566 seconds (t=73)\",\"Available money on harakiri-sushi grown by 5.440177%. Gained 460.7103 hacking exp (t=73)\",\"Executing grow() on server harakiri-sushi in 28.048 seconds (t=73)\"],\"logUpd\":true,\"offlineRunningTime\":3991.157,\"offlineMoneyMade\":0,\"offlineExpGained\":47843.24730918706,\"onlineRunningTime\":80399.00999939104,\"onlineMoneyMade\":0,\"onlineExpGained\":1930836.8568938132,\"threads\":73,\"dataMap\":{\"61.5.6.0\":[0,0,305943,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-257146.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-798300.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"dir\":0,\"requiredHackingSkill\":361,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"16.7.6.7\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"16.7.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.7.6.7\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.7.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"16.7.6.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"16.7.6.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"16.7.6.7\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.661 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $134,649.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.487 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,315.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.255 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,940.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.718 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $83,223.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.280 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $124,506.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.446 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $108,738.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.977 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $87,777.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.386 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $99,459.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.201 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $119,736.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.605 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $91,431.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.730 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $68,130.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.166 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $82,980.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,347.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.806 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $55,764.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.562 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $48,969.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.249 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $48,222.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.314 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $36,270.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.948 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $29,862.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.590 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $26,073.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.450 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $21,015.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.083 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $19,017.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.944 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $16,452.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.608 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":148.8100000000001,\"onlineMoneyMade\":1564875,\"onlineExpGained\":1249.5977932653648,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[1564875,198,0,0]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347398.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[1,12],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-68626-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,6],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"dir\":0,\"requiredHackingSkill\":217,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"93.3.0.1\",\"76.9.2.9\",\"61.5.7.8\",\"76.3.7.9\",\"43.8.1.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":2}},\"13.2.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.2.6.9\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":16,\"ramUsed\":15.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"13.2.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.2.6.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"13.2.6.9\",\"module\":\"\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"13.2.6.9\",\"ramUsage\":1.7,\"logs\":[\"Attempting to hack harakiri-sushi in 4.309 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $98,001.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 3.992 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $73,350.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.288 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $65,988.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.739 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $117,198.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.940 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $86,679.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.321 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $76,014.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 4.784 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $72,945.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.345 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $110,250.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.199 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $100,719.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.014 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $85,383.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.473 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $96,057.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.289 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $111,069.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.642 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $88,623.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 5.819 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $63,288.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.203 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $79,704.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.402 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $71,739.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.531 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $51,849.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.599 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,603.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.286 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $45,018.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.352 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $33,750.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 6.985 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $27,828.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.627 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $24,354.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.487 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $19,656.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 9.120 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $17,739.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 7.982 seconds (t=9)\",\"Script SUCCESSFULLY hacked harakiri-sushi for $15,372.00 and 56.7999 exp (t=9)\",\"Attempting to hack harakiri-sushi in 8.646 seconds (t=9)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":3762.609999998769,\"onlineMoneyMade\":57589506,\"onlineExpGained\":39475.93028724646,\"threads\":9,\"dataMap\":{\"61.5.6.0\":[57589506,6255,0,0]}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":509,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"87.8.8.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"25.4.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.4.8.9\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":8,\"ramUsed\":7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-grow.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.grow(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.4.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.75,\"server\":\"25.4.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"dh-worker-hack.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\n\\r\\n/** @param {IGame} ns */\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    while (true) {\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\",\"ramUsage\":1.7,\"server\":\"25.4.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"dh-worker-weaken.js\",\"args\":[\"harakiri-sushi\"],\"server\":\"25.4.8.9\",\"ramUsage\":1.75,\"logs\":[\"Executing weaken() on server harakiri-sushi in 26.221 seconds (t=4)\",\"Server security level on harakiri-sushi weakened to 16.386. Gained 25.2444 hacking exp (t=4)\",\"Executing weaken() on server harakiri-sushi in 29.692 seconds (t=4)\",\"Server security level on harakiri-sushi weakened to 17.940000000000094. Gained 25.2444 hacking exp (t=4)\",\"Executing weaken() on server harakiri-sushi in 31.850 seconds (t=4)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":70.81000000000047,\"onlineMoneyMade\":0,\"onlineExpGained\":50.48879972789352,\"threads\":4,\"dataMap\":{\"61.5.6.0\":[0,0,0,8]}}}],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":51,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"74.1.2.0\",\"13.7.5.8\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"70.2.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.2.7.8\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"83.1.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.8.6.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.8.6.1\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-94237.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[58,56,146,195,151],\"reward\":{\"type\":3}}}],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.9.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.9.5.8\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.8.6.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.8.6.8\",\"hostname\":\"bot1\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":594.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"70.8.6.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"70.8.6.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"70.8.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"70.8.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"70.8.6.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"70.8.6.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"omnitek\",1],\"server\":\"70.8.6.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server omnitek in 1,300.224 seconds (t=145)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":893.2100000000662,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":145,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"34.6.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.6.8.9\",\"hostname\":\"bot2\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":217.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"34.6.8.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"34.6.8.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"34.6.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"34.6.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"34.6.8.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"34.6.8.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"alpha-ent\",1],\"server\":\"34.6.8.9\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server alpha-ent in 375.216 seconds (t=53)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":112.81000000000107,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":53,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"49.3.0.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"49.3.0.6\",\"hostname\":\"bot3\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":246,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"49.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"49.3.0.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"49.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"49.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"49.3.0.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"49.3.0.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"deltaone\",1],\"server\":\"49.3.0.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server deltaone in 857.209 seconds (t=60)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":142.81000000000043,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":60,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"44.4.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.4.1.3\",\"hostname\":\"bot4\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":127.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.4.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"44.4.1.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"44.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"44.4.1.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"44.4.1.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"rho-construction\",1],\"server\":\"44.4.1.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server rho-construction in 325.749 seconds (t=31)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":305.00999999999124,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":31,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"50.8.6.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"50.8.6.0\",\"hostname\":\"bot5\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":205,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"50.8.6.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"50.8.6.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"50.8.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"50.8.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"50.8.6.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"50.8.6.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"global-pharm\",1],\"server\":\"50.8.6.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server global-pharm in 854.518 seconds (t=50)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":455.0099999999827,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":50,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"55.3.1.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"55.3.1.0\",\"hostname\":\"bot6\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2275.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"55.3.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"55.3.1.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"55.3.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"55.3.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"55.3.1.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"55.3.1.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"nova-med\",1],\"server\":\"55.3.1.0\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server nova-med in 480.216 seconds (t=555)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":64.81000000000039,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":555,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"3.4.0.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.4.0.9\",\"hostname\":\"bot7\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":196.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"3.4.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"3.4.0.9\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"3.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"3.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"3.4.0.9\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"3.4.0.9\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zb-institute\",1],\"server\":\"3.4.0.9\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zb-institute in 674.750 seconds (t=48)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":100.8100000000009,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":48,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"46.7.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.7.5.8\",\"hostname\":\"bot8\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":340.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.7.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"46.7.5.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"46.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"46.7.5.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"46.7.5.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"applied-energetics\",1],\"server\":\"46.7.5.8\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server applied-energetics in 678.821 seconds (t=83)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":76.81000000000056,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":83,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.2.1.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.2.1.6\",\"hostname\":\"bot9\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":430.5,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"24.2.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"24.2.1.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"24.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"24.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"24.2.1.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"24.2.1.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"zeus-med\",1],\"server\":\"24.2.1.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server zeus-med in 906.957 seconds (t=105)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":851.2100000000567,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":105,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"47.2.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.2.7.0\",\"hostname\":\"bot10\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2136.1,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"47.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"47.2.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"47.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"47.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"47.2.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"47.2.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"zb-def\",1],\"server\":\"47.2.7.0\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server zb-def in 419.183 seconds (t=521)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":377.00999999998714,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":521,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.9.6.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.9.6.4\",\"hostname\":\"bot11\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":5506.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.9.6.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.9.6.4\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"33.9.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.9.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.9.6.4\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"33.9.6.4\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"catalyst\",1],\"server\":\"33.9.6.4\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server catalyst in 248.716 seconds (t=1343)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":88.81000000000073,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1343,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.3.7.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.3.7.6\",\"hostname\":\"bot12\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":200.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.3.7.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"79.3.7.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"79.3.7.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.3.7.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"79.3.7.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"79.3.7.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"unitalife\",1],\"server\":\"79.3.7.6\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server unitalife in 765.701 seconds (t=49)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":136.81000000000077,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":49,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"72.0.8.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"72.0.8.1\",\"hostname\":\"bot13\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":241.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.0.8.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"72.0.8.1\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"72.0.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.0.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"72.0.8.1\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"72.0.8.1\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"the-hub\",1],\"server\":\"72.0.8.1\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server the-hub in 149.261 seconds (t=59)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":100.8100000000009,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":59,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.8.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.8.3.7\",\"hostname\":\"bot14\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":233.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.8.3.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"86.8.3.7\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"86.8.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.8.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"86.8.3.7\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"86.8.3.7\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"titan-labs\",1],\"server\":\"86.8.3.7\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server titan-labs in 819.995 seconds (t=57)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":341.0099999999892,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":57,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.3.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.3.5.6\",\"hostname\":\"bot15\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2513.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.3.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"26.3.5.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"26.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"26.3.5.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"26.3.5.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"solaris\",1],\"server\":\"26.3.5.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server solaris in 524.700 seconds (t=613)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":94.81000000000081,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":613,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"60.4.8.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.4.8.2\",\"hostname\":\"bot16\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":262.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"60.4.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"60.4.8.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"60.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"60.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"60.4.8.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"60.4.8.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"lexo-corp\",1],\"server\":\"60.4.8.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server lexo-corp in 695.693 seconds (t=64)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":533.0099999999843,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":64,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"88.2.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.2.4.8\",\"hostname\":\"bot17\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2144.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"88.2.4.8\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"88.2.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"88.2.4.8\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"88.2.4.8\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"univ-energy\",1],\"server\":\"88.2.4.8\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server univ-energy in 677.965 seconds (t=523)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":635.0100000000075,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":523,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.5.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.5.7.5\",\"hostname\":\"bot18\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":180.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.5.7.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.5.7.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"76.5.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.5.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.5.7.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"76.5.7.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"comptek\",1],\"server\":\"76.5.7.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server comptek in 246.956 seconds (t=44)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":233.0099999999953,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":44,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.0.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.0.7.0\",\"hostname\":\"bot19\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":545.3,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.0.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"76.0.7.0\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"76.0.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.0.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"76.0.7.0\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"76.0.7.0\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"galactic-cyber\",1],\"server\":\"76.0.7.0\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server galactic-cyber in 784.098 seconds (t=133)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":245.00999999999462,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":133,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"53.3.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.3.3.3\",\"hostname\":\"bot20\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":159.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.3.3.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"53.3.3.3\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"53.3.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.3.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"53.3.3.3\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"53.3.3.3\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"snap-fitness\",1],\"server\":\"53.3.3.3\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server snap-fitness in 421.929 seconds (t=39)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":214.80999999999634,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":39,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"68.9.2.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.9.2.5\",\"hostname\":\"bot21\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":254.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.9.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.9.2.5\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"68.9.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.9.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.9.2.5\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"68.9.2.5\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"summit-uni\",1],\"server\":\"68.9.2.5\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server summit-uni in 359.304 seconds (t=62)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":82.81000000000064,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":62,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"68.6.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.6.4.6\",\"hostname\":\"bot22\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":1936.8,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.6.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"68.6.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"68.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"68.6.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"68.6.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"phantasy\"],\"server\":\"68.6.4.6\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot22/phantasy: grow by factor of 2.002104731136614\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":9.010000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"phantasy\",1],\"server\":\"68.6.4.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server phantasy in 27.079 seconds (t=471)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.810000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":471,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"33.2.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"33.2.4.6\",\"hostname\":\"bot23\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":2160.7,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.2.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"33.2.4.6\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"33.2.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.2.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"33.2.4.6\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"33.2.4.6\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"args\":[\"omega-net\",1],\"server\":\"33.2.4.6\",\"ramUsage\":4.1,\"logs\":[\"Executing grow() on server omega-net in 62.309 seconds (t=527)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":10.809999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":527,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"15.5.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.5.6.2\",\"hostname\":\"bot24\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":16384,\"ramUsed\":300.9,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"15.5.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"15.5.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"15.5.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"15.5.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"15.5.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"15.5.6.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"silver-helix\"],\"server\":\"15.5.6.2\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot24/silver-helix: weaken by 3.5999999999999996\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":8.210000000000004,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"silver-helix\",1],\"server\":\"15.5.6.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server silver-helix in 77.750 seconds (t=72)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.810000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":72,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.7.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.7.6.2\",\"hostname\":\"bot0\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":131072,\"ramUsed\":600.2,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-log.js\",\"code\":\"/// @ts-check\\r\\n/// <reference path=\\\"BitBurner.d.ts\\\" />\\r\\nexport class Logger {\\r\\n    /**\\r\\n     * @constructor\\r\\n     * @param {IGame} ns\\r\\n     * @param {{showError?: boolean, showInfo?: boolean, showDebug?: boolean, termError?: boolean, termInfo?: boolean, termDebug?: boolean, disable?: boolean}} options\\r\\n     */\\r\\n    constructor(ns, options) {\\r\\n        this.ns = ns;\\r\\n        this.showError = typeof options.showError !== 'undefined' ? options.showError : true;\\r\\n        this.showInfo = typeof options.showInfo !== 'undefined' ? options.showInfo : true;\\r\\n        this.showDebug = typeof options.showDebug !== 'undefined' ? options.showDebug : true;\\r\\n        this.termError = typeof options.termError !== 'undefined' ? options.termError : true;\\r\\n        this.termInfo = typeof options.termInfo !== 'undefined' ? options.termInfo : false;\\r\\n        this.termDebug = typeof options.termDebug !== 'undefined' ? options.termDebug : false;\\r\\n\\r\\n        if (typeof options.disable !== 'undefined' ? options.disable : true) {\\r\\n            ns.disableLog('ALL');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error(msg) {\\r\\n        if (this.showError) {\\r\\n            this.ns.print('[ERR] ' + msg);\\r\\n            if (this.termError) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    info(msg) {\\r\\n        if (this.showInfo) {\\r\\n            this.ns.print('[INF] ' + msg);\\r\\n            if (this.termInfo) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    debug(msg) {\\r\\n        if (this.showDebug) {\\r\\n            this.ns.print('[DBG] ' + msg);\\r\\n            if (this.termDebug) {\\r\\n                this.ns.tprint(msg);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":1.6,\"server\":\"21.7.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"lib-format.js\",\"code\":\"/// <reference path=\\\"Stock.d.ts\\\" />\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function ram(value) {\\r\\n    return `${value}GB`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function money(value) {\\r\\n    let dollars = Math.floor(value);\\r\\n    return `\\\\$${dollars.toLocaleString()}`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function time(value) {\\r\\n    let seconds = Math.floor(value);\\r\\n\\r\\n    if (seconds > 60) {\\r\\n        let minutes = Math.floor(seconds / 60);\\r\\n        seconds = seconds - minutes*60;\\r\\n        if (minutes > 60) {\\r\\n            let hours = Math.floor(minutes / 60);\\r\\n            minutes = minutes - hours*60;\\r\\n            return `${hours}h ${minutes}m ${seconds}s`;\\r\\n        } else {\\r\\n            return `${minutes}m ${seconds}s`;\\r\\n        }\\r\\n    } else {\\r\\n        return `${seconds}s`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} value\\r\\n */\\r\\nexport function decper(value) {\\r\\n    value = Math.floor(value * 10000) / 100;\\r\\n    return `${value}%`;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function inc(a, b) {\\r\\n    if (a < b) {\\r\\n        return '+';\\r\\n    } else if (a > b) {\\r\\n        return '-';\\r\\n    } else {\\r\\n        return ' ';\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function change(a, b) {\\r\\n    let ratio = b > a ? (b/a-1) : (a/b-1);\\r\\n    return inc(a, b) + decper(ratio);\\r\\n}\\r\\n\\r\\n/** @param {Stock} s */\\r\\nexport function stock(s) {\\r\\n    return s.symbol.padEnd(6);\\r\\n}\",\"ramUsage\":1.6,\"server\":\"21.7.6.2\",\"module\":\"\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-control.js\",\"code\":\"import { Logger } from './lib-log.js';\\nimport * as format from './lib-format.js';\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let log = new Logger(ns, { });\\n\\n    // gather info\\n    let serverRam = ns.getServerRam(ns.getHostname())[0] - ns.getServerRam(ns.getHostname())[1];\\n    let current = ns.getServerMoneyAvailable(target);\\n    let goal = current / 2;\\n    let max = ns.getServerMaxMoney(target);\\n    let factor = max / current;\\n    let minSec = ns.getServerMinSecurityLevel(target);\\n    let sec = ns.getServerSecurityLevel(target);\\n    let maxMultiple = 4;\\n\\n    /**\\n     * @param {string} name\\n     * @param {number} threads\\n     * @param {(hostname: string) => number} getTime\\n     */\\n    async function job(name, threads, getTime) {\\n        let scriptRam = ns.getScriptRam('ms-worker-' + name + '.js');\\n        let reqRam = scriptRam * threads;\\n\\n        let multiple = 1;\\n\\n        while (serverRam < reqRam && multiple < maxMultiple) {\\n            log.info(`${ns.getHostname()}/${target}: requires ${threads} threads for ${format.time(Math.floor(getTime(target) * multiple))}`);\\n            log.info(`${ns.getHostname()}/${target}: using ${format.ram(reqRam)} of ${format.ram(serverRam)}`);\\n            if (serverRam < reqRam) {\\n                log.info(`${ns.getHostname()}/${target}: ...but that's impossible. try again.`);\\n                threads = Math.floor(threads / 2);\\n                multiple = multiple * 2;\\n                reqRam = scriptRam * threads;\\n            }\\n        }\\n\\n        if (serverRam >= reqRam) {\\n            await ns.exec('ms-worker-' + name + '.js', ns.getHostname(), threads, target, multiple);\\n        } else {\\n            log.error(`failed to ${name} ${target} - need at least ${format.ram(reqRam)}, have ${format.ram(serverRam)}`);\\n            ns.exit();\\n        }\\n    }\\n\\n    // phase 1/3: weaken to minimum\\n    if (sec-1 > minSec) {\\n        log.info(`${ns.getHostname()}/${target}: weaken by ${sec - minSec}`);\\n        let threads = Math.ceil((sec - minSec) / 0.05);\\n        await job('weaken', threads, ns.getWeakenTime);\\n    }\\n\\n    // phase 2: grow to max\\n    else if (factor > 1) {\\n        log.info(`${ns.getHostname()}/${target}: grow by factor of ${factor}`);\\n        let threads = Math.ceil(ns.growthAnalyze(target, factor));\\n        await job('grow', threads, ns.getGrowTime);\\n    }\\n    \\n    // phase 4: steal half\\n    else {\\n        log.info(`${ns.getHostname()}/${target}: hack \\\\$${goal}`);\\n        let threads = Math.ceil(ns.hackAnalyzeThreads(target, goal));\\n        await job('hack', threads, ns.getHackTime);\\n    }\\n}\",\"ramUsage\":5.7,\"server\":\"21.7.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-grow.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.grow(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"21.7.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.weaken(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.1,\"server\":\"21.7.6.2\",\"module\":{}}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"ms-worker-hack.js\",\"code\":\"/// <reference path=\\\"BitBurner.d.ts\\\" />\\n\\n/** @param {IGame} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    let multiple = ns.args[1];\\n\\n    for (let i = 0; i < multiple; i++) {\\n        await ns.hack(target);\\n    }\\n\\n    while (ns.scriptRunning('ms-control.js', ns.getHostname())) {\\n        await ns.sleep(1000);\\n    }\\n    await ns.exec('ms-control.js', ns.getHostname(), 1, target);\\n}\",\"ramUsage\":4.05,\"server\":\"21.7.6.2\",\"module\":{}}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-control.js\",\"args\":[\"sigma-cosmetics\"],\"server\":\"21.7.6.2\",\"ramUsage\":5.7,\"logs\":[\"[INF] bot0/sigma-cosmetics: weaken by 7.24\",\"Script finished running\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":10.809999999999995,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":1,\"dataMap\":{}}},{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"ms-worker-weaken.js\",\"args\":[\"sigma-cosmetics\",1],\"server\":\"21.7.6.2\",\"ramUsage\":4.1,\"logs\":[\"Executing weaken() on server sigma-cosmetics in 8.719 seconds (t=145)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":4.810000000000002,\"onlineMoneyMade\":0,\"onlineExpGained\":0,\"threads\":145,\"dataMap\":{}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"contracts\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":1,\"serversOnNetwork\":[\"44.1.3.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":3623.57104135708,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":231652.9726287635,\"favor\":3,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":21.78572128956421,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":102544.06426747832,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":108699.9497781708,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":106430.6323054692,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":66,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":163722.53610439252,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":111,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":131945.2538576687,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":96,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":1594.558927034748,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":57,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":79,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":25219.71294007582,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":131841.15486987025,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":96,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":1093.7087246728597,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":71,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1127.3023358068865,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":30,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1605.2478033046664,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":69,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":1154.788017643819,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":61,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1594.558927034748,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"87.0.0.3\",\"BitRunners Server\":\"68.1.5.5\",\"The Black Hand Server\":\"43.8.1.3\",\"NiteSec Server\":\"16.7.6.7\",\"The Dark Army Server\":\"13.2.6.9\",\"CyberSec Server\":\"25.4.8.9\",\"Daedalus Server\":\"70.2.7.8\",\"w0r1d_d43m0n\":\"25.8.6.1\",\"Darkweb Server\":\"87.9.5.8\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":626133.8676990959,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":21.259535139701256,\"cap\":366654439,\"totalShares\":100600000,\"maxShares\":20100000,\"posTxtEl\":{}}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":1019140.2061605034,\"playerShares\":1948944,\"playerAvgPx\":924711.2870986668,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":14.745732673561166,\"cap\":401619321,\"totalShares\":80200000,\"maxShares\":16000000,\"posTxtEl\":{}}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":41418.48591571095,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":4.013789602385783,\"cap\":263067375,\"totalShares\":98200000,\"maxShares\":19600000,\"posTxtEl\":{}}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":480565.8718801813,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.561883344506665,\"cap\":108376738,\"totalShares\":93500000,\"maxShares\":18700000,\"posTxtEl\":{}}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":3512182.7154806387,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":10.658322372264037,\"cap\":214387280,\"totalShares\":52900000,\"maxShares\":10600000,\"posTxtEl\":{}}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":2237792.4455398913,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":7.942734865430997,\"cap\":425914236,\"totalShares\":26700000,\"maxShares\":5300000,\"posTxtEl\":{}}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":175128.5146849721,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":4.011643732187064,\"cap\":107276846,\"totalShares\":97400000,\"maxShares\":19500000,\"posTxtEl\":{}}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":5825585.439810813,\"playerShares\":350063,\"playerAvgPx\":5664328.543878574,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":14.129920898990111,\"cap\":684897570,\"totalShares\":56400000,\"maxShares\":11300000,\"posTxtEl\":{}}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":829274.4221186995,\"playerShares\":2559997,\"playerAvgPx\":741239.6492384446,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":12.445881719824445,\"cap\":260892064,\"totalShares\":52300000,\"maxShares\":10500000,\"posTxtEl\":{}}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":72326185.37251057,\"playerShares\":37040,\"playerAvgPx\":45377709.286864966,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":40.8452889178543,\"cap\":352229499,\"totalShares\":49900000,\"maxShares\":10000000,\"posTxtEl\":{}}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":105358.53913135557,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":8.391588898634062,\"cap\":216591696,\"totalShares\":57500000,\"maxShares\":11500000,\"posTxtEl\":{}}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":302614.68995328585,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":10.185280557001898,\"cap\":133870294,\"totalShares\":124300000,\"maxShares\":24900000,\"posTxtEl\":{}}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":130340.23464920266,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":5.905604060364389,\"cap\":140942451,\"totalShares\":37200000,\"maxShares\":7400000,\"posTxtEl\":{}}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":326978.9319681291,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":9.68409575314045,\"cap\":522704395,\"totalShares\":32700000,\"maxShares\":6500000,\"posTxtEl\":{}}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":63008.75812127629,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":6.430753590194097,\"cap\":89012095,\"totalShares\":66600000,\"maxShares\":13300000,\"posTxtEl\":{}}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":33575.00881608504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":3.264212330878452,\"cap\":153465909,\"totalShares\":53400000,\"maxShares\":10700000,\"posTxtEl\":{}}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":11151954.229682881,\"playerShares\":248787,\"playerAvgPx\":5988028.142398913,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":24.757816594300273,\"cap\":271802654,\"totalShares\":29300000,\"maxShares\":5900000,\"posTxtEl\":{}}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":1027372.0389706662,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":8.94340540727405,\"cap\":476313205,\"totalShares\":24500000,\"maxShares\":4900000,\"posTxtEl\":{}}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":155069.43969627327,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":4.468240121601225,\"cap\":91405915,\"totalShares\":31500000,\"maxShares\":6300000,\"posTxtEl\":{}}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":13128.720533460162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":true,\"otlkMag\":0.2107449396906841,\"cap\":60444724,\"totalShares\":95100000,\"maxShares\":19000000,\"posTxtEl\":{}}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":200267.27442808956,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":true,\"otlkMag\":4.115465362000444,\"cap\":58289883,\"totalShares\":39600000,\"maxShares\":7900000,\"posTxtEl\":{}}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":7780.282737983054,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":0.9186519480959883,\"cap\":117900395,\"totalShares\":30600000,\"maxShares\":6100000,\"posTxtEl\":{}}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":36757.21854020146,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":true,\"otlkMag\":1.9677079328512725,\"cap\":54813192,\"totalShares\":57500000,\"maxShares\":11500000,\"posTxtEl\":{}}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6129.855143987159,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":true,\"otlkMag\":0.4423861962153787,\"cap\":76828317,\"totalShares\":51100000,\"maxShares\":10200000,\"posTxtEl\":{}}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":81952.4220031083,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":true,\"otlkMag\":5.927015986841857,\"cap\":49611140,\"totalShares\":33900000,\"maxShares\":6800000,\"posTxtEl\":{}}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":259.4713692071758,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.23,\"b\":true,\"otlkMag\":1.4775873916732005,\"cap\":33152098,\"totalShares\":28200000,\"maxShares\":5600000,\"posTxtEl\":{}}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":23751.812626792544,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":false,\"otlkMag\":0.9869905084294037,\"cap\":137927286,\"totalShares\":8600000,\"maxShares\":1700000,\"posTxtEl\":{}}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":339.4566647658213,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":0.36076964526125027,\"cap\":17557147,\"totalShares\":62200000,\"maxShares\":12400000,\"posTxtEl\":{}}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":9643.694249489823,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.65,\"b\":true,\"otlkMag\":0.7395093424279003,\"cap\":65080122,\"totalShares\":11100000,\"maxShares\":2200000,\"posTxtEl\":{}}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":4091.400231202547,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.85,\"b\":false,\"otlkMag\":1.2890688863679585,\"cap\":10809207,\"totalShares\":82700000,\"maxShares\":16500000,\"posTxtEl\":{}}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":200225.39970106256,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":true,\"otlkMag\":5.450503390566248,\"cap\":717578,\"totalShares\":168600000,\"maxShares\":33700000,\"posTxtEl\":{}}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":29091.27660304909,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":3.8329868992669116,\"cap\":31838172,\"totalShares\":19200000,\"maxShares\":3800000,\"posTxtEl\":{}}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":1276862.0894055557,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":22.543301654501946,\"cap\":397656349,\"totalShares\":21000000,\"maxShares\":4200000,\"posTxtEl\":{}}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":7637,\"lastUpdate\":1550561486193}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":\"10\",\"DisableHotkeys\":false,\"Editor\":\"Ace\",\"EditorKeybinding\":\"ace\",\"EditorTheme\":\"Monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.43.1\"","AllGangsSave":"","CorporationResearchTreesSave":""}}